# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		slime
VERSION=		2.30
KEYWORDS=		editors
VARIANTS=		standard
SDESC[standard]=	Superior Lisp Interaction Mode for Emacs
HOMEPAGE=		https://common-lisp.net/project/slime/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/slime:slime:v2.30
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	emacs:primary:standard

USES=			gmake makeinfo

LICENSE=		PUBDOM:primary
LICENSE_FILE=		PUBDOM:{{WRKSRC}}/README.md
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		editors/slime

SUB_FILES=		messages-primary.ucl
SUB_LIST=		SLIME_LISPDIR="{{PREFIX}}/share/emacs/site-lisp/slime"

post-build:
	(cd ${WRKSRC}/doc && ${DO_MAKE_BUILD} slime.info html/index.html)

post-extract:
	# /var/games directory gets removed at deinstall
	echo "/var/games" > /tmp/skip_file_check

do-install:
	@${MKDIR} ${STAGEDIR}${STD_DOCDIR} \
		${STAGEDIR}${PREFIX}/share/emacs/site-lisp/slime/contrib \
		${STAGEDIR}${PREFIX}/share/emacs/site-lisp/slime/lib \
		${STAGEDIR}${PREFIX}/share/emacs/site-lisp/slime/swank
	(cd ${WRKSRC} && ${INSTALL_DATA} *.asd *.el *.lisp \
		${STAGEDIR}${PREFIX}/share/emacs/site-lisp/slime)
	(cd ${WRKSRC}/lib && ${INSTALL_DATA} *.el \
		${STAGEDIR}${PREFIX}/share/emacs/site-lisp/slime/lib)
	(cd ${WRKSRC}/contrib && \
		${INSTALL_DATA} *.el *.lisp *.ss *.scm *.sml \
		${STAGEDIR}${PREFIX}/share/emacs/site-lisp/slime/contrib)
	(cd ${WRKSRC}/swank && ${INSTALL_DATA} *.lisp \
		${STAGEDIR}${PREFIX}/share/emacs/site-lisp/slime/swank)
	${INSTALL_DATA} ${INSTALL_WRKSRC}/doc/slime.info \
		${STAGEDIR}${PREFIX}/${INFO_PATH}
	(cd ${WRKSRC}/doc && ${INSTALL_DATA} slime* contributors.texi \
		${STAGEDIR}${STD_DOCDIR})
	(cd ${WRKSRC}/doc && \
		${COPYTREE_SHARE} html ${STAGEDIR}${STD_DOCDIR})

[FILE:1147:descriptions/desc.primary]
SLIME is a new Emacs mode for Common Lisp development.  Inspired by
existing systems such Emacs Lisp and ILISP, we are working to create a
fresh new environment for hacking Common Lisp in.

Features:
    * slime-mode: An Emacs minor-mode to enhance lisp-mode with:
          o Code evaluation, compilation, and macroexpansion.
          o Online documentation (describe, apropos, hyperspec).
          o Definition finding (aka Meta-Point aka M-.).
          o Symbol and package name completion.
          o Automatic macro indentation based on &body.
          o Cross-reference interface (WHO-CALLS, etc).
          o ... and more.
    * SLDB: Common Lisp debugger with an Emacs-based user interface.
    * REPL: The Read-Eval-Print Loop ("top-level") is written in Emacs
      Lisp for tighter integration with Emacs. The REPL also has
      builtin "shortcut" commands similar those of the McCLIM
      Listener.
    * Compilation notes: SLIME is able to take compiler messages and
      annotate them directly into source buffers.
    * Inspector: Interactive object-inspector in an Emacs buffer.

WWW: http://common-lisp.net/project/slime/


[FILE:102:distinfo]
f4f24788bef400a5b980916d6fcf4590ee0089200eb9a494f88bfbd4b630f25c       774034 slime-slime-2.30.tar.gz


[FILE:2070:manifests/plist.primary]
share/emacs/site-lisp/slime/
 metering.lisp
 nregex.lisp
 packages.lisp
 sbcl-pprint-patch.lisp
 slime-autoloads.el
 slime-tests.el
 slime.el
 start-swank.lisp
 swank-loader.lisp
 swank.asd
 swank.lisp
 xref.lisp
share/emacs/site-lisp/slime/contrib/
 bridge.el
 inferior-slime.el
 slime-asdf.el
 slime-autodoc.el
 slime-banner.el
 slime-buffer-streams.el
 slime-c-p-c.el
 slime-cl-indent.el
 slime-clipboard.el
 slime-compiler-notes-tree.el
 slime-editing-commands.el
 slime-enclosing-context.el
 slime-fancy-inspector.el
 slime-fancy-trace.el
 slime-fancy.el
 slime-fontifying-fu.el
 slime-fuzzy.el
 slime-highlight-edits.el
 slime-hyperdoc.el
 slime-indentation.el
 slime-listener-hooks.el
 slime-macrostep.el
 slime-mdot-fu.el
 slime-media.el
 slime-mrepl.el
 slime-package-fu.el
 slime-parse.el
 slime-presentation-streams.el
 slime-presentations.el
 slime-quicklisp.el
 slime-references.el
 slime-repl.el
 slime-sbcl-exts.el
 slime-scheme.el
 slime-scratch.el
 slime-snapshot.el
 slime-sprof.el
 slime-trace-dialog.el
 slime-tramp.el
 slime-typeout-frame.el
 slime-xref-browser.el
 swank-arglists.lisp
 swank-asdf.lisp
 swank-buffer-streams.lisp
 swank-c-p-c.lisp
 swank-clipboard.lisp
 swank-fancy-inspector.lisp
 swank-fuzzy.lisp
 swank-hyperdoc.lisp
 swank-ikarus.ss
 swank-indentation.lisp
 swank-kawa.scm
 swank-larceny.scm
 swank-listener-hooks.lisp
 swank-macrostep.lisp
 swank-media.lisp
 swank-mit-scheme.scm
 swank-mlworks.sml
 swank-mrepl.lisp
 swank-package-fu.lisp
 swank-presentation-streams.lisp
 swank-presentations.lisp
 swank-quicklisp.lisp
 swank-r6rs.scm
 swank-repl.lisp
 swank-sbcl-exts.lisp
 swank-snapshot.lisp
 swank-sprof.lisp
 swank-trace-dialog.lisp
 swank-util.lisp
share/emacs/site-lisp/slime/lib/
 hyperspec.el
 macrostep.el
share/emacs/site-lisp/slime/swank/
 abcl.lisp
 allegro.lisp
 backend.lisp
 ccl.lisp
 clasp.lisp
 clisp.lisp
 cmucl.lisp
 corman.lisp
 ecl.lisp
 gray.lisp
 lispworks.lisp
 match.lisp
 mezzano.lisp
 mkcl.lisp
 rpc.lisp
 sbcl.lisp
 scl.lisp
 source-file-cache.lisp
 source-path-parser.lisp
share/info/slime.info


[FILE:290:files/messages-primary.ucl.in]
primary: {
  type: "install"
  message: <<EOM
To activate SLIME put the following code into ~/.emacs:
(setq inferior-lisp-program "PATH_TO_YOUR_LISP_BINARY")
(add-to-list 'load-path "%%SLIME_LISPDIR%%"
        "%%SLIME_LISPDIR%%/contrib")
(require 'slime)
(slime-setup '(slime-repl))
EOM
}

