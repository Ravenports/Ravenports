# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-async-timeout
VERSION=		4.0.2
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Asyncio-compatible timeout context manager (3.10)
SDESC[py39]=		Asyncio-compatible timeout context manager (3.9)
HOMEPAGE=		https://github.com/aio-libs/async-timeout
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/d6/c1/8991e7c5385b897b8c020cdaad718c5b087a6626d1d11a23e1ea87e325a7
DISTFILE[1]=		async_timeout-4.0.2-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		async_timeout-4.0.2.dist-info

GENERATED=		yes

[PY39].USES_ON=				python:py39,wheel

[PY310].USES_ON=			python:py310,wheel

[FILE:2190:descriptions/desc.single]
async-timeout
=============
    :alt: Chat on Gitter

asyncio-compatible timeout context manager.

Usage example
-------------

The context manager is useful in cases when you want to apply timeout
logic around block of code or in cases when ``asyncio.wait_for()`` is
not suitable. Also it's much faster than ``asyncio.wait_for()
because timeout`` doesn't create a new task.

The ``timeout(delay, *, loop=None)`` call returns a context manager
that cancels a block on *timeout* expiring::

   async with timeout(1.5):
       await inner()

1. If ``inner() is executed faster than in 1.5`` seconds nothing
   happens.
2. Otherwise ``inner() is cancelled internally by sending
   asyncio.CancelledError into but asyncio.TimeoutError`` is
   raised outside of context manager scope.

*timeout* parameter could be None for skipping timeout functionality.

Alternatively, ``timeout_at(when)`` can be used for scheduling
at the absolute time::

   loop = asyncio.get_event_loop()
   now = loop.time()

   async with timeout_at(now + 1.5):
       await inner()

Please note: it is not POSIX time but a time with
undefined starting base, e.g. the time of the system power on.

Context manager has ``.expired`` property for check if timeout happens
exactly in context manager::

   async with timeout(1.5) as cm:
       await inner()
   print(cm.expired)

The property is True if ``inner()`` execution is cancelled by
timeout context manager.

If ``inner() call explicitly raises TimeoutError cm.expired
is False``.

The scheduled deadline time is available as ``.deadline`` property::

   async with timeout(1.5) as cm:
       cm.deadline

Not finished yet timeout can be rescheduled by ``shift_by()
or shift_to()`` methods::

   async with timeout(1.5) as cm:
       cm.shift(1)  # add another second on waiting
       cm.update(loop.time() + 5)  # reschedule to now+5 seconds

Rescheduling is forbidden if the timeout is expired or after exit from
async with
code block.

Installation
------------

::

   $ pip install async-timeout

The library is Python 3 only!

Authors and License
-------------------

The module is written by Andrew Svetlov.

It's *Apache 2* licensed and freely available.


[FILE:115:distinfo]
8ca1e4fcf50d07413d66d1a5e416e42cfdf5851c981d679a09851a6853383b3c         5763 async_timeout-4.0.2-py3-none-any.whl

