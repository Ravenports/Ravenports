# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		gnatcross-bootstrap
VERSION=		9.5.0
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Gnatcross-to-native compiler generator
HOMEPAGE=		http://www.dragonlace.net/
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main gmp iconv mpc mpfr
SITES[main]=		GCC/releases/gcc-9.5.0
SITES[gmp]=		GNU/gmp
SITES[iconv]=		GNU/libiconv
SITES[mpc]=		GNU/mpc
SITES[mpfr]=		https://www.mpfr.org/mpfr-3.1.4/
DISTFILE[1]=		gcc-9.5.0.tar.xz:main
DISTFILE[2]=		mpfr-3.1.4.tar.xz:mpfr
DISTFILE[3]=		gmp-6.1.0.tar.xz:gmp
DISTFILE[4]=		mpc-1.0.3.tar.gz:mpc
DISTFILE[5]=		libiconv-1.15.tar.gz:iconv
DF_INDEX=		1 2 3 4 5
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	DISABLE FARM64_R11 FAMD64_R12 FI386_R12 SOL10
OPTIONS_STANDARD=	DISABLE FARM64_R11 FAMD64_R12 FI386_R12 SOL10
OPTGROUP_RADIO=		TARGET
OPTDESCR[TARGET]=	Target platform for generated compiler
OPTGROUP[TARGET]=	DISABLE FARM64_R11 FAMD64_R12 FI386_R12 SOL10
OPT_ON[all]=		DISABLE

USES=			gmake libtool perl:build zstd:build

DISTNAME=		gcc-9.5.0

CC=			{{BSPREFIX}}/bin/{{TGTSYS}}-gcc
CPP=			{{BSPREFIX}}/bin/{{TGTSYS}}-cpp
CXX=			{{BSPREFIX}}/bin/{{TGTSYS}}-c++

MUST_CONFIGURE=		yes
CONFIGURE_OUTSOURCE=	yes
CONFIGURE_ARGS=		--enable-languages="c,c++,ada"
			--prefix={{LOCALBASE}}/toolchain/gcc9
			--enable-shared
			--enable-threads=posix
			--enable-checking=release
			--disable-libquadmath
			--disable-nls
			--disable-multilib
			--disable-libsanitizer
			--disable-libvtv
			--disable-libmpx
			--disable-libcilkrts
			--with-pkgversion="Ravenports"
			--enable-obsolete
CONFIGURE_ENV=		build_configargs="CPPFLAGS=\"{{CPPFLAGS}}\""
			host_configargs="CPPFLAGS=\"{{CPPFLAGS}}\""

INSTALL_TARGET=		install-strip
PLIST_SUB=		TGTSYS={{TGTSYS}}

[FARM64_R11].DESCRIPTION=		Build native compiler for FreeBSD/ARM64 Release 11
[FARM64_R11].BUILD_DEPENDS_ON=		gnatcross:single:FARM64_R11
[FARM64_R11].CONFIGURE_ARGS_ON=		--build={{CONFIGURE_TARGET}}
					--host=aarch64-raven-freebsd11.3
					--target=aarch64-raven-freebsd11.3
					--disable-libstdcxx-pch
[FARM64_R11].MAKEFILE_ON=		TGTSYS=aarch64-raven-freebsd11.3
					BSPREFIX={{LOCALBASE}}/FreeBSD11_ARM64
					PREPEND_PATH={{BSPREFIX}}/{{TGTSYS}}/bin:{{BSPREFIX}}/bin

[SOL10].DESCRIPTION=			Build native compiler for Solaris 10
[SOL10].BROKEN_ON=			Doesn't get pass configure
[SOL10].BUILD_DEPENDS_ON=		gnatcross:single:SOL10
[SOL10].CONFIGURE_ARGS_ON=		--build={{CONFIGURE_TARGET}}
					--host=x86_64-raven-solaris2.10
					--target=x86_64-raven-solaris2.10
					--disable-libstdcxx-pch
					--disable-multilib
					--with-gnu-ld
					--with-gnu-as
					--with-ld={{LOCALBASE}}/toolchain/bin/ld
					--with-as={{LOCALBASE}}/toolchain/bin/as
[SOL10].MAKEFILE_ON=			TGTSYS=x86_64-raven-solaris2.10
					BSPREFIX={{LOCALBASE}}/Solaris10_AMD64
					PREPEND_PATH={{BSPREFIX}}/{{TGTSYS}}/bin:{{BSPREFIX}}/bin
[SOL10].MAKE_ENV_ON=			ac_cv_header_sys_sysctl_h=no
					ac_cv_header_alloca_h=no
					ac_cv_header_stdio_ext_h=no
					ac_cv_header_malloc_h=no
					ac_cv_func_clearerr_unlocked=no
					ac_cv_func_feof_unlocked=no
					ac_cv_func_ferror_unlocked=no
					ac_cv_func_fileno_unlocked=no
					ac_cv_func_asprintf=no
					ac_cv_func_vasprintf=no
					ac_cv_func_stpcpy=no
					ac_cv_func_strnlen=no
					ac_cv_func_madvise=no

[FI386_R12].DESCRIPTION=		Build native compiler for FreeBSD/I386 Release 12
[FI386_R12].BUILD_DEPENDS_ON=		gnatcross:single:FI386_R12
[FI386_R12].CONFIGURE_ARGS_ON=		--build={{CONFIGURE_TARGET}}
					--host=i386-raven-freebsd12.2
					--target=i386-raven-freebsd12.2
					--disable-libstdcxx-pch
[FI386_R12].MAKEFILE_ON=		TGTSYS=i386-raven-freebsd12.2
					BSPREFIX={{LOCALBASE}}/FreeBSD12_I386
					PREPEND_PATH={{BSPREFIX}}/{{TGTSYS}}/bin:{{BSPREFIX}}/bin

[DISABLE].DESCRIPTION=			Disable building of native compiler (default)
[DISABLE].BROKEN_ON=			Native compiler building disabled (set option!)

[FAMD64_R12].DESCRIPTION=		Build native compiler for FreeBSD/AMD64 Release 12
[FAMD64_R12].BUILD_DEPENDS_ON=		gnatcross:single:FAMD64_R12
[FAMD64_R12].CONFIGURE_ARGS_ON=		--build={{CONFIGURE_TARGET}}
					--host=x86_64-raven-freebsd12.2
					--target=x86_64-raven-freebsd12.2
					--disable-libstdcxx-pch
[FAMD64_R12].MAKEFILE_ON=		TGTSYS=x86_64-raven-freebsd12.2
					BSPREFIX={{LOCALBASE}}/FreeBSD12_AMD64
					PREPEND_PATH={{BSPREFIX}}/{{TGTSYS}}/bin:{{BSPREFIX}}/bin

post-patch:
	# Update LINK_SPEC to add gcc-aux lib runpath in every binary
	@${ECHO} "Configuring LINK_SPEC runpath"
	${REINPLACE_CMD} -e 's;\@PREFIX\@;${PREFIX:H};' \
		-e 's;\@GCCAUX\@;${NAMEBASE};' \
		-e 's;\@LOCALBASE\@;${LOCALBASE};g' \
		${WRKSRC}/gcc/gcc.c \
		${WRKSRC}/gcc/config/darwin.h \
		${WRKSRC}/gcc/config/dragonfly.h \
		${WRKSRC}/gcc/config/sol2.h \
		${WRKSRC}/gcc/config/i386/freebsd64.h \
		${WRKSRC}/gcc/config/i386/freebsd.h \
		${WRKSRC}/gcc/config/i386/gnu-user64.h \
		${WRKSRC}/gcc/config/aarch64/aarch64-freebsd.h \
		${WRKSRC}/gcc/ada/gnatls.adb
	# fix FreeBSD spec error
	${REINPLACE_CMD} -e 's|static:crtbeginT.o%s;||' \
		${WRKSRC}/gcc/config/freebsd-spec.h

post-stage:
	# package bootstrap compiler with zstd, then relocate files to avoid packaging them
	${MKDIR} ${WRKDIR}/bootstrap_compiler
	(cd ${STAGEDIR}${PREFIX}/toolchain/gcc9 \
		&& ${CP} -a bin ${WRKDIR}/bootstrap_compiler \
		&& ${CP} -a lib ${WRKDIR}/bootstrap_compiler \
		&& ${CP} -a include ${WRKDIR}/bootstrap_compiler \
		&& ${CP} -a libexec ${WRKDIR}/bootstrap_compiler)
	${ECHO_CMD} "Relocate directories to: ${PREFIX}/toolchain/gcc9" \
		>> ${WRKDIR}/bootstrap_compiler/README
	${RM} ${WRKDIR}/bootstrap_compiler/bin/${TGTSYS}*
	${MV} ${STAGEDIR} ${STAGEDIR}.old
	${MKDIR} ${STAGEDIR}${LOCALBASE}/share/${NAMEBASE}
	(cd ${WRKDIR} && ${TAR} -cf \
		${STAGEDIR}${LOCALBASE}/share/${NAMEBASE}/${TGTSYS}-gcc.tar \
		bootstrap_compiler)
	(cd ${STAGEDIR}${LOCALBASE}/share/${NAMEBASE} && \
		zstd -7 --no-progress --rm ${TGTSYS}-gcc.tar)

post-patch-FI386_R12-ON:
	# work around malloc detection issue
	${REINPLACE_CMD} -e 's/#undef HAVE_ALIGNED_ALLOC/#define HAVE_ALIGNED_ALLOC 1/' \
		${WRKSRC}/libstdc++-v3/config.h.in

post-install:
	cp ${STAGEDIR}${PREFIX}/toolchain/gcc9/bin/gcc ${STAGEDIR}${PREFIX}/toolchain/gcc9/bin/cc
	cp ${STAGEDIR}${PREFIX}/toolchain/gcc9/bin/g++ ${STAGEDIR}${PREFIX}/toolchain/gcc9/bin/CC
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/toolchain/gcc9/lib/gcc/${TGTSYS}/9.5.0/adalib/libgnarl.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/toolchain/gcc9/lib/gcc/${TGTSYS}/9.5.0/adalib/libgnat.so

post-install-FARM64_R11-ON:
	${RM} -r ${STAGEDIR}${PREFIX}/toolchain/gcc9/lib/gcc/${TGTSYS}/9.5.0/include-fixed

post-extract:
	${MKDIR} ${WRKSRC}/libiconv
	${MV} ${WRKDIR}/gmp-*      ${WRKSRC}/gmp
	${MV} ${WRKDIR}/mpc-*      ${WRKSRC}/mpc
	${MV} ${WRKDIR}/mpfr-*     ${WRKSRC}/mpfr
	${MV} ${WRKDIR}/libiconv-* ${WRKSRC}/libiconv

post-patch-FARM64_R11-ON:
	# work around malloc detection issue
	${REINPLACE_CMD} -e 's/#undef HAVE_ALIGNED_ALLOC/#define HAVE_ALIGNED_ALLOC 1/' \
		${WRKSRC}/libstdc++-v3/config.h.in

post-install-FI386_R12-ON:
	${RM} -r ${STAGEDIR}${PREFIX}/toolchain/gcc9/lib/gcc/${TGTSYS}/9.5.0/include-fixed

post-install-FAMD64_R12-ON:
	${RM} -r ${STAGEDIR}${PREFIX}/toolchain/gcc9/lib/gcc/${TGTSYS}/9.5.0/include-fixed

post-patch-FAMD64_R12-ON:
	# work around malloc detection issue
	${REINPLACE_CMD} -e 's/#undef HAVE_ALIGNED_ALLOC/#define HAVE_ALIGNED_ALLOC 1/' \
		${WRKSRC}/libstdc++-v3/config.h.in
	${REINPLACE_CMD} -e '/<malloc.h>/d' ${WRKSRC}/libiberty/hashtab.c

[FILE:141:descriptions/desc.single]
This package contains a native compiler bootstrapped by a gnatcross
cross-compiler.  The target system is determined by the set port option.


[FILE:480:distinfo]
71e197867611f6054aa1119b13a0c0abac12834765fe2d81f35ac57f84f742d1     70533868 gcc-9.3.0.tar.xz
761413b16d749c53e2bfd2b1dfaa3b027b0e793e404b90b5fbaeef60af6517f5      1122152 mpfr-3.1.4.tar.xz
68dadacce515b0f8a54f510edf07c1b636492bcdb8e8d54c56eb216225d16989      1950316 gmp-6.1.0.tar.xz
617decc6ea09889fb08ede330917a00b16809b8db88c29c31bfbb49cbf88ecc3       669925 mpc-1.0.3.tar.gz
ccf536620a45458d26ba83887a983b96827001e92a13847b45e4925cc8913178      5264188 libiconv-1.15.tar.gz


[FILE:49:manifests/plist.single]
share/gnatcross-bootstrap/%%TGTSYS%%-gcc.tar.zst


[FILE:43251:patches/patch-diff-ada]
--- gcc/ada/Makefile.rtl.orig
+++ gcc/ada/Makefile.rtl
@@ -1377,6 +1377,7 @@
   s-linux.ads<libgnarl/s-linux__android.ads \
   s-osinte.adb<libgnarl/s-osinte__android.adb \
   s-osinte.ads<libgnarl/s-osinte__android.ads \
+  g-socthi.adb<libgnat/g-socthi__bsd.adb \
   s-osprim.adb<libgnat/s-osprim__posix.adb \
   s-taprop.adb<libgnarl/s-taprop__posix.adb \
   s-taspri.ads<libgnarl/s-taspri__posix.ads \
@@ -1470,6 +1471,7 @@
   s-osinte.adb<libgnarl/s-osinte__solaris.adb \
   s-osinte.ads<libgnarl/s-osinte__solaris.ads \
   s-osprim.adb<libgnat/s-osprim__solaris.adb \
+  s-trasym.adb<libgnat/s-trasym__bsd.adb \
   s-taprop.adb<libgnarl/s-taprop__solaris.adb \
   s-tasinf.adb<libgnarl/s-tasinf__solaris.adb \
   s-tasinf.ads<libgnarl/s-tasinf__solaris.ads \
@@ -1502,6 +1504,8 @@
   EXTRA_GNATRTL_NONTASKING_OBJS += $(TRASYM_DWARF_UNIX_OBJS)
 
   EH_MECHANISM=-gcc
+  EXTRA_LIBGNAT_SRCS+= traceback_symbolic.c
+  EXTRA_LIBGNAT_OBJS+= traceback_symbolic.o
   THREADSLIB = -lposix4 -lthread
   MISCLIB = -lposix4 -lnsl -lsocket
   SO_OPTS = -Wl,-h,
@@ -1641,6 +1645,38 @@
   LIBRARY_VERSION := $(LIB_VERSION)
 endif
 
+# x86 android
+ifeq ($(strip $(filter-out %86 linux-android,$(target_cpu) $(target_os))),)
+  LIBGNAT_TARGET_PAIRS = \
+  a-intnam.ads<libgnarl/a-intnam__linux.ads \
+  s-inmaop.adb<libgnarl/s-inmaop__posix.adb \
+  s-intman.adb<libgnarl/s-intman__posix.adb \
+  s-linux.ads<libgnarl/s-linux__android.ads \
+  s-osinte.adb<libgnarl/s-osinte__android.adb \
+  s-osinte.ads<libgnarl/s-osinte__android.ads \
+  g-socthi.adb<libgnat/g-socthi__bsd.adb \
+  s-osprim.adb<libgnat/s-osprim__posix.adb \
+  s-taprop.adb<libgnarl/s-taprop__posix.adb \
+  s-taspri.ads<libgnarl/s-taspri__posix.ads \
+  s-tpopsp.adb<libgnarl/s-tpopsp__posix-foreign.adb \
+  $(ATOMICS_TARGET_PAIRS) \
+  $(ATOMICS_BUILTINS_TARGET_PAIRS) \
+  system.ads<libgnat/system-linux-x86.ads
+
+  TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb
+
+  EXTRA_LIBGNAT_OBJS=
+  EXTRA_GNATRTL_TASKING_OBJS=s-linux.o
+  EXTRA_GNATRTL_NONTASKING_OBJS=
+  EH_MECHANISM=-gcc
+  THREADSLIB=
+  MISCLIB=
+  GMEM_LIB=
+  GNATLIB_SHARED = gnatlib-shared-dual
+  LIBRARY_VERSION := $(LIB_VERSION)
+endif
+
+
 # aarch64 FreeBSD
 ifeq ($(strip $(filter-out %aarch64 freebsd%,$(target_cpu) $(target_os))),)
   LIBGNAT_TARGET_PAIRS = \
@@ -1650,7 +1686,9 @@
   s-mudido.adb<libgnarl/s-mudido__affinity.adb \
   s-osinte.adb<libgnarl/s-osinte__freebsd.adb \
   s-osinte.ads<libgnarl/s-osinte__freebsd.ads \
+  g-socthi.adb<libgnat/g-socthi__bsd.adb \
   s-osprim.adb<libgnat/s-osprim__posix.adb \
+  s-trasym.adb<libgnat/s-trasym__bsd.adb \
   s-taprop.adb<libgnarl/s-taprop__posix.adb \
   s-taspri.ads<libgnarl/s-taspri__posix.ads \
   s-tpopsp.adb<libgnarl/s-tpopsp__posix.adb \
@@ -1660,6 +1698,9 @@
 
   GNATLIB_SHARED = gnatlib-shared-dual
 
+  EXTRA_LIBGNAT_SRCS+= traceback_symbolic.c
+  EXTRA_LIBGNAT_OBJS+= traceback_symbolic.o
+
   EH_MECHANISM=-gcc
   THREADSLIB= -lpthread
   GMEM_LIB = gmemlib
@@ -1676,7 +1717,9 @@
   s-mudido.adb<libgnarl/s-mudido__affinity.adb \
   s-osinte.adb<libgnarl/s-osinte__freebsd.adb \
   s-osinte.ads<libgnarl/s-osinte__freebsd.ads \
+  g-socthi.adb<libgnat/g-socthi__bsd.adb \
   s-osprim.adb<libgnat/s-osprim__posix.adb \
+  s-trasym.adb<libgnat/s-trasym__bsd.adb \
   s-taprop.adb<libgnarl/s-taprop__posix.adb \
   s-taspri.ads<libgnarl/s-taspri__posix.ads \
   s-tpopsp.adb<libgnarl/s-tpopsp__posix.adb \
@@ -1687,6 +1730,8 @@
 
   GNATLIB_SHARED = gnatlib-shared-dual
 
+  EXTRA_LIBGNAT_SRCS+= traceback_symbolic.c
+  EXTRA_LIBGNAT_OBJS+= traceback_symbolic.o
   EXTRA_GNATRTL_NONTASKING_OBJS += g-sse.o g-ssvety.o
   EXTRA_GNATRTL_NONTASKING_OBJS += $(TRASYM_DWARF_UNIX_OBJS)
 
@@ -1706,7 +1751,9 @@
   s-mudido.adb<libgnarl/s-mudido__affinity.adb \
   s-osinte.adb<libgnarl/s-osinte__freebsd.adb \
   s-osinte.ads<libgnarl/s-osinte__freebsd.ads \
+  g-socthi.adb<libgnat/g-socthi__bsd.adb \
   s-osprim.adb<libgnat/s-osprim__posix.adb \
+  s-trasym.adb<libgnat/s-trasym__bsd.adb \
   s-taprop.adb<libgnarl/s-taprop__posix.adb \
   s-taspri.ads<libgnarl/s-taspri__posix.ads \
   s-tpopsp.adb<libgnarl/s-tpopsp__posix.adb \
@@ -1717,6 +1764,8 @@
 
   GNATLIB_SHARED = gnatlib-shared-dual
 
+  EXTRA_LIBGNAT_SRCS+= traceback_symbolic.c
+  EXTRA_LIBGNAT_OBJS+= traceback_symbolic.o
   EXTRA_GNATRTL_NONTASKING_OBJS += g-sse.o g-ssvety.o
   EXTRA_GNATRTL_NONTASKING_OBJS += $(TRASYM_DWARF_UNIX_OBJS)
 
@@ -1736,17 +1785,23 @@
   s-mudido.adb<libgnarl/s-mudido__affinity.adb \
   s-osinte.adb<libgnarl/s-osinte__dragonfly.adb \
   s-osinte.ads<libgnarl/s-osinte__dragonfly.ads \
+  g-socthi.adb<libgnat/g-socthi__bsd.adb \
   s-osprim.adb<libgnat/s-osprim__posix.adb \
+  s-trasym.adb<libgnat/s-trasym__bsd.adb \
   s-taprop.adb<libgnarl/s-taprop__posix.adb \
   s-taspri.ads<libgnarl/s-taspri__posix.ads \
   s-tpopsp.adb<libgnarl/s-tpopsp__posix.adb \
+  $(TRASYM_DWARF_UNIX_PAIRS) \
   $(ATOMICS_TARGET_PAIRS) \
   $(X86_64_TARGET_PAIRS) \
   system.ads<libgnat/system-dragonfly-x86_64.ads
 
   GNATLIB_SHARED = gnatlib-shared-dual
 
-  EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o
+  EXTRA_LIBGNAT_SRCS+= traceback_symbolic.c
+  EXTRA_LIBGNAT_OBJS+= traceback_symbolic.o
+  EXTRA_GNATRTL_NONTASKING_OBJS += g-sse.o g-ssvety.o
+  EXTRA_GNATRTL_NONTASKING_OBJS += $(TRASYM_DWARF_UNIX_OBJS)
 
   EH_MECHANISM=-gcc
   THREADSLIB= -lpthread
--- gcc/ada/adaint.c.orig
+++ gcc/ada/adaint.c
@@ -1190,6 +1190,47 @@
     free (pname);
   }
 
+#elif defined (__ANDROID__)
+
+  /*
+   * ext2 /ext3/ext4/fat16/fat32 have no path limits
+   * /data/local/tmp normally requires rooted devices, if it even exists
+   * /sdcard is the standard location for external storage.  Nativeactivity
+   * manifest needs to authorize its use, otherwise it might not have the
+   * proper permissions.
+   */
+
+  int testfd;
+  char *datadir = getenv ("ANDROID_DATA");
+
+  if (datadir == NULL)
+    strncpy (tmp_filename, "/data/local/tmp/gnat-XXXXXX", L_tmpnam);
+  else
+    snprintf (tmp_filename, L_tmpnam, "%s/local/tmp/gnat-XXXXXX", datadir);
+
+  testfd = mkstemp (tmp_filename);
+  if (testfd != -1)
+    {
+      close (testfd);
+      return;
+    }
+
+  char *sdcard = getenv ("EXTERNAL_STORAGE");
+
+  if (sdcard == NULL)
+    strncpy (tmp_filename, "/sdcard/gnat-XXXXXX", L_tmpnam);
+  else
+    snprintf (tmp_filename, L_tmpnam, "%s/gnat-XXXXXX", sdcard);
+
+  testfd = mkstemp (tmp_filename);
+  if (testfd != -1)
+    {
+      close (testfd);
+      return;
+    }
+
+  tmpnam (tmp_filename);
+
 #elif defined (__linux__) || defined (__FreeBSD__) || defined (__NetBSD__) \
   || defined (__OpenBSD__) || defined (__GLIBC__) || defined (__ANDROID__) \
   || defined (__DragonFly__) || defined (__QNX__)
--- gcc/ada/cio.c.orig
+++ gcc/ada/cio.c
@@ -49,7 +49,7 @@
 
 /* Don't use macros on GNU/Linux since they cause incompatible changes between
    glibc 2.0 and 2.1 */
-#ifdef __linux__
+#if defined __linux__ && !defined __ANDROID__
 #undef putchar
 #undef getchar
 #undef fputc
--- gcc/ada/cstreams.c.orig
+++ gcc/ada/cstreams.c
@@ -67,7 +67,7 @@
 extern "C" {
 #endif
 
-#ifdef __linux__
+#if defined __linux__ && !defined __ANDROID__
 /* Don't use macros on GNU/Linux since they cause incompatible changes between
    glibc 2.0 and 2.1 */
 
--- gcc/ada/gnatchop.adb.orig
+++ gcc/ada/gnatchop.adb
@@ -44,7 +44,7 @@
    Config_File_Name : constant String_Access := new String'("gnat.adc");
    --  The name of the file holding the GNAT configuration pragmas
 
-   Gcc : String_Access := new String'("gcc");
+   Gcc : String_Access := new String'("ada");
    --  May be modified by switch --GCC=
 
    Gcc_Set : Boolean := False;
--- gcc/ada/gnatlink.adb.orig
+++ gcc/ada/gnatlink.adb
@@ -136,7 +136,7 @@
    --  This table collects the arguments to be passed to compile the binder
    --  generated file.
 
-   Gcc : String_Access := Program_Name ("gcc", "gnatlink");
+   Gcc : String_Access := Program_Name ("ada", "gnatlink");
 
    Read_Mode : constant String := "r" & ASCII.NUL;
 
--- gcc/ada/gnatls.adb.orig
+++ gcc/ada/gnatls.adb
@@ -32,7 +32,6 @@
 with Csets;
 with Fname;       use Fname;
 with Gnatvsn;     use Gnatvsn;
-with Make_Util;   use Make_Util;
 with Namet;       use Namet;
 with Opt;         use Opt;
 with Osint;       use Osint;
@@ -1285,31 +1284,10 @@
          --  The path name(s) of directories where project files may reside.
          --  May be empty.
 
-         Prefix  : String_Ptr;
-         Runtime : String_Ptr;
-
-         procedure Add_Target (Suffix : String);
-         --  Add :<prefix>/<target>/Suffix to the project path
-
          FD  : File_Descriptor;
          Len : Integer;
 
-         ----------------
-         -- Add_Target --
-         ----------------
-
-         procedure Add_Target (Suffix : String) is
-            Extra_Sep : constant String :=
-               (if Target_Name (Target_Name'Last) = '/' then
-                  ""
-                else
-                  (1 => Directory_Separator));
-            --  Note: Target_Name has a trailing / when it comes from Sdefault
-
-         begin
-            Add_Str_To_Name_Buffer
-              (Path_Separator & Prefix.all & Target_Name & Extra_Sep & Suffix);
-         end Add_Target;
+         pragma Unreferenced (Runtime_Name);
 
       --  Start of processing for Initialize_Default_Project_Path
 
@@ -1493,81 +1471,15 @@
          --  Set the initial value of Current_Project_Path
 
          if Add_Default_Dir then
-            if Sdefault.Search_Dir_Prefix = null then
-
-               --  gprbuild case
-
-               Prefix := new String'(Executable_Prefix_Path);
-
-            else
-               Prefix := new String'(Sdefault.Search_Dir_Prefix.all
-                                     & ".." & Dir_Separator
-                                     & ".." & Dir_Separator
-                                     & ".." & Dir_Separator
-                                     & ".." & Dir_Separator);
-            end if;
-
-            if Prefix.all /= "" then
-               if Target_Name /= "" then
-
-                  if Runtime_Name /= "" then
-                     if Base_Name (Runtime_Name) = Runtime_Name then
-
-                        --  $prefix/$target/$runtime/lib/gnat
-
-                        Add_Target
-                          (Runtime_Name & Directory_Separator &
-                           "lib" & Directory_Separator & "gnat");
-
-                        --  $prefix/$target/$runtime/share/gpr
-
-                        Add_Target
-                          (Runtime_Name & Directory_Separator &
-                             "share" & Directory_Separator & "gpr");
-
-                     else
-                        Runtime :=
-                          new String'(Normalize_Pathname (Runtime_Name));
-
-                        --  $runtime_dir/lib/gnat
 
-                        Add_Str_To_Name_Buffer
-                          (Path_Separator & Runtime.all & Directory_Separator &
-                           "lib" & Directory_Separator & "gnat");
-
-                        --  $runtime_dir/share/gpr
-
-                        Add_Str_To_Name_Buffer
-                          (Path_Separator & Runtime.all & Directory_Separator &
-                           "share" & Directory_Separator & "gpr");
-                     end if;
-                  end if;
-
-                  --  $prefix/$target/lib/gnat
-
-                  Add_Target
-                    ("lib" & Directory_Separator & "gnat");
-
-                  --  $prefix/$target/share/gpr
-
-                  Add_Target
-                    ("share" & Directory_Separator & "gpr");
-               end if;
-
-               --  $prefix/share/gpr
-
-               Add_Str_To_Name_Buffer
-                 (Path_Separator & Prefix.all & "share"
-                  & Directory_Separator & "gpr");
-
-               --  $prefix/lib/gnat
-
-               Add_Str_To_Name_Buffer
-                 (Path_Separator & Prefix.all & "lib"
-                  & Directory_Separator & "gnat");
-            end if;
+            --  /raven/share/gpr
+            Add_Str_To_Name_Buffer (Path_Separator &
+              "@LOCALBASE@/share/gpr");
+
+            --  /raven/lib/gnat
+            Add_Str_To_Name_Buffer (Path_Separator &
+              "@LOCALBASE@/lib/gnat");
 
-            Free (Prefix);
          end if;
 
          Self := new String'(Name_Buffer (1 .. Name_Len));
--- gcc/ada/make.adb.orig
+++ gcc/ada/make.adb
@@ -445,7 +445,7 @@
    -- Compiler, Binder & Linker Data and Subprograms --
    ----------------------------------------------------
 
-   Gcc      : String_Access := Program_Name ("gcc", "gnatmake");
+   Gcc      : String_Access := Program_Name ("ada", "gnatmake");
    Gnatbind : String_Access := Program_Name ("gnatbind", "gnatmake");
    Gnatlink : String_Access := Program_Name ("gnatlink", "gnatmake");
    --  Default compiler, binder, linker programs
--- gcc/ada/terminals.c.orig
+++ gcc/ada/terminals.c
@@ -34,7 +34,7 @@
 /* First all usupported platforms. Add stubs for exported routines. */
 
 #if defined (VMS) || defined (__vxworks) || defined (__Lynx__) \
-  || defined (__ANDROID__) || defined (__PikeOS__) || defined(__DJGPP__)
+  || defined (__PikeOS__) || defined(__DJGPP__)
 
 void *
 __gnat_new_tty (void)
@@ -1099,7 +1099,7 @@
  || defined (__OpenBSD__) \
  || defined (__NetBSD__)  \
  || defined (__DragonFly__)
-#   define BSD
+#   define FREEBSD
 #endif
 
 /* Include every system header we need */
@@ -1115,21 +1115,25 @@
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <unistd.h>
-#if defined (__sun__)
+#if defined (sun)
 #   include <sys/stropts.h>
 #endif
-#if defined (BSD) || defined (__sun__)
+#if defined (FREEBSD) || defined (sun)
 #   include <sys/signal.h>
 #endif
 #if defined (__hpux__)
 #   include <sys/stropts.h>
 #endif
 
+#ifdef __ANDROID__
+#define CDISABLE _PC_VDISABLE
+#else
 #define CDISABLE _POSIX_VDISABLE
+#endif
 
 /* On HP-UX and Sun system, there is a bzero function but with a different
    signature. Use memset instead */
-#if defined (__hpux__) || defined (__sun__) || defined (_AIX)
+#if defined (__hpux__) || defined (sun) || defined (_AIX)
 #   define bzero(s,n) memset (s,0,n)
 #endif
 
@@ -1147,11 +1151,11 @@
 */
 
 /* Configurable part */
-#if defined (__APPLE__) || defined (BSD)
+#if defined (__APPLE__) || defined (FREEBSD)
 #define USE_OPENPTY
-#elif defined (__linux__)
+#elif defined (linux)
 #define USE_GETPT
-#elif defined (__sun__)
+#elif defined (sun)
 #define USE_CLONE_DEVICE "/dev/ptmx"
 #elif defined (_AIX)
 #define USE_CLONE_DEVICE "/dev/ptc"
@@ -1437,7 +1441,7 @@
     desc->slave_fd = open (desc->slave_name, O_RDWR, 0);
 #endif
 
-#if defined (__sun__) || defined (__hpux__)
+#if defined (sun) || defined (__hpux__)
   /* On systems such as Solaris we are using stream. We need to push the right
      "modules" in order to get the expected terminal behaviors. Otherwise
      functionalities such as termios are not available.  */
--- /dev/null
+++ gcc/ada/traceback_symbolic.c
@@ -0,0 +1,201 @@
+/*
+  Copyright (C) 1999 by Juergen Pfeifer <juergen.pfeifer@gmx.net>
+  Ada for Linux Team (ALT)
+  Heavily modified by John Marino <http://www.dragonlace.net>
+
+  Permission is hereby granted, free of charge, to any person obtaining a
+  copy of this software and associated documentation files (the
+  "Software"), to deal in the Software without restriction, including
+  without limitation the rights to use, copy, modify, merge, publish,
+  distribute, distribute with modifications, sublicense, and/or sell
+  copies of the Software, and to permit persons to whom the Software is
+  furnished to do so, subject to the following conditions:
+
+  The above copyright notice and this permission notice shall be included
+  in all copies or substantial portions of the Software.
+
+  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+  IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
+  THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+  Except as contained in this notice, the name(s) of the above copyright
+  holders shall not be used in advertising or otherwise to promote the
+  sale, use or other dealings in this Software without prior written
+  authorization.
+*/
+
+#ifdef IS_CROSS
+
+
+/*
+ * Running addr2line doesn't make sense for cross-compiled objects.
+ * Create a dummy function to satisfy g-trasym.o
+ */
+
+void
+convert_addresses (const char *file_name ATTRIBUTE_UNUSED,
+                   void *addrs ATTRIBUTE_UNUSED,
+                   int n_addr ATTRIBUTE_UNUSED,
+                   void *buf ATTRIBUTE_UNUSED,
+                   int *len ATTRIBUTE_UNUSED)
+{
+  *len = 0;
+}
+
+#else
+
+
+/*
+ * use the external program /usr/bin/addr2line to convert addresses
+ * into file names and line numbers
+ */
+
+#include <sys/types.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <signal.h>
+
+#define CLOSE_SENDPIPE close(sendpipe[0]); close(sendpipe[1])
+#define CLOSE_READPIPE close(readpipe[0]); close(readpipe[1])
+#define DUP2CLOSE(oldfd, newfd) dup2(oldfd, newfd); close(oldfd);
+#define RESTSIG sigaction(SIGPIPE,&oact,NULL)
+
+#define MAX_LINE     1024
+#define PARENT_READ  readpipe[0]
+#define CHILD_WRITE  readpipe[1]
+#define CHILD_READ   sendpipe[0]
+#define PARENT_WRITE sendpipe[1]
+
+#if defined (__sun__)
+#define ADDR2LINE_PROG        "/usr/gnu/bin/addr2line"
+#else
+#define ADDR2LINE_PROG        "/usr/bin/addr2line"
+#endif
+
+void
+convert_addresses (const char *file_name,
+                   void *addrs,
+                   int   n_addr,
+                   void *buf,
+                   int  *len)
+{
+  int max_len = *len;
+  pid_t childpid;
+
+  struct sigaction act, oact;
+
+  int sendpipe[2] = {-1,-1},        /* parent -> child */
+      readpipe[2] = {-1,-1};        /* parent <- child */
+
+  *len = 0;
+  act.sa_handler = SIG_IGN;
+  sigemptyset(&act.sa_mask);
+  act.sa_flags = 0;
+  if (sigaction(SIGPIPE,&act,&oact) < 0)
+    return;
+
+  if (pipe(sendpipe) < 0) { RESTSIG; return; }
+  if (pipe(readpipe) < 0) { CLOSE_SENDPIPE; RESTSIG; return; }
+  if ((childpid = fork()) < 0) {
+    CLOSE_READPIPE;
+    CLOSE_SENDPIPE;
+    RESTSIG;
+    return;
+  }
+
+  if (childpid == 0) {    /* child process */
+    close(PARENT_WRITE);
+    close(PARENT_READ);
+    if ((CHILD_READ != STDIN_FILENO) && (CHILD_WRITE != STDOUT_FILENO)) {
+      if ((CHILD_READ == STDOUT_FILENO) && (CHILD_WRITE == STDIN_FILENO)) {
+        const int temp_fd = dup(CHILD_WRITE);
+        close (CHILD_WRITE);
+        DUP2CLOSE (CHILD_READ, STDIN_FILENO);
+        DUP2CLOSE (temp_fd,    STDOUT_FILENO);
+      }
+      else if ((CHILD_READ == STDIN_FILENO) && (CHILD_WRITE > 1)) {
+        DUP2CLOSE (CHILD_WRITE, STDOUT_FILENO);
+      }
+      else if ((CHILD_READ > 1) && (CHILD_WRITE == STDOUT_FILENO)) {
+        DUP2CLOSE (CHILD_READ, STDIN_FILENO);
+      }
+      else if ((CHILD_READ > 1) && (CHILD_WRITE == STDIN_FILENO)) {
+        DUP2CLOSE (CHILD_WRITE, STDOUT_FILENO);
+        DUP2CLOSE (CHILD_READ,  STDIN_FILENO);
+      }
+      else {
+        /* CHILD_READ >= 1 and CHILD_WRITE > 1 */
+        DUP2CLOSE (CHILD_READ,  STDIN_FILENO);
+        DUP2CLOSE (CHILD_WRITE, STDOUT_FILENO);
+      }
+    }
+    /* As pointed out by Florian Weimer to JP, it is a security threat to call
+       the script with a user defined environment and using the path. That
+       would be Trojans pleasure.  Therefore the absolute path to addr2line
+       and an empty environment is used. That should be safe.
+    */
+    char *const argv[] = { "addr2line",
+                           "-e", file_name,
+                           "--demangle=gnat",
+                           "--functions",
+                           "--basenames",
+                           NULL };
+    char *const envp[] = { NULL };
+    if (execve(ADDR2LINE_PROG, argv, envp) < 0) {
+      close (CHILD_WRITE);
+      close (CHILD_READ);
+      RESTSIG;
+      exit (1);
+    }
+  }
+
+  /* Below this line is parent process */
+  int i, n;
+  char hex[16];
+  char line[MAX_LINE + 1];
+  char *p;
+  char *s = buf;
+  long *trace_address = addrs;
+
+  close(CHILD_WRITE);
+  close(CHILD_READ);
+
+  for(i=0; i < n_addr; i++) {
+    snprintf(hex,sizeof(hex),"%#lx\n",*trace_address);
+    write(PARENT_WRITE,hex,strlen(hex));
+    n = read(PARENT_READ,line,MAX_LINE);
+    if (n<=0)
+      break;
+
+    line[n]=0;
+    /* We have approx. 16 additional chars for "%#lx in " clause.
+       We use this info to prevent a buffer overrun. */
+    if (n + 16 + (*len) > max_len)
+      break;
+
+    p = strchr(line,'\n');
+    if (p) {
+      if (*(p+1)) {
+        *p = 0;
+        *len += snprintf(s, (max_len - (*len)), "%#lx in %s at %s",
+                         *trace_address, line, p+1);
+      }
+      else {
+        *len += snprintf(s, (max_len - (*len)), "%#lx at %s",
+                         *trace_address, line);
+      }
+      s = buf + (*len);
+    }
+    trace_address += 1;
+  }
+  close (PARENT_WRITE);
+  close (PARENT_READ);
+  RESTSIG;
+}
+
+#endif
--- /dev/null
+++ gcc/ada/libgnat/g-socthi__bsd.adb
@@ -0,0 +1,356 @@
+------------------------------------------------------------------------------
+--                                                                          --
+--                         GNAT COMPILER COMPONENTS                         --
+--                                                                          --
+--                    G N A T . S O C K E T S . T H I N                     --
+--                                                                          --
+--                                 B o d y                                  --
+--                                                                          --
+--                     Copyright (C) 2001-2018, AdaCore                     --
+--                                                                          --
+-- GNAT is free software;  you can  redistribute it  and/or modify it under --
+-- terms of the  GNU General Public License as published  by the Free Soft- --
+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
+--                                                                          --
+-- As a special exception under Section 7 of GPL version 3, you are granted --
+-- additional permissions described in the GCC Runtime Library Exception,   --
+-- version 3.1, as published by the Free Software Foundation.               --
+--                                                                          --
+-- You should have received a copy of the GNU General Public License and    --
+-- a copy of the GCC Runtime Library Exception along with this program;     --
+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+-- <http://www.gnu.org/licenses/>.                                          --
+--                                                                          --
+-- GNAT was originally developed  by the GNAT team at  New York University. --
+-- Extensive contributions were provided by Ada Core Technologies Inc.      --
+--                                                                          --
+------------------------------------------------------------------------------
+
+--  This package provides a target dependent thin interface to the sockets
+--  layer for use by the GNAT.Sockets package (g-socket.ads). This package
+--  should not be directly with'ed by an applications program.
+
+--  This is the *BSD version which uses fcntl rather than ioctl
+--  The constant SCON.Thread_Blocking_IO is always true (for all platforms, not
+--  just *BSD), so this binding is significantly simpler than the standard
+--  one it replaces.
+
+with GNAT.OS_Lib; use GNAT.OS_Lib;
+
+with Interfaces.C; use Interfaces.C;
+
+package body GNAT.Sockets.Thin is
+
+   function Syscall_Accept
+     (S       : C.int;
+      Addr    : System.Address;
+      Addrlen : not null access C.int) return C.int;
+   pragma Import (C, Syscall_Accept, "accept");
+   --  The accept() function accepts a connection on a socket.  An incoming
+   --  connection is acknowledged and associated with an immediately created
+   --  socket.  The original socket is returned to the listening state.
+
+   function Syscall_Connect
+     (S       : C.int;
+      Name    : System.Address;
+      Namelen : C.int) return C.int;
+   pragma Import (C, Syscall_Connect, "connect");
+   --  The connect() system call initiates a connection on a socket.  If the
+   --  parameter S is of type SOCK_DGRAM then connect() permanently specifies
+   --  the peer to which datagrams are to be sent.  If S is type SOCK_STREAM
+   --  then connect() attempts to make a connection with another socket, which
+   --  is identified by the parameter Name.
+
+   function Syscall_Recv
+     (S     : C.int;
+      Msg   : System.Address;
+      Len   : C.int;
+      Flags : C.int) return C.int;
+   pragma Import (C, Syscall_Recv, "recv");
+   --  The recv() function receives a message from a socket.  The call can be
+   --  used on a connection mode socket or a bound, connectionless socket.  If
+   --  no messages are available at the socket, the recv() call waits for a
+   --  message to arrive unless the socket is non-blocking.  If a socket is
+   --  non-blocking, the call returns a -1 and ERRNO is set to EWOULDBLOCK.
+
+   function Syscall_Recvfrom
+     (S       : C.int;
+      Msg     : System.Address;
+      Len     : C.int;
+      Flags   : C.int;
+      From    : System.Address;
+      Fromlen : not null access C.int) return C.int;
+   pragma Import (C, Syscall_Recvfrom, "recvfrom");
+   --  The recvfrom() system call receives a message from a socket and captures
+   --  the address from which the data was sent.  It can be used to receive
+   --  data on an unconnected socket as well.  If no messages are available,
+   --  the call waits for a message to arrive on blocking sockets.  For
+   --  non-blocking sockets without messages, -1 is returned and ERRNO is set
+   --  to EAGAIN or EWOULDBLOCK.
+
+   function Syscall_Recvmsg
+     (S     : C.int;
+      Msg   : System.Address;
+      Flags : C.int) return System.CRTL.ssize_t;
+   pragma Import (C, Syscall_Recvmsg, "recvmsg");
+   --  The recvmsg call receives a message from a socket, and can be used to
+   --  receive data on an unconnected socket as well.  If no messages are
+   --  available, the call waits for a message to arrive on blocking sockets.
+   --  For non-blocking sockets without messages, -1 is returned and ERRNO is
+   --  set to EAGAIN or EWOULDBLOCK.
+
+   function Syscall_Sendmsg
+     (S     : C.int;
+      Msg   : System.Address;
+      Flags : C.int) return System.CRTL.ssize_t;
+   pragma Import (C, Syscall_Sendmsg, "sendmsg");
+   --  The sendmsg() function sends a message to a socket, and can be used with
+   --  unconnected sockets as well (the msg is ignored in this case).  The
+   --  function returns the number of bytes sent when successful, otherwise it
+   --  returns -1 and ERRNO is set (many possible values).
+
+   function Syscall_Sendto
+     (S     : C.int;
+      Msg   : System.Address;
+      Len   : C.int;
+      Flags : C.int;
+      To    : System.Address;
+      Tolen : C.int) return C.int;
+   pragma Import (C, Syscall_Sendto, "sendto");
+   --  The sendto() function only works for connected sockets and it initiates
+   --  the transmission of a message.  A successful call returns the numbers of
+   --  bytes sent, and a failure returns a -1 and ERRNO is set.
+
+   function Syscall_Socket
+     (Domain   : C.int;
+      Typ      : C.int;
+      Protocol : C.int) return C.int;
+   pragma Import (C, Syscall_Socket, "socket");
+   --  The socket() function is used to create an unbound socket and returns a
+   --  file descriptor that can be used with other socket functions.  Upon
+   --  failure, a -1 is returned and ERRNO is set.
+
+   procedure Disable_SIGPIPE (S : C.int);
+   pragma Import (C, Disable_SIGPIPE, "__gnat_disable_sigpipe");
+
+   procedure Disable_All_SIGPIPEs;
+   pragma Import (C, Disable_All_SIGPIPEs, "__gnat_disable_all_sigpipes");
+   --  Sets the process to ignore all SIGPIPE signals on platforms that
+   --  don't support Disable_SIGPIPE for particular streams.
+
+   function C_Fcntl
+     (Fd  : C.int;
+      Cmd : C.int;
+      Val : C.int) return C.int;
+   pragma Import (C, C_Fcntl, "fcntl");
+   --  The ioctl of 64-bit DragonFlyBSD, OpenBSD, and NetBSD does not support
+   --  setting a socket in non-blocking mode.  fcntl must be used instead.
+
+   --------------
+   -- C_Accept --
+   --------------
+
+   function C_Accept
+     (S       : C.int;
+      Addr    : System.Address;
+      Addrlen : not null access C.int) return C.int
+   is
+      R : constant C.int := Syscall_Accept (S, Addr, Addrlen);
+   begin
+
+      Disable_SIGPIPE (R);
+      return R;
+   end C_Accept;
+
+   ---------------
+   -- C_Connect --
+   ---------------
+
+   function C_Connect
+     (S       : C.int;
+      Name    : System.Address;
+      Namelen : C.int) return C.int
+   is
+   begin
+      return Syscall_Connect (S, Name, Namelen);
+   end C_Connect;
+
+   ------------------
+   -- Socket_Ioctl --
+   ------------------
+
+   function Socket_Ioctl
+     (S   : C.int;
+      Req : SOSC.IOCTL_Req_T;
+      Arg : access C.int) return C.int
+   is
+   begin
+      if Req = SOSC.FIONBIO then
+         declare
+            use Interfaces;
+            flags    : constant Unsigned_32 :=
+                                Unsigned_32 (C_Fcntl (S, SOSC.F_GETFL, 0));
+            nonblock : constant Unsigned_32 := Unsigned_32 (SOSC.O_NDELAY);
+            enabled  : constant Boolean := Arg.all = 1;
+            newval   : C.int := C.int (flags);
+         begin
+            if enabled then
+               newval := C.int (flags or nonblock);
+            elsif (flags and nonblock) > 0 then
+               newval := C.int (flags - nonblock);
+            end if;
+            return C_Fcntl (Fd => S, Cmd => SOSC.F_SETFL, Val => newval);
+         end;
+      end if;
+
+      return C_Ioctl (S, Req, Arg);
+   end Socket_Ioctl;
+
+   ------------
+   -- C_Recv --
+   ------------
+
+   function C_Recv
+     (S     : C.int;
+      Msg   : System.Address;
+      Len   : C.int;
+      Flags : C.int) return C.int
+   is
+   begin
+      return Syscall_Recv (S, Msg, Len, Flags);
+   end C_Recv;
+
+   ----------------
+   -- C_Recvfrom --
+   ----------------
+
+   function C_Recvfrom
+     (S       : C.int;
+      Msg     : System.Address;
+      Len     : C.int;
+      Flags   : C.int;
+      From    : System.Address;
+      Fromlen : not null access C.int) return C.int
+   is
+   begin
+      return Syscall_Recvfrom (S, Msg, Len, Flags, From, Fromlen);
+   end C_Recvfrom;
+
+   ---------------
+   -- C_Recvmsg --
+   ---------------
+
+   function C_Recvmsg
+     (S     : C.int;
+      Msg   : System.Address;
+      Flags : C.int) return System.CRTL.ssize_t
+   is
+   begin
+      return Syscall_Recvmsg (S, Msg, Flags);
+   end C_Recvmsg;
+
+   ---------------
+   -- C_Sendmsg --
+   ---------------
+
+   function C_Sendmsg
+     (S     : C.int;
+      Msg   : System.Address;
+      Flags : C.int) return System.CRTL.ssize_t
+   is
+   begin
+      return Syscall_Sendmsg (S, Msg, Flags);
+   end C_Sendmsg;
+
+   --------------
+   -- C_Sendto --
+   --------------
+
+   function C_Sendto
+     (S     : C.int;
+      Msg   : System.Address;
+      Len   : C.int;
+      Flags : C.int;
+      To    : System.Address;
+      Tolen : C.int) return C.int
+   is
+   begin
+      return Syscall_Sendto (S, Msg, Len, Flags, To, Tolen);
+   end C_Sendto;
+
+   --------------
+   -- C_Socket --
+   --------------
+
+   function C_Socket
+     (Domain   : C.int;
+      Typ      : C.int;
+      Protocol : C.int) return C.int
+   is
+      R : constant C.int := Syscall_Socket (Domain, Typ, Protocol);
+   begin
+      Disable_SIGPIPE (R);
+      return R;
+   end C_Socket;
+
+   --------------
+   -- Finalize --
+   --------------
+
+   procedure Finalize is
+   begin
+      null;
+   end Finalize;
+
+   -------------------------
+   -- Host_Error_Messages --
+   -------------------------
+
+   package body Host_Error_Messages is separate;
+
+   ----------------
+   -- Initialize --
+   ----------------
+
+   procedure Initialize is
+   begin
+      Disable_All_SIGPIPEs;
+   end Initialize;
+
+   --------------------
+   -- Signalling_Fds --
+   --------------------
+
+   package body Signalling_Fds is
+
+      --  In this default implementation, we use a C version of these
+      --  subprograms provided by socket.c.
+
+      function C_Create (Fds : not null access Fd_Pair) return C.int;
+      function C_Read (Rsig : C.int) return C.int;
+      function C_Write (Wsig : C.int) return C.int;
+      procedure C_Close (Sig : C.int);
+
+      pragma Import (C, C_Create, "__gnat_create_signalling_fds");
+      pragma Import (C, C_Read,   "__gnat_read_signalling_fd");
+      pragma Import (C, C_Write,  "__gnat_write_signalling_fd");
+      pragma Import (C, C_Close,  "__gnat_close_signalling_fd");
+
+      function Create
+        (Fds : not null access Fd_Pair) return C.int renames C_Create;
+      function Read (Rsig : C.int) return C.int renames C_Read;
+      function Write (Wsig : C.int) return C.int renames C_Write;
+      procedure Close (Sig : C.int) renames C_Close;
+
+   end Signalling_Fds;
+
+   --------------------------
+   -- Socket_Error_Message --
+   --------------------------
+
+   function Socket_Error_Message (Errno : Integer) return String is separate;
+
+end GNAT.Sockets.Thin;
--- /dev/null
+++ gcc/ada/libgnat/s-trasym__bsd.adb
@@ -0,0 +1,175 @@
+------------------------------------------------------------------------------
+--                                                                          --
+--                         GNAT RUN-TIME COMPONENTS                         --
+--                                                                          --
+--           S Y S T E M . T R A C E B A C K . S Y M B O L I C              --
+--                                                                          --
+--                                 B o d y                                  --
+--                                                                          --
+--                     Copyright (C) 1999-2018, AdaCore                     --
+--                                                                          --
+-- GNAT is free software;  you can  redistribute it  and/or modify it under --
+-- terms of the  GNU General Public License as published  by the Free Soft- --
+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
+--                                                                          --
+-- As a special exception under Section 7 of GPL version 3, you are granted --
+-- additional permissions described in the GCC Runtime Library Exception,   --
+-- version 3.1, as published by the Free Software Foundation.               --
+--                                                                          --
+-- You should have received a copy of the GNU General Public License and    --
+-- a copy of the GCC Runtime Library Exception along with this program;     --
+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+-- <http://www.gnu.org/licenses/>.                                          --
+--                                                                          --
+-- GNAT was originally developed  by the GNAT team at  New York University. --
+-- Extensive contributions were provided by Ada Core Technologies Inc.      --
+--                                                                          --
+------------------------------------------------------------------------------
+
+--  Run-time symbolic traceback support
+--  This file is based on the work by Juergen Pfiefer which is still used
+--  today to provide symbolic traceback support for gnu/kFreeBSD.
+--  Incorporated in GNAT-AUX by John Marino <http://www.dragonlace.net>
+
+pragma Polling (Off);
+--  We must turn polling off for this unit, because otherwise we can get
+--  elaboration circularities when polling is turned on.
+
+with Ada.Exceptions.Traceback; use Ada.Exceptions.Traceback;
+with System.Soft_Links;
+
+package body System.Traceback.Symbolic is
+
+   --  Note that Suppress_Hex is ignored in this version of this package.
+
+   package TSL renames System.Soft_Links;
+
+   --  To perform the raw addresses to symbolic form translation we rely on a
+   --  libaddr2line symbolizer which examines debug info from a provided
+   --  executable file name, and an absolute path is needed to ensure the file
+   --  is always found. This is "__gnat_locate_exec_on_path (gnat_argv [0])"
+   --  for our executable file, a fairly heavy operation so we cache the
+   --  result.
+
+   Exename : System.Address;
+   --  Pointer to the name of the executable file to be used on all
+   --  invocations of the libaddr2line symbolization service.
+
+   Exename_Resolved : Boolean := False;
+   --  Flag to indicate whether we have performed the executable file name
+   --  resolution already. Relying on a not null Exename for this purpose
+   --  would be potentially inefficient as this is what we will get if the
+   --  resolution attempt fails.
+
+   ------------------------
+   -- Symbolic_Traceback --
+   ------------------------
+
+   function Symbolic_Traceback
+     (Traceback : System.Traceback_Entries.Tracebacks_Array) return String
+   is
+      procedure convert_addresses
+        (filename : System.Address;
+         addrs    : System.Address;
+         n_addrs  : Integer;
+         buf      : System.Address;
+         len      : System.Address);
+      pragma Import (C, convert_addresses, "convert_addresses");
+      --  This is the procedure version of the Ada-aware addr2line. It places
+      --  in BUF a string representing the symbolic translation of the N_ADDRS
+      --  raw addresses provided in ADDRS, looked up in debug information from
+      --  FILENAME. LEN points to an integer which contains the size of the
+      --  BUF buffer at input and the result length at output.
+      --
+      --  Note that this procedure is *not* thread-safe.
+
+      type Argv_Array is array (0 .. 0) of System.Address;
+      gnat_argv : access Argv_Array;
+      pragma Import (C, gnat_argv, "gnat_argv");
+
+      function locate_exec_on_path
+        (c_exename : System.Address) return System.Address;
+      pragma Import (C, locate_exec_on_path, "__gnat_locate_exec_on_path");
+
+      B_Size : constant Integer := 256 * Traceback'Length;
+      Len    : Integer := B_Size;
+      Res    : String (1 .. B_Size);
+
+   begin
+      if Traceback'Length = 0 then
+         return "";
+      end if;
+
+      --  If our input set of raw addresses is not empty, resort to the
+      --  libaddr2line service to symbolize it all.
+
+      --  Compute, cache and provide the absolute path to our executable file
+      --  name as the binary file where the relevant debug information is to be
+      --  found. If the executable file name resolution fails, we have no
+      --  sensible basis to invoke the symbolizer at all.
+
+      --  Protect all this against concurrent accesses explicitly, as the
+      --  underlying services are potentially thread unsafe.
+
+      TSL.Lock_Task.all;
+
+      if not Exename_Resolved then
+         Exename := locate_exec_on_path (gnat_argv (0));
+         Exename_Resolved := True;
+      end if;
+
+      if Exename /= System.Null_Address then
+         Len := Res'Length;
+         convert_addresses
+           (Exename, Traceback'Address, Traceback'Length,
+            Res (1)'Address, Len'Address);
+      end if;
+
+      TSL.Unlock_Task.all;
+
+      --  Return what the addr2line symbolizer has produced if we have called
+      --  it (the executable name resolution succeeded), or an empty string
+      --  otherwise.
+
+      if Exename /= System.Null_Address then
+         return Res (1 .. Len);
+      else
+         return "";
+      end if;
+   end Symbolic_Traceback;
+
+   --  "No_Hex" is ignored in this version, because otherwise we have nothing
+   --  at all to print.
+
+   function Symbolic_Traceback_No_Hex
+     (Traceback : System.Traceback_Entries.Tracebacks_Array) return String is
+   begin
+      return Symbolic_Traceback (Traceback);
+   end Symbolic_Traceback_No_Hex;
+
+   function Symbolic_Traceback
+     (E : Ada.Exceptions.Exception_Occurrence) return String
+   is
+   begin
+      return Symbolic_Traceback (Tracebacks (E));
+   end Symbolic_Traceback;
+
+   function Symbolic_Traceback_No_Hex
+     (E : Ada.Exceptions.Exception_Occurrence) return String is
+   begin
+      return Symbolic_Traceback (E);
+   end Symbolic_Traceback_No_Hex;
+
+   ------------------
+   -- Enable_Cache --
+   ------------------
+
+   procedure Enable_Cache (Include_Modules : Boolean := False) is
+   begin
+      null;
+   end Enable_Cache;
+
+end System.Traceback.Symbolic;
--- gcc/ada/gcc-interface/Make-lang.in.orig
+++ gcc/ada/gcc-interface/Make-lang.in
@@ -627,7 +627,7 @@
  ada/widechar.o
 
 # Language-independent object files.
-ADA_BACKEND = $(BACKEND) attribs.o
+ADA_BACKEND = $(BACKEND2) attribs.o
 
 # List of target dependent sources, overridden below as necessary
 TARGET_ADA_SRCS =
--- gcc/ada/init.c.orig
+++ gcc/ada/init.c
@@ -2643,8 +2643,15 @@
 {
   mcontext_t *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;
 
+#if defined (__i386__)
+  unsigned long *pc = (unsigned long *)mcontext->gregs[REG_EIP];
+  /* The pattern is "orl $0x0,(%esp)" for a probe in 32-bit mode.  */
+  if (signo == SIGSEGV && pc && *pc == 0x00240c83)
+    mcontext->gregs[REG_ESP] += 4096 + 4 * sizeof (unsigned long);
+#elif defined (__ARMEL__)
   /* ARM Bump has to be an even number because of odd/even architecture.  */
-  ((mcontext_t *) mcontext)->arm_pc += 2;
+  mcontext->arm_pc += 2;
+#endif
 }
 
 static void
--- gcc/ada/libgnat/g-socthi.ads.orig
+++ gcc/ada/libgnat/g-socthi.ads
@@ -53,8 +53,6 @@
 
    package C renames Interfaces.C;
 
-   use type System.CRTL.ssize_t;
-
    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;
    --  Returns last socket error number
 


[FILE:19397:patches/patch-diff-ada-testsuite]
--- gcc/testsuite/ada/acats/run_acats.sh.orig
+++ gcc/testsuite/ada/acats/run_acats.sh
@@ -5,20 +5,6 @@
    exit 1
 fi
 
-# Provide which replacement.
-#
-# type -p is missing from Solaris 2 /bin/sh and /bin/ksh (ksh88), but both
-# ksh93 and bash have it.
-# type output format differs between ksh88 and ksh93, so avoid it if
-# type -p is present.  Unfortunately, HP-UX /bin/sh ignores -p with type.
-# Fall back to whence which ksh88 and ksh93 provide, but bash does not.
-
-which () {
-    path=`type -p $* 2>/dev/null` && { echo $path | awk '{print $NF}'; return 0; }
-    path=`type $* 2>/dev/null` && { echo $path | awk '{print $NF}'; return 0; }
-    path=`whence $* 2>/dev/null` && { echo $path; return 0; }
-    return 1
-}
 
 # Set up environment to use the Ada compiler from the object tree
 
--- gcc/testsuite/ada/acats/run_all.sh.orig
+++ gcc/testsuite/ada/acats/run_all.sh
@@ -14,21 +14,6 @@
 
 # End of customization section.
 
-# Perform arithmetic evaluation on the ARGs, and store the result in the
-# global $as_val. Take advantage of shells that can avoid forks. The arguments
-# must be portable across $(()) and expr.
-if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
-  eval 'as_fn_arith ()
-  {
-    as_val=$(( $* ))
-  }'
-else
-  as_fn_arith ()
-  {
-    as_val=`expr "$@" || test $? -eq 1`
-  }
-fi # as_fn_arith
-
 display_noeol () {
   printf "$@"
   printf "$@" >> $dir/acats.sum
@@ -46,6 +31,14 @@
   echo "$@" >> $dir/acats.log
 }
 
+inform () {
+  printf "%04d    %7s" $1 $2
+}
+
+disinform () {
+  printf "\r"
+}
+
 dir=`${PWDCMD-pwd}`
 
 if [ "$dir" = "$testdir" ]; then
@@ -102,18 +95,6 @@
 gnatls -v >> $dir/acats.log
 display ""
 
-if [ -n "$GCC_RUNTEST_PARALLELIZE_DIR" ]; then
-  dir_support=$dir/../acats/support
-
-  rm -rf $dir/run
-  mv $dir/tests $dir/tests.$$ 2> /dev/null
-  rm -rf $dir/tests.$$ &
-  mkdir -p $dir/run
-
-  cp -pr $dir/../acats/tests $dir/
-else
-  dir_support=$dir/support
-
 display "		=== acats support ==="
 display_noeol "Generating support files..."
 
@@ -214,9 +195,6 @@
 
 display " done."
 display ""
-
-fi
-
 display "		=== acats tests ==="
 
 if [ $# -eq 0 ]; then
@@ -228,14 +206,20 @@
 glob_countn=0
 glob_countok=0
 glob_countu=0
-par_count=0
-par_countm=0
-par_last=
+countdown=0
 
 for chapter in $chapters; do
-   # Used to generate support once and finish after that.
-   [ "$chapter" = "NONE" ] && continue
+   if [ -d $dir/tests/$chapter ]; then
+      cd $dir/tests/$chapter
+      ls *.a *.ada *.adt *.am *.dep 2> /dev/null | sed -e 's/\(.*\)\..*/\1/g' | \
+      cut -c1-7 | sort | uniq | comm -23 - $dir/support/norun.lst \
+        > $dir/tests/$chapter/${chapter}.lst
+      countn=`wc -l < $dir/tests/$chapter/${chapter}.lst`
+      countdown=`expr $countdown + $countn`
+   fi
+done
 
+for chapter in $chapters; do
    display Running chapter $chapter ...
 
    if [ ! -d $dir/tests/$chapter ]; then
@@ -244,45 +228,11 @@
       continue
    fi
 
-   cd $dir/tests/$chapter
-   ls *.a *.ada *.adt *.am *.dep 2> /dev/null | sed -e 's/\(.*\)\..*/\1/g' | \
-   cut -c1-7 | sort | uniq | comm -23 - $dir_support/norun.lst \
-     > $dir/tests/$chapter/${chapter}.lst 
    countn=`wc -l < $dir/tests/$chapter/${chapter}.lst`
-   as_fn_arith $glob_countn + $countn
-   glob_countn=$as_val
+   glob_countn=`expr $glob_countn + $countn`
+   counti=0
    for i in `cat $dir/tests/$chapter/${chapter}.lst`; do 
-
-      # If running multiple run_all.sh jobs in parallel, decide
-      # if we should run this test in the current instance.
-      if [ -n "$GCC_RUNTEST_PARALLELIZE_DIR" ]; then
-	 case "$i" in
-	    # Ugh, some tests have inter-test dependencies, those
-	    # tests have to be scheduled on the same parallel instance
-	    # as previous test.
-	    ce2108f | ce2108h | ce3112d) ;;
-	    # All others can be hopefully scheduled freely.
-	    *)
-	       as_fn_arith $par_countm + 1
-	       par_countm=$as_val
-	       [ $par_countm -eq 10 ] && par_countm=0
-	       if [ $par_countm -eq 1 ]; then
-		  as_fn_arith $par_count + 1
-		  par_count=$as_val
-		  if mkdir $GCC_RUNTEST_PARALLELIZE_DIR/$par_count 2>/dev/null; then
-		     par_last=1
-		  else
-		     par_last=
-		  fi
-	       fi;;
-	 esac
-	 if [ -z "$par_last" ]; then
-	    as_fn_arith $glob_countn - 1
-	    glob_countn=$as_val
-	    continue
-	 fi
-      fi
-
+      counti=`expr $counti + 1`
       extraflags="-gnat95"
       grep $i $testdir/overflow.lst > /dev/null 2>&1
       if [ $? -eq 0 ]; then
@@ -300,10 +250,13 @@
       if [ $? -eq 0 ]; then
          extraflags="$extraflags -fstack-check"
       fi
+      inform $countdown $i
+      countdown=`expr $countdown - 1`
       test=$dir/tests/$chapter/$i
       mkdir $test && cd $test >> $dir/acats.log 2>&1
 
       if [ $? -ne 0 ]; then
+         disinform
          display "FAIL:	$i"
          failed="${failed}${i} "
          clean_dir
@@ -321,19 +274,22 @@
       echo "BUILD $main" >> $dir/acats.log
       EXTERNAL_OBJECTS=""
       case $i in
-        cxb30*) EXTERNAL_OBJECTS="$dir_support/cxb30040.o $dir_support/cxb30060.o $dir_support/cxb30130.o $dir_support/cxb30131.o";;
+        cxb30*) EXTERNAL_OBJECTS="$dir/support/cxb30040.o $dir/support/cxb30060.o $dir/support/cxb30130.o $dir/support/cxb30131.o";;
         ca1020e) rm -f ca1020e_func1.adb ca1020e_func2.adb ca1020e_proc1.adb ca1020e_proc2.adb > /dev/null 2>&1;;
         ca14028) rm -f ca14028_func2.ads ca14028_func3.ads ca14028_proc1.ads ca14028_proc3.ads > /dev/null 2>&1;;
+        cxh1001) extraflags="-a -f"; echo "pragma Normalize_Scalars;" > gnat.adc
       esac
       if [ "$main" = "" ]; then
+         disinform
          display "FAIL:	$i"
          failed="${failed}${i} "
          clean_dir
          continue
       fi
 
-      target_gnatmake $extraflags -I$dir_support $main >> $dir/acats.log 2>&1
+      target_gnatmake $extraflags -I$dir/support $main >> $dir/acats.log 2>&1
       if [ $? -ne 0 ]; then
+         disinform
          display "FAIL:	$i"
          failed="${failed}${i} "
          clean_dir
@@ -348,6 +304,7 @@
       target_run $dir/tests/$chapter/$i/$binmain > $dir/tests/$chapter/$i/${i}.log 2>&1
       cd $dir/tests/$chapter/$i
       cat ${i}.log >> $dir/acats.log
+      disinform
       egrep -e '(==== |\+\+\+\+ |\!\!\!\! )' ${i}.log > /dev/null 2>&1
       if [ $? -ne 0 ]; then
          grep 'tasking not implemented' ${i}.log > /dev/null 2>&1
@@ -357,15 +314,12 @@
             failed="${failed}${i} "
          else
             log "UNSUPPORTED:	$i"
-            as_fn_arith $glob_countn - 1
-            glob_countn=$as_val
-            as_fn_arith $glob_countu + 1
-            glob_countu=$as_val
+            glob_countn=`expr $glob_countn - 1`
+            glob_countu=`expr $glob_countu + 1`
          fi
       else
          log "PASS:	$i"
-         as_fn_arith $glob_countok + 1
-         glob_countok=$as_val
+         glob_countok=`expr $glob_countok + 1`
       fi
       clean_dir
    done
--- /dev/null
+++ gcc/testsuite/ada/acats/run_remote.sh
@@ -0,0 +1,412 @@
+#!/bin/sh
+# Run ACATS with the GNU Ada compiler
+
+# The following functions are to be customized if you run in cross
+# environment or want to change compilation flags.  Note that for
+# tests requiring checks not turned on by default, this script
+# automatically adds the needed flags to pass (ie: -gnato or -gnatE).
+
+# gccflags="-O3 -fomit-frame-pointer -funroll-all-loops -finline-functions"
+# gnatflags="-gnatN"
+
+gccflags="-O2"
+gnatflags="-gnatws"
+tabtarget="/data/local/testsuite"
+STRIP="@REMOTE_TARGET@-strip"
+
+target_run () {
+  # Run on rooted tablet (port 22 vs port 2222)
+  BN=`basename $*`
+  $STRIP_FOR_TARGET $*
+  /usr/bin/scp -qp $* root@tablet:$tabtarget/
+  /usr/bin/ssh -q tablet $tabtarget/$BN
+}
+
+target_cmd () {
+  /usr/bin/ssh -q tablet "$1"
+}
+
+# End of customization section.
+
+display_noeol () {
+  printf "$@"
+  printf "$@" >> $dir/acats.sum
+  printf "$@" >> $dir/acats.log
+}
+
+display () {
+  echo "$@"
+  echo "$@" >> $dir/acats.sum
+  echo "$@" >> $dir/acats.log
+}
+
+log () {
+  echo "$@" >> $dir/acats.sum
+  echo "$@" >> $dir/acats.log
+}
+
+inform () {
+  printf "%04d    %7s" $1 $2
+}
+
+disinform () {
+  printf "\r"
+}
+
+dir=`${PWDCMD-pwd}`
+
+if [ "$testdir" = "" ]; then
+   echo You must use make check or make check-ada
+   exit 1
+fi
+
+if [ "$dir" = "$testdir" ]; then
+  echo "error: srcdir must be different than objdir, exiting."
+  exit 1
+fi
+
+target_gnatmake () {
+  echo gnatmake-cross --GCC=\"$GCC\" $gnatflags $gccflags $* -largs $EXTERNAL_OBJECTS --GCC=\"$GCC\" -fPIE -pie
+  gnatmake-cross --GCC="$GCC" $gnatflags $gccflags $* -largs $EXTERNAL_OBJECTS --GCC="$GCC" -fPIE -pie
+}
+
+target_gcc () {
+  $GCC $gccflags $*
+}
+
+clean_dir () {
+  rm -f "$binmain" *.o *.ali > /dev/null 2>&1
+}
+
+find_main () {
+  ls ${i}?.adb > ${i}.lst 2> /dev/null
+  ls ${i}*m.adb >> ${i}.lst 2> /dev/null
+  ls ${i}.adb >> ${i}.lst 2> /dev/null
+  main=`tail -1 ${i}.lst`
+}
+
+split_testid () {
+  local mysplit=`echo $1 | awk -F/ '{print "section=" $1 "; TN=" $2 "; prog=" $3 ";"}'`
+  eval ${mysplit}
+}
+
+EXTERNAL_OBJECTS=""
+# Global variable to communicate external objects to link with.
+
+rm -f $dir/acats.sum $dir/acats.log $dir/transfer.lst
+
+display "Test Run By $USER on `date`"
+
+display "		=== acats configuration ==="
+
+target=`$GCC -dumpmachine`
+
+display target gcc is $GCC
+display `$GCC -v 2>&1`
+display host=`gcc -dumpmachine`
+display target=$target
+display `type gnatmake-cross`
+gnatls-cross -v >> $dir/acats.log
+display ""
+
+# Let's be tidy and clear off the remote device first
+target_cmd "cd ${tabtarget}; rm logs/*; rmdir logs; rm *"
+
+display "		=== acats support ==="
+display_noeol "Generating support files..."
+
+rm -rf $dir/support
+mkdir -p $dir/support
+cd $dir/support
+
+cp $testdir/support/*.ada $testdir/support/*.a $testdir/support/*.tst $dir/support
+
+# Find out the size in bit of an address on the target
+target_gnatmake $testdir/support/impbit.adb >> $dir/acats.log 2>&1
+target_run $dir/support/impbit > $dir/support/impbit.out 2>&1
+target_bit=`cat $dir/support/impbit.out`
+echo target_bit="$target_bit" >> $dir/acats.log
+
+# Find out a suitable asm statement
+# Adapted from configure.ac gcc_cv_as_dwarf2_debug_line
+case "$target" in
+  ia64*-*-* | s390*-*-*)
+    target_insn="nop 0"
+    ;;
+  mmix-*-*)
+    target_insn="swym 0"
+    ;;
+  *)
+    target_insn="nop"
+    ;;
+esac
+echo target_insn="$target_insn" >> $dir/acats.log
+
+sed -e "s,ACATS4GNATDIR,$dir,g" \
+  < $testdir/support/impdef.a > $dir/support/impdef.a
+sed -e "s,ACATS4GNATDIR,$dir,g" \
+  -e "s,ACATS4GNATBIT,$target_bit,g" \
+  -e "s,ACATS4GNATINSN,$target_insn,g" \
+  < $testdir/support/macro.dfs > $dir/support/MACRO.DFS
+sed -e "s,ACATS4GNATDIR,$dir,g" \
+  < $testdir/support/tsttests.dat > $dir/support/TSTTESTS.DAT
+
+cp $testdir/tests/cd/*.c $dir/support
+cp $testdir/tests/cxb/*.c $dir/support
+grep -v '^#' $testdir/norun.lst | sort > $dir/support/norun.lst
+
+rm -rf $dir/run
+mv $dir/tests $dir/tests.$$ 2> /dev/null
+rm -rf $dir/tests.$$ &
+mkdir -p $dir/run
+
+cp -pr $testdir/tests $dir/
+
+for i in $dir/support/*.ada $dir/support/*.a; do
+   host_gnatchop $i >> $dir/acats.log 2>&1
+done
+
+# These tools are used to preprocess some ACATS sources
+# they need to be compiled native on the host.
+
+host_gnatmake -q -gnatws macrosub.adb
+if [ $? -ne 0 ]; then
+   display "**** Failed to compile macrosub"
+   exit 1
+fi
+./macrosub > macrosub.out 2>&1
+
+gcc -c cd300051.c
+host_gnatmake -q -gnatws widechr.adb
+if [ $? -ne 0 ]; then
+   display "**** Failed to compile widechr"
+   exit 1
+fi
+./widechr > widechr.out 2>&1
+
+rm -f $dir/support/macrosub
+rm -f $dir/support/widechr
+rm -f $dir/support/*.ali
+rm -f $dir/support/*.o
+
+display " done."
+
+# From here, all compilations will be made by the target compiler
+
+display_noeol "Compiling support files..."
+
+target_gcc -c *.c
+if [ $? -ne 0 ]; then
+   display "**** Failed to compile C code"
+   exit 1
+fi
+
+host_gnatchop *.adt >> $dir/acats.log 2>&1
+
+target_gnatmake -c -gnato -gnatE *.ads >> $dir/acats.log 2>&1
+target_gnatmake -c -gnato -gnatE *.adb >> $dir/acats.log 2>&1
+
+display " done."
+display ""
+display "		=== acats tests ==="
+
+if [ $# -eq 0 ]; then
+   chapters=`cd $dir/tests; echo [a-z]*`
+else
+   chapters=$*
+fi
+
+glob_countn=0
+glob_countok=0
+glob_countu=0
+countdown=0
+
+for chapter in $chapters; do
+   if [ -d $dir/tests/$chapter ]; then
+      cd $dir/tests/$chapter
+      ls *.a *.ada *.adt *.am *.dep 2> /dev/null | sed -e 's/\(.*\)\..*/\1/g' | \
+      cut -c1-7 | sort | uniq | comm -23 - $dir/support/norun.lst \
+        > $dir/tests/$chapter/${chapter}.lst
+      countn=`wc -l < $dir/tests/$chapter/${chapter}.lst`
+      countdown=`expr $countdown + $countn`
+   fi
+done
+
+cat > $dir/execute.sh << EOF
+inform () {
+  printf "left: %04d" \$1
+}
+disinform () {
+  printf "\r"
+}
+cycle () {
+  local countx=0
+  local total=\$(echo \$testlist | awk '{print NF}')
+  mkdir -p logs
+  echo "Executing \$total tests on remote device"
+  inform \$total
+  for x in \$testlist; do
+    timeout -t 30 ./\${x} > logs/\${x}.log 2>&1
+    countx=\$(expr \$countx + 1)
+    if [ \$countx -eq 25 ]; then
+      total=\$(expr \$total - 25)
+      countx=0
+      disinform
+      inform \$total
+    fi
+  done
+  disinform
+  tar -czf remote.logs.tar.gz logs
+}
+testlist=" \\
+EOF
+
+display "All tests are being cross-compiled without execution first."
+
+for chapter in $chapters; do
+   if [ ! -d $dir/tests/$chapter ]; then
+      continue
+   fi
+
+   countn=`wc -l < $dir/tests/$chapter/${chapter}.lst`
+   glob_countn=`expr $glob_countn + $countn`
+   counti=0
+   for i in `cat $dir/tests/$chapter/${chapter}.lst`; do
+      counti=`expr $counti + 1`
+      extraflags="-gnat95"
+      grep $i $testdir/overflow.lst > /dev/null 2>&1
+      if [ $? -eq 0 ]; then
+         extraflags="$extraflags -gnato"
+      fi
+      grep $i $testdir/elabd.lst > /dev/null 2>&1
+      if [ $? -eq 0 ]; then
+         extraflags="$extraflags -gnatE"
+      fi
+      grep $i $testdir/floatstore.lst > /dev/null 2>&1
+      if [ $? -eq 0 ]; then
+         extraflags="$extraflags -ffloat-store"
+      fi
+      grep $i $testdir/stackcheck.lst > /dev/null 2>&1
+      if [ $? -eq 0 ]; then
+         extraflags="$extraflags -fstack-check"
+      fi
+      inform $countdown $i
+      countdown=`expr $countdown - 1`
+      test=$dir/tests/$chapter/$i
+      mkdir $test && cd $test >> $dir/acats.log 2>&1
+
+      if [ $? -ne 0 ]; then
+         disinform
+         display "FAIL:	$i"
+         failed="${failed}${i} "
+         clean_dir
+         continue
+      fi
+
+      host_gnatchop -c -w `ls ${test}*.a ${test}*.ada ${test}*.adt ${test}*.am ${test}*.dep 2> /dev/null` >> $dir/acats.log 2>&1
+      find_main
+      if [ -z "$main" ]; then
+         sync
+         find_main
+      fi
+      binmain=`echo $main | sed -e 's/\(.*\)\..*/\1/g'`
+      echo "BUILD $main" >> $dir/acats.log
+      EXTERNAL_OBJECTS=""
+      case $i in
+        cxb30*) EXTERNAL_OBJECTS="$dir/support/cxb30040.o $dir/support/cxb30060.o $dir/support/cxb30130.o $dir/support/cxb30131.o";;
+        ca1020e) rm -f ca1020e_func1.adb ca1020e_func2.adb ca1020e_proc1.adb ca1020e_proc2.adb > /dev/null 2>&1;;
+        ca14028) rm -f ca14028_func2.ads ca14028_func3.ads ca14028_proc1.ads ca14028_proc3.ads > /dev/null 2>&1;;
+        cxh1001) extraflags="-a -f"; echo "pragma Normalize_Scalars;" > gnat.adc
+      esac
+      if [ "$main" = "" ]; then
+         disinform
+         display "FAIL:	$i"
+         failed="${failed}${i} "
+         clean_dir
+         continue
+      fi
+
+      target_gnatmake $extraflags -I$dir/support $main >> $dir/acats.log 2>&1
+      if [ $? -ne 0 ]; then
+         disinform
+         display "FAIL:	$i"
+         failed="${failed}${i} "
+         clean_dir
+         continue
+      fi
+      echo $chapter/$i/$binmain >> $dir/transfer.lst
+      echo "$binmain \\" >> $dir/execute.sh
+      $STRIP $binmain
+      disinform
+   done
+done
+echo '"' >> $dir/execute.sh
+echo "cycle" >> $dir/execute.sh
+
+sync
+display "Transfer files to remote device: root@tablet:$tabtarget/"
+cd $dir/tests
+cat $dir/transfer.lst | xargs tar --strip-components=2 -czf - |  \
+  target_cmd "tar -C $tabtarget -xzf -"
+cd $dir
+tar -czf - execute.sh | target_cmd "tar -C $tabtarget -xzf -"
+target_cmd "cd $tabtarget; sh execute.sh"
+rm -rf $dir/logs $dir/remote.logs.tar.gz
+/usr/bin/scp -q root@tablet:$tabtarget/remote.logs.tar.gz $dir/
+tar -xzf $dir/remote.logs.tar.gz
+
+countdown=`wc -l < $dir/transfer.lst`
+glob_countn=${countdown}
+for i in `cat $dir/transfer.lst`; do
+  split_testid $i
+  if [ "$section" != "$savedsect" ]; then
+   display Running chapter $section ...
+  fi
+  savedsect=$section
+
+  #inform $countdown $TN
+  countdown=`expr $countdown - 1`
+  proglog="$dir/logs/${prog}.log"
+  echo "RUN $prog" >> $dir/acats.log
+  if [ ! -f $proglog ]; then
+    echo "LOG NOT FOUND!" >> $proglog
+  fi
+
+  cat $proglog >> $dir/acats.log
+
+  egrep -e '(==== |\+\+\+\+ |\!\!\!\! )' $proglog > /dev/null 2>&1
+  if [ $? -ne 0 ]; then
+     grep 'tasking not implemented' $proglog > /dev/null 2>&1
+
+     if [ $? -ne 0 ]; then
+        display "FAIL:	${TN}"
+        failed="${failed}${TN} "
+     else
+        log "UNSUPPORTED:	${TN}"
+        glob_countn=`expr $glob_countn - 1`
+        glob_countu=`expr $glob_countu + 1`
+     fi
+  else
+     log "PASS:	${TN}"
+     glob_countok=`expr $glob_countok + 1`
+  fi
+  cd $dir/tests/$section/$TN
+  clean_dir
+  #disinform
+done
+
+display "		=== acats Summary ==="
+display "# of expected passes		$glob_countok"
+display "# of unexpected failures	`expr $glob_countn - $glob_countok`"
+
+if [ $glob_countu -ne 0 ]; then
+   display "# of unsupported tests		$glob_countu"
+fi
+
+if [ $glob_countok -ne $glob_countn ]; then
+   display "*** FAILURES: $failed"
+fi
+
+display "$0 completed at `date`"
+
+exit 0
--- gcc/testsuite/gnat.dg/test_raise_from_pure.adb.orig
+++ gcc/testsuite/gnat.dg/test_raise_from_pure.adb
@@ -1,4 +1,4 @@
--- { dg-do run }
+-- { dg-do run { xfail *-*-openbsd* } }
 -- { dg-options "-O2" }
 
 -- This is an optimization test and its failure is only a missed optimization.
--- gcc/testsuite/gnat.dg/unchecked_convert5.adb.orig
+++ gcc/testsuite/gnat.dg/unchecked_convert5.adb
@@ -1,22 +0,0 @@
--- { dg-do run { target hppa*-*-* sparc*-*-* powerpc*-*-* } }
-
-with Unchecked_Conversion;
-
-procedure Unchecked_Convert5 is
-
-  subtype c_1 is string(1..1);
-
-  function int2c1 is  -- { dg-warning "different sizes" }
-    new unchecked_conversion (source => integer, target => c_1);
-
-  c1 : c_1;
-
-begin
-
-  c1 := int2c1(16#12#);
-
-  if c1 (1) /= ASCII.Nul then
-    raise Program_Error;
-  end if;
-
-end;
--- gcc/testsuite/gnat.dg/unchecked_convert6.adb.orig
+++ gcc/testsuite/gnat.dg/unchecked_convert6.adb
@@ -1,22 +0,0 @@
--- { dg-do run { target hppa*-*-* sparc*-*-* powerpc*-*-* } }
-
-with Unchecked_Conversion;
-
-procedure Unchecked_Convert6 is
-
-  subtype c_5 is string(1..5);
-
-  function int2c5 is  -- { dg-warning "different sizes" }
-    new unchecked_conversion (source => integer, target => c_5);
-
-  c5 : c_5;
-
-begin
-
-  c5 := int2c5(16#12#);
-
-  if c5 (4) /= ASCII.DC2 then
-    raise Program_Error;
-  end if;
-
-end;


[FILE:6122:patches/patch-diff-core]
--- gcc/config/darwin.h.orig
+++ gcc/config/darwin.h
@@ -237,7 +237,7 @@
    multiple times on a command line with different arguments each time,
    so put a * after their names so all of them get passed.  */
 #define LINK_SPEC  \
-  "%{static}%{!static:-dynamic} \
+  "%{static}%{!static:-dynamic -rpath @PREFIX@/@GCCAUX@/lib:@LOCALBASE@/lib} \
    %:remove-outfile(-ldl) \
    %:remove-outfile(-lm) \
    %:remove-outfile(-lpthread) \
--- gcc/config/dragonfly.h.orig
+++ gcc/config/dragonfly.h
@@ -84,13 +84,13 @@
    } \
    %{static:-Bstatic} \
   } \
-  %{!static:--hash-style=gnu} \
+  %{!static:--hash-style=gnu --enable-new-dtags -rpath @PREFIX@/@GCCAUX@/lib:@LOCALBASE@/lib} \
   %{symbolic:-Bsymbolic}"
 
 #undef  LINK_SPEC
 #define LINK_SPEC DFBSD_LINK_SPEC
 
-#define DFBSD_DYNAMIC_LINKER "/usr/libexec/ld-elf.so.2"
+#define DFBSD_DYNAMIC_LINKER "/libexec/ld-elf.so.2"
 
 
 /* Use --as-needed -lgcc_s for eh support.  */
--- gcc/config/sol2.h.orig
+++ gcc/config/sol2.h
@@ -421,6 +421,7 @@
    %{static:-dn -Bstatic} \
    %{shared:-G -dy %{!mimpure-text:-z text}} " \
    LINK_LIBGCC_MAPFILE_SPEC LINK_CLEARCAP_SPEC " \
+   %{!static:-R/lib/amd64:@PREFIX@/@GCCAUX@/lib/amd64:@LOCALBASE@/lib} \
    %{symbolic:-Bsymbolic -G -dy -z text} \
    %(link_arch) \
    %{Qy:} %{!Qn:-Qy}"
--- gcc/config/aarch64/aarch64-freebsd.h.orig
+++ gcc/config/aarch64/aarch64-freebsd.h
@@ -40,7 +40,7 @@
     %{shared:-Bshareable %{h*} %{soname*}}                      \
     %{symbolic:-Bsymbolic}                                      \
     %{static:-Bstatic}                                          \
-    %{!static:                                                  \
+    %{!static:--hash-style=gnu --enable-new-dtags -rpath @PREFIX@/@GCCAUX@/lib:@LOCALBASE@/lib \
       %{rdynamic:-export-dynamic}                               \
       %{!shared:-dynamic-linker " FBSD_DYNAMIC_LINKER " }}      \
     -X" SUBTARGET_EXTRA_LINK_SPEC "                             \
@@ -99,4 +99,6 @@
 #undef MCOUNT_NAME
 #define MCOUNT_NAME ".mcount"
 
+/* Static stack checking is supported by means of probes.  */
+#define STACK_CHECK_STATIC_BUILTIN 1
 #endif  /* GCC_AARCH64_FREEBSD_H */
--- gcc/config/i386/freebsd.h.orig
+++ gcc/config/i386/freebsd.h
@@ -88,6 +88,7 @@
         %{rdynamic:-export-dynamic} \
         -dynamic-linker %(fbsd_dynamic_linker) } \
     %{static:-Bstatic}} \
+  %{!static:--hash-style=gnu --enable-new-dtags -rpath @PREFIX@/@GCCAUX@/lib:@LOCALBASE@/lib} \
   %{symbolic:-Bsymbolic}"
 
 /* A C statement to output to the stdio stream FILE an assembler
--- gcc/config/i386/freebsd64.h.orig
+++ gcc/config/i386/freebsd64.h
@@ -41,4 +41,5 @@
         %{rdynamic:-export-dynamic} \
 	-dynamic-linker %(fbsd_dynamic_linker) } \
     %{static:-Bstatic}} \
+  %{!static:--hash-style=gnu -rpath @PREFIX@/@GCCAUX@/lib:@LOCALBASE@/lib} \
   %{symbolic:-Bsymbolic}"
--- gcc/Makefile.in.orig
+++ gcc/Makefile.in
@@ -1225,7 +1225,6 @@
 	insn-emit.o \
 	insn-extract.o \
 	insn-latencytab.o \
-	insn-modes.o \
 	insn-opinit.o \
 	insn-output.o \
 	insn-peep.o \
@@ -1637,6 +1636,7 @@
   $(OBJS-libcommon-target) main.o c-family/cppspec.o \
   $(COLLECT2_OBJS) $(EXTRA_GCC_OBJS) $(GCOV_OBJS) $(GCOV_DUMP_OBJS) \
   $(GCOV_TOOL_OBJS) $(GENGTYPE_OBJS) gcc-ar.o gcc-nm.o gcc-ranlib.o \
+  insn-modes.o insn-modes-ada.o \
   lto-wrapper.o collect-utils.o
 
 # for anything that is shared use the cc1plus profile data, as that
@@ -1652,6 +1652,11 @@
 ALL_HOST_OBJS = $(ALL_HOST_FRONTEND_OBJS) $(ALL_HOST_BACKEND_OBJS)
 
 BACKEND = libbackend.a main.o libcommon-target.a libcommon.a \
+	insn-modes.o \
+	$(CPPLIB) $(LIBDECNUMBER)
+
+BACKEND2 = libbackend.a main.o libcommon-target.a libcommon.a \
+	insn-modes-ada.o \
 	$(CPPLIB) $(LIBDECNUMBER)
 
 # This is defined to "yes" if Tree checking is enabled, which roughly means
@@ -2362,6 +2367,7 @@
 
 insn-modes.c: s-modes; @true
 insn-modes.h: s-modes-h; @true
+insn-modes-ada.c: s-modes-ada; @true
 insn-modes-inline.h: s-modes-inline-h; @true
 min-insn-modes.c: s-modes-m; @true
 
@@ -2386,6 +2392,12 @@
 	$(SHELL) $(srcdir)/../move-if-change tmp-min-modes.c min-insn-modes.c
 	$(STAMP) s-modes-m
 
+s-modes-ada: s-modes
+	$(shell sed -e 's/: TARGET_96_ROUND_53_LONG_DOUBLE \? &ieee_extended_intel_96_round_53_format //' \
+		< insn-modes.c > tmp-modes-ada.c)
+	$(SHELL) $(srcdir)/../move-if-change tmp-modes-ada.c insn-modes-ada.c
+	$(STAMP) s-modes-ada
+
 insn-preds.c: s-preds; @true
 tm-preds.h: s-preds-h; @true
 tm-constrs.h: s-constrs-h; @true
@@ -3617,6 +3629,9 @@
 	    ( cd $(DESTDIR)$(bindir) && \
 	      $(LN) $(GCC_INSTALL_NAME)$(exeext) $(FULL_DRIVER_NAME) ); \
 	  fi; \
+	  if [ -f gnat1$(exeext) ] ; then \
+	    ( cd $(DESTDIR)$(bindir) && $(LN) $(GCC_INSTALL_NAME)$(exeext) ada$(exeext) ) \
+	  fi; \
 	  if [ ! -f gcc-cross$(exeext) ] \
 	      && [ "$(GCC_INSTALL_NAME)" != "$(GCC_TARGET_INSTALL_NAME)" ]; then \
 	    rm -f $(DESTDIR)$(bindir)/$(target_noncanonical)-gcc-tmp$(exeext); \
--- gcc/config/i386/gnu-user64.h.orig
+++ gcc/config/i386/gnu-user64.h
@@ -57,6 +57,7 @@
                    %{" SPEC_32 ":-m " GNU_USER_LINK_EMULATION32 "} \
                    %{" SPEC_X32 ":-m " GNU_USER_LINK_EMULATIONX32 "} \
   %{shared:-shared} \
+  %{!static:--enable-new-dtags -rpath @PREFIX@/@GCCAUX@/lib64:@LOCALBASE@/lib} \
   %{!shared: \
     %{!static: \
       %{!static-pie: \
--- gcc/gcc.c.orig
+++ gcc/gcc.c
@@ -1513,6 +1513,9 @@
 static const char *const standard_startfile_prefix_2
   = STANDARD_STARTFILE_PREFIX_2;
 
+/* Since we hardset rpath to LOCALBASE, follow with library search path */
+static const char *const standard_raven_prefix = "@LOCALBASE@/lib/";
+
 /* A relative path to be used in finding the location of tools
    relative to the driver.  */
 static const char *const tooldir_base_prefix = TOOLDIR_BASE_PREFIX;
@@ -4695,6 +4698,8 @@
 #endif
       add_prefix (&startfile_prefixes, standard_exec_prefix, "BINUTILS",
 		  PREFIX_PRIORITY_LAST, 1, 0);
+      add_prefix (&startfile_prefixes, standard_raven_prefix, "BINUTILS",
+		  PREFIX_PRIORITY_LAST, 0, 0);
     }
 
   gcc_assert (!IS_ABSOLUTE_PATH (tooldir_base_prefix));


[FILE:8497:patches/patch-diff-cxx]
--- libstdc++-v3/configure.host.orig
+++ libstdc++-v3/configure.host
@@ -261,6 +261,9 @@
   freebsd*)
     os_include_dir="os/bsd/freebsd"
     ;;
+  linux-android*)
+    os_include_dir="os/bionic"
+    ;;
   linux-musl*)
     os_include_dir="os/generic"
     ;;
--- libstdc++-v3/config/os/bionic/ctype_base.h.orig
+++ libstdc++-v3/config/os/bionic/ctype_base.h
@@ -38,6 +38,18 @@
     // Non-standard typedefs.
     typedef const int* 		__to_type;
 
+#ifdef _CTYPE_U
+#define _U _CTYPE_U
+#define _L _CTYPE_L
+#define _D _CTYPE_D
+#define _S _CTYPE_S
+#define _P _CTYPE_P
+#define _C _CTYPE_C
+#define _X _CTYPE_X
+#define _B _CTYPE_B
+#define _N _CTYPE_D
+#endif
+
     // NB: Offsets into ctype<char>::_M_table force a particular size
     // on the mask type. Because of this, we don't use an enum.
     typedef char 		mask;
--- libstdc++-v3/src/c++11/futex.cc.orig
+++ libstdc++-v3/src/c++11/futex.cc
@@ -27,7 +27,11 @@
 #if defined(_GLIBCXX_HAVE_LINUX_FUTEX) && ATOMIC_INT_LOCK_FREE > 1
 #include <chrono>
 #include <climits>
+#ifdef __ANDROID__
+#include <sys/syscall.h>
+#else
 #include <syscall.h>
+#endif
 #include <unistd.h>
 #include <sys/time.h>
 #include <errno.h>
--- libstdc++-v3/include/bits/c++config.orig
+++ libstdc++-v3/include/bits/c++config
@@ -30,6 +30,12 @@
 #ifndef _GLIBCXX_CXX_CONFIG_H
 #define _GLIBCXX_CXX_CONFIG_H 1
 
+#ifdef __clang__
+#define _GTHROW
+#else
+#define _GTHROW throw()
+#endif
+
 // The major release number for the GCC release the C++ library belongs to.
 #define _GLIBCXX_RELEASE
 
--- libstdc++-v3/include/c_global/cstdio.orig
+++ libstdc++-v3/include/c_global/cstdio
@@ -159,16 +159,16 @@
 #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC
   extern "C" int
   (snprintf)(char * __restrict, std::size_t, const char * __restrict, ...)
-  throw ();
+  _GTHROW;
   extern "C" int
   (vfscanf)(FILE * __restrict, const char * __restrict, __gnuc_va_list);
   extern "C" int (vscanf)(const char * __restrict, __gnuc_va_list);
   extern "C" int
   (vsnprintf)(char * __restrict, std::size_t, const char * __restrict,
-	      __gnuc_va_list) throw ();
+	      __gnuc_va_list) _GTHROW;
   extern "C" int
   (vsscanf)(const char * __restrict, const char * __restrict, __gnuc_va_list)
-  throw ();
+  _GTHROW;
 #endif
 
 #if !_GLIBCXX_USE_C99_DYNAMIC
--- libstdc++-v3/include/c_global/cstdlib.orig
+++ libstdc++-v3/include/c_global/cstdlib
@@ -54,15 +54,15 @@
 
 namespace std
 {
-  extern "C" void abort(void) throw () _GLIBCXX_NORETURN;
-  extern "C" int atexit(void (*)(void)) throw ();
-  extern "C" void exit(int) throw () _GLIBCXX_NORETURN;
+  extern "C" void abort(void) _GTHROW _GLIBCXX_NORETURN;
+  extern "C" int atexit(void (*)(void)) _GTHROW;
+  extern "C" void exit(int) _GTHROW _GLIBCXX_NORETURN;
 #if __cplusplus >= 201103L
 # ifdef _GLIBCXX_HAVE_AT_QUICK_EXIT
-  extern "C" int at_quick_exit(void (*)(void)) throw ();
+  extern "C" int at_quick_exit(void (*)(void)) _GTHROW;
 # endif
 # ifdef _GLIBCXX_HAVE_QUICK_EXIT
-  extern "C" void quick_exit(int) throw() _GLIBCXX_NORETURN;
+  extern "C" void quick_exit(int) _GTHROW _GLIBCXX_NORETURN;
 # endif
 #endif
 } // namespace std
@@ -200,7 +200,7 @@
   using ::lldiv_t;
 #endif
 #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC
-  extern "C" void (_Exit)(int) throw () _GLIBCXX_NORETURN;
+  extern "C" void (_Exit)(int) _GTHROW _GLIBCXX_NORETURN;
 #endif
 #if !_GLIBCXX_USE_C99_DYNAMIC
   using ::_Exit;
@@ -217,11 +217,11 @@
 #endif
 
 #if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC
-  extern "C" long long int (atoll)(const char *) throw ();
+  extern "C" long long int (atoll)(const char *) _GTHROW;
   extern "C" long long int
-    (strtoll)(const char * __restrict, char ** __restrict, int) throw ();
+    (strtoll)(const char * __restrict, char ** __restrict, int) _GTHROW;
   extern "C" unsigned long long int
-    (strtoull)(const char * __restrict, char ** __restrict, int) throw ();
+    (strtoull)(const char * __restrict, char ** __restrict, int) _GTHROW;
 #endif
 #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC
   using ::atoll;
--- libstdc++-v3/include/c_global/cwchar.orig
+++ libstdc++-v3/include/c_global/cwchar
@@ -245,16 +245,16 @@
 {
 #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC
   extern "C" long double
-    (wcstold)(const wchar_t * __restrict, wchar_t ** __restrict) throw ();
+    (wcstold)(const wchar_t * __restrict, wchar_t ** __restrict) _GTHROW;
 #endif
 #if !_GLIBCXX_USE_C99_DYNAMIC
   using ::wcstold;
 #endif
 #if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC
   extern "C" long long int
-    (wcstoll)(const wchar_t * __restrict, wchar_t ** __restrict, int) throw ();
+    (wcstoll)(const wchar_t * __restrict, wchar_t ** __restrict, int) _GTHROW;
   extern "C" unsigned long long int
-    (wcstoull)(const wchar_t * __restrict, wchar_t ** __restrict, int) throw ();
+    (wcstoull)(const wchar_t * __restrict, wchar_t ** __restrict, int) _GTHROW;
 #endif
 #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC
   using ::wcstoll;
--- libstdc++-v3/include/c_std/cstdio.orig
+++ libstdc++-v3/include/c_std/cstdio
@@ -157,16 +157,16 @@
 #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC
   extern "C" int
   (snprintf)(char * __restrict, std::size_t, const char * __restrict, ...)
-  throw ();
+  _GTHROW;
   extern "C" int
   (vfscanf)(FILE * __restrict, const char * __restrict, __gnuc_va_list);
   extern "C" int (vscanf)(const char * __restrict, __gnuc_va_list);
   extern "C" int
   (vsnprintf)(char * __restrict, std::size_t, const char * __restrict,
-	      __gnuc_va_list) throw ();
+	      __gnuc_va_list) _GTHROW;
   extern "C" int
   (vsscanf)(const char * __restrict, const char * __restrict, __gnuc_va_list)
-  throw ();
+  _GTHROW;
 #endif
 
 #if !_GLIBCXX_USE_C99_DYNAMIC
--- libstdc++-v3/include/c_std/cstdlib.orig
+++ libstdc++-v3/include/c_std/cstdlib
@@ -54,15 +54,15 @@
 
 namespace std
 {
-  extern "C" void abort(void) throw () _GLIBCXX_NORETURN;
-  extern "C" int atexit(void (*)(void)) throw ();
-  extern "C" void exit(int) throw () _GLIBCXX_NORETURN;
+  extern "C" void abort(void) _GTHROW _GLIBCXX_NORETURN;
+  extern "C" int atexit(void (*)(void)) _GTHROW;
+  extern "C" void exit(int) _GTHROW _GLIBCXX_NORETURN;
 #if __cplusplus >= 201103L
 # ifdef _GLIBCXX_HAVE_AT_QUICK_EXIT
-  extern "C" int at_quick_exit(void (*)(void)) throw ();
+  extern "C" int at_quick_exit(void (*)(void)) _GTHROW;
 # endif
 # ifdef _GLIBCXX_HAVE_QUICK_EXIT
-  extern "C" void quick_exit(int) throw() _GLIBCXX_NORETURN;
+  extern "C" void quick_exit(int) _GTHROW _GLIBCXX_NORETURN;
 # endif
 #endif
 } // namespace
@@ -211,7 +211,7 @@
   using ::lldiv_t;
 #endif
 #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC
-  extern "C" void (_Exit)(int) throw () _GLIBCXX_NORETURN;
+  extern "C" void (_Exit)(int) _GTHROW _GLIBCXX_NORETURN;
 #endif
 #if !_GLIBCXX_USE_C99_DYNAMIC
   using ::_Exit;
@@ -228,11 +228,11 @@
 #endif
 
 #if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC
-  extern "C" long long int (atoll)(const char *) throw ();
+  extern "C" long long int (atoll)(const char *) _GTHROW;
   extern "C" long long int
-    (strtoll)(const char * __restrict, char ** __restrict, int) throw ();
+    (strtoll)(const char * __restrict, char ** __restrict, int) _GTHROW;
   extern "C" unsigned long long int
-    (strtoull)(const char * __restrict, char ** __restrict, int) throw ();
+    (strtoull)(const char * __restrict, char ** __restrict, int) _GTHROW;
 #endif
 #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC
   using ::atoll;
--- libstdc++-v3/include/c_std/cwchar.orig
+++ libstdc++-v3/include/c_std/cwchar
@@ -238,16 +238,16 @@
 {
 #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC
   extern "C" long double
-    (wcstold)(const wchar_t * __restrict, wchar_t ** __restrict) throw ();
+    (wcstold)(const wchar_t * __restrict, wchar_t ** __restrict) _GTHROW;
 #endif
 #if !_GLIBCXX_USE_C99_DYNAMIC
   using ::wcstold;
 #endif
 #if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC
   extern "C" long long int
-    (wcstoll)(const wchar_t * __restrict, wchar_t ** __restrict, int) throw ();
+    (wcstoll)(const wchar_t * __restrict, wchar_t ** __restrict, int) _GTHROW;
   extern "C" unsigned long long int
-    (wcstoull)(const wchar_t * __restrict, wchar_t ** __restrict, int) throw ();
+    (wcstoull)(const wchar_t * __restrict, wchar_t ** __restrict, int) _GTHROW;
 #endif
 #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC
   using ::wcstoll;


[FILE:1612:patches/patch-diff-gcc-testsuite]
--- gcc/testsuite/gcc.dg/format/ext-1.c.orig
+++ gcc/testsuite/gcc.dg/format/ext-1.c
@@ -8,7 +8,7 @@
 #include "format.h"
 
 void
-foo (quad_t q, u_quad_t uq, quad_t *qn, size_t z, size_t *zn, long long int ll,
+foo (quad2_t q, u_quad2_t uq, quad2_t *qn, size_t z, size_t *zn, long long int ll,
      unsigned long long int ull, int i, unsigned int u, double d,
      char *s, void *p, wchar_t *ls, wint_t lc, int *n, long int l)
 {
--- gcc/testsuite/gcc.dg/format/ext-2.c.orig
+++ gcc/testsuite/gcc.dg/format/ext-2.c
@@ -8,7 +8,7 @@
 #include "format.h"
 
 void
-foo (quad_t *qp, u_quad_t *uqp, quad_t *qn, long long int *llp,
+foo (quad2_t *qp, u_quad2_t *uqp, quad2_t *qn, long long int *llp,
      unsigned long long int *ullp, float *fp, char *s, void **pp, wchar_t *ls,
      int *ip, unsigned int *up)
 {
--- gcc/testsuite/gcc.dg/format/format.h.orig
+++ gcc/testsuite/gcc.dg/format/format.h
@@ -71,8 +71,8 @@
 #endif
 
 /* %q formats want a "quad"; GCC considers this to be a long long.  */
-typedef llong quad_t;
-typedef ullong u_quad_t;
+typedef llong quad2_t;
+typedef ullong u_quad2_t;
 
 __extension__ typedef __INTMAX_TYPE__ intmax_t;
 __extension__ typedef __UINTMAX_TYPE__ uintmax_t;
--- gcc/testsuite/gcc.dg/pch/pch.exp.orig
+++ gcc/testsuite/gcc.dg/pch/pch.exp
@@ -44,6 +44,8 @@
 set test "largefile.c"
 set testh "largefile.hs"
 set f [open $test w]
+puts $f "/* { dg-do run { target *-*-solaris* } } */"
+puts $f "/* { dg-error \"dummy\" \"fool dejagnu\" { target { ! *-*-solaris* } 20 } } */"
 puts $f "/* { dg-timeout-factor 4.0 } */"
 set v 0
 for { set v 0 } { $v < 10000 } { incr v } {

