# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		lld
VERSION=		13.0.0
KEYWORDS=		lang sysutils
VARIANTS=		standard
SDESC[standard]=	Linker from the LLVM project
HOMEPAGE=		http://llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/
			http://llvm.org/releases/13.0.0/
DISTFILE[1]=		lld-13.0.0.src.tar.xz:main
DISTFILE[2]=		libunwind-13.0.0.src.tar.xz:main
DF_INDEX=		1 2
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	llvm:single:standard

USES=			cmake c++:single solaris-funcs bdb:static zlib:build

DISTNAME=		lld-13.0.0.src

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
SOL_FUNCTIONS=		strnlen:lib/ReaderWriter/MachO/MachONormalizedFileBinaryUtils.h

VAR_OPSYS[sunos]=	VAR1=socket;nsl;

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/*
	${MV} /tmp/*.so ${LOCALBASE}/lib/
	${MV} /tmp/*.cmake ${LOCALBASE}/lib/cmake/llvm/LLVMExports.cmake
	# remove libunwind header hack
	${RM} -r ${STAGEDIR}${PREFIX}/include/mach-o

pre-configure:
	# prevent lld linking execinfo & tinfo  as a shared library
	# insert link requirement to libdb (version 5) for static libtinfo
	${MV} ${LOCALBASE}/lib/libexecinfo.so /tmp
	${MV} ${LOCALBASE}/lib/libtinfo.so /tmp
	${MV} ${LOCALBASE}/lib/libz.so /tmp
	${MV} ${LOCALBASE}/lib/cmake/llvm/LLVMExports.cmake /tmp
	${SED} -e 's|;tinfo;|;tinfo;db;${VAR1}|' /tmp/LLVMExports.cmake \
		> ${LOCALBASE}/lib/cmake/llvm/LLVMExports.cmake

post-extract:
	# issues with 12.0.0; might not be necessary in future
	${MV} ${WRKDIR}/libunwind-13.0.0.src/include/mach-o \
		${WRKSRC}/include/

[FILE:308:descriptions/desc.single]
LLD is a linker from the LLVM project. That is a drop-in replacement for
system linkers and runs much faster than them. It also provides features
that are useful for toolchain developers.

The linker supports ELF (Unix), PE/COFF (Windows), Mach-O (macOS) and
WebAssembly in descending order of completeness.


[FILE:206:distinfo]
20d1900bcd64ff62047291f6edb6ba2fed34d782675ff68713bf0c2fc9e69386      1472476 lld-13.0.0.src.tar.xz
36f819091216177a61da639244eda67306ccdd904c757d70d135e273278b65e1        99668 libunwind-13.0.0.src.tar.xz


[FILE:872:manifests/plist.single]
bin/
 ld.lld
 ld64.lld
 ld64.lld.darwinnew
 ld64.lld.darwinold
 lld
 lld-link
 wasm-ld
include/lld/Common/
 Args.h
 Arrays.h
 DWARF.h
 Driver.h
 ErrorHandler.h
 Filesystem.h
 LLVM.h
 Memory.h
 Reproduce.h
 Strings.h
 TargetOptionsCommandFlags.h
 Timer.h
 Version.h
include/lld/Core/
 AbsoluteAtom.h
 ArchiveLibraryFile.h
 Atom.h
 DefinedAtom.h
 Error.h
 File.h
 Instrumentation.h
 LinkingContext.h
 Node.h
 Pass.h
 PassManager.h
 Reader.h
 Reference.h
 Resolver.h
 SharedLibraryAtom.h
 SharedLibraryFile.h
 Simple.h
 SymbolTable.h
 UndefinedAtom.h
 Writer.h
include/lld/ReaderWriter/
 MachOLinkingContext.h
 YamlContext.h
lib/
 liblldCOFF.a
 liblldCommon.a
 liblldCore.a
 liblldDriver.a
 liblldELF.a
 liblldMachO.a
 liblldMachO2.a
 liblldMinGW.a
 liblldReaderWriter.a
 liblldWasm.a
 liblldYAML.a
lib/cmake/lld/
 LLDConfig.cmake
 LLDTargets-release.cmake
 LLDTargets.cmake


[FILE:503:patches/patch-MachO_ExportTrie.cpp]
--- MachO/ExportTrie.cpp.orig	2021-09-24 16:18:10 UTC
+++ MachO/ExportTrie.cpp
@@ -34,6 +34,22 @@
 //
 //===----------------------------------------------------------------------===//
 
+#ifdef __sun__
+#include <string.h>
+
+extern "C" {
+  static size_t
+  strnlen(const char *s, size_t maxlen)
+  {
+       size_t len;
+       for (len = 0; len < maxlen; len++, s++) {
+               if (!*s) break;
+       }
+       return (len);
+  }
+}
+#endif
+
 #include "ExportTrie.h"
 #include "Symbols.h"
 


[FILE:521:patches/patch-MachO_InputFiles.cpp]
--- MachO/InputFiles.cpp.orig	2021-09-24 16:18:10 UTC
+++ MachO/InputFiles.cpp
@@ -41,6 +41,22 @@
 //
 //===----------------------------------------------------------------------===//
 
+#ifdef __sun__
+#include <string.h>
+
+extern "C" {
+  static size_t
+  strnlen(const char *s, size_t maxlen)
+  {
+       size_t len;
+       for (len = 0; len < maxlen; len++, s++) {
+               if (!*s) break;
+       }
+       return (len);
+  }
+}
+#endif
+
 #include "InputFiles.h"
 #include "Config.h"
 #include "Driver.h"

