# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-msgpack
VERSION=		0.5.0
KEYWORDS=		python
VARIANTS=		py27 py35 py36
SDESC[py35]=		MessagePack (de)serializer. (PY 35)
SDESC[py36]=		MessagePack (de)serializer. (PY 36)
SDESC[py27]=		MessagePack (de)serializer. (PY 27)
HOMEPAGE=		https://msgpack.org/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/m/msgpack
DISTFILE[1]=		msgpack-0.5.0.tar.gz:main
DF_INDEX=		1
SPKGS[py35]=		single
SPKGS[py36]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY35 PY36
OPTIONS_STANDARD=	none
VOPTS[py35]=		PY27=OFF PY35=ON PY36=OFF
VOPTS[py36]=		PY27=OFF PY35=OFF PY36=ON
VOPTS[py27]=		PY27=ON PY35=OFF PY36=OFF

DISTNAME=		msgpack-0.5.0

LICENSE=		APACHE20:single
LICENSE_SCHEME=		solo
LICENSE_FILE=		APACHE20:{{WRKSRC}}/COPYING

GENERATED=		yes

[PY35].USES_ON=				python:py35

[PY36].USES_ON=				python:py36

[PY27].USES_ON=				python:py27

[FILE:2695:descriptions/desc.single]
======================
MessagePack for Python
======================

.. image:: https://travis-ci.org/msgpack/msgpack-python.svg?branch=master
   :target: https://travis-ci.org/msgpack/msgpack-python
   :alt: Build Status

.. image:: https://readthedocs.org/projects/msgpack-python/badge/?version=latest
   :target: https://msgpack-python.readthedocs.io/en/latest/?badge=latest
   :alt: Documentation Status

What's this
-----------

`MessagePack <https://msgpack.org/>`_ is an efficient binary serialization format.
It lets you exchange data among multiple languages like JSON.
But it's faster and smaller.
This package provides CPython bindings for reading and writing MessagePack data.

Install
-------

::

   $ pip install msgpack

PyPy
^^^^

msgpack provides a pure Python implementation.  PyPy can use this.

Windows
^^^^^^^

When you can't use a binary distribution, you need to install Visual Studio
or Windows SDK on Windows.
Without extension, using pure Python implementation on CPython runs slowly.

For Python 2.7, `Microsoft Visual C++ Compiler for Python 2.7 <https://www.microsoft.com/en-us/download/details.aspx?id=44266>`_
is recommended solution.

For Python 3.5, `Microsoft Visual Studio 2015 <https://www.visualstudio.com/en-us/products/vs-2015-product-editions.aspx>`_
Community Edition or Express Edition can be used to build extension module.


How to use
----------

One-shot pack & unpack
^^^^^^^^^^^^^^^^^^^^^^

Use ``packb`` for packing and ``unpackb`` for unpacking.
msgpack provides ``dumps`` and ``loads`` as an alias for compatibility with
``json`` and ``pickle``.

``pack`` and ``dump`` packs to a file-like object.
``unpack`` and ``load`` unpacks from a file-like object.

.. code-block:: pycon

   >>> import msgpack
   >>> msgpack.packb([1, 2, 3], use_bin_type=True)
   '\x93\x01\x02\x03'
   >>> msgpack.unpackb(_)
   [1, 2, 3]

``unpack`` unpacks msgpack's array to Python's list, but can also unpack to tuple:

.. code-block:: pycon

   >>> msgpack.unpackb(b'\x93\x01\x02\x03', use_list=False)
   (1, 2, 3)

You should always specify the ``use_list`` keyword argument for backward compatibility.
See performance issues relating to `use_list option`_ below.

Read the docstring for other options.


Streaming unpacking
^^^^^^^^^^^^^^^^^^^

``Unpacker`` is a "streaming unpacker". It unpacks multiple objects from one
stream (or from bytes provided through its ``feed`` method).

.. code-block:: python

   import msgpack
   from io import BytesIO

   buf = BytesIO()
   for i in range(100):
      buf.write(msgpack.packb(range(i), use_bin_type=True))

   buf.seek(0)

   unpacker = msgpack.Unpacker(buf)
   for unpacked in unpacker:
       print(unpacked)


[FILE:99:distinfo]
9ed78ef17937222b0467566487bab1ca1bb28158f66c6528ff3d5aced93ff49d       142054 msgpack-0.5.0.tar.gz

