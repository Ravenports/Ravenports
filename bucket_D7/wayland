# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		wayland
VERSION=		1.23.0
KEYWORDS=		graphics
VARIANTS=		std
SDESC[std]=		Wayland Display Protocol implementation
HOMEPAGE=		https://wayland.freedesktop.org/
CONTACT=		Peeter_Must[karu.pruun@gmail.com]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://gitlab.freedesktop.org/wayland/wayland/-/releases/1.23.0/downloads/
DISTFILE[1]=		wayland-1.23.0.tar.xz:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			dev
			tools

OPTIONS_AVAILABLE=	EPOLLSHIM
OPTIONS_STANDARD=	EPOLLSHIM
OPT_ON[freebsd]=	EPOLLSHIM
OPT_ON[netbsd]=		EPOLLSHIM
OPT_ON[dragonfly]=	EPOLLSHIM
OPT_ON[midnightbsd]=	EPOLLSHIM

ONLY_FOR_OPSYS=		dragonfly freebsd linux midnightbsd netbsd

BUILD_DEPENDS=		libxslt:primary:std
			libffi:dev:std
BUILDRUN_DEPENDS=	libffi:primary:std
EXRUN[tools]=		primary
EXRUN[dev]=		libffi:dev:std

USES=			cpe meson pkgconfig expat
GNOME_COMPONENTS=	libxml2

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		graphics/wayland
MESON_ARGS=		-Ddocumentation=false

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		0.23.0
PLIST_SUB=		EGLSOVERSION=1.23.0
			EGLSOMAJOR=1

[EPOLLSHIM].DESCRIPTION=		Platform depends on libepoll-shim
[EPOLLSHIM].BUILDRUN_DEPENDS_ON=	libepoll-shim:primary:std
[EPOLLSHIM].BUILD_DEPENDS_ON=		libepoll-shim:dev:std

[FILE:131:descriptions/desc.primary]
Wayland is intended as a simpler replacement for X, easier to develop
and maintain. GNOME and KDE are expected to be ported to it.


[FILE:48:descriptions/desc.tools]
This package contains the wayland scanner tool.


[FILE:100:distinfo]
05b3e1574d3e67626b5974f862f36b5b427c7ceeb965cb36a4e6c2d342e45ab2       237900 wayland-1.23.0.tar.xz


[FILE:285:manifests/plist.primary]
lib/
 libwayland-client.so.%%SOMAJOR%%
 libwayland-client.so.%%SOVERSION%%
 libwayland-cursor.so.%%SOMAJOR%%
 libwayland-cursor.so.%%SOVERSION%%
 libwayland-egl.so.%%EGLSOMAJOR%%
 libwayland-egl.so.%%EGLSOVERSION%%
 libwayland-server.so.%%SOMAJOR%%
 libwayland-server.so.%%SOVERSION%%


[FILE:511:manifests/plist.dev]
include/
 wayland-client-core.h
 wayland-client-protocol.h
 wayland-client.h
 wayland-cursor.h
 wayland-egl-backend.h
 wayland-egl-core.h
 wayland-egl.h
 wayland-server-core.h
 wayland-server-protocol.h
 wayland-server.h
 wayland-util.h
 wayland-version.h
lib/
 libwayland-client.so
 libwayland-cursor.so
 libwayland-egl.so
 libwayland-server.so
lib/pkgconfig/
 wayland-client.pc
 wayland-cursor.pc
 wayland-egl-backend.pc
 wayland-egl.pc
 wayland-scanner.pc
 wayland-server.pc
share/aclocal/wayland-scanner.m4


[FILE:81:manifests/plist.tools]
bin/wayland-scanner
share/wayland/
 wayland-scanner.mk
 wayland.dtd
 wayland.xml


[FILE:1306:patches/patch-meson.build]
--- meson.build.orig	2024-05-30 18:59:51 UTC
+++ meson.build
@@ -16,7 +16,7 @@ config_h.set_quoted('PACKAGE', meson.pro
 config_h.set_quoted('PACKAGE_VERSION', meson.project_version())
 
 cc_args = []
-if host_machine.system() not in ['freebsd', 'openbsd']
+if host_machine.system() not in ['freebsd', 'openbsd', 'dragonfly', 'midnightbsd','netbsd']
 	cc_args += ['-D_POSIX_C_SOURCE=200809L']
 endif
 add_project_arguments(cc_args, language: 'c')
@@ -52,7 +52,7 @@ foreach f: have_funcs
 endforeach
 config_h.set10('HAVE_XUCRED_CR_PID', cc.has_member('struct xucred', 'cr_pid', prefix : '#include <sys/ucred.h>'))
 have_broken_msg_cmsg_cloexec = false
-if host_machine.system() == 'freebsd'
+if host_machine.system() in ['freebsd', 'dragonfly']
 	have_broken_msg_cmsg_cloexec = not cc.compiles('''
 #include <sys/param.h> /* To get __FreeBSD_version. */
 #if __FreeBSD_version < 1300502 || \
@@ -69,7 +69,7 @@ endif
 config_h.set10('HAVE_BROKEN_MSG_CMSG_CLOEXEC', have_broken_msg_cmsg_cloexec)
 
 if get_option('libraries')
-	if host_machine.system() in ['freebsd', 'openbsd']
+	if host_machine.system() in ['freebsd', 'openbsd', 'dragonfly', 'midnightbsd','netbsd']
 		# When building for FreeBSD, epoll(7) is provided by a userspace
 		# wrapper around kqueue(2).
 		epoll_dep = dependency('epoll-shim')


[FILE:1084:patches/patch-src_wayland-os.c]
--- src/wayland-os.c.orig	2024-05-30 18:59:51 UTC
+++ src/wayland-os.c
@@ -42,6 +42,10 @@
 
 #include "wayland-os.h"
 
+#if !defined(SOL_LOCAL)
+#define SOL_LOCAL 0
+#endif
+
 /* used by tests */
 int (*wl_fcntl)(int fildes, int cmd, ...) = fcntl;
 int (*wl_socket)(int domain, int type, int protocol) = socket;
@@ -85,7 +89,7 @@ wl_os_socket_cloexec(int domain, int typ
 	return set_cloexec_or_close(fd);
 }
 
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD__) || defined(__DragonFly__)
 int
 wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid)
 {
@@ -106,6 +110,21 @@ wl_os_socket_peercred(int sockfd, uid_t
 #endif
 	return 0;
 }
+#elif defined(__NetBSD__)
+int
+wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid)
+{
+	socklen_t len;
+	struct sockcred ucred;
+
+	len = sizeof(ucred);
+	if (getsockopt(sockfd, SOL_LOCAL, LOCAL_CREDS, &ucred, &len) < 0)
+		return -1;
+	*uid = ucred.sc_uid;
+	*gid = ucred.sc_gid;
+	*pid = 0;
+	return 0;
+}
 #elif defined(SO_PEERCRED)
 int
 wl_os_socket_peercred(int sockfd, uid_t *uid, gid_t *gid, pid_t *pid)

