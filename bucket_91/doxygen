# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		doxygen
VERSION=		1.9.6
KEYWORDS=		devel textproc
VARIANTS=		standard
SDESC[standard]=	Source code documentation generator tool
HOMEPAGE=		https://www.doxygen.nl/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://doxygen.nl/files/
DISTFILE[1]=		doxygen-1.9.6.src.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		git:primary:lite
			xapian-core:dev:standard
			graphviz:dev:standard
BUILDRUN_DEPENDS=	graphviz:primary:standard
			xapian-core:primary:standard

USES=			bison cmake iconv python shebangfix cpe zlib
			perl:build solaris-funcs

LICENSE=		GPLv2:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv2:{{WRKSRC}}/LICENSE
LICENSE_AWK=		TERMS:"DOXYGEN_H"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/src/doxygen.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/doxygen
SOL_FUNCTIONS=		strnlen:src/portable.cpp

CMAKE_ARGS=		-DDOC_INSTALL_DIR:PATH=share/doc/doxygen
			-Dbuild_search:BOOLEAN=true
			-Dbuild_wizard:BOOLEAN=false

post-patch:
	@${REINPLACE_CMD} -e '/PERL_PATH/ s|/usr/bin/perl|${perl_CMD}|' \
		${WRKSRC}/src/config.xml

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/doxy*

[FILE:352:descriptions/desc.single]
Doxygen is a documentation system for C++, C, Java, Objective-C, Python,
IDL (Corba and Microsoft flavors) and to some extent PHP, C#, and D. It
can generate an on-line class browser (in HTML) and/or an off-line
reference manual (in LaTeX/PostScript/PDF) from a set of documented source
files. The documentation is extracted directly from the sources.


[FILE:103:distinfo]
297f8ba484265ed3ebd3ff3fe7734eb349a77e4f95c8be52ed9977f51dea49df      5293513 doxygen-1.9.6.src.tar.gz


[FILE:43:manifests/plist.single]
bin/
 doxygen
 doxyindexer
 doxysearch.cgi


[FILE:1166:patches/patch-filesystem_filesystem.hpp]
--- filesystem/filesystem.hpp.orig	2022-08-11 20:14:32 UTC
+++ filesystem/filesystem.hpp
@@ -56,6 +56,9 @@
 #define GHC_OS_MACOS
 #elif defined(__linux__)
 #define GHC_OS_LINUX
+#elif defined(__sun)
+#define GHC_OS_SUNOS
+#define GHC_NO_DIRENT_D_TYPE
 #if defined(__ANDROID__)
 #define GHC_OS_ANDROID
 #endif
@@ -4486,6 +4489,20 @@ GHC_INLINE void last_write_time(const pa
     if (!::SetFileTime(file.get(), 0, 0, &ft)) {
         ec = detail::make_system_error();
     }
+#elif defined(GHC_OS_SUNOS)
+    struct ::stat fs;
+    if (::stat(p.c_str(), &fs) == 0) {
+        struct ::timeval tv[2];
+        tv[0].tv_sec = fs.st_atim.tv_sec;
+        tv[0].tv_usec = static_cast<int>(fs.st_atim.tv_nsec / 1000);
+        tv[1].tv_sec = std::chrono::duration_cast<std::chrono::seconds>(d).count();
+        tv[1].tv_usec = static_cast<int>(std::chrono::duration_cast<std::chrono::microseconds>(d).count() % 1000000);
+        if (::utimes(p.c_str(), tv) == 0) {
+            return;
+        }
+    }
+    ec = detail::make_system_error();
+    return;
 #elif defined(GHC_OS_MACOS)
 #ifdef __MAC_OS_X_VERSION_MIN_REQUIRED
 #if __MAC_OS_X_VERSION_MIN_REQUIRED < 101300

