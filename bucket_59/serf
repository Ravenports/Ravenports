# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		serf
VERSION=		1.3.9
REVISION=		2
KEYWORDS=		net www
VARIANTS=		standard
SDESC[standard]=	High-performance asynchronous HTTP client library
HOMEPAGE=		https://serf.apache.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		APACHE/serf
DISTFILE[1]=		serf-1.3.9.tar.bz2:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	apr-util:single:standard
			gdbm:primary:standard

USES=			scons ssl:openssl11 cpe zlib expat iconv

LICENSE=		APACHE20:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE
LICENSE_AWK=		TERMS:"SERF_H"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/serf.h
LICENSE_SCHEME=		solo

CPE_VENDOR=		serf_project
FPC_EQUIVALENT=		www/serf

MAKE_ARGS=		APR={{LOCALBASE}}/bin/apr-1-config
			APU={{LOCALBASE}}/bin/apu-1-config
			OPENSSL={{OPENSSLBASE}}
			CFLAGS="{{CFLAGS}}"

INSTALL_REQ_TOOLCHAIN=	yes
PLIST_SUB=		SOVERSION=1.3.0
			SOMAJOR=1

VAR_OPSYS[sunos]=	CFLAGS=-D__EXTENSIONS__
			CFLAGS=-I{{LOCALBASE}}/include/bsd

post-patch:
	${REINPLACE_CMD} -E \
		-e '/^Requires.private/s/(libssl|libcrypto)//g' \
		-e '/^Libs.private/s|$$| -L${OPENSSLLIB} -lssl -lcrypto|' \
		${WRKSRC}/build/serf.pc.in

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libserf-1.so

[FILE:467:descriptions/desc.single]
The serf library is a high performance C-based HTTP client library built
upon the Apache Portable Runtime (APR) library. It is permissively
licensed under the Apache License, v2.

Key features:
 * multiplexed, asynchronous connections
 * SSL/TLS support
 * full HTTP pipelining
 * multiple authentication modes (Basic, Digest, Kerberos/NTLM)
 * zero-copy support for increased throughput

Serf is the default client library of Apache Subversion and
Apache OpenOffice


[FILE:97:distinfo]
549c2d21c577a8a9c0450facb5cca809f26591f048e466552240947bdf7a87cc       145132 serf-1.3.9.tar.bz2


[FILE:175:manifests/plist.single]
include/serf-1/
 serf.h
 serf_bucket_types.h
 serf_bucket_util.h
lib/
 libserf-1.a
 libserf-1.so
 libserf-1.so.%%SOMAJOR%%
 libserf-1.so.%%SOVERSION%%
lib/pkgconfig/serf-1.pc


[FILE:2546:patches/patch-SConstruct]
--- SConstruct.orig	2015-09-17 12:46:24 UTC
+++ SConstruct
@@ -74,6 +74,9 @@ else:
 
 opts = Variables(files=[SAVED_CONFIG])
 opts.AddVariables(
+  RawListVariable('DESTDIR',
+               'Required *dummy*, without scons will stop with "Unknown variables: DESTDIR"',
+                None),
   PathVariable('PREFIX',
                'Directory to install under',
                default_prefix,
@@ -153,6 +156,7 @@ if sys.platform == 'win32':
     )
 
 env = Environment(variables=opts,
+                  ENV = os.environ,
                   tools=('default', 'textfile',),
                   CPPPATH=['.', ],
                   )
@@ -166,7 +170,7 @@ env.Append(BUILDERS = {
 match = re.search('SERF_MAJOR_VERSION ([0-9]+).*'
                   'SERF_MINOR_VERSION ([0-9]+).*'
                   'SERF_PATCH_VERSION ([0-9]+)',
-                  env.File('serf.h').get_contents(),
+                  env.File('serf.h').get_contents().decode('utf-8'),
                   re.DOTALL)
 MAJOR, MINOR, PATCH = [int(x) for x in match.groups()]
 env.Append(MAJOR=str(MAJOR))
@@ -183,7 +187,7 @@ CALLOUT_OKAY = not (env.GetOption('clean
 
 unknown = opts.UnknownVariables()
 if unknown:
-  print 'Warning: Used unknown variables:', ', '.join(unknown.keys())
+  print ('Warning: Used unknown variables:', ', '.join(unknown.keys()))
 
 apr = str(env['APR'])
 apu = str(env['APU'])
@@ -215,8 +219,7 @@ incdir = '$PREFIX/include/serf-$MAJOR'
 # Unfortunately we can't set the .dylib compatibility_version option separately
 # from current_version, so don't use the PATCH level to avoid that build and
 # runtime patch levels have to be identical.
-if sys.platform != 'sunos5':
-  env['SHLIBVERSION'] = '%d.%d.%d' % (MAJOR, MINOR, 0)
+env['SHLIBVERSION'] = '%d.%d.%d' % (MAJOR, MINOR, 0)
 
 LIBNAME = 'libserf-%d' % (MAJOR,)
 if sys.platform != 'win32':
@@ -364,8 +367,8 @@ else:
   ### there is probably a better way to run/capture output.
   ### env.ParseConfig() may be handy for getting this stuff into the build
   if CALLOUT_OKAY:
-    apr_libs = os.popen(env.subst('$APR --link-libtool --libs')).read().strip()
-    apu_libs = os.popen(env.subst('$APU --link-libtool --libs')).read().strip()
+    apr_libs = os.popen(env.subst('$APR --libs')).read().strip()
+    apu_libs = os.popen(env.subst('$APU --libs')).read().strip()
   else:
     apr_libs = ''
     apu_libs = ''
@@ -406,6 +409,8 @@ pkgconfig = env.Textfile('serf-%d.pc' %
 
 env.Default(lib_static, lib_shared, pkgconfig)
 
+#print env.Dump()
+
 if CALLOUT_OKAY:
   conf = Configure(env)
 


[FILE:408:patches/patch-buckets_ssl__buckets.c]
--- buckets/ssl_buckets.c.orig	2016-06-30 15:45:07 UTC
+++ buckets/ssl_buckets.c
@@ -52,7 +52,7 @@
 #define APR_ARRAY_PUSH(ary,type) (*((type *)apr_array_push(ary)))
 #endif
 
-#if defined(OPENSSL_VERSION_NUMBER) && OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if defined(OPENSSL_VERSION_NUMBER) && OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 #define USE_OPENSSL_1_1_API
 #endif
 


[FILE:55:files/special.mk]
INSTALL_TARGET=		install --install-sandbox=${STAGEDIR}

