# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pyaml
VERSION=		23.12.0
KEYWORDS=		python
VARIANTS=		v11 v12
SDESC[v11]=		Produce readable YAML-serialized data (3.11)
SDESC[v12]=		Produce readable YAML-serialized data (3.12)
HOMEPAGE=		https://github.com/mk-fg/pretty-yaml
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/25/ec/8aaf0d127751f84d8b10395fe47def9ac3552990b70abffdd92714836d39
DISTFILE[1]=		pyaml-23.12.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v11]=		single
SPKGS[v12]=		single

OPTIONS_AVAILABLE=	PY311 PY312
OPTIONS_STANDARD=	none
VOPTS[v11]=		PY311=ON PY312=OFF
VOPTS[v12]=		PY311=OFF PY312=ON

DISTNAME=		pyaml-23.12.0.dist-info

GENERATED=		yes

[PY311].RUN_DEPENDS_ON=			python-PyYAML:single:v11
[PY311].USES_ON=			python:v11,wheel

[PY312].RUN_DEPENDS_ON=			python-PyYAML:single:v12
[PY312].USES_ON=			python:v12,wheel

[FILE:2896:descriptions/desc.single]
pretty-yaml (or pyaml)
======================

PyYAML_-based python module to produce a bit more pretty and human-readable
YAML-serialized data.

This module is for serialization only, see `ruamel.yaml`_ module for
literate
YAML parsing (keeping track of comments, spacing, line/column numbers of
values, etc).

(side-note: to dump stuff parsed by ruamel.yaml with this module, use only
``YAML(typ='safe')`` there)

It's a small module, and for projects that only need part of its
functionality,
I'd recommend copy-pasting that in, instead of adding janky dependency.

.. _PyYAML: http://pyyaml.org/
.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/

.. contents::
  :backlinks: none

Repository URLs:

- https://github.com/mk-fg/pretty-yaml
- https://codeberg.org/mk-fg/pretty-yaml
- https://fraggod.net/code/git/pretty-yaml

Warning
-------

Prime goal of this module is to produce human-readable output that can be
easily diff'ed, manipulated and re-used, but maybe with occasional issues.

So please do not rely on the thing to produce output that can always be
deserialized exactly to what was exported, at least - use PyYAML directly
for that (but maybe with options from the next section).

What this module does and why
-----------------------------

YAML is generally nice and easy format to read *if* it was written by
humans.

PyYAML can a do fairly decent job of making stuff readable, and the best
combination of parameters for such output that I've seen so far is probably
this one::

  >>> m = [123, 45.67, {1: None, 2: False}, 'some text']
  >>> data = dict(a='asldnsa\nasldpáknsa\n', b='whatever text', ma=m,
mb=m)
  >>> yaml.safe_dump( data, sys.stdout,
    width=100, allow_unicode=True, default_flow_style=False )
  a: 'asldnsa

    asldpáknsa

    '
  b: whatever text
  ma: &id001
  - 123
  - 45.67
  - 1: null
    2: false
  - some text
  mb: *id001

pyaml (this module) tries to improve on that a bit, with the following
tweaks:

* Most human-friendly representation options in PyYAML (that I know of)
  are used as defaults - unicode, flow-style, width=100 (old default is
80).

* Dump "null" values as empty values, if possible, which have the same
meaning
  but reduce visual clutter and are easier to edit.

* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, enums, dataclasses,
etc
  are represented as their safe YAML-compatible base (like int, list or
mapping),
  with mappings key-sorted by default for more diff-friendly output.

* Use shorter and simplier yes/no for booleans.

* List items get indented, as they should be.

* Attempt is made to pick more readable string representation styles,
depending
  on the value, e.g.::

    >>> yaml.safe_dump(cert, sys.stdout)
    cert: '-----BEGIN CERTIFICATE-----

      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD

      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y


[FILE:109:distinfo]
90407d74c95a55d9b41d3860fcc1759640444d2795df748a328d077bc4f58393        23218 pyaml-23.12.0-py3-none-any.whl

