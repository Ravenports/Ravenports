# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-redis
VERSION=		2.10.6
KEYWORDS=		python
VARIANTS=		py27 py36 py37
SDESC[py36]=		Python client for Redis key-value store (PY 36)
SDESC[py37]=		Python client for Redis key-value store (PY 37)
SDESC[py27]=		Python client for Redis key-value store (PY 27)
HOMEPAGE=		https://github.com/andymccurdy/redis-py
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/r/redis
DISTFILE[1]=		redis-2.10.6.tar.gz:main
DF_INDEX=		1
SPKGS[py36]=		single
SPKGS[py37]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY36 PY37
OPTIONS_STANDARD=	none
VOPTS[py36]=		PY27=OFF PY36=ON PY37=OFF
VOPTS[py37]=		PY27=OFF PY36=OFF PY37=ON
VOPTS[py27]=		PY27=ON PY36=OFF PY37=OFF

DISTNAME=		redis-2.10.6

GENERATED=		yes

[PY36].USES_ON=				python:py36

[PY37].USES_ON=				python:py37

[PY27].USES_ON=				python:py27

[FILE:3650:descriptions/desc.single]
redis-py
========

The Python interface to the Redis key-value store.

.. image::
https://secure.travis-ci.org/andymccurdy/redis-py.png?branch=master
        :target: http://travis-ci.org/andymccurdy/redis-py

Installation
------------

redis-py requires a running Redis server. See `Redis's quickstart
<http://redis.io/topics/quickstart>`_ for installation instructions.

To install redis-py, simply:

.. code-block:: bash

    $ sudo pip install redis

or alternatively (you really should be using pip though):

.. code-block:: bash

    $ sudo easy_install redis

or from source:

.. code-block:: bash

    $ sudo python setup.py install


Getting Started
---------------

.. code-block:: pycon

    >>> import redis
    >>> r = redis.StrictRedis(host='localhost', port=6379, db=0)
    >>> r.set('foo', 'bar')
    True
    >>> r.get('foo')
    'bar'

API Reference
-------------

The `official Redis command documentation <http://redis.io/commands>`_
does a
great job of explaining each command in detail. redis-py exposes two client
classes that implement these commands. The StrictRedis class attempts to
adhere
to the official command syntax. There are a few exceptions:

* **SELECT**: Not implemented. See the explanation in the Thread Safety
section
  below.
* **DEL**: 'del' is a reserved keyword in the Python syntax. Therefore
redis-py
  uses 'delete' instead.
* **CONFIG GET|SET**: These are implemented separately as config_get or
config_set.
* **MULTI/EXEC**: These are implemented as part of the Pipeline class. The
  pipeline is wrapped with the MULTI and EXEC statements by default when it
  is executed, which can be disabled by specifying transaction=False.
  See more about Pipelines below.
* **SUBSCRIBE/LISTEN**: Similar to pipelines, PubSub is implemented as a
separate
  class as it places the underlying connection in a state where it can't
  execute non-pubsub commands. Calling the pubsub method from the Redis
client
  will return a PubSub instance where you can subscribe to channels and
listen
  for messages. You can only call PUBLISH from the Redis client (see
  `this comment on issue #151

<https://github.com/andymccurdy/redis-py/issues/151#issuecomment-1545015>`_
  for details).
* **SCAN/SSCAN/HSCAN/ZSCAN**: The \*SCAN commands are implemented as they
  exist in the Redis documentation. In addition, each command has an
equivilant
  iterator method. These are purely for convenience so the user doesn't
have
  to keep track of the cursor while iterating. Use the
  scan_iter/sscan_iter/hscan_iter/zscan_iter methods for this behavior.

In addition to the changes above, the Redis class, a subclass of
StrictRedis,
overrides several other commands to provide backwards compatibility with
older
versions of redis-py:

* **LREM**: Order of 'num' and 'value' arguments reversed such that 'num'
can
  provide a default value of zero.
* **ZADD**: Redis specifies the 'score' argument before 'value'. These
were swapped
  accidentally when being implemented and not discovered until after people
  were already using it. The Redis class expects \*args in the form of:
  `name1, score1, name2, score2, ...`
* **SETEX**: Order of 'time' and 'value' arguments reversed.


More Detail
-----------

Connection Pools
^^^^^^^^^^^^^^^^

Behind the scenes, redis-py uses a connection pool to manage connections to
a Redis server. By default, each Redis instance you create will in turn
create
its own connection pool. You can override this behavior and use an existing
connection pool by passing an already created connection pool instance to
the
connection_pool argument of the Redis class. You may choose to do this in
order


[FILE:98:distinfo]
a22ca993cea2962dbb588f9f30d0015ac4afcc45bee27d3978c0dbe9e97c6c0f        97299 redis-2.10.6.tar.gz

