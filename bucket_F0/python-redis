# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-redis
VERSION=		4.3.0
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Redis database and key-value store client (3.10)
SDESC[py39]=		Redis database and key-value store client (3.9)
HOMEPAGE=		https://github.com/redis/redis-py
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/8d/c6/15e9d765159fa88a30aaff4b89e4b5bb6a3e6f27558b444a05044844d11b
DISTFILE[1]=		redis-4.3.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		redis-4.3.0.dist-info

GENERATED=		yes

[PY39].RUN_DEPENDS_ON=			python-Deprecated:single:py39
					python-packaging:single:py39
					python-async-timeout:single:py39
[PY39].USES_ON=				python:py39,wheel

[PY310].RUN_DEPENDS_ON=			python-Deprecated:single:py310
					python-packaging:single:py310
					python-async-timeout:single:py310
[PY310].USES_ON=			python:py310,wheel

[FILE:2524:descriptions/desc.single]
# redis-py

The Python interface to the Redis key-value store.

[CI]
[docs]
[MIT licensed]
[pypi]
[codecov]
[Total alerts]

[Installation] | [Contributing] |  [Getting Started] | [Connecting To
Redis]

---------------------------------------------

## Python Notice

redis-py 4.2.x will be the last generation of redis-py to support python
3.6 as it has been [End of Life'd].  Async support was introduced in
redis-py 4.2.x thanks to [aioredis], which necessitates this change. We
will continue to maintain 3.6 support as long as possible - but the plan is
for redis-py version 5+ to offically remove 3.6.

---------------------------

## Installation

redis-py requires a running Redis server. See [Redis's
quickstart] for installation
instructions.

redis-py can be installed using pip similar to other
Python packages. Do not use sudo with pip.
It is usually good to work in a
[virtualenv] or
[venv] to avoid conflicts
with other package managers and Python projects. For a quick
introduction see [Python Virtual Environments in Five
Minutes].

To install redis-py, simply:

``` bash
$ pip install redis
```

or from source:

``` bash
$ python setup.py install
```

View the current documentation [here].

## Contributing

Want to contribute a feature, bug fix, or report an issue? Check out
our [guide to
contributing].

## Getting Started

redis-py supports Python 3.7+.

``` pycon
>>> import redis
>>> r = redis.Redis(host='localhost', port=6379, db=0)
>>> r.set('foo', 'bar')
True
>>> r.get('foo')
b'bar'
```

By default, all responses are returned as bytes in Python
3.

If **all** string responses from a client should be decoded, the user
can specify *decode_responses=True* in
```Redis.__init__```. In this case, any Redis command that
returns a string type will be decoded with the encoding
specified.

The default encoding is utf-8, but this can be customized by specifiying
the
encoding argument for the redis.Redis class.
The encoding will be used to automatically encode any
strings passed to commands, such as key names and values.

--------------------

### MSET, MSETNX and ZADD

These commands all accept a mapping of key/value pairs. In redis-py 2.X
this mapping could be specified as **args* or as `**kwargs`. Both of
these styles caused issues when Redis introduced optional flags to ZADD.
Relying on `*args` caused issues with the optional argument order,
especially in Python 2.7. Relying on `**kwargs` caused potential
collision issues of user keys with the argument names in the method
signature.


[FILE:107:distinfo]
0b1cc61af1389c6cd27a428a5425d81fbe11961bc2a4317b9c94909aed91b501       241175 redis-4.3.0-py3-none-any.whl

