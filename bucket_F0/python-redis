# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-redis
VERSION=		4.4.2
KEYWORDS=		python
VARIANTS=		py310 py311
SDESC[py310]=		Redis database and key-value store client (3.10)
SDESC[py311]=		Redis database and key-value store client (3.11)
HOMEPAGE=		https://github.com/redis/redis-py
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/73/0f/cce821f7cd8463bf2f133029a13c0abb614cb6fe24188e2a5d1332758017
DISTFILE[1]=		redis-4.4.2-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py311]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[py311]=		PY310=OFF PY311=ON

DISTNAME=		redis-4.4.2.dist-info

GENERATED=		yes

[PY310].RUN_DEPENDS_ON=			python-async-timeout:single:py310
[PY310].USES_ON=			python:py310,wheel

[PY311].RUN_DEPENDS_ON=			python-async-timeout:single:py311
[PY311].USES_ON=			python:py311,wheel

[FILE:2889:descriptions/desc.single]
# redis-py

The Python interface to the Redis key-value store.

[CI]
[docs]
[MIT licensed]
[pypi]
[![pre-release]](https://github.com/redis/redis-py/releases)
[codecov]

[Installation] |  [Usage] | [Advanced Topics] | [Contributing]

---------------------------------------------

## Python Notice

redis-py 4.3.x will be the last generation of redis-py to support python
3.6 as it has been [End of Life'd].  Async support was introduced in
redis-py 4.2.x thanks to [aioredis], which necessitates this change. We
will continue to maintain 3.6 support as long as possible - but the plan is
for redis-py version 4.4+ to officially remove 3.6.

---------------------------

## Installation

Start a redis via docker:

``` bash
docker run -p 6379:6379 -it redis/redis-stack:latest
```

To install redis-py, simply:

``` bash
$ pip install redis
```

For faster performance, install redis with hiredis support, this provides a
compiled response parser, and *for most cases* requires zero code changes.
By default, if hiredis >= 1.0 is available, redis-py will attempt to use it
for response parsing.

``` bash
$ pip install redis[hiredis]
```

Looking for a high-level library to handle object mapping? See
[redis-om-python]!

## Usage

### Basic Example

``` python
>>> import redis
>>> r = redis.Redis(host='localhost', port=6379, db=0)
>>> r.set('foo', 'bar')
True
>>> r.get('foo')
b'bar'
```

The above code connects to localhost on port 6379, sets a value in Redis,
and retrieves it. All responses are returned as bytes in Python, to receive
decoded strings, set *decode_responses=True*.  For this, and more
connection options, see [these examples].

### Connection Pools

By default, redis-py uses a connection pool to manage connections. Each
instance of a Redis class receives its own connection pool. You can however
define your own [redis.ConnectionPool].

``` python
>>> pool = redis.ConnectionPool(host='localhost', port=6379, db=0)
>>> r = redis.Redis(connection_pool=pool)
```

Alternatively, you might want to look at [Async connections], or [Cluster
connections], or even [Async Cluster connections].

### Redis Commands

There is built-in support for all of the [out-of-the-box Redis commands].
They are exposed using the raw Redis command names (`HSET`, `HGETALL`,
etc.) except where a word (i.e. del) is reserved by the language. The
complete set of commands can be found [here], or [the documentation].

## Advanced Topics

The [official Redis command documentation]
does a great job of explaining each command in detail. redis-py attempts
to adhere to the official command syntax. There are a few exceptions:

-   **MULTI/EXEC**: These are implemented as part of the Pipeline class.
    The pipeline is wrapped with the MULTI and EXEC statements by
    default when it is executed, which can be disabled by specifying
    transaction=False. See more about Pipelines below.


[FILE:107:distinfo]
e6206448e2f8a432871d07d432c13ed6c2abcf6b74edb436c99752b1371be387       237804 redis-4.4.2-py3-none-any.whl

