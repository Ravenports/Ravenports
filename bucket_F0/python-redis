# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-redis
VERSION=		3.3.11
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Python client for Redis key-value store (PY 37)
SDESC[py38]=		Python client for Redis key-value store (PY 38)
HOMEPAGE=		https://github.com/andymccurdy/redis-py
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/r/redis
DISTFILE[1]=		redis-3.3.11.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		redis-3.3.11

GENERATED=		yes

[PY37].USES_ON=				python:py37

[PY38].USES_ON=				python:py38

[FILE:3603:descriptions/desc.single]
redis-py
========

The Python interface to the Redis key-value store.

.. image::
https://secure.travis-ci.org/andymccurdy/redis-py.svg?branch=master
        :target: https://travis-ci.org/andymccurdy/redis-py
.. image::
https://readthedocs.org/projects/redis-py/badge/?version=latest&style=flat
        :target: https://redis-py.readthedocs.io/en/latest/
.. image:: https://badge.fury.io/py/redis.svg
        :target: https://pypi.org/project/redis/
.. image::
https://codecov.io/gh/andymccurdy/redis-py/branch/master/graph/badge.svg
  :target: https://codecov.io/gh/andymccurdy/redis-py

Installation
------------

redis-py requires a running Redis server. See `Redis's quickstart
<https://redis.io/topics/quickstart>`_ for installation instructions.

redis-py can be installed using `pip` similar to other Python packages. Do
not use `sudo`
with `pip`. It is usually good to work in a
`virtualenv <https://virtualenv.pypa.io/en/latest/>`_ or
`venv <https://docs.python.org/3/library/venv.html>`_ to avoid conflicts
with other package
managers and Python projects. For a quick introduction see
`Python Virtual Environments in Five Minutes <https://bit.ly/py-env>`_.

To install redis-py, simply:

.. code-block:: bash

    $ pip install redis

or from source:

.. code-block:: bash

    $ python setup.py install


Getting Started
---------------

.. code-block:: pycon

    >>> import redis
    >>> r = redis.Redis(host='localhost', port=6379, db=0)
    >>> r.set('foo', 'bar')
    True
    >>> r.get('foo')
    'bar'

By default, all responses are returned as `bytes` in Python 3 and `str` in
Python 2. The user is responsible for decoding to Python 3 strings or
Python 2
unicode objects.

If **all** string responses from a client should be decoded, the user can
specify `decode_responses=True` to `Redis.__init__`. In this case, any
Redis command that returns a string type will be decoded with the
`encoding`
specified.


Upgrading from redis-py 2.X to 3.0
----------------------------------

redis-py 3.0 introduces many new features but required a number of
backwards
incompatible changes to be made in the process. This section attempts to
provide an upgrade path for users migrating from 2.X to 3.0.


Python Version Support
^^^^^^^^^^^^^^^^^^^^^^

redis-py 3.0 now supports Python 2.7 and Python 3.4+. Python 2.6 and 3.3
support has been dropped.


Client Classes: Redis and StrictRedis
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

redis-py 3.0 drops support for the legacy "Redis" client class.
"StrictRedis"
has been renamed to "Redis" and an alias named "StrictRedis" is provided so
that users previously using "StrictRedis" can continue to run unchanged.

The 2.X "Redis" class provided alternative implementations of a few
commands.
This confused users (rightfully so) and caused a number of support issues.
To
make things easier going forward, it was decided to drop support for these
alternate implementations and instead focus on a single client class.

2.X users that are already using StrictRedis don't have to change the class
name. StrictRedis will continue to work for the forseeable future.

2.X users that are using the Redis class will have to make changes if they
use any of the following commands:

* SETEX: The argument order has changed. The new order is (name, time,
value).
* LREM: The argument order has changed. The new order is (name, num,
value).
* TTL and PTTL: The return value is now always an int and matches the
  official Redis command (>0 indicates the timeout, -1 indicates that the
key
  exists but that it has no expire time set, -2 indicates that the key does


[FILE:98:distinfo]
8d0fc278d3f5e1249967cba2eb4a5632d19e45ce5c09442b8422d15ee2c22cc2       131072 redis-3.3.11.tar.gz

