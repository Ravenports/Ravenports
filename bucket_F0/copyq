# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		copyq
VERSION=		10.0.0
REVISION=		1
KEYWORDS=		deskutils
VARIANTS=		std
SDESC[std]=		Qt6-based clipboard manager
HOMEPAGE=		https://github.com/hluk/CopyQ
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/hluk/CopyQ/releases/download/v10.0.0/
DISTFILE[1]=		CopyQ-10.0.0.tar.gz:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			man
			lang

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		wayland:dev:std
			wayland:tools:std
			libxkbcommon:dev:std
			qt6-qtbase:dev:std
			qt6-qtwayland:dev:std
			qt6-qtdeclarative:dev:std
			qt6-qtsvg:dev:std
			qt6-qttranslations:single:std
			qt6-qttools:dev:std
			kf6-extra-cmake-modules:primary:std
			kf6-knotifications:dev:std
			kf6-kstatusnotifieritem:dev:std
BUILDRUN_DEPENDS=	wayland:primary:std
			libxkbcommon:primary:std
			qt6-qtbase:primary:std
			qt6-qtwayland:primary:std
			qt6-qtdeclarative:primary:std
			qt6-qtsvg:primary:std
			qt6-qttools:primary:std
			kf6-knotifications:primary:std
			kf6-kstatusnotifieritem:primary:std

USES=			cmake pkgconfig
XORG_COMPONENTS=	ice sm x11 xext xfixes xtst

DISTNAME=		Copyq-10.0.0

LICENSE=		GPLv3+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv3+:{{WRKSRC}}/LICENSE
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/src/main.cpp
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		deskutils/copyq

CMAKE_ARGS=		-DWITH_PLUGINS:BOOL=TRUE
			-DWITH_QT6:BOOL=TRUE
			-DCMAKE_PREFIX_PATH={{PREFIX}}/lib/qt6/cmake

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/copyq
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/copyq/plugins/*.so

[FILE:764:descriptions/desc.primary]
CopyQ is an advanced clipboard manager with editing and scripting
features.  It monitors the system clipboard and saves its content
in customized tabs.  Saved clipboard snippets can be later copied
and pasted directly into any application.

Features:
- Store text, HTML, images or any other custom formats
- Quickly browse and filter items in clipboard history
- Sort, create, edit, remove, copy/paste, drag'n'drop items in tabs
- Add notes or tags to items
- System-wide shortcuts with customizable commands
- Paste items with shortcut or from tray or main window
- Fully customizable appearance
- Advanced command-line interface and scripting
- Ignore clipboard copied from some windows or containing some text
- Support for simple Vim-like editor and shortcuts


[FILE:98:distinfo]
cc1ab0b492824d92e6e94b5d30576bcf7ed84b4fa75bd305c7262e0b2ccc7b95      3457419 CopyQ-10.0.0.tar.gz


[FILE:878:manifests/plist.primary]
bin/copyq
lib/copyq/plugins/
 libitemencrypted.so
 libitemfakevim.so
 libitemimage.so
 libitemnotes.so
 libitempinned.so
 libitemsync.so
 libitemtags.so
 libitemtext.so
share/applications/com.github.hluk.copyq.desktop
share/bash-completion/completions/copyq
share/copyq/themes/
 dark.ini
 forest.ini
 items.css
 light.ini
 main_window.css
 main_window_simple.css
 menu.css
 notification.css
 paper.ini
 simple.ini
 solarized-dark.ini
 solarized-light.ini
 tooltip.css
 wine.ini
share/icons/hicolor/128x128/apps/copyq.png
share/icons/hicolor/16x16/apps/copyq.png
share/icons/hicolor/22x22/apps/copyq.png
share/icons/hicolor/24x24/apps/copyq.png
share/icons/hicolor/32x32/apps/copyq.png
share/icons/hicolor/48x48/apps/copyq.png
share/icons/hicolor/64x64/apps/copyq.png
share/icons/hicolor/scalable/apps/
 copyq.svg
 copyq_mask.svg
share/metainfo/com.github.hluk.copyq.appdata.xml


[FILE:23:manifests/plist.man]
share/man/man1/copyq.1


[FILE:428:manifests/plist.lang]
share/copyq/translations/
 copyq_ar.qm
 copyq_cs.qm
 copyq_da.qm
 copyq_de.qm
 copyq_el.qm
 copyq_es.qm
 copyq_fa.qm
 copyq_fi.qm
 copyq_fr.qm
 copyq_he.qm
 copyq_hr.qm
 copyq_hu.qm
 copyq_id.qm
 copyq_it.qm
 copyq_ja.qm
 copyq_ko.qm
 copyq_lt.qm
 copyq_nb.qm
 copyq_nl.qm
 copyq_pl.qm
 copyq_pt_BR.qm
 copyq_pt_PT.qm
 copyq_ru.qm
 copyq_sk.qm
 copyq_sv.qm
 copyq_tr.qm
 copyq_uk.qm
 copyq_zh_CN.qm
 copyq_zh_TW.qm
 copyq_ca.qm


[FILE:1815:patches/patch-001]
From f355f41f8a59f46626470d74a04267e9a24e2312 Mon Sep 17 00:00:00 2001
From: Lukas Holecek <hluk@email.cz>
Date: Mon, 7 Apr 2025 10:39:56 +0200
Subject: [PATCH] Fix dialog() layout and resizing

Fixes #3003
---
 src/scriptable/scriptableproxy.cpp | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

--- src/scriptable/scriptableproxy.cpp.orig
+++ src/scriptable/scriptableproxy.cpp
@@ -533,7 +533,6 @@ QWidget *createListWidget(const QString &name, const QStringList &items, InputDi
     w->setCurrentIndex(items.indexOf(currentText));
     w->lineEdit()->setText(currentText);
     w->lineEdit()->selectAll();
-    w->setMaximumWidth( pointsToPixels(400, w) );
     installShortcutToCloseDialog(parent, w, Qt::Key_Enter);
     installShortcutToCloseDialog(parent, w, Qt::Key_Return);
 
@@ -2078,10 +2077,10 @@ int ScriptableProxy::inputDialog(const NamedValueList &values)
     InputDialog inputDialog;
     inputDialog.dialog = new QDialog(m_wnd);
     QDialog &dialog = *inputDialog.dialog;
+    dialog.setLayout(new QVBoxLayout(&dialog));
 
     QString dialogTitle;
     QIcon icon;
-    QVBoxLayout layout(&dialog);
     QWidgetList widgets;
     widgets.reserve(values.items.size());
 
@@ -2133,7 +2132,7 @@ int ScriptableProxy::inputDialog(const NamedValueList &values)
                 QDialogButtonBox::Ok | QDialogButtonBox::Cancel, Qt::Horizontal, &dialog);
     QObject::connect( buttons, &QDialogButtonBox::accepted, &dialog, &QDialog::accept );
     QObject::connect( buttons, &QDialogButtonBox::rejected, &dialog, &QDialog::reject );
-    layout.addWidget(buttons);
+    dialog.layout()->addWidget(buttons);
 
     installShortcutToCloseDialog(&dialog, &dialog, Qt::ControlModifier | Qt::Key_Enter);
     installShortcutToCloseDialog(&dialog, &dialog, Qt::ControlModifier | Qt::Key_Return);


[FILE:14491:patches/patch-002]
From f08c0d46a239362c5d3525ef9c3ba943bb00f734 Mon Sep 17 00:00:00 2001
From: Lukas Holecek <hluk@email.cz>
Date: Mon, 7 Apr 2025 11:50:05 +0200
Subject: [PATCH] Fix QChar construction for Qt 6.9

---
 plugins/itemencrypted/itemencrypted.cpp       |  9 +++---
 .../itemfakevim/fakevim/fakevimhandler.cpp    |  2 +-
 plugins/itempinned/itempinned.cpp             |  3 +-
 plugins/itemsync/itemsync.cpp                 |  3 +-
 plugins/itemtags/itemtags.cpp                 |  3 +-
 src/common/globalshortcutcommands.cpp         |  3 +-
 src/common/predefinedcommands.cpp             | 29 ++++++++++---------
 src/gui/commanddialog.cpp                     |  3 +-
 src/gui/fromiconid.h                          |  9 ++++++
 src/gui/iconfactory.cpp                       |  4 +--
 src/gui/iconselectbutton.cpp                  |  4 +--
 src/gui/notificationbasic.cpp                 |  4 +--
 src/scriptable/scriptable.cpp                 |  3 +-
 13 files changed, 48 insertions(+), 31 deletions(-)
 create mode 100644 src/gui/fromiconid.h

--- plugins/itemencrypted/itemencrypted.cpp
+++ plugins/itemencrypted/itemencrypted.cpp
@@ -13,6 +13,7 @@
 #include "common/textdata.h"
 #include "gui/icons.h"
 #include "gui/iconwidget.h"
+#include "gui/fromiconid.h"
 #include "item/serialize.h"
 
 #ifdef HAS_TESTS
@@ -859,7 +860,7 @@ QVector<Command> ItemEncryptedLoader::commands() const
     Command c;
     c.internalId = QStringLiteral("copyq_encrypted_encrypt");
     c.name = ItemEncryptedLoader::tr("Encrypt (needs GnuPG)");
-    c.icon = QString(QChar(IconLock));
+    c.icon = fromIconId(IconLock);
     c.input = "!OUTPUT";
     c.output = mimeEncryptedData;
     c.inMenu = true;
@@ -870,7 +871,7 @@ QVector<Command> ItemEncryptedLoader::commands() const
     c = Command();
     c.internalId = QStringLiteral("copyq_encrypted_decrypt");
     c.name = ItemEncryptedLoader::tr("Decrypt");
-    c.icon = QString(QChar(IconUnlock));
+    c.icon = fromIconId(IconUnlock);
     c.input = mimeEncryptedData;
     c.output = mimeItems;
     c.inMenu = true;
@@ -881,7 +882,7 @@ QVector<Command> ItemEncryptedLoader::commands() const
     c = Command();
     c.internalId = QStringLiteral("copyq_encrypted_decrypt_and_copy");
     c.name = ItemEncryptedLoader::tr("Decrypt and Copy");
-    c.icon = QString(QChar(IconUnlockKeyhole));
+    c.icon = fromIconId(IconUnlockKeyhole);
     c.input = mimeEncryptedData;
     c.inMenu = true;
     c.cmd = "copyq: plugins.itemencrypted.copyEncryptedItems()";
@@ -891,7 +892,7 @@ QVector<Command> ItemEncryptedLoader::commands() const
     c = Command();
     c.internalId = QStringLiteral("copyq_encrypted_decrypt_and_paste");
     c.name = ItemEncryptedLoader::tr("Decrypt and Paste");
-    c.icon = QString(QChar(IconUnlockKeyhole));
+    c.icon = fromIconId(IconUnlockKeyhole);
     c.input = mimeEncryptedData;
     c.inMenu = true;
     c.cmd = "copyq: plugins.itemencrypted.pasteEncryptedItems()";
--- plugins/itemfakevim/fakevim/fakevimhandler.cpp
+++ plugins/itemfakevim/fakevim/fakevimhandler.cpp
@@ -1033,7 +1033,7 @@ QString quoteUnprintable(const QString &ba)
         else if (cc == '\n')
             res += "<CR>";
         else
-            res += QString("\\x%1").arg(c.unicode(), 2, 16, QLatin1Char('0'));
+            res += QString("\\x%1").arg(cc, 2, 16, QLatin1Char('0'));
     }
     return res;
 }
--- plugins/itempinned/itempinned.cpp
+++ plugins/itempinned/itempinned.cpp
@@ -5,6 +5,7 @@
 #include "common/command.h"
 #include "common/contenttype.h"
 #include "common/display.h"
+#include "gui/fromiconid.h"
 
 #ifdef HAS_TESTS
 #   include "tests/itempinnedtests.h"
@@ -32,7 +33,7 @@ bool isPinned(const QModelIndex &index)
 Command dummyPinCommand()
 {
     Command c;
-    c.icon = QString(QChar(IconThumbtack));
+    c.icon = fromIconId(IconThumbtack);
     c.inMenu = true;
     return c;
 }
--- plugins/itemsync/itemsync.cpp
+++ plugins/itemsync/itemsync.cpp
@@ -15,6 +15,7 @@
 #include "gui/icons.h"
 #include "gui/iconfont.h"
 #include "gui/iconwidget.h"
+#include "gui/fromiconid.h"
 #include "item/itemfilter.h"
 
 #ifdef HAS_TESTS
@@ -100,7 +101,7 @@ void writeConfiguration(QIODevice *file, const QStringList &savedFiles)
 
 QString iconFromId(int id)
 {
-    return id != -1 ? QString(QChar(id)) : QString();
+    return id != -1 ? fromIconId(id) : QString();
 }
 
 QPushButton *createBrowseButton()
--- plugins/itemtags/itemtags.cpp
+++ plugins/itemtags/itemtags.cpp
@@ -10,6 +10,7 @@
 #include "common/textdata.h"
 #include "gui/iconfont.h"
 #include "gui/iconselectbutton.h"
+#include "gui/fromiconid.h"
 #include "gui/pixelratio.h"
 #include "item/itemfilter.h"
 
@@ -153,7 +154,7 @@ QString removeTagText()
 Command dummyTagCommand()
 {
     Command c;
-    c.icon = QString(QChar(IconTag));
+    c.icon = fromIconId(IconTag);
     c.inMenu = true;
     return c;
 }
--- src/common/globalshortcutcommands.cpp
+++ src/common/globalshortcutcommands.cpp
@@ -3,6 +3,7 @@
 #include "globalshortcutcommands.h"
 
 #include "common/command.h"
+#include "gui/fromiconid.h"
 
 #include <QCoreApplication>
 #include <QLocale>
@@ -50,7 +51,7 @@ Command createGlobalShortcut(const QString &name, const QString &script, IconId
     c.internalId = internalId;
     c.name = name;
     c.cmd = "copyq: " + script;
-    c.icon = QString(QChar(icon));
+    c.icon = fromIconId(icon);
     c.isGlobalShortcut = true;
     return c;
 }
--- src/common/predefinedcommands.cpp
+++ src/common/predefinedcommands.cpp
@@ -8,6 +8,7 @@
 #include "common/shortcuts.h"
 #include "common/textdata.h"
 #include "gui/icons.h"
+#include "gui/fromiconid.h"
 #include "platform/platformnativeinterface.h"
 
 #include <QCoreApplication>
@@ -38,14 +39,14 @@ QVector<Command> predefinedCommands()
     commands.prepend(Command());
     c = &commands.first();
     c->name = AddCommandDialog::tr("New command");
-    c->icon = QString(QChar(IconFile));
+    c->icon = fromIconId(IconFile);
     c->input = c->output = QString();
     c->wait = c->automatic = c->remove = false;
     c->sep = QLatin1String("\\n");
 
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Ignore items with no or single character");
-    c->icon = QString(QChar(IconCircleExclamation));
+    c->icon = fromIconId(IconCircleExclamation);
     c->cmd  = R"(function hasEmptyOrSingleCharText() {
     if (dataFormats().includes(mimeText)) {
         const text = str(data(mimeText));
@@ -75,7 +76,7 @@ overrideFunction('provideSelection');
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Open in &Browser");
     c->re   = reURL;
-    c->icon = QString(QChar(IconGlobe));
+    c->icon = fromIconId(IconGlobe);
     c->cmd  = QStringLiteral("copyq open %1");
     c->hideWindow = true;
     c->inMenu = true;
@@ -83,7 +84,7 @@ overrideFunction('provideSelection');
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Paste as Plain Text");
     c->input = mimeText;
-    c->icon = QString(QChar(IconPaste));
+    c->icon = fromIconId(IconPaste);
     c->cmd  = QStringLiteral("copyq:") + pasteAsPlainTextScript("input()");
     c->hideWindow = true;
     c->inMenu = true;
@@ -91,7 +92,7 @@ overrideFunction('provideSelection');
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Autoplay videos");
     c->re   = QRegularExpression("^http://.*\\.(mp4|avi|mkv|wmv|flv|ogv)$");
-    c->icon = QString(QChar(IconCirclePlay));
+    c->icon = fromIconId(IconCirclePlay);
     c->cmd  = QStringLiteral("copyq open %1");
     c->automatic = true;
     c->hideWindow = true;
@@ -100,13 +101,13 @@ overrideFunction('provideSelection');
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Copy URL (web address) to other tab");
     c->re   = reURL;
-    c->icon = QString(QChar(IconCopy));
+    c->icon = fromIconId(IconCopy);
     c->tab  = QStringLiteral("&web");
     c->automatic = true;
 
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Create thumbnail (needs ImageMagick)");
-    c->icon = QString(QChar(IconImage));
+    c->icon = fromIconId(IconImage);
     c->cmd  = QStringLiteral("convert - -resize 92x92 png:-");
     c->input = QStringLiteral("image/png");
     c->output = QStringLiteral("image/png");
@@ -115,7 +116,7 @@ overrideFunction('provideSelection');
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Create QR Code from URL (needs qrencode)");
     c->re   = reURL;
-    c->icon = QString(QChar(IconQrcode));
+    c->icon = fromIconId(IconQrcode);
     c->cmd  = QStringLiteral("qrencode -o - -t PNG -s 6");
     c->input = mimeText;
     c->output = QStringLiteral("image/png");
@@ -126,7 +127,7 @@ overrideFunction('provideSelection');
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Add to %1 tab", "%1 is quoted Tasks tab name")
             .arg(todoTabQuoted);
-    c->icon = QString(QChar(IconShare));
+    c->icon = fromIconId(IconShare);
     c->tab  = todoTab;
     c->input = mimeText;
     c->inMenu = true;
@@ -134,7 +135,7 @@ overrideFunction('provideSelection');
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Move to %1 tab", "%1 is quoted Tasks tab name")
             .arg(todoTabQuoted);
-    c->icon = QString(QChar(IconShare));
+    c->icon = fromIconId(IconShare);
     c->tab  = todoTab;
     c->remove = true;
     c->inMenu = true;
@@ -142,7 +143,7 @@ overrideFunction('provideSelection');
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Ignore copied files");
     c->re   = reNotURL;
-    c->icon = QString(QChar(IconCircleExclamation));
+    c->icon = fromIconId(IconCircleExclamation);
     c->input = mimeUriList;
     c->remove = true;
     c->automatic = true;
@@ -151,7 +152,7 @@ overrideFunction('provideSelection');
         c = newCommand(&commands);
         c->name = AddCommandDialog::tr("Ignore *\"Password\"* window");
         c->wndre = QRegularExpression(AddCommandDialog::tr("Password"));
-        c->icon = QString(QChar(IconAsterisk));
+        c->icon = fromIconId(IconAsterisk);
         c->remove = true;
         c->automatic = true;
         c->cmd = QStringLiteral("copyq ignore");
@@ -159,14 +160,14 @@ overrideFunction('provideSelection');
 
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Move to Trash");
-    c->icon = QString(QChar(IconTrash));
+    c->icon = fromIconId(IconTrash);
     c->inMenu = true;
     c->tab  = AddCommandDialog::tr("(trash)");
     c->remove = true;
 
     c = newCommand(&commands);
     c->name = AddCommandDialog::tr("Clear Current Tab");
-    c->icon = QString(QChar(IconBroom));
+    c->icon = fromIconId(IconBroom);
     c->inMenu = true;
     c->cmd = QStringLiteral("copyq: ItemSelection(selectedTab()).selectRemovable().removeAll()");
     c->matchCmd = QStringLiteral("copyq: tab(selectedTab()); if (size() == 0) fail()");
--- src/gui/commanddialog.cpp
+++ src/gui/commanddialog.cpp
@@ -13,6 +13,7 @@
 #include "gui/commandwidget.h"
 #include "gui/iconfactory.h"
 #include "gui/icons.h"
+#include "gui/fromiconid.h"
 #include "platform/platformclipboard.h"
 #include "platform/platformnativeinterface.h"
 
@@ -48,7 +49,7 @@ QIcon getCommandIcon(const QString &iconString, int commandType)
           : commandType & CommandType::Menu ? QColor(100,220,255)
           : QColor(255,100,100);
 
-    return iconFromFile(iconString, QString(QChar(icon)), color);
+    return iconFromFile(iconString, fromIconId(icon), color);
 }
 
 bool hasCommandsToPaste(const QString &text)
--- /dev/null
+++ src/gui/fromiconid.h
@@ -0,0 +1,9 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+#pragma once
+
+#include <QChar>
+#include <QString>
+
+inline QString fromIconId(int id) {
+    return QString(QChar(id));
+}
--- src/gui/iconfactory.cpp
+++ src/gui/iconfactory.cpp
@@ -3,8 +3,8 @@
 #include "iconfactory.h"
 
 #include "gui/fix_icon_id.h"
-#include "gui/icons.h"
 #include "gui/iconfont.h"
+#include "gui/fromiconid.h"
 #include "gui/pixelratio.h"
 
 #include <QBitmap>
@@ -265,7 +265,7 @@ QPixmap drawFontIcon(ushort id, int w, int h, const QColor &color)
 
     // Center the icon to whole pixels so it stays sharp.
     const auto flags = Qt::AlignTop | Qt::AlignLeft;
-    const auto iconText = QString(QChar(id));
+    const auto iconText = fromIconId(id);
     auto boundingRect = painter.boundingRect(0, 0, w, h, flags, iconText);
     const auto x = w - boundingRect.width();
     // If icon is wider, assume that a tag will be rendered and align image to the right.
--- src/gui/iconselectbutton.cpp
+++ src/gui/iconselectbutton.cpp
@@ -7,7 +7,7 @@
 #include "gui/fix_icon_id.h"
 #include "gui/iconfont.h"
 #include "gui/iconselectdialog.h"
-#include "gui/icons.h"
+#include "gui/fromiconid.h"
 
 #include <QApplication>
 #include <QIcon>
@@ -40,7 +40,7 @@ void IconSelectButton::setCurrentIcon(const QString &iconString)
     if ( iconString.size() == 1 ) {
         const QChar c = iconString[0];
         const ushort id = fixIconId( c.unicode() );
-        m_currentIcon = QString(QChar(id));
+        m_currentIcon = fromIconId(id);
         setFont(iconFont());
         setText(m_currentIcon);
     } else if ( !iconString.isEmpty() ) {
--- src/gui/notificationbasic.cpp
+++ src/gui/notificationbasic.cpp
@@ -8,7 +8,7 @@
 #include "common/textdata.h"
 #include "common/timer.h"
 #include "gui/iconfactory.h"
-#include "gui/icons.h"
+#include "gui/fromiconid.h"
 #include "gui/pixelratio.h"
 
 #include <QApplication>
@@ -233,7 +233,7 @@ void NotificationBasicWidget::setIcon(const QString &icon)
 
 void NotificationBasicWidget::setIcon(ushort icon)
 {
-    m_icon = QString(QChar(icon));
+    m_icon = fromIconId(icon);
 }
 
 void NotificationBasicWidget::setInterval(int msec)
--- src/scriptable/scriptable.cpp
+++ src/scriptable/scriptable.cpp
@@ -15,6 +15,7 @@
 #include "common/textdata.h"
 #include "gui/clipboardspy.h"
 #include "gui/icons.h"
+#include "gui/fromiconid.h"
 #include "item/itemfactory.h"
 #include "item/serialize.h"
 #include "platform/platformclipboard.h"
@@ -2947,7 +2948,7 @@ void Scriptable::showExceptionMessage(const QString &message)
     messageData.notificationId = QString::number(id);
     messageData.message = message;
     messageData.title = title;
-    messageData.icon = QString(QChar(IconCircleExclamation));
+    messageData.icon = fromIconId(IconCircleExclamation);
     messageData.timeoutMs = 8000;
     messageData.urgency = Notification::Urgency::High;
     m_proxy->showMessage(messageData);

