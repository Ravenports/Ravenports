# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		mesa
VERSION=		17.3.8
KEYWORDS=		graphics
VARIANTS=		standard
SDESC[standard]=	Mesa 3D Graphics Library
HOMEPAGE=		https://www.mesa3d.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://mesa.freedesktop.org/archive/
			ftp://ftp.freedesktop.org/pub/mesa/
DISTFILE[1]=		mesa-17.3.8.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			libs
			clover
			drivers
			osmesa

OPTIONS_AVAILABLE=	X86_DRIVERS ARM_DRIVERS
OPTIONS_STANDARD=	X86_DRIVERS ARM_DRIVERS
OPT_ON[aarch64]=	ARM_DRIVERS
OPT_ON[x86_64]=		X86_DRIVERS
OPT_ON[i386]=		X86_DRIVERS

BUILD_DEPENDS=		libpthread-stubs:single:standard
			libclc:single:standard
			llvm40:llvm:standard
			llvm40:clang:standard
			zlib:complete:standard
			libelf:single:standard
			libvdpau:single:standard
			libva:single:standard
			expat:static:standard
BUILDRUN_DEPENDS=	expat:shared:standard
			libdrm:single:standard
			ocl-icd:primary:standard
			opencl:single:standard
B_DEPS[sunos]=		libbsd4sol:single:standard
EXRUN[clover]=		llvm40:llvm:standard
			zlib:shared:standard
			libelf:single:standard
			expat:shared:standard
			libdrm:single:standard
EXRUN[drivers]=		llvm40:llvm:standard
			mesa:libs:standard
			zlib:shared:standard
			libelf:single:standard
EXRUN[osmesa]=		llvm40:llvm:standard
			mesa:libs:standard
			zlib:shared:standard

USES=			bison gettext-tools gmake libtool pkgconfig
			python:py27,build shebangfix
			c++:clover,drivers,osmesa
XORG_COMPONENTS=	dri2proto dri3proto glproto presentproto x11 xcb
			xdamage xext xfixes xshmfence xxf86vm xv xvmc

FPC_EQUIVALENT=		graphics/mesa-libs
SHEBANG_FILES=		src/gallium/*/*/*.py
			src/gallium/tools/trace/*.py
			src/gallium/drivers/svga/svgadump/svga_dump.py
			src/mapi/glapi/gen/*.py
			src/mapi/mapi_abi.py
			src/util/xmlpool/gen_xmlpool.py
			src/mesa/main/get_*.py
			src/util/format_srgb.py
			src/amd/*/*.py
			src/intel/genxml/gen_pack_header.py
SHEBANG_OLD_PYTHON=	/usr/bin/env[[:space:]]python2
			/usr/bin/python2
			/bin/env[[:space:]]python

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--enable-llvm
			--enable-texture-float
			--enable-vdpau
			--enable-va
			--enable-xvmc
			--disable-glx-tls
			--disable-gles1
			--disable-libunwind
			--with-platforms=x11,drm
			--enable-gallium-osmesa
			--with-llvm-prefix={{LOCALBASE}}/llvm40
			--with-dri-drivers="{{DRI_DRIVERS:tl}}"
			--with-gallium_drivers="{{GALLIUM_DRIVERS:tl}}"
CONFIGURE_ENV=		ax_cv_check_cflags___Wno_initializer_overrides=no

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes

LDFLAGS=		-Wl,-rpath,{{LOCALBASE}}/llvm40/lib
VAR_OPSYS[sunos]=	CPPFLAGS=-D__EXTENSIONS__=1
			CPPFLAGS=-D_POSIX_PTHREAD_SEMANTICS
			CFLAGS=-DF_DUPFD_CLOEXEC=F_DUPFD

[ARM_DRIVERS].DESCRIPTION=		Build drivers for aarch64 architecture
[ARM_DRIVERS].MAKEFILE_ON=		GALLIUM_DRIVERS+=FREEDRENO
					GALLIUM_DRIVERS+=VC4

[X86_DRIVERS].DESCRIPTION=		Build drivers for i386 and x86_64 architectures
[X86_DRIVERS].CONFIGURE_ENABLE_BOTH=	opencl
					opencl-icd
[X86_DRIVERS].MAKEFILE_ON=		DRI_DRIVERS+=RADEON
					DRI_DRIVERS+=R200
					DRI_DRIVERS+=I915
					DRI_DRIVERS+=I965
					GALLIUM_DRIVERS+=R300
					GALLIUM_DRIVERS+=R600
					GALLIUM_DRIVERS+=RADEONSI
					GALLIUM_DRIVERS+=SVGA

post-patch:
	${REINPLACE_CMD} -e 's|/etc/|${PREFIX}/etc/|g' \
		${WRKSRC}/src/util/xmlconfig.c
	# Use --link-static until ports/223191 is fixed
	${REINPLACE_CMD} -e '/$$LLVM_VERSION_MAJOR -ge 4/s|test |false |' \
		${WRKSRC}/configure

post-patch-freebsd:
	${REINPLACE_CMD} -e 's|x86_64|amd64|' ${WRKSRC}/configure

post-patch-sunos:
	${REINPLACE_CMD}\
		-e '/^CFLAGS =/ s|$$| -I$$(prefix)/include/bsd|' \
		-e '/^LDFLAGS =/ s|$$| -lbsd|' \
		${WRKSRC}/src/egl/Makefile.in \
		${WRKSRC}/src/gallium/drivers/r600/Makefile.in \
		${WRKSRC}/src/gallium/drivers/radeon/Makefile.in \
		${WRKSRC}/src/gallium/drivers/radeonsi/Makefile.in \
		${WRKSRC}/src/gallium/auxiliary/Makefile.in \
		${WRKSRC}/src/loader/Makefile.in

[FILE:808:descriptions/desc.libs]
The Mesa project began as an open-source implementation of the OpenGL
specification - a system for rendering interactive 3D graphics.

Over the years the project has grown to implement more graphics APIs,
including OpenGL ES (versions 1, 2, 3), OpenCL, OpenMAX, VDPAU, VA API,
XvMC and Vulkan.

A variety of device drivers allows the Mesa libraries to be used in many
different environments ranging from software emulation to complete
hardware acceleration for modern GPUs.

Mesa ties into several other open-source projects: the Direct Rendering
Infrastructure and X.org to provide OpenGL support on Linux, FreeBSD
and other operating systems.

This package contains the Mesa OpenGL libraries for GLX and EGL clients.
These include libEGL, libGL, and libglesv2 as well as utlity libraries
libglapi and gbm.


[FILE:130:descriptions/desc.clover]
This package contains Mesa's libOpenCL implementation "Clover".
It is built upon GALLIUM and currently only supports Radeon GPUs.


[FILE:162:descriptions/desc.drivers]
This package contains the Mesa OpenGL libraries for GLX and EGL clients.
These include libEGL, libGL, and libglesv2 as well as utlity libraries
libglapi and gbm.


[FILE:591:descriptions/desc.osmesa]
Mesa is a 3-D graphics library with an API which is very similar to that
of OpenGL*.  To the extent that Mesa utilizes the OpenGL command syntax or
state machine, it is being used with authorization from Silicon Graphics,
Inc.  However, the author makes no claim that Mesa is in any way a
compatible replacement for OpenGL or associated with Silicon Graphics, Inc.

This is a Off-Screen version of Mesa in order to do off-screen rendering in
other packages like VTK. Offscreen rendering is useful for a
number of things, such as batch processing, parallel processing, and
remote processing.


[FILE:97:distinfo]
8f9d9bf281c48e4a8f5228816577263b4c655248dc7666e75034ab422951a6b1     10660896 mesa-17.3.8.tar.xz


[FILE:721:manifests/plist.libs]
include/EGL/
 egl.h
 eglext.h
 eglextchromium.h
 eglmesaext.h
 eglplatform.h
include/GL/
 gl.h
 gl_mangle.h
 glcorearb.h
 glext.h
 glx.h
 glx_mangle.h
 glxext.h
include/GLES2/
 gl2.h
 gl2ext.h
 gl2platform.h
include/GLES3/
 gl3.h
 gl31.h
 gl32.h
 gl3ext.h
 gl3platform.h
include/KHR/khrplatform.h
include/gbm.h
lib/
 libEGL.so
 libEGL.so.1
 libEGL.so.1.0.0
 libGL.so
 libGL.so.1
 libGL.so.1.2.0
 libGLESv2.so
 libGLESv2.so.2
 libGLESv2.so.2.0.0
 libgbm.so
 libgbm.so.1
 libgbm.so.1.0.0
 libglapi.so
 libglapi.so.0
 libglapi.so.0.0.0
@comment lib/libwayland-egl.so
@comment lib/libwayland-egl.so.1
@comment lib/libwayland-egl.so.1.0.0
lib/pkgconfig/
 egl.pc
 gbm.pc
 gl.pc
 glesv2.pc
@comment lib/pkgconfig/wayland-egl.pc


[FILE:245:manifests/plist.clover]
%%X86_DRIVERS-ON%%etc/OpenCL/vendors/mesa.icd
%%X86_DRIVERS-ON%%lib/gallium-pipe/
 pipe_r300.so
 pipe_r600.so
 pipe_radeonsi.so
 pipe_swrast.so
 pipe_vmwgfx.so
%%X86_DRIVERS-ON%%lib/
 libMesaOpenCL.so
 libMesaOpenCL.so.1
 libMesaOpenCL.so.1.0.0


[FILE:868:manifests/plist.drivers]
etc/drirc
include/GL/internal/dri_interface.h
%%X86_DRIVERS-ON%%lib/dri/
 i915_dri.so
 i965_dri.so
%%ARM_DRIVERS-ON%%lib/dri/
 kgsl_dri.so
lib/dri/
 kms_swrast_dri.so
%%ARM_DRIVERS-ON%%lib/dri/
 msm_dri.so
%%X86_DRIVERS-ON%%lib/dri/
 r200_dri.so
 r300_dri.so
 r600_dri.so
 r600_drv_video.so
 radeon_dri.so
 radeonsi_dri.so
 radeonsi_drv_video.so
lib/dri/
 swrast_dri.so
%%ARM_DRIVERS-ON%%lib/dri/
 vc4_dri.so
%%X86_DRIVERS-ON%%lib/dri/
 vmwgfx_dri.so
%%X86_DRIVERS-ON%%lib/
 libXvMCr600.so
 libXvMCr600.so.1
 libXvMCr600.so.1.0
 libXvMCr600.so.1.0.0
%%X86_DRIVERS-ON%%lib/vdpau/
 libvdpau_r300.so
 libvdpau_r300.so.1
 libvdpau_r300.so.1.0
 libvdpau_r300.so.1.0.0
 libvdpau_r600.so
 libvdpau_r600.so.1
 libvdpau_r600.so.1.0
 libvdpau_r600.so.1.0.0
 libvdpau_radeonsi.so
 libvdpau_radeonsi.so.1
 libvdpau_radeonsi.so.1.0
 libvdpau_radeonsi.so.1.0.0
lib/pkgconfig/dri.pc


[FILE:99:manifests/plist.osmesa]
include/GL/osmesa.h
lib/
 libOSMesa.so
 libOSMesa.so.8
 libOSMesa.so.8.0.0
lib/pkgconfig/osmesa.pc


[FILE:2794:patches/patch-configure]
--- configure.orig	2018-01-18 21:30:38 UTC
+++ configure
@@ -21380,7 +21380,7 @@ LDFLAGS=$save_LDFLAGS
 
 
 case "$host_os" in
-openbsd* | darwin* )
+openbsd* | darwin* | solaris* )
     LD_NO_UNDEFINED="" ;;
 *)
     if test "x$enable_sanitize" = xno; then
@@ -23351,7 +23351,7 @@ fi
 
 
 case "$host_os" in
-linux*)
+linux* | freebsd* | dragonfly*)
     dri3_default=yes
     ;;
 *)
@@ -27071,9 +27071,19 @@ if test "x$enable_opencl" = xyes; then
         as_fn_error $? "cannot enable OpenCL without Gallium" "$LINENO" 5
     fi
 
+    if test "x$acv_mesa_CLANG" = xno; then
+
+    GCC_VERSION=`$CC -dumpversion`
+    if test $? -eq 0; then
+        GCC_VERSION_MAJOR=`echo $GCC_VERSION | cut -d. -f1`
+        GCC_VERSION_MINOR=`echo $GCC_VERSION | cut -d. -f2`
+    fi
+
     if test $GCC_VERSION_MAJOR -lt 4 -o $GCC_VERSION_MAJOR -eq 4 -a $GCC_VERSION_MINOR -lt 7; then
         as_fn_error $? "gcc >= 4.7 is required to build clover" "$LINENO" 5
     fi
+# end of clang test.
+    fi
 
     if test "x$have_libclc" = xno; then
         as_fn_error $? "pkg-config cannot find libclc.pc which is required to build clover.
@@ -27139,9 +27149,6 @@ rm -f core conftest.err conftest.$ac_obj
         CLANG_LIBDIR=${LLVM_LIBDIR}
     fi
     CLANG_RESOURCE_DIR=$CLANG_LIBDIR/clang/${LLVM_VERSION}
-    if test ! -f "$CLANG_RESOURCE_DIR/include/stddef.h"; then :
-  as_fn_error $? "Could not find clang internal header stddef.h in $CLANG_RESOURCE_DIR Use --with-clang-libdir to specify the correct path to the clang libraries." "$LINENO" 5
-fi
 fi
  if test "x$enable_opencl" = xyes; then
   HAVE_CLOVER_TRUE=
@@ -28445,7 +28452,7 @@ if test "x$enable_llvm" = xyes; then
     LLVM_CXXFLAGS=`strip_unwanted_llvm_flags "$LLVM_CONFIG --cxxflags"`
 
 
-    if test $LLVM_VERSION_MAJOR -ge 4 -o $LLVM_VERSION_MAJOR -eq 3 -a $LLVM_VERSION_MINOR -ge 9; then
+    if false $LLVM_VERSION_MAJOR -ge 4 -o $LLVM_VERSION_MAJOR -eq 3 -a $LLVM_VERSION_MINOR -ge 9; then
         if test "x$enable_llvm_shared_libs" = xyes; then
             LLVM_LIBS="`$LLVM_CONFIG --link-shared --libs ${LLVM_COMPONENTS}`"
         else
@@ -28459,7 +28466,7 @@ if test "x$enable_llvm" = xyes; then
         else
             { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Building mesa with statically linked LLVM may cause compilation issues" >&5
 $as_echo "$as_me: WARNING: Building mesa with statically linked LLVM may cause compilation issues" >&2;}
-                                    if test $LLVM_VERSION_MAJOR -ge 4 -o $LLVM_VERSION_MAJOR -eq 3 -a $LLVM_VERSION_MINOR -ge 5; then
+                                    if false $LLVM_VERSION_MAJOR -ge 4 -o $LLVM_VERSION_MAJOR -eq 3 -a $LLVM_VERSION_MINOR -ge 5; then
                 LLVM_LIBS="$LLVM_LIBS `$LLVM_CONFIG --system-libs`"
             fi
         fi


[FILE:512:patches/patch-include_GL_internal_dri__interface.h]
GCC on 9.x doesn't allow types to be overwritten, these types are defined
in drm.h also, which causes build issues in xorg-server.

--- include/GL/internal/dri_interface.h.orig	2018-01-18 21:30:28 UTC
+++ include/GL/internal/dri_interface.h
@@ -40,13 +40,7 @@
 #ifndef DRI_INTERFACE_H
 #define DRI_INTERFACE_H
 
-#ifdef HAVE_LIBDRM
 #include <drm.h>
-#else
-typedef unsigned int drm_context_t;
-typedef unsigned int drm_drawable_t;
-typedef struct drm_clip_rect drm_clip_rect_t;
-#endif
 
 #include <stdint.h>
 


[FILE:629:patches/patch-src_amd_common_ac__debug.c]
--- src/amd/common/ac_debug.c.orig	2018-01-18 21:30:28 UTC
+++ src/amd/common/ac_debug.c
@@ -563,6 +563,10 @@ void ac_parse_ib_chunk(FILE *f, uint32_t
 		       unsigned trace_id_count, enum chip_class chip_class,
                        ac_debug_addr_callback addr_callback, void *addr_callback_data)
 {
+#ifdef __sun__
+	printf("\nac_parse_ib_chunk: open_memstream unsupported on solaris");
+	exit (1);
+#else
 	struct ac_ib_parser ib = {};
 	ib.ib = ib_ptr;
 	ib.num_dw = num_dw;
@@ -588,6 +592,7 @@ void ac_parse_ib_chunk(FILE *f, uint32_t
 		printf("\nPacket ends after the end of IB.\n");
 		exit(1);
 	}
+#endif
 }
 
 /**


[FILE:787:patches/patch-src_compiler_glsl_linker.cpp]
--- src/compiler/glsl/linker.cpp.orig	2018-01-18 21:30:28 UTC
+++ src/compiler/glsl/linker.cpp
@@ -87,6 +87,38 @@
 #include "main/shaderobj.h"
 #include "main/enums.h"
 
+#ifdef __sun__
+/* uses libbsd4sol prototypes, so can't be static */
+#include <stdlib.h>
+#include <stdint.h>
+#include <string.h>
+
+size_t
+strnlen(const char *s, size_t maxlen)
+{
+	size_t len;
+	for (len = 0; len < maxlen; len++, s++) {
+		if (!*s) break;
+	}
+	return (len);
+}
+
+char *
+strndup(const char *str, size_t n)
+{
+    size_t len;
+    char *copy;
+
+    len = strlen(str);
+    if (len <= n)
+        return strdup(str);
+    if ((copy = (char *)malloc(len + 1)) == NULL)
+        return (NULL);
+    memcpy(copy, str, len);
+    copy[len] = '\0';
+    return (copy);
+}
+#endif
 
 namespace {
 


[FILE:584:patches/patch-src_egl_drivers_dri2_platform__x11.c]
# work-around for https://bugs.freedesktop.org/show_bug.cgi?id=100627
#
--- src/egl/drivers/dri2/platform_x11.c.orig	2018-01-18 21:30:28 UTC
+++ src/egl/drivers/dri2/platform_x11.c
@@ -1462,6 +1462,9 @@ dri2_initialize_x11(_EGLDriver *drv, _EG
 
    if (!disp->Options.UseFallback) {
 #ifdef HAVE_DRI3
+#if (defined(__FreeBSD__) || defined(__FreeBSD_kernel__)) && !defined(__DRM_NEXT__)
+      if (env_var_as_boolean("LIBGL_DRI3_ENABLE", false))
+#endif
       if (!env_var_as_boolean("LIBGL_DRI3_DISABLE", false))
          initialized = dri2_initialize_x11_dri3(drv, disp);
 #endif


[FILE:3256:patches/patch-src_gallium_auxiliary_pipe-loader_pipe__loader__drm.c]
Revert the following commit.

FreeBSD and DragonFly don't have the required render nodes.

-------

From 69a1b9959e59653da262185c4e2cf57d24939b19 Mon Sep 17 00:00:00 2001
From: Emil Velikov <emil.l.velikov@gmail.com>
Date: Mon, 29 Jun 2015 12:36:45 +0100
Subject: pipe-loader: drop support for non-render node devices

Render nodes have been around for quite some time. Removing support via
the master/primary node allows us to clean up the conditional
compilation and simplify the build greatly.

For example currently we the pipe-loader, which explicitly links against
xcb and friends (for X auth) if found at compile-time. That
would cause problems as one will be forced to use X/xcb, even if it's a
headless system that is used for opencl.

v2: Clarify the linking topic in the commit message.

Cc: Tom Stellard <thomas.stellard@amd.com>
Signed-off-by: Emil Velikov <emil.l.velikov@gmail.com>
Reviewed-by: Francisco Jerez <currojerez@riseup.net>


--- src/gallium/auxiliary/pipe-loader/pipe_loader_drm.c.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/auxiliary/pipe-loader/pipe_loader_drm.c
@@ -207,6 +207,14 @@ pipe_loader_drm_probe_fd(struct pipe_loa
 }
 
 static int
+open_drm_minor(int minor)
+{
+   char path[PATH_MAX];
+   snprintf(path, sizeof(path), DRM_DEV_NAME, DRM_DIR_NAME, minor);
+   return open(path, O_RDWR, 0);
+}
+
+static int
 open_drm_render_node_minor(int minor)
 {
    char path[PATH_MAX];
@@ -218,8 +226,15 @@ open_drm_render_node_minor(int minor)
 int
 pipe_loader_drm_probe(struct pipe_loader_device **devs, int ndev)
 {
-   int i, j, fd;
+   int i, k, fd, num_render_node_devs;
+   int j = 0;
+
+   struct {
+      unsigned vendor_id;
+      unsigned chip_id;
+   } render_node_devs[DRM_RENDER_NODE_MAX_NODES];
 
+   /* Look for render nodes first */
    for (i = DRM_RENDER_NODE_MIN_MINOR, j = 0;
         i <= DRM_RENDER_NODE_MAX_MINOR; i++) {
       struct pipe_loader_device *dev;
@@ -233,6 +248,9 @@ pipe_loader_drm_probe(struct pipe_loader
          continue;
       }
 
+      render_node_devs[j].vendor_id = dev->u.pci.vendor_id;
+      render_node_devs[j].chip_id = dev->u.pci.chip_id;
+
       if (j < ndev) {
          devs[j] = dev;
       } else {
@@ -242,6 +260,46 @@ pipe_loader_drm_probe(struct pipe_loader
       j++;
    }
 
+   num_render_node_devs = j;
+
+   /* Next look for drm devices. */
+   for (i = 0; i < DRM_MAX_MINOR; i++) {
+      struct pipe_loader_device *dev;
+      boolean duplicate = FALSE;
+      fd = open_drm_minor(i);
+      if (fd < 0)
+         continue;
+
+      if (!pipe_loader_drm_probe_fd(&dev, fd)) {
+         close(fd);
+         continue;
+      }
+
+      /* Check to make sure we aren't already accessing this device via
+       * render nodes.
+       */
+      for (k = 0; k < num_render_node_devs; k++) {
+         if (dev->u.pci.vendor_id == render_node_devs[k].vendor_id &&
+             dev->u.pci.chip_id == render_node_devs[k].chip_id) {
+            close(fd);
+            dev->ops->release(&dev);
+            duplicate = TRUE;
+            break;
+         }
+      }
+
+      if (duplicate)
+         continue;
+
+      if (j < ndev) {
+         devs[j] = dev;
+      } else {
+         dev->ops->release(&dev);
+      }
+
+      j++;
+   }
+
    return j;
 }
 


[FILE:257:patches/patch-src_gallium_auxiliary_util_u__math.h]
--- src/gallium/auxiliary/util/u_math.h.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/auxiliary/util/u_math.h
@@ -49,6 +49,9 @@
 #include "util/bitscan.h"
 
 #ifdef __cplusplus
+# ifdef __sun__
+#define restrict	__restrict__
+# endif
 extern "C" {
 #endif
 


[FILE:504:patches/patch-src_gallium_auxiliary_util_u__network.c]
--- src/gallium/auxiliary/util/u_network.c.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/auxiliary/util/u_network.c
@@ -6,7 +6,7 @@
 #if defined(PIPE_SUBSYSTEM_WINDOWS_USER)
 #  include <winsock2.h>
 #  include <windows.h>
-#elif defined(PIPE_OS_LINUX) || defined(PIPE_OS_HAIKU) || \
+#elif defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_HAIKU) || \
    defined(PIPE_OS_APPLE) || defined(PIPE_OS_CYGWIN) || defined(PIPE_OS_SOLARIS)
 #  include <sys/socket.h>
 #  include <netinet/in.h>


[FILE:367:patches/patch-src_gallium_drivers_radeonsi_si__shader.c]
--- src/gallium/drivers/radeonsi/si_shader.c.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/drivers/radeonsi/si_shader.c
@@ -26,6 +26,10 @@
  *      Christian König <christian.koenig@amd.com>
  */
 
+#ifdef __sun__
+#include <alloca.h> /* for alloca */
+#endif
+
 #include "gallivm/lp_bld_const.h"
 #include "gallivm/lp_bld_gather.h"
 #include "gallivm/lp_bld_intr.h"


[FILE:511:patches/patch-src_gallium_drivers_radeonsi_si__state__shaders.c]
--- src/gallium/drivers/radeonsi/si_state_shaders.c.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/drivers/radeonsi/si_state_shaders.c
@@ -1523,6 +1523,7 @@ static void si_build_shader_variant(stru
 		return;
 	}
 
+#ifndef __sun__
 	if (shader->compiler_ctx_state.is_debug_context) {
 		FILE *f = open_memstream(&shader->shader_log,
 					 &shader->shader_log_size);
@@ -1531,6 +1532,7 @@ static void si_build_shader_variant(stru
 			fclose(f);
 		}
 	}
+#endif
 
 	si_shader_init_pm4_state(sscreen, shader);
 }


[FILE:360:patches/patch-src_gallium_drivers_vc4_vc4__bufmgr.c]
# define ETIME as ETIMEOUT same as in intel driver
#
--- src/gallium/drivers/vc4/vc4_bufmgr.c.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/drivers/vc4/vc4_bufmgr.c
@@ -27,6 +27,9 @@
 #include <fcntl.h>
 #include <xf86drm.h>
 #include <xf86drmMode.h>
+#ifndef ETIME
+#define ETIME ETIMEDOUT
+#endif
 
 #include "util/u_hash_table.h"
 #include "util/u_memory.h"


[FILE:1043:patches/patch-src_gallium_include_pipe_p__config.h]
--- src/gallium/include/pipe/p_config.h.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/include/pipe/p_config.h
@@ -77,6 +77,13 @@
 #define PIPE_CC_ICL
 #endif
 
+#if defined(__sparc__) || defined(__sparc64__)
+#define PIPE_ARCH_SPARC
+#if defined(__sparc64__)
+#define PIPE_ARCH_SPARC_64
+#endif
+#endif
+
 
 /*
  * Processor architecture
@@ -131,7 +138,7 @@
 
 #if defined(PIPE_ARCH_X86) || defined(PIPE_ARCH_X86_64) || defined(PIPE_ARCH_ARM) || defined(PIPE_ARCH_AARCH64)
 #define PIPE_ARCH_LITTLE_ENDIAN
-#elif defined(PIPE_ARCH_PPC) || defined(PIPE_ARCH_PPC_64) || defined(PIPE_ARCH_S390)
+#elif defined(PIPE_ARCH_PPC) || defined(PIPE_ARCH_PPC_64) || defined(PIPE_ARCH_S390) || defined(PIPE_ARCH_SPARC) || defined(PIPE_ARCH_SPARC_64)
 #define PIPE_ARCH_BIG_ENDIAN
 #endif
 
@@ -160,6 +167,12 @@
 #define PIPE_OS_ANDROID
 #endif
 
+#if defined(__DragonFly__)
+#define PIPE_OS_DRAGONFLY
+#define PIPE_OS_BSD
+#define PIPE_OS_UNIX
+#endif
+
 #if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
 #define PIPE_OS_FREEBSD
 #define PIPE_OS_BSD


[FILE:1577:patches/patch-src_gallium_state__trackers_clover_llvm_invocation.cpp]
# fix errors like the following
#
# llvm/invocation.cpp:(.text+0x1275): undefined reference to `std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::c_str()
 const'
# /usr/bin/ld: ../../../../src/gallium/state_trackers/clover/.libs/libclover.a(libclllvm_la-invocation.o): relocation R_X86_64_PC32 against `_ZNKSt3__112bas
ic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv' can not be used when making a shared object; recompile with -fPIC
# /usr/bin/ld: final link failed: Bad value
#
--- src/gallium/state_trackers/clover/llvm/invocation.cpp.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/state_trackers/clover/llvm/invocation.cpp
@@ -93,6 +93,8 @@ namespace {
       return ctx;
    }
 
+   const char* cstr(const std::string& str) { return str.c_str(); }
+
    std::unique_ptr<clang::CompilerInstance>
    create_compiler_instance(const target &target,
                             const std::vector<std::string> &opts,
@@ -105,8 +107,8 @@ namespace {
       // Parse the compiler options.  A file name should be present at the end
       // and must have the .cl extension in order for the CompilerInvocation
       // class to recognize it as an OpenCL source file.
-      const std::vector<const char *> copts =
-         map(std::mem_fn(&std::string::c_str), opts);
+      std::vector<const char *> copts(opts.size());
+      std::transform(opts.begin(), opts.end(), copts.begin(), cstr);
 
       if (!clang::CompilerInvocation::CreateFromArgs(
              c->getInvocation(), copts.data(), copts.data() + copts.size(), diag))


[FILE:635:patches/patch-src_gallium_state__trackers_clover_llvm_metadata.hpp]
# Fix error: no matching constructor for initialization of 'std::vector<const ::llvm::MDNode *>' 
#
--- src/gallium/state_trackers/clover/llvm/metadata.hpp.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/state_trackers/clover/llvm/metadata.hpp
@@ -42,7 +42,7 @@ namespace clover {
          get_kernel_nodes(const ::llvm::Module &mod) {
             if (const ::llvm::NamedMDNode *n =
                    mod.getNamedMetadata("opencl.kernels"))
-               return { n->op_begin(), n->op_end() };
+               return { n->getOperand(0), n->getOperand(n->getNumOperands()) };
             else
                return {};
          }


[FILE:1150:patches/patch-src_gallium_state__trackers_clover_util_range.hpp]
From b95533b981af9a6687b41418e7cc2a5652fc2bdb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jean-S=C3=A9bastien=20P=C3=A9dron?= <dumbbell@FreeBSD.org>
Date: Fri, 7 Mar 2014 15:16:08 +0100
Subject: [PATCH 3/3] Work around for clang 3.4 which fails to build Clover

See:
  https://bugs.freedesktop.org/show_bug.cgi?id=74098#c3
--- src/gallium/state_trackers/clover/util/range.hpp.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/state_trackers/clover/util/range.hpp
@@ -362,6 +362,12 @@ namespace clover {
       return { i, i + n };
    }
 
+   namespace detail {
+      template<typename T>
+      using fixup_function_type =
+         typename std::conditional<std::is_function<T>::value, T &, T>::type;
+   }
+
    ///
    /// Create a range by transforming the contents of a number of
    /// source ranges \a rs element-wise using a provided functor \a f.
@@ -369,7 +375,7 @@ namespace clover {
    /// \sa adaptor_range.
    ///
    template<typename F, typename... Rs>
-   adaptor_range<F, Rs...>
+   adaptor_range<detail::fixup_function_type<F>, Rs...>
    map(F &&f, Rs &&... rs) {
       return { std::forward<F>(f), std::forward<Rs>(rs)... };
    }


[FILE:292:patches/patch-src_gallium_winsys_amdgpu_drm_amdgpu__cs.c]
--- src/gallium/winsys/amdgpu/drm/amdgpu_cs.c.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/winsys/amdgpu/drm/amdgpu_cs.c
@@ -36,6 +36,10 @@
 
 #include "amd/common/sid.h"
 
+#ifdef __sun__
+#include <alloca.h>
+#endif
+
 DEBUG_GET_ONCE_BOOL_OPTION(noop, "RADEON_NOOP", false)
 
 /* FENCES */


[FILE:429:patches/patch-src_gallium_winsys_svga_drm_vmw__screen__ioctl.c]
--- src/gallium/winsys/svga/drm/vmw_screen_ioctl.c.orig	2018-01-18 21:30:28 UTC
+++ src/gallium/winsys/svga/drm/vmw_screen_ioctl.c
@@ -70,6 +70,11 @@ vmw_region_size(struct vmw_region *regio
    return region->size;
 }
 
+#if defined(__DragonFly__) || defined(__FreeBSD__) || \
+    defined(__NetBSD__) || defined(__OpenBSD__)
+#define ERESTART EINTR
+#endif
+
 uint32
 vmw_ioctl_context_create(struct vmw_winsys_screen *vws)
 {


[FILE:575:patches/patch-src_glx_glxext.c]
# work-around for https://bugs.freedesktop.org/show_bug.cgi?id=100627
#
--- src/glx/glxext.c.orig	2018-01-18 21:30:29 UTC
+++ src/glx/glxext.c
@@ -920,6 +920,9 @@ __glXInitialize(Display * dpy)
 #if defined(GLX_USE_DRM)
    if (glx_direct && glx_accel) {
 #if defined(HAVE_DRI3)
+#if (defined(__FreeBSD__) || defined(__FreeBSD_kernel__)) && !defined(__DRM_NEXT__)
+      if (env_var_as_boolean("LIBGL_DRI3_ENABLE", false))
+#endif
       if (!env_var_as_boolean("LIBGL_DRI3_DISABLE", false))
          dpyPriv->dri3Display = dri3_create_display(dpy);
 #endif /* HAVE_DRI3 */


[FILE:702:patches/patch-src_intel_Makefile.in]
../../src/util/.libs/libmesautil.a(libmesautil_la-half_float.o): In function `_mesa_float_to_half':
half_float.c:(.text+0x94): undefined reference to `lrintf'
half_float.c:(.text+0xbf): undefined reference to `lrintf'
cc: error: linker command failed with exit code 1 (use -v to see invocation)
gmake[5]: *** [Makefile:2706: tools/aubinator_error_decode] Error 1

--- src/intel/Makefile.in.orig	2018-01-18 21:30:42 UTC
+++ src/intel/Makefile.in
@@ -1978,7 +1978,8 @@ tools_aubinator_error_decode_LDADD = \
 	compiler/libintel_compiler.la \
 	$(top_builddir)/src/util/libmesautil.la \
 	$(PTHREAD_LIBS) \
-	$(ZLIB_LIBS)
+	$(ZLIB_LIBS) \
+	-lm
 
 tools_aubinator_error_decode_CFLAGS = \
 	$(AM_CFLAGS) \


[FILE:995:patches/patch-src_intel_compiler_brw__eu__validate.c]
--- src/intel/compiler/brw_eu_validate.c.orig	2018-01-18 21:30:29 UTC
+++ src/intel/compiler/brw_eu_validate.c
@@ -28,6 +28,39 @@
 
 #include "brw_eu.h"
 
+#ifdef __sun__
+#include <string.h>
+
+static void *
+memmem(const void *l, size_t l_len, const void *s, size_t s_len)
+{
+	char *cur, *last;
+	const char *cl = (const char *)l;
+	const char *cs = (const char *)s;
+
+	/* we need something to compare */
+	if (l_len == 0 || s_len == 0)
+		return NULL;
+
+	/* "s" must be smaller or equal to "l" */
+	if (l_len < s_len)
+		return NULL;
+
+	/* special case where s_len == 1 */
+	if (s_len == 1)
+		return memchr(l, (int)*cs, l_len);
+
+	/* the last position where its possible to find "s" in "l" */
+	last = (char *)cl + l_len - s_len;
+
+	for (cur = (char *)cl; cur <= last; cur++)
+		if (cur[0] == cs[0] && memcmp(cur, cs, s_len) == 0)
+			return cur;
+
+	return NULL;
+}
+#endif
+
 /* We're going to do lots of string concatenation, so this should help. */
 struct string {
    char *str;


[FILE:225:patches/patch-src_intel_isl_isl.h]
--- src/intel/isl/isl.h.orig	2018-01-18 21:30:29 UTC
+++ src/intel/isl/isl.h
@@ -46,6 +46,9 @@
 #include "util/macros.h"
 
 #ifdef __cplusplus
+# ifdef __sun__
+# define restrict	__restrict__
+# endif
 extern "C" {
 #endif
 


[FILE:302:patches/patch-src_intel_tools_aubinator__error__decode.c]
# expose getline in FreeBSD's stdio.h
#
--- src/intel/tools/aubinator_error_decode.c.orig	2018-01-18 21:30:29 UTC
+++ src/intel/tools/aubinator_error_decode.c
@@ -22,6 +22,9 @@
  *
  */
 
+#ifdef __FreeBSD__
+#define _WITH_GETLINE
+#endif
 #include <stdbool.h>
 #include <stdio.h>
 #include <stdlib.h>


[FILE:619:patches/patch-src_mapi_glapi_gen_gl__gentable.py]
--- src/mapi/glapi/gen/gl_gentable.py.orig	2018-01-18 21:30:29 UTC
+++ src/mapi/glapi/gen/gl_gentable.py
@@ -43,7 +43,7 @@ header = """/* GLXEXT is the define used
 #endif
 
 #if (defined(GLXEXT) && defined(HAVE_BACKTRACE)) \\
-	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__DragonFly__))
+	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__FreeBSD__) && !defined(__DragonFly__))
 #define USE_BACKTRACE
 #endif
 


[FILE:425:patches/patch-src_mesa_drivers_dri_i965_brw__bufmgr.c]
--- src/mesa/drivers/dri/i965/brw_bufmgr.c.orig	2018-01-18 21:30:29 UTC
+++ src/mesa/drivers/dri/i965/brw_bufmgr.c
@@ -74,6 +74,10 @@
 #define VG(x)
 #endif
 
+#ifndef O_CLOEXEC
+#define O_CLOEXEC	0
+#endif
+
 /* VALGRIND_FREELIKE_BLOCK unfortunately does not actually undo the earlier
  * VALGRIND_MALLOCLIKE_BLOCK but instead leaves vg convinced the memory is
  * leaked. All because it does not call VG(cli_free) from its


[FILE:1343:patches/patch-src_mesa_drivers_dri_i965_brw__performance__query.c]
--- src/mesa/drivers/dri/i965/brw_performance_query.c.orig	2018-01-18 21:30:29 UTC
+++ src/mesa/drivers/dri/i965/brw_performance_query.c
@@ -1752,9 +1752,17 @@ enumerate_sysfs_metrics(struct brw_conte
    while ((metric_entry = readdir(metricsdir))) {
       struct hash_entry *entry;
 
+#ifdef __sun__
+      struct stat entry_stat;
+
+      lstat(metric_entry->d_name, &entry_stat);
+      if ((!S_ISDIR(entry_stat.st_mode) && !S_ISLNK(entry_stat.st_mode)) ||
+          metric_entry->d_name[0] == '.') 
+#else
       if ((metric_entry->d_type != DT_DIR &&
            metric_entry->d_type != DT_LNK) ||
           metric_entry->d_name[0] == '.')
+#endif
          continue;
 
       DBG("metric set: %s\n", metric_entry->d_name);
@@ -1946,9 +1954,17 @@ get_sysfs_dev_dir(struct brw_context *br
    }
 
    while ((drm_entry = readdir(drmdir))) {
+#ifdef __sun__
+      struct stat drm_stat;
+
+      lstat(drm_entry->d_name, &drm_stat);
+      if ((S_ISDIR(drm_stat.st_mode) || S_ISLNK(drm_stat.st_mode)) &&
+          strncmp(drm_entry->d_name, "card", 4) == 0)
+#else
       if ((drm_entry->d_type == DT_DIR ||
            drm_entry->d_type == DT_LNK) &&
           strncmp(drm_entry->d_name, "card", 4) == 0)
+#endif
       {
          len = snprintf(path_buf, path_buf_len,
                         "/sys/dev/char/%d:%d/device/drm/%s",


[FILE:406:patches/patch-src_mesa_main_compiler.h]
--- src/mesa/main/compiler.h.orig	2018-01-18 21:30:29 UTC
+++ src/mesa/main/compiler.h
@@ -51,6 +51,9 @@
 #if defined(__linux__)
 #include <byteswap.h>
 #define CPU_TO_LE32( x )	bswap_32( x )
+#elif defined(__FreeBSD__)
+#include <sys/endian.h>
+#define CPU_TO_LE32( x )	bswap32( x )
 #elif defined(__APPLE__)
 #include <CoreFoundation/CFByteOrder.h>
 #define CPU_TO_LE32( x )	CFSwapInt32HostToLittle( x )


[FILE:377:patches/patch-src_util_build__id.c]
# Elf_ doesn't exist, use Elf32_ or Elf64_
#
--- src/util/build_id.c.orig	2018-01-18 21:30:29 UTC
+++ src/util/build_id.c
@@ -34,7 +34,11 @@
 #endif
 
 #ifndef ElfW
-#define ElfW(type) Elf_##type
+#ifdef __LP64__
+#define ElfW(type) Elf64_##type
+#else
+#define ElfW(type) Elf32_##type
+#endif
 #endif
 
 #define ALIGN(val, align)      (((val) + (align) - 1) & ~((align) - 1))


[FILE:649:patches/patch-src_util_disk__cache.c]
--- src/util/disk_cache.c.orig	2018-01-18 21:30:29 UTC
+++ src/util/disk_cache.c
@@ -50,6 +50,10 @@
 
 #include "disk_cache.h"
 
+#ifndef O_CLOEXEC
+#define O_CLOEXEC	0
+#endif
+
 /* Number of bits to mask off from a cache key to get an index. */
 #define CACHE_INDEX_KEY_BITS 16
 
@@ -497,7 +501,11 @@ choose_lru_file_matching(const char *dir
          break;
 
       struct stat sb;
+#ifdef __sun__
+      if (fstatat(dir->dd_fd, entry->d_name, &sb, 0) == 0) {
+#else
       if (fstatat(dirfd(dir), entry->d_name, &sb, 0) == 0) {
+#endif
          if (!lru_atime || (sb.st_atime < lru_atime)) {
             size_t len = strlen(entry->d_name);
 


[FILE:430:patches/patch-src_util_u__atomic.h]
--- src/util/u_atomic.h.orig	2018-01-18 21:30:29 UTC
+++ src/util/u_atomic.h
@@ -19,11 +19,7 @@
  * locally coded assembly, compiler intrinsic or ultimately a
  * mutex-based implementation.
  */
-#if defined(__sun)
-#define PIPE_ATOMIC_OS_SOLARIS
-#elif defined(_MSC_VER)
-#define PIPE_ATOMIC_MSVC_INTRINSIC
-#elif defined(__GNUC__)
+#if defined(__GNUC__)
 #define PIPE_ATOMIC_GCC_INTRINSIC
 #else
 #error "Unsupported platform"


[FILE:343:patches/patch-src_util_u__endian.h]
--- src/util/u_endian.h.orig	2018-01-18 21:30:29 UTC
+++ src/util/u_endian.h
@@ -54,7 +54,7 @@
 # define PIPE_ARCH_BIG_ENDIAN
 #endif
 
-#elif defined(__OpenBSD__) || defined(__NetBSD__)
+#elif defined(__OpenBSD__) || defined(__NetBSD__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/types.h>
 #include <machine/endian.h>
 


[FILE:47:files/special.mk]
DRI_DRIVERS+=		SWRAST
GALLIUM_DRIVERS+=	SWRAST


[FILE:686:dragonfly/patch-src_intel_tools_aubinator.c]
# We don't have MAP_NORESERVE so use MAP_NOSYNC | MAP_NOCORE and
# hope for the best (this alloc is too big but it's only a test)
#
--- src/intel/tools/aubinator.c.orig	2018-01-18 21:30:29 UTC
+++ src/intel/tools/aubinator.c
@@ -1237,7 +1237,7 @@ int main(int argc, char *argv[])
    /* mmap a terabyte for our gtt space. */
    gtt_size = 1ull << 40;
    gtt = mmap(NULL, gtt_size, PROT_READ | PROT_WRITE,
-              MAP_PRIVATE | MAP_ANONYMOUS |  MAP_NORESERVE, -1, 0);
+              MAP_PRIVATE | MAP_ANONYMOUS | MAP_NOSYNC | MAP_NOCORE, -1, 0);
    if (gtt == MAP_FAILED) {
       fprintf(stderr, "failed to alloc gtt space: %s\n", strerror(errno));
       exit(EXIT_FAILURE);


[FILE:686:freebsd/patch-src_intel_tools_aubinator.c]
# We don't have MAP_NORESERVE so use MAP_NOSYNC | MAP_NOCORE and
# hope for the best (this alloc is too big but it's only a test)
#
--- src/intel/tools/aubinator.c.orig	2018-01-18 21:30:29 UTC
+++ src/intel/tools/aubinator.c
@@ -1237,7 +1237,7 @@ int main(int argc, char *argv[])
    /* mmap a terabyte for our gtt space. */
    gtt_size = 1ull << 40;
    gtt = mmap(NULL, gtt_size, PROT_READ | PROT_WRITE,
-              MAP_PRIVATE | MAP_ANONYMOUS |  MAP_NORESERVE, -1, 0);
+              MAP_PRIVATE | MAP_ANONYMOUS | MAP_NOSYNC | MAP_NOCORE, -1, 0);
    if (gtt == MAP_FAILED) {
       fprintf(stderr, "failed to alloc gtt space: %s\n", strerror(errno));
       exit(EXIT_FAILURE);


[FILE:722:sunos/patch-src_amd_Makefile.in]
--- src/amd/Makefile.in.orig	2018-01-18 21:30:38 UTC
+++ src/amd/Makefile.in
@@ -332,7 +332,7 @@ CCAS = @CCAS@
 CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
-CFLAGS = @CFLAGS@
+CFLAGS = @CFLAGS@ -I$(prefix)/include/bsd
 CLANG_RESOURCE_DIR = @CLANG_RESOURCE_DIR@
 CLOCK_LIB = @CLOCK_LIB@
 CLOVER_STD_OVERRIDE = @CLOVER_STD_OVERRIDE@
@@ -739,7 +739,7 @@ addrlib_libamdgpu_addrlib_la_SOURCES = $
 @HAVE_GALLIUM_LLVM_TRUE@	$(AMD_GENERATED_FILES) \
 @HAVE_GALLIUM_LLVM_TRUE@	$(AMD_NIR_FILES)
 
-common_libamd_common_la_LIBADD = $(LIBELF_LIBS)
+common_libamd_common_la_LIBADD = $(LIBELF_LIBS) -lbsd
 BUILT_SOURCES = $(AMD_GENERATED_FILES)
 all: $(BUILT_SOURCES)
 	$(MAKE) $(AM_MAKEFLAGS) all-am


[FILE:360:sunos/patch-src_compiler_Makefile.in]
--- src/compiler/Makefile.in.orig	2018-01-18 21:30:39 UTC
+++ src/compiler/Makefile.in
@@ -731,7 +731,7 @@ CLANG_RESOURCE_DIR = @CLANG_RESOURCE_DIR
 CLOCK_LIB = @CLOCK_LIB@
 CLOVER_STD_OVERRIDE = @CLOVER_STD_OVERRIDE@
 CPP = @CPP@
-CPPFLAGS = @CPPFLAGS@
+CPPFLAGS = @CPPFLAGS@ -I$(prefix)/include/bsd
 CXX = @CXX@
 CXXCPP = @CXXCPP@
 CXXDEPMODE = @CXXDEPMODE@


[FILE:343:sunos/patch-src_intel_Makefile.in]
--- src/intel/Makefile.in.orig	2018-02-07 05:00:00 UTC
+++ src/intel/Makefile.in
@@ -1983,7 +1983,7 @@ tools_aubinator_error_decode_LDADD = \
 
 tools_aubinator_error_decode_CFLAGS = \
 	$(AM_CFLAGS) \
-	$(ZLIB_CFLAGS)
+	$(ZLIB_CFLAGS) -I$(prefix)/include/bsd
 
 
 # Due to a what seems like a autoconf bug, we must ensure that the genaration


[FILE:760:sunos/patch-src_mesa_drivers_dri_common_Makefile.in]
--- src/mesa/drivers/dri/common/Makefile.in.orig	2018-01-18 21:30:42 UTC
+++ src/mesa/drivers/dri/common/Makefile.in
@@ -138,7 +138,7 @@ AM_V_lt = $(am__v_lt_@AM_V@)
 am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
 am__v_lt_0 = --silent
 am__v_lt_1 = 
-libmegadriver_stub_la_LIBADD =
+libmegadriver_stub_la_LIBADD = -lbsd
 am__objects_2 = megadriver_stub.lo
 am_libmegadriver_stub_la_OBJECTS = $(am__objects_2)
 libmegadriver_stub_la_OBJECTS = $(am_libmegadriver_stub_la_OBJECTS)
@@ -224,7 +224,7 @@ CCAS = @CCAS@
 CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
-CFLAGS = @CFLAGS@
+CFLAGS = @CFLAGS@ -I$(prefix)/include/bsd
 CLANG_RESOURCE_DIR = @CLANG_RESOURCE_DIR@
 CLOCK_LIB = @CLOCK_LIB@
 CLOVER_STD_OVERRIDE = @CLOVER_STD_OVERRIDE@


[FILE:927:sunos/patch-src_util_Makefile.in]
--- src/util/Makefile.in.orig	2018-01-18 21:30:42 UTC
+++ src/util/Makefile.in
@@ -865,6 +865,7 @@ libmesautil_la_CPPFLAGS = \
 	-I$(top_srcdir)/src/mesa \
 	-I$(top_srcdir)/src/gallium/include \
 	-I$(top_srcdir)/src/gallium/auxiliary \
+	-I$(prefix)/include/bsd \
 	$(VISIBILITY_CFLAGS) \
 	$(MSVC2013_COMPAT_CFLAGS) \
 	$(ZLIB_CFLAGS)
@@ -876,18 +877,19 @@ libmesautil_la_SOURCES = \
 libmesautil_la_LIBADD = \
 	$(CLOCK_LIB) \
 	$(ZLIB_LIBS) \
-	$(LIBATOMIC_LIBS)
+	$(LIBATOMIC_LIBS) -lbsd
 
 libxmlconfig_la_SOURCES = $(XMLCONFIG_FILES)
 libxmlconfig_la_CFLAGS = \
 	$(DEFINES) \
 	-I$(top_srcdir)/include \
 	-I$(top_srcdir)/src \
+	-I$(prefix)/include/bsd \
 	-DSYSCONFDIR=\"$(sysconfdir)\" \
 	$(VISIBILITY_CFLAGS) \
 	$(EXPAT_CFLAGS)
 
-libxmlconfig_la_LIBADD = $(EXPAT_LIBS) -lm
+libxmlconfig_la_LIBADD = $(EXPAT_LIBS) -lm -lbsd
 sysconf_DATA = drirc
 u_atomic_test_LDADD = libmesautil.la
 roundeven_test_LDADD = -lm

