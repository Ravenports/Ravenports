# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		mesa
VERSION=		17.1.2
KEYWORDS=		graphics
VARIANTS=		standard
SDESC[standard]=	Mesa 3D Graphics Library
HOMEPAGE=		http://www.mesa3d.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://mesa.freedesktop.org/archive/
			https://mesa.freedesktop.org/archive/17.1.2/
			ftp://ftp.freedesktop.org/pub/mesa/17.1.2/
DISTFILE[1]=		mesa-17.1.2.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			libs
			clover
			drivers
			osmesa

OPTIONS_AVAILABLE=	X86_DRIVERS ARM_DRIVERS
OPTIONS_STANDARD=	X86_DRIVERS ARM_DRIVERS
OPT_ON[aarch64]=	ARM_DRIVERS
OPT_ON[x86_64]=		X86_DRIVERS
OPT_ON[i386]=		X86_DRIVERS

BUILD_DEPENDS=		libpthread-stubs:single:standard
			libclc:single:standard
			llvm40:llvm:standard
			llvm40:clang:standard
			zlib:complete:standard
			libelf:single:standard
			libvdpau:single:standard
			libva:single:standard
			expat:static:standard
BUILDRUN_DEPENDS=	expat:shared:standard
			libdrm:single:standard
			ocl-icd:primary:standard
			opencl:single:standard
EXRUN[clover]=		llvm40:llvm:standard
			zlib:shared:standard
			libelf:single:standard
			expat:shared:standard
			libdrm:single:standard
EXRUN[drivers]=		llvm40:llvm:standard
			mesa:libs:standard
			zlib:shared:standard
			libelf:single:standard
EXRUN[osmesa]=		llvm40:llvm:standard
			mesa:libs:standard
			zlib:shared:standard

USES=			bison gettext-tools gmake libtool pkgconfig python:py27,build shebangfix
			c++:clover,drivers,osmesa
XORG_COMPONENTS=	dri2proto dri3proto glproto presentproto x11 xcb xdamage xext xfixes
			xshmfence xxf86vm xv xvmc

FPC_EQUIVALENT=		graphics/mesa-libs
SHEBANG_FILES=		src/gallium/*/*/*.py
			src/gallium/tools/trace/*.py
			src/gallium/drivers/svga/svgadump/svga_dump.py
			src/mapi/glapi/gen/*.py
			src/mapi/mapi_abi.py
			src/mesa/drivers/dri/common/xmlpool/gen_xmlpool.py
			src/mesa/main/get_*.py
			src/util/format_srgb.py
			src/amd/*/*.py
			src/intel/genxml/gen_pack_header.py
SHEBANG_OLD_PYTHON=	/usr/bin/env[[:space:]]python2
			/usr/bin/python2
			/bin/env[[:space:]]python

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--enable-llvm
			--enable-texture-float
			--enable-vdpau
			--enable-va
			--enable-xvmc
			--disable-glx-tls
			--disable-gles1
			--disable-libunwind
			--with-platforms=x11,drm
			--enable-gallium-osmesa
			--with-llvm-prefix={{LOCALBASE}}/llvm40
			--with-dri-drivers="{{DRI_DRIVERS:tl}}"
			--with-gallium_drivers="{{GALLIUM_DRIVERS:tl}}"

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes

LDFLAGS=		-Wl,-rpath={{LOCALBASE}}/llvm40/lib

[ARM_DRIVERS].DESCRIPTION=		Build drivers for aarch64 architecture
[ARM_DRIVERS].MAKEFILE_ON=		GALLIUM_DRIVERS+=FREEDRENO
					GALLIUM_DRIVERS+=VC4

[X86_DRIVERS].DESCRIPTION=		Build drivers for i386 and x86_64 architectures
[X86_DRIVERS].CONFIGURE_ENABLE_BOTH=	opencl
					opencl-icd
[X86_DRIVERS].MAKEFILE_ON=		DRI_DRIVERS+=RADEON
					DRI_DRIVERS+=R200
					DRI_DRIVERS+=I915
					DRI_DRIVERS+=I965
					GALLIUM_DRIVERS+=R300
					GALLIUM_DRIVERS+=R600
					GALLIUM_DRIVERS+=RADEONSI
					GALLIUM_DRIVERS+=SVGA

post-install-X86_DRIVERS-OFF:
	${RM} -r ${STAGEDIR}/etc/OpenCL

post-patch:
	@${REINPLACE_CMD} -e 's|/etc/|${PREFIX}/etc/|g' \
		${WRKSRC}/src/mesa/drivers/dri/common/xmlconfig.c

post-install-X86_DRIVERS-ON:
	${MV} ${STAGEDIR}/etc/OpenCL ${STAGEDIR}${PREFIX}/etc/
	${RMDIR} ${STAGEDIR}/etc

post-patch-freebsd:
	@${REINPLACE_CMD} -e 's|x86_64|amd64|' ${WRKSRC}/configure

[FILE:808:descriptions/desc.libs]
The Mesa project began as an open-source implementation of the OpenGL
specification - a system for rendering interactive 3D graphics.

Over the years the project has grown to implement more graphics APIs,
including OpenGL ES (versions 1, 2, 3), OpenCL, OpenMAX, VDPAU, VA API,
XvMC and Vulkan.

A variety of device drivers allows the Mesa libraries to be used in many
different environments ranging from software emulation to complete
hardware acceleration for modern GPUs.

Mesa ties into several other open-source projects: the Direct Rendering
Infrastructure and X.org to provide OpenGL support on Linux, FreeBSD
and other operating systems.

This package contains the Mesa OpenGL libraries for GLX and EGL clients.
These include libEGL, libGL, and libglesv2 as well as utlity libraries
libglapi and gbm.


[FILE:130:descriptions/desc.clover]
This package contains Mesa's libOpenCL implementation "Clover".
It is built upon GALLIUM and currently only supports Radeon GPUs.


[FILE:162:descriptions/desc.drivers]
This package contains the Mesa OpenGL libraries for GLX and EGL clients.
These include libEGL, libGL, and libglesv2 as well as utlity libraries
libglapi and gbm.


[FILE:591:descriptions/desc.osmesa]
Mesa is a 3-D graphics library with an API which is very similar to that
of OpenGL*.  To the extent that Mesa utilizes the OpenGL command syntax or
state machine, it is being used with authorization from Silicon Graphics,
Inc.  However, the author makes no claim that Mesa is in any way a
compatible replacement for OpenGL or associated with Silicon Graphics, Inc.

This is a Off-Screen version of Mesa in order to do off-screen rendering in
other packages like VTK. Offscreen rendering is useful for a
number of things, such as batch processing, parallel processing, and
remote processing.


[FILE:97:distinfo]
0937804f43746339b1f9540d8f9c8b4a1bb3d3eec0e4020eac283b8799798239      9837516 mesa-17.1.2.tar.xz


[FILE:721:manifests/plist.libs]
include/EGL/
 egl.h
 eglext.h
 eglextchromium.h
 eglmesaext.h
 eglplatform.h
include/GL/
 gl.h
 gl_mangle.h
 glcorearb.h
 glext.h
 glx.h
 glx_mangle.h
 glxext.h
include/GLES2/
 gl2.h
 gl2ext.h
 gl2platform.h
include/GLES3/
 gl3.h
 gl31.h
 gl32.h
 gl3ext.h
 gl3platform.h
include/KHR/khrplatform.h
include/gbm.h
lib/
 libEGL.so
 libEGL.so.1
 libEGL.so.1.0.0
 libGL.so
 libGL.so.1
 libGL.so.1.2.0
 libGLESv2.so
 libGLESv2.so.2
 libGLESv2.so.2.0.0
 libgbm.so
 libgbm.so.1
 libgbm.so.1.0.0
 libglapi.so
 libglapi.so.0
 libglapi.so.0.0.0
@comment lib/libwayland-egl.so
@comment lib/libwayland-egl.so.1
@comment lib/libwayland-egl.so.1.0.0
lib/pkgconfig/
 egl.pc
 gbm.pc
 gl.pc
 glesv2.pc
@comment lib/pkgconfig/wayland-egl.pc


[FILE:245:manifests/plist.clover]
%%X86_DRIVERS-ON%%etc/OpenCL/vendors/mesa.icd
%%X86_DRIVERS-ON%%lib/gallium-pipe/
 pipe_r300.so
 pipe_r600.so
 pipe_radeonsi.so
 pipe_swrast.so
 pipe_vmwgfx.so
%%X86_DRIVERS-ON%%lib/
 libMesaOpenCL.so
 libMesaOpenCL.so.1
 libMesaOpenCL.so.1.0.0


[FILE:868:manifests/plist.drivers]
etc/drirc
include/GL/internal/dri_interface.h
%%X86_DRIVERS-ON%%lib/dri/
 i915_dri.so
 i965_dri.so
%%ARM_DRIVERS-ON%%lib/dri/
 kgsl_dri.so
lib/dri/
 kms_swrast_dri.so
%%ARM_DRIVERS-ON%%lib/dri/
 msm_dri.so
%%X86_DRIVERS-ON%%lib/dri/
 r200_dri.so
 r300_dri.so
 r600_dri.so
 r600_drv_video.so
 radeon_dri.so
 radeonsi_dri.so
 radeonsi_drv_video.so
lib/dri/
 swrast_dri.so
%%ARM_DRIVERS-ON%%lib/dri/
 vc4_dri.so
%%X86_DRIVERS-ON%%lib/dri/
 vmwgfx_dri.so
%%X86_DRIVERS-ON%%lib/
 libXvMCr600.so
 libXvMCr600.so.1
 libXvMCr600.so.1.0
 libXvMCr600.so.1.0.0
%%X86_DRIVERS-ON%%lib/vdpau/
 libvdpau_r300.so
 libvdpau_r300.so.1
 libvdpau_r300.so.1.0
 libvdpau_r300.so.1.0.0
 libvdpau_r600.so
 libvdpau_r600.so.1
 libvdpau_r600.so.1.0
 libvdpau_r600.so.1.0.0
 libvdpau_radeonsi.so
 libvdpau_radeonsi.so.1
 libvdpau_radeonsi.so.1.0
 libvdpau_radeonsi.so.1.0.0
lib/pkgconfig/dri.pc


[FILE:99:manifests/plist.osmesa]
include/GL/osmesa.h
lib/
 libOSMesa.so
 libOSMesa.so.8
 libOSMesa.so.8.0.0
lib/pkgconfig/osmesa.pc


[FILE:1408:patches/patch-configure]
--- configure.orig	2017-06-05 21:09:15 UTC
+++ configure
@@ -22740,7 +22740,7 @@ fi
 
 
 case "$host_os" in
-linux*)
+linux* | freebsd* | dragonfly*)
     dri3_default=yes
     ;;
 *)
@@ -26446,9 +26446,19 @@ if test "x$enable_opencl" = xyes; then
         as_fn_error $? "cannot enable OpenCL without Gallium" "$LINENO" 5
     fi
 
+    if test "x$acv_mesa_CLANG" = xno; then
+
+    GCC_VERSION=`$CC -dumpversion`
+    if test $? -eq 0; then
+        GCC_VERSION_MAJOR=`echo $GCC_VERSION | cut -d. -f1`
+        GCC_VERSION_MINOR=`echo $GCC_VERSION | cut -d. -f2`
+    fi
+
     if test $GCC_VERSION_MAJOR -lt 4 -o $GCC_VERSION_MAJOR -eq 4 -a $GCC_VERSION_MINOR -lt 7; then
         as_fn_error $? "gcc >= 4.7 is required to build clover" "$LINENO" 5
     fi
+# end of clang test.
+    fi
 
     if test "x$have_libclc" = xno; then
         as_fn_error $? "pkg-config cannot find libclc.pc which is required to build clover.
@@ -26511,9 +26521,6 @@ rm -f core conftest.err conftest.$ac_obj
         CLANG_LIBDIR=${LLVM_LIBDIR}
     fi
     CLANG_RESOURCE_DIR=$CLANG_LIBDIR/clang/${LLVM_VERSION}
-    if test ! -f "$CLANG_RESOURCE_DIR/include/stddef.h"; then :
-  as_fn_error $? "Could not find clang internal header stddef.h in $CLANG_RESOURCE_DIR Use --with-clang-libdir to specify the correct path to the clang libraries." "$LINENO" 5
-fi
 fi
  if test "x$enable_opencl" = xyes; then
   HAVE_CLOVER_TRUE=


[FILE:529:patches/patch-include_GL_internal_dri__interface.h]
GCC on 9.x doesn't allow types to be overwritten, these types are defined
in drm.h also, which causes build issues in xorg-server.

--- include/GL/internal/dri_interface.h.orig	2016-11-10 22:05:17 UTC
+++ include/GL/internal/dri_interface.h
@@ -40,13 +40,7 @@
 #ifndef DRI_INTERFACE_H
 #define DRI_INTERFACE_H
 
-#ifdef HAVE_LIBDRM
 #include <drm.h>
-#else
-typedef unsigned int drm_context_t;
-typedef unsigned int drm_drawable_t;
-typedef struct drm_clip_rect drm_clip_rect_t;
-#endif
 
 /**
  * \name DRI interface structures


[FILE:596:patches/patch-src_egl_drivers_dri2_platform__x11.c]
# work-around for https://bugs.freedesktop.org/show_bug.cgi?id=100627
#
--- src/egl/drivers/dri2/platform_x11.c.orig	2017-05-10 14:13:57 UTC
+++ src/egl/drivers/dri2/platform_x11.c
@@ -1509,7 +1509,11 @@ dri2_initialize_x11(_EGLDriver *drv, _EG
 
    if (!getenv("LIBGL_ALWAYS_SOFTWARE")) {
 #ifdef HAVE_DRI3
+#if (defined(__FreeBSD__) || defined(__FreeBSD_kernel__)) && !defined (__DRM_NEXT__)
+      if (getenv("LIBGL_DRI3_ENABLE") && !getenv("LIBGL_DRI3_DISABLE"))
+#else
       if (!getenv("LIBGL_DRI3_DISABLE"))
+#endif
          initialized = dri2_initialize_x11_dri3(drv, disp);
 #endif
 


[FILE:3256:patches/patch-src_gallium_auxiliary_pipe-loader_pipe__loader__drm.c]
Revert the following commit.

FreeBSD and DragonFly don't have the required render nodes.

-------

From 69a1b9959e59653da262185c4e2cf57d24939b19 Mon Sep 17 00:00:00 2001
From: Emil Velikov <emil.l.velikov@gmail.com>
Date: Mon, 29 Jun 2015 12:36:45 +0100
Subject: pipe-loader: drop support for non-render node devices

Render nodes have been around for quite some time. Removing support via
the master/primary node allows us to clean up the conditional
compilation and simplify the build greatly.

For example currently we the pipe-loader, which explicitly links against
xcb and friends (for X auth) if found at compile-time. That
would cause problems as one will be forced to use X/xcb, even if it's a
headless system that is used for opencl.

v2: Clarify the linking topic in the commit message.

Cc: Tom Stellard <thomas.stellard@amd.com>
Signed-off-by: Emil Velikov <emil.l.velikov@gmail.com>
Reviewed-by: Francisco Jerez <currojerez@riseup.net>


--- src/gallium/auxiliary/pipe-loader/pipe_loader_drm.c.orig	2017-05-10 14:13:57 UTC
+++ src/gallium/auxiliary/pipe-loader/pipe_loader_drm.c
@@ -209,6 +209,14 @@ pipe_loader_drm_probe_fd(struct pipe_loa
 }
 
 static int
+open_drm_minor(int minor)
+{
+   char path[PATH_MAX];
+   snprintf(path, sizeof(path), DRM_DEV_NAME, DRM_DIR_NAME, minor);
+   return open(path, O_RDWR, 0);
+}
+
+static int
 open_drm_render_node_minor(int minor)
 {
    char path[PATH_MAX];
@@ -220,8 +228,15 @@ open_drm_render_node_minor(int minor)
 int
 pipe_loader_drm_probe(struct pipe_loader_device **devs, int ndev)
 {
-   int i, j, fd;
+   int i, k, fd, num_render_node_devs;
+   int j = 0;
+
+   struct {
+      unsigned vendor_id;
+      unsigned chip_id;
+   } render_node_devs[DRM_RENDER_NODE_MAX_NODES];
 
+   /* Look for render nodes first */
    for (i = DRM_RENDER_NODE_MIN_MINOR, j = 0;
         i <= DRM_RENDER_NODE_MAX_MINOR; i++) {
       struct pipe_loader_device *dev;
@@ -235,6 +250,9 @@ pipe_loader_drm_probe(struct pipe_loader
          continue;
       }
 
+      render_node_devs[j].vendor_id = dev->u.pci.vendor_id;
+      render_node_devs[j].chip_id = dev->u.pci.chip_id;
+
       if (j < ndev) {
          devs[j] = dev;
       } else {
@@ -244,6 +262,46 @@ pipe_loader_drm_probe(struct pipe_loader
       j++;
    }
 
+   num_render_node_devs = j;
+
+   /* Next look for drm devices. */
+   for (i = 0; i < DRM_MAX_MINOR; i++) {
+      struct pipe_loader_device *dev;
+      boolean duplicate = FALSE;
+      fd = open_drm_minor(i);
+      if (fd < 0)
+         continue;
+
+      if (!pipe_loader_drm_probe_fd(&dev, fd)) {
+         close(fd);
+         continue;
+      }
+
+      /* Check to make sure we aren't already accessing this device via
+       * render nodes.
+       */
+      for (k = 0; k < num_render_node_devs; k++) {
+         if (dev->u.pci.vendor_id == render_node_devs[k].vendor_id &&
+             dev->u.pci.chip_id == render_node_devs[k].chip_id) {
+            close(fd);
+            dev->ops->release(&dev);
+            duplicate = TRUE;
+            break;
+         }
+      }
+
+      if (duplicate)
+         continue;
+
+      if (j < ndev) {
+         devs[j] = dev;
+      } else {
+         dev->ops->release(&dev);
+      }
+
+      j++;
+   }
+
    return j;
 }
 


[FILE:504:patches/patch-src_gallium_auxiliary_util_u__network.c]
--- src/gallium/auxiliary/util/u_network.c.orig	2016-11-10 22:05:17 UTC
+++ src/gallium/auxiliary/util/u_network.c
@@ -6,7 +6,7 @@
 #if defined(PIPE_SUBSYSTEM_WINDOWS_USER)
 #  include <winsock2.h>
 #  include <windows.h>
-#elif defined(PIPE_OS_LINUX) || defined(PIPE_OS_HAIKU) || \
+#elif defined(PIPE_OS_LINUX) || defined(PIPE_OS_BSD) || defined(PIPE_OS_HAIKU) || \
    defined(PIPE_OS_APPLE) || defined(PIPE_OS_CYGWIN) || defined(PIPE_OS_SOLARIS)
 #  include <sys/socket.h>
 #  include <netinet/in.h>


[FILE:554:patches/patch-src_gallium_drivers_vc4_Makefile.in]
# enable NEON instructions in the compiler when building the NEON codepath
#
--- src/gallium/drivers/vc4/Makefile.in.orig	2017-05-16 13:55:49 UTC
+++ src/gallium/drivers/vc4/Makefile.in
@@ -669,7 +669,7 @@ libvc4_la_SOURCES = $(C_SOURCES)
 libvc4_la_LIBADD = $(SIM_LIB) $(VC4_LIBS) libvc4_neon.la
 libvc4_la_LDFLAGS = $(SIM_LDFLAGS)
 libvc4_neon_la_SOURCES = vc4_tiling_lt.c
-libvc4_neon_la_CFLAGS = $(AM_CFLAGS) -DVC4_BUILD_NEON
+libvc4_neon_la_CFLAGS = $(AM_CFLAGS) -DVC4_BUILD_NEON -march=armv7-a -mfpu=neon
 EXTRA_DIST = kernel/README
 all: all-am
 


[FILE:360:patches/patch-src_gallium_drivers_vc4_vc4__bufmgr.c]
# define ETIME as ETIMEOUT same as in intel driver
#
--- src/gallium/drivers/vc4/vc4_bufmgr.c.orig	2017-05-10 14:13:57 UTC
+++ src/gallium/drivers/vc4/vc4_bufmgr.c
@@ -27,6 +27,9 @@
 #include <fcntl.h>
 #include <xf86drm.h>
 #include <xf86drmMode.h>
+#ifndef ETIME
+#define ETIME ETIMEDOUT
+#endif
 
 #include "util/u_hash_table.h"
 #include "util/u_memory.h"


[FILE:1043:patches/patch-src_gallium_include_pipe_p__config.h]
--- src/gallium/include/pipe/p_config.h.orig	2016-11-10 22:05:17 UTC
+++ src/gallium/include/pipe/p_config.h
@@ -76,6 +76,13 @@
 #define PIPE_CC_ICL
 #endif
 
+#if defined(__sparc__) || defined(__sparc64__)
+#define PIPE_ARCH_SPARC
+#if defined(__sparc64__)
+#define PIPE_ARCH_SPARC_64
+#endif
+#endif
+
 
 /*
  * Processor architecture
@@ -130,7 +137,7 @@
 
 #if defined(PIPE_ARCH_X86) || defined(PIPE_ARCH_X86_64) || defined(PIPE_ARCH_ARM) || defined(PIPE_ARCH_AARCH64)
 #define PIPE_ARCH_LITTLE_ENDIAN
-#elif defined(PIPE_ARCH_PPC) || defined(PIPE_ARCH_PPC_64) || defined(PIPE_ARCH_S390)
+#elif defined(PIPE_ARCH_PPC) || defined(PIPE_ARCH_PPC_64) || defined(PIPE_ARCH_S390) || defined(PIPE_ARCH_SPARC) || defined(PIPE_ARCH_SPARC_64)
 #define PIPE_ARCH_BIG_ENDIAN
 #endif
 
@@ -159,6 +166,12 @@
 #define PIPE_OS_ANDROID
 #endif
 
+#if defined(__DragonFly__)
+#define PIPE_OS_DRAGONFLY
+#define PIPE_OS_BSD
+#define PIPE_OS_UNIX
+#endif
+
 #if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
 #define PIPE_OS_FREEBSD
 #define PIPE_OS_BSD


[FILE:1577:patches/patch-src_gallium_state__trackers_clover_llvm_invocation.cpp]
# fix errors like the following
#
# llvm/invocation.cpp:(.text+0x1275): undefined reference to `std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::c_str()
 const'
# /usr/bin/ld: ../../../../src/gallium/state_trackers/clover/.libs/libclover.a(libclllvm_la-invocation.o): relocation R_X86_64_PC32 against `_ZNKSt3__112bas
ic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv' can not be used when making a shared object; recompile with -fPIC
# /usr/bin/ld: final link failed: Bad value
#
--- src/gallium/state_trackers/clover/llvm/invocation.cpp.orig	2017-04-01 15:33:37 UTC
+++ src/gallium/state_trackers/clover/llvm/invocation.cpp
@@ -93,6 +93,8 @@ namespace {
       return ctx;
    }
 
+   const char* cstr(const std::string& str) { return str.c_str(); }
+
    std::unique_ptr<clang::CompilerInstance>
    create_compiler_instance(const target &target,
                             const std::vector<std::string> &opts,
@@ -105,8 +107,8 @@ namespace {
       // Parse the compiler options.  A file name should be present at the end
       // and must have the .cl extension in order for the CompilerInvocation
       // class to recognize it as an OpenCL source file.
-      const std::vector<const char *> copts =
-         map(std::mem_fn(&std::string::c_str), opts);
+      std::vector<const char *> copts(opts.size());
+      std::transform(opts.begin(), opts.end(), copts.begin(), cstr);
 
       if (!clang::CompilerInvocation::CreateFromArgs(
              c->getInvocation(), copts.data(), copts.data() + copts.size(), diag))


[FILE:635:patches/patch-src_gallium_state__trackers_clover_llvm_metadata.hpp]
# Fix error: no matching constructor for initialization of 'std::vector<const ::llvm::MDNode *>' 
#
--- src/gallium/state_trackers/clover/llvm/metadata.hpp.orig	2016-11-10 22:05:17 UTC
+++ src/gallium/state_trackers/clover/llvm/metadata.hpp
@@ -42,7 +42,7 @@ namespace clover {
          get_kernel_nodes(const ::llvm::Module &mod) {
             if (const ::llvm::NamedMDNode *n =
                    mod.getNamedMetadata("opencl.kernels"))
-               return { n->op_begin(), n->op_end() };
+               return { n->getOperand(0), n->getOperand(n->getNumOperands()) };
             else
                return {};
          }


[FILE:1150:patches/patch-src_gallium_state__trackers_clover_util_range.hpp]
From b95533b981af9a6687b41418e7cc2a5652fc2bdb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jean-S=C3=A9bastien=20P=C3=A9dron?= <dumbbell@FreeBSD.org>
Date: Fri, 7 Mar 2014 15:16:08 +0100
Subject: [PATCH 3/3] Work around for clang 3.4 which fails to build Clover

See:
  https://bugs.freedesktop.org/show_bug.cgi?id=74098#c3
--- src/gallium/state_trackers/clover/util/range.hpp.orig	2016-11-10 22:05:17 UTC
+++ src/gallium/state_trackers/clover/util/range.hpp
@@ -362,6 +362,12 @@ namespace clover {
       return { i, i + n };
    }
 
+   namespace detail {
+      template<typename T>
+      using fixup_function_type =
+         typename std::conditional<std::is_function<T>::value, T &, T>::type;
+   }
+
    ///
    /// Create a range by transforming the contents of a number of
    /// source ranges \a rs element-wise using a provided functor \a f.
@@ -369,7 +375,7 @@ namespace clover {
    /// \sa adaptor_range.
    ///
    template<typename F, typename... Rs>
-   adaptor_range<F, Rs...>
+   adaptor_range<detail::fixup_function_type<F>, Rs...>
    map(F &&f, Rs &&... rs) {
       return { std::forward<F>(f), std::forward<Rs>(rs)... };
    }


[FILE:429:patches/patch-src_gallium_winsys_svga_drm_vmw__screen__ioctl.c]
--- src/gallium/winsys/svga/drm/vmw_screen_ioctl.c.orig	2016-11-10 22:05:17 UTC
+++ src/gallium/winsys/svga/drm/vmw_screen_ioctl.c
@@ -70,6 +70,11 @@ vmw_region_size(struct vmw_region *regio
    return region->size;
 }
 
+#if defined(__DragonFly__) || defined(__FreeBSD__) || \
+    defined(__NetBSD__) || defined(__OpenBSD__)
+#define ERESTART EINTR
+#endif
+
 uint32
 vmw_ioctl_context_create(struct vmw_winsys_screen *vws)
 {


[FILE:633:patches/patch-src_glx_glxext.c]
# work-around for https://bugs.freedesktop.org/show_bug.cgi?id=100627
#
--- src/glx/glxext.c.orig	2017-04-01 15:33:37 UTC
+++ src/glx/glxext.c
@@ -906,7 +906,11 @@ __glXInitialize(Display * dpy)
 #if defined(GLX_USE_DRM)
    if (glx_direct && glx_accel) {
 #if defined(HAVE_DRI3)
+#if (defined(__FreeBSD__) || defined(__FreeBSD_kernel__)) && !defined (__DRM_NEXT__)
+      if (getenv("LIBGL_DRI3_ENABLE") && !getenv("LIBGL_DRI3_DISABLE"))
+#else
       if (!getenv("LIBGL_DRI3_DISABLE"))
+#endif
          dpyPriv->dri3Display = dri3_create_display(dpy);
 #endif /* HAVE_DRI3 */
       dpyPriv->dri2Display = dri2CreateDisplay(dpy);


[FILE:302:patches/patch-src_intel_tools_aubinator__error__decode.c]
# expose getline in FreeBSD's stdio.h
#
--- src/intel/tools/aubinator_error_decode.c.orig	2017-05-10 14:13:57 UTC
+++ src/intel/tools/aubinator_error_decode.c
@@ -22,6 +22,9 @@
  *
  */
 
+#ifdef __FreeBSD__
+#define _WITH_GETLINE
+#endif
 #include <stdbool.h>
 #include <stdio.h>
 #include <stdlib.h>


[FILE:619:patches/patch-src_mapi_glapi_gen_gl__gentable.py]
--- src/mapi/glapi/gen/gl_gentable.py.orig	2017-05-15 12:05:59 UTC
+++ src/mapi/glapi/gen/gl_gentable.py
@@ -43,7 +43,7 @@ header = """/* GLXEXT is the define used
 #endif
 
 #if (defined(GLXEXT) && defined(HAVE_BACKTRACE)) \\
-	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__DragonFly__))
+	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__FreeBSD__) && !defined(__DragonFly__))
 #define USE_BACKTRACE
 #endif
 


[FILE:406:patches/patch-src_mesa_main_compiler.h]
--- src/mesa/main/compiler.h.orig	2017-05-10 14:13:57 UTC
+++ src/mesa/main/compiler.h
@@ -51,6 +51,9 @@
 #if defined(__linux__)
 #include <byteswap.h>
 #define CPU_TO_LE32( x )	bswap_32( x )
+#elif defined(__FreeBSD__)
+#include <sys/endian.h>
+#define CPU_TO_LE32( x )	bswap32( x )
 #elif defined(__APPLE__)
 #include <CoreFoundation/CFByteOrder.h>
 #define CPU_TO_LE32( x )	CFSwapInt32HostToLittle( x )


[FILE:377:patches/patch-src_util_build__id.c]
# Elf_ doesn't exist, use Elf32_ or Elf64_
#
--- src/util/build_id.c.orig	2017-05-10 14:13:58 UTC
+++ src/util/build_id.c
@@ -33,7 +33,11 @@
 #endif
 
 #ifndef ElfW
-#define ElfW(type) Elf_##type
+#ifdef __LP64__
+#define ElfW(type) Elf64_##type
+#else
+#define ElfW(type) Elf32_##type
+#endif
 #endif
 
 #define ALIGN(val, align)      (((val) + (align) - 1) & ~((align) - 1))


[FILE:343:patches/patch-src_util_u__endian.h]
--- src/util/u_endian.h.orig	2016-11-10 22:05:17 UTC
+++ src/util/u_endian.h
@@ -54,7 +54,7 @@
 # define PIPE_ARCH_BIG_ENDIAN
 #endif
 
-#elif defined(__OpenBSD__) || defined(__NetBSD__)
+#elif defined(__OpenBSD__) || defined(__NetBSD__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/types.h>
 #include <machine/endian.h>
 


[FILE:47:files/special.mk]
DRI_DRIVERS+=		SWRAST
GALLIUM_DRIVERS+=	SWRAST


[FILE:686:dragonfly/patch-src_intel_tools_aubinator.c]
# We don't have MAP_NORESERVE so use MAP_NOSYNC | MAP_NOCORE and
# hope for the best (this alloc is too big but it's only a test)
#
--- src/intel/tools/aubinator.c.orig	2017-05-10 14:13:57 UTC
+++ src/intel/tools/aubinator.c
@@ -1221,7 +1221,7 @@ int main(int argc, char *argv[])
    /* mmap a terabyte for our gtt space. */
    gtt_size = 1ull << 40;
    gtt = mmap(NULL, gtt_size, PROT_READ | PROT_WRITE,
-              MAP_PRIVATE | MAP_ANONYMOUS |  MAP_NORESERVE, -1, 0);
+              MAP_PRIVATE | MAP_ANONYMOUS | MAP_NOSYNC | MAP_NOCORE, -1, 0);
    if (gtt == MAP_FAILED) {
       fprintf(stderr, "failed to alloc gtt space: %s\n", strerror(errno));
       exit(EXIT_FAILURE);


[FILE:686:freebsd/patch-src_intel_tools_aubinator.c]
# We don't have MAP_NORESERVE so use MAP_NOSYNC | MAP_NOCORE and
# hope for the best (this alloc is too big but it's only a test)
#
--- src/intel/tools/aubinator.c.orig	2017-05-10 14:13:57 UTC
+++ src/intel/tools/aubinator.c
@@ -1221,7 +1221,7 @@ int main(int argc, char *argv[])
    /* mmap a terabyte for our gtt space. */
    gtt_size = 1ull << 40;
    gtt = mmap(NULL, gtt_size, PROT_READ | PROT_WRITE,
-              MAP_PRIVATE | MAP_ANONYMOUS |  MAP_NORESERVE, -1, 0);
+              MAP_PRIVATE | MAP_ANONYMOUS | MAP_NOSYNC | MAP_NOCORE, -1, 0);
    if (gtt == MAP_FAILED) {
       fprintf(stderr, "failed to alloc gtt space: %s\n", strerror(errno));
       exit(EXIT_FAILURE);

