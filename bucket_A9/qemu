# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		qemu
VERSION=		6.0.0
KEYWORDS=		emulators
VARIANTS=		standard
SDESC[standard]=	Fast CPU emulator and virtualizer for x86 platform
HOMEPAGE=		https://www.qemu.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://download.qemu.org/
DISTFILE[1]=		qemu-6.0.0.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs
			nls

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		texi2html:primary:standard
			python-Sphinx:single:python_default
BUILDRUN_DEPENDS=	nettle:primary:standard
			fontconfig:primary:standard
			freetype:primary:standard
			gnutls:primary:standard
			cyrus-sasl:primary:standard
			curl:primary:standard
			vde2:single:standard
			libepoxy:single:standard
			snappy:single:standard

USES=			cpe gmake pkgconfig bison perl:build python:build
			jpeg png mesa gettext-runtime gettext-tools ncurses
			makeinfo ninja zstd lzo
GNOME_COMPONENTS=	gdkpixbuf gtk2 vte
SDL_COMPONENTS=		sdl2 image2
XORG_COMPONENTS=	x11 xext

LICENSE=		GPLv2:primary
LICENSE_TERMS=		primary:{{WRKSRC}}/LICENSE
LICENSE_FILE=		GPLv2:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		emulators/qemu

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--disable-usb-redir
			--disable-stack-protector
			--disable-kvm
			--disable-xen
			--disable-vde
			--enable-docs
			--enable-nettle
			--enable-profiler
			--enable-curses
			--prefix={{PREFIX}}
			--cc={{CC}}
			--python={{PYTHON_CMD}}
			--localstatedir=/var

BUILD_WRKSRC=		{{WRKSRC}}/build
MAKE_ENV=		BSD_MAKE="{{MAKE}}"
			V=1

INSTALL_WRKSRC=		{{WRKSRC}}/build
PLIST_SUB=		JQUERY=3.5.1
			UNDERSCORE=1.13.1

CFLAGS=			-I{{NCURSESBASE}}/include/ncursesw
VAR_OPSYS[freebsd]=	CONFIGURE_ARGS=--enable-netmap
			CONFIGURE_ARGS=--disable-linux-user
			CONFIGURE_ARGS=--disable-linux-aio
VAR_OPSYS[linux]=	CONFIGURE_ARGS=--disable-netmap
VAR_OPSYS[dragonfly]=	CONFIGURE_ARGS=--disable-netmap
			CONFIGURE_ARGS=--disable-linux-user
			CONFIGURE_ARGS=--disable-linux-aio

post-patch:
	# silence some include warnings
	${MKDIR} ${WRKSRC}/bsd-user/dragonfly

pre-install:
	# for some reason file is considered out-of-date
	${TOUCH} ${WRKSRC}/config-host.mak

post-install:
	${INSTALL_SCRIPT} ${FILESDIR}/qemu-ifup.sample \
		${STAGEDIR}${PREFIX}/etc
	${INSTALL_SCRIPT} ${FILESDIR}/qemu-ifdown.sample \
		${STAGEDIR}${PREFIX}/etc
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/qemu-*
	(cd ${WRKSRC} && ${COPYTREE_SHARE} docs ${STAGEDIR}${STD_DOCDIR}/)
	# remove empty directories
	${RM} -r ${STAGEDIR}/var

[FILE:782:descriptions/desc.primary]
QEMU is a fast processor emulator using dynamic translation to achieve
good emulation speed.  QEMU has two operating modes:

 * Full system emulation. In this mode, QEMU emulates a full system (for
   example a PC), including a processor and various peripherials.  It can
   be used to launch different Operating Systems without rebooting the PC
   or to debug system code.
 * User mode emulation (Linux host only). In this mode, QEMU can launch
   Linux processes compiled for one CPU on another CPU. It can be used to
   launch the Wine Windows API emulator or to ease cross-compilation and
   cross-debugging.

As QEMU requires no host kernel patches to run, it is safe and easy to use.

See also the preconfigured system images on http://oszoo.org/
Many live cd isos also work.


[FILE:96:distinfo]
87bc1a471ca24b97e7005711066007d443423d19aacda3d442558ae032fa30b9    107333232 qemu-6.0.0.tar.xz


[FILE:3598:manifests/plist.primary]
@sample etc/qemu-ifdown.sample
@sample etc/qemu-ifup.sample
%%ONLY-LINUX%%bin/
 ivshmem-client
 ivshmem-server
 qemu-aarch64
 qemu-aarch64_be
 qemu-alpha
 qemu-arm
 qemu-armeb
 qemu-cris
 qemu-hppa
 qemu-m68k
 qemu-microblaze
 qemu-microblazeel
 qemu-mips
 qemu-mips64
 qemu-mips64el
 qemu-mipsel
 qemu-mipsn32
 qemu-mipsn32el
 qemu-nios2
 qemu-or1k
 qemu-ppc
 qemu-ppc64
 qemu-ppc64abi32
 qemu-ppc64le
 qemu-pr-helper
 qemu-riscv32
 qemu-riscv64
 qemu-s390x
 qemu-sh4
 qemu-sh4eb
 qemu-sparc32plus
 qemu-tilegx
 qemu-xtensa
 qemu-xtensaeb
%%ONLY-LINUX%%libexec/qemu-bridge-helper
bin/
 elf2dmp
 qemu-edid
 qemu-ga
 qemu-i386
 qemu-img
 qemu-io
 qemu-nbd
 qemu-sparc
 qemu-sparc64
 qemu-storage-daemon
 qemu-system-aarch64
 qemu-system-alpha
 qemu-system-arm
 qemu-system-avr
 qemu-system-cris
 qemu-system-hppa
 qemu-system-i386
 qemu-system-m68k
 qemu-system-microblaze
 qemu-system-microblazeel
 qemu-system-mips
 qemu-system-mips64
 qemu-system-mips64el
 qemu-system-mipsel
 qemu-system-moxie
 qemu-system-nios2
 qemu-system-or1k
 qemu-system-ppc
 qemu-system-ppc64
 qemu-system-riscv32
 qemu-system-riscv64
 qemu-system-rx
 qemu-system-s390x
 qemu-system-sh4
 qemu-system-sh4eb
 qemu-system-sparc
 qemu-system-sparc64
 qemu-system-tricore
 qemu-system-x86_64
 qemu-system-xtensa
 qemu-system-xtensaeb
 qemu-x86_64
share/applications/qemu.desktop
share/icons/hicolor/128x128/apps/qemu.png
share/icons/hicolor/16x16/apps/qemu.png
share/icons/hicolor/24x24/apps/qemu.png
share/icons/hicolor/256x256/apps/qemu.png
share/icons/hicolor/32x32/apps/
 qemu.bmp
 qemu.png
share/icons/hicolor/48x48/apps/qemu.png
share/icons/hicolor/512x512/apps/qemu.png
share/icons/hicolor/64x64/apps/qemu.png
share/icons/hicolor/scalable/apps/qemu.svg
share/man/man1/
 qemu-img.1.gz
 qemu-storage-daemon.1.gz
 qemu.1.gz
share/man/man7/
 qemu-block-drivers.7.gz
 qemu-cpu-models.7.gz
 qemu-ga-ref.7.gz
 qemu-qmp-ref.7.gz
 qemu-storage-daemon-qmp-ref.7.gz
share/man/man8/
 qemu-ga.8.gz
 qemu-nbd.8.gz
 qemu-pr-helper.8.gz
share/qemu/
 QEMU,cgthree.bin
 QEMU,tcx.bin
 bamboo.dtb
 bios-256k.bin
 bios-microvm.bin
 bios.bin
 canyonlands.dtb
 edk2-aarch64-code.fd
 edk2-arm-code.fd
 edk2-arm-vars.fd
 edk2-i386-code.fd
 edk2-i386-secure-code.fd
 edk2-i386-vars.fd
 edk2-licenses.txt
 edk2-x86_64-code.fd
 edk2-x86_64-secure-code.fd
 efi-e1000.rom
 efi-e1000e.rom
 efi-eepro100.rom
 efi-ne2k_pci.rom
 efi-pcnet.rom
 efi-rtl8139.rom
 efi-virtio.rom
 efi-vmxnet3.rom
 hppa-firmware.img
 kvmvapic.bin
 linuxboot.bin
 linuxboot_dma.bin
 multiboot.bin
 npcm7xx_bootrom.bin
 openbios-ppc
 openbios-sparc32
 openbios-sparc64
 opensbi-riscv32-generic-fw_dynamic.bin
 opensbi-riscv32-generic-fw_dynamic.elf
 opensbi-riscv64-generic-fw_dynamic.bin
 opensbi-riscv64-generic-fw_dynamic.elf
 palcode-clipper
 petalogix-ml605.dtb
 petalogix-s3adsp1800.dtb
 pvh.bin
 pxe-e1000.rom
 pxe-eepro100.rom
 pxe-ne2k_pci.rom
 pxe-pcnet.rom
 pxe-rtl8139.rom
 pxe-virtio.rom
 qboot.rom
 qemu-nsis.bmp
 qemu_vga.ndrv
 s390-ccw.img
 s390-netboot.img
 sgabios.bin
 skiboot.lid
 slof.bin
 trace-events-all
 u-boot-sam460-20100605.bin
 u-boot.e500
 vgabios-ati.bin
 vgabios-bochs-display.bin
 vgabios-cirrus.bin
 vgabios-qxl.bin
 vgabios-ramfb.bin
 vgabios-stdvga.bin
 vgabios-virtio.bin
 vgabios-vmware.bin
 vgabios.bin
share/qemu/firmware/
 50-edk2-i386-secure.json
 50-edk2-x86_64-secure.json
 60-edk2-aarch64.json
 60-edk2-arm.json
 60-edk2-i386.json
 60-edk2-x86_64.json
share/qemu/keymaps/
 ar
 bepo
 cz
 da
 de
 de-ch
 en-gb
 en-us
 es
 et
 fi
 fo
 fr
 fr-be
 fr-ca
 fr-ch
 hr
 hu
 is
 it
 ja
 lt
 lv
 mk
 nl
 no
 pl
 pt
 pt-br
 ru
 sl
 sv
 th
 tr


[FILE:8027:manifests/plist.docs]
share/doc/qemu/
 .buildinfo
 genindex.html
 index.html
 objects.inv
 search.html
 searchindex.js
share/doc/qemu/_static/
 alabaster.css
 basic.css
 custom.css
 doctools.js
 documentation_options.js
 file.png
 jquery-%%JQUERY%%.js
 jquery.js
 language_data.js
 minus.png
 plus.png
 pygments.css
 searchtools.js
 underscore-%%UNDERSCORE%%.js
 underscore.js
share/doc/qemu/devel/
 atomics.html
 bitops.html
 block-coroutine-wrapper.html
 build-system.html
 clocks.html
 code-of-conduct.html
 conflict-resolution.html
 control-flow-integrity.html
 decodetree.html
 fuzzing.html
 index.html
 kconfig.html
 loads-stores.html
 memory.html
 migration.html
 multi-process.html
 multi-thread-tcg.html
 qgraph.html
 qom.html
 qtest.html
 reset.html
 s390-dasd-ipl.html
 secure-coding-practices.html
 stable-process.html
 style.html
 tcg-icount.html
 tcg-plugins.html
 tcg.html
 testing.html
 tracing.html
share/doc/qemu/docs/
 COLO-FT.txt
 amd-memory-encryption.txt
 barrier.txt
 block-replication.txt
 bootindex.txt
 can.txt
 ccid.txt
 colo-proxy.txt
 conf.py
 confidential-guest-support.txt
 defs.rst.inc
 hyperv.txt
 igd-assign.txt
 image-fuzzer.txt
 index.rst
 memory-hotplug.txt
 meson.build
 multi-thread-compression.txt
 multiseat.txt
 nvdimm.txt
 papr-pef.txt
 pci_expander_bridge.txt
 pcie.txt
 pcie_pci_bridge.txt
 pvrdma.txt
 qcow2-cache.txt
 qdev-device-use.txt
 qemu-option-trace.rst.inc
 qemu_logo.pdf
 qemupciserial.inf
 rdma.txt
 replay.txt
 spice-port-fqdn.txt
 throttle.txt
 u2f.txt
 usb-storage.txt
 usb2.txt
 virtio-balloon-stats.txt
 xbzrle.txt
 xen-save-devices-state.txt
share/doc/qemu/docs/_templates/editpage.html
share/doc/qemu/docs/config/
 ich9-ehci-uhci.cfg
 mach-virt-graphical.cfg
 mach-virt-serial.cfg
 q35-emulated.cfg
 q35-virtio-graphical.cfg
 q35-virtio-serial.cfg
share/doc/qemu/docs/devel/
 atomics.rst
 bitops.rst
 blkdebug.txt
 blkverify.txt
 block-coroutine-wrapper.rst
 build-system.rst
 clocks.rst
 code-of-conduct.rst
 conflict-resolution.rst
 control-flow-integrity.rst
 decodetree.rst
 fuzzing.rst
 index.rst
 kconfig.rst
 loads-stores.rst
 lockcnt.txt
 memory.rst
 migration.rst
 multi-process.rst
 multi-thread-tcg.rst
 multiple-iothreads.txt
 qapi-code-gen.txt
 qgraph.rst
 qom.rst
 qtest.rst
 rcu.txt
 replay.txt
 reset.rst
 s390-dasd-ipl.rst
 secure-coding-practices.rst
 stable-process.rst
 style.rst
 tcg-icount.rst
 tcg-plugins.rst
 tcg.rst
 testing.rst
 tracing.rst
 virtio-migration.txt
 writing-qmp-commands.txt
share/doc/qemu/docs/devel/_templates/editpage.html
share/doc/qemu/docs/interop/
 bitmaps.rst
 dbus-vmstate.rst
 dbus.rst
 firmware.json
 index.rst
 live-block-operations.rst
 nbd.txt
 parallels.txt
 pr-helper.rst
 prl-xml.txt
 qcow2.txt
 qed_spec.txt
 qemu-ga-ref.rst
 qemu-ga.rst
 qemu-qmp-ref.rst
 qemu-storage-daemon-qmp-ref.rst
 qmp-intro.txt
 qmp-spec.txt
 vhost-user-gpu.rst
 vhost-user.json
 vhost-user.rst
 vhost-vdpa.rst
 vnc-ledstate-Pseudo-encoding.txt
share/doc/qemu/docs/interop/_templates/editpage.html
share/doc/qemu/docs/specs/
 acpi_cpu_hotplug.txt
 acpi_hest_ghes.rst
 acpi_hw_reduced_hotplug.rst
 acpi_mem_hotplug.txt
 acpi_nvdimm.txt
 acpi_pci_hotplug.txt
 edu.txt
 fw_cfg.txt
 index.rst
 ivshmem-spec.txt
 pci-ids.txt
 pci-serial.txt
 pci-testdev.txt
 ppc-spapr-hcalls.txt
 ppc-spapr-hotplug.txt
 ppc-spapr-numa.rst
 ppc-spapr-uv-hcalls.txt
 ppc-spapr-xive.rst
 ppc-xive.rst
 pvpanic.txt
 rocker.txt
 standard-vga.txt
 tpm.rst
 virt-ctlr.txt
 vmcoreinfo.txt
 vmgenid.txt
 vmw_pvscsi-spec.txt
share/doc/qemu/docs/specs/_templates/editpage.html
share/doc/qemu/docs/sphinx/
 depfile.py
 hxtool.py
 kerneldoc.py
 kernellog.py
 qapidoc.py
 qmp_lexer.py
share/doc/qemu/docs/sphinx/__pycache__/
 depfile.cpython-38.pyc
 hxtool.cpython-38.pyc
 kerneldoc.cpython-38.pyc
 kernellog.cpython-38.pyc
 qapidoc.cpython-38.pyc
 qmp_lexer.cpython-38.pyc
share/doc/qemu/docs/spin/
 aio_notify.promela
 aio_notify_accept.promela
 aio_notify_bug.promela
 tcg-exclusive.promela
 win32-qemu-event.promela
share/doc/qemu/docs/system/
 build-platforms.rst
 cpu-hotplug.rst
 cpu-models-mips.rst.inc
 cpu-models-x86.rst.inc
 deprecated.rst
 device-url-syntax.rst.inc
 gdb.rst
 generic-loader.rst
 guest-loader.rst
 images.rst
 index.rst
 invocation.rst
 ivshmem.rst
 keys.rst
 keys.rst.inc
 license.rst
 linuxboot.rst
 managed-startup.rst
 monitor.rst
 multi-process.rst
 mux-chardev.rst
 mux-chardev.rst.inc
 net.rst
 nvme.rst
 pr-manager.rst
 qemu-block-drivers.rst
 qemu-block-drivers.rst.inc
 qemu-cpu-models.rst
 qemu-manpage.rst
 quickstart.rst
 removed-features.rst
 security.rst
 target-arm.rst
 target-avr.rst
 target-i386-desc.rst.inc
 target-i386.rst
 target-m68k.rst
 target-mips.rst
 target-ppc.rst
 target-riscv.rst
 target-rx.rst
 target-s390x.rst
 target-sparc.rst
 target-sparc64.rst
 target-xtensa.rst
 targets.rst
 tls.rst
 usb.rst
 virtio-net-failover.rst
 virtio-pmem.rst
 vnc-security.rst
share/doc/qemu/docs/system/_templates/editpage.html
share/doc/qemu/docs/system/arm/
 aspeed.rst
 collie.rst
 cpu-features.rst
 digic.rst
 gumstix.rst
 integratorcp.rst
 mps2.rst
 musca.rst
 musicpal.rst
 nseries.rst
 nuvoton.rst
 orangepi.rst
 palm.rst
 raspi.rst
 realview.rst
 sabrelite.rst
 sbsa.rst
 stellaris.rst
 sx1.rst
 versatile.rst
 vexpress.rst
 virt.rst
 xlnx-versal-virt.rst
 xscale.rst
share/doc/qemu/docs/system/i386/
 microvm.rst
 pc.rst
share/doc/qemu/docs/system/ppc/
 embedded.rst
 powermac.rst
 powernv.rst
 prep.rst
 pseries.rst
share/doc/qemu/docs/system/riscv/
 microchip-icicle-kit.rst
 sifive_u.rst
share/doc/qemu/docs/system/s390x/
 3270.rst
 bootdevices.rst
 css.rst
 protvirt.rst
 vfio-ap.rst
 vfio-ccw.rst
share/doc/qemu/docs/tools/
 index.rst
 qemu-img.rst
 qemu-nbd.rst
 qemu-pr-helper.rst
 qemu-storage-daemon.rst
 qemu-trace-stap.rst
 virtfs-proxy-helper.rst
 virtiofsd.rst
share/doc/qemu/docs/tools/_templates/editpage.html
share/doc/qemu/docs/user/
 index.rst
 main.rst
share/doc/qemu/docs/user/_templates/editpage.html
share/doc/qemu/interop/
 bitmaps.html
 dbus-vmstate.html
 dbus.html
 index.html
 live-block-operations.html
 pr-helper.html
 qemu-ga-ref.html
 qemu-ga.html
 qemu-qmp-ref.html
 qemu-storage-daemon-qmp-ref.html
 vhost-user-gpu.html
 vhost-user.html
 vhost-vdpa.html
share/doc/qemu/specs/
 acpi_hest_ghes.html
 acpi_hw_reduced_hotplug.html
 index.html
 ppc-spapr-numa.html
 ppc-spapr-xive.html
 ppc-xive.html
 tpm.html
share/doc/qemu/system/
 build-platforms.html
 cpu-hotplug.html
 deprecated.html
 gdb.html
 generic-loader.html
 guest-loader.html
 images.html
 index.html
 invocation.html
 ivshmem.html
 keys.html
 license.html
 linuxboot.html
 managed-startup.html
 monitor.html
 multi-process.html
 mux-chardev.html
 net.html
 nvme.html
 pr-manager.html
 qemu-block-drivers.html
 qemu-cpu-models.html
 qemu-manpage.html
 quickstart.html
 removed-features.html
 security.html
 target-arm.html
 target-avr.html
 target-i386.html
 target-m68k.html
 target-mips.html
 target-ppc.html
 target-riscv.html
 target-rx.html
 target-s390x.html
 target-sparc.html
 target-sparc64.html
 target-xtensa.html
 targets.html
 tls.html
 usb.html
 virtio-net-failover.html
 virtio-pmem.html
 vnc-security.html
share/doc/qemu/system/arm/
 aspeed.html
 collie.html
 cpu-features.html
 digic.html
 gumstix.html
 integratorcp.html
 mps2.html
 musca.html
 musicpal.html
 nseries.html
 nuvoton.html
 orangepi.html
 palm.html
 raspi.html
 realview.html
 sabrelite.html
 sbsa.html
 stellaris.html
 sx1.html
 versatile.html
 vexpress.html
 virt.html
 xlnx-versal-virt.html
 xscale.html
share/doc/qemu/system/i386/
 microvm.html
 pc.html
share/doc/qemu/system/ppc/
 embedded.html
 powermac.html
 powernv.html
 prep.html
 pseries.html
share/doc/qemu/system/riscv/
 microchip-icicle-kit.html
 sifive_u.html
share/doc/qemu/system/s390x/
 3270.html
 bootdevices.html
 css.html
 protvirt.html
 vfio-ap.html
 vfio-ccw.html
share/doc/qemu/tools/
 index.html
 qemu-img.html
 qemu-nbd.html
 qemu-pr-helper.html
 qemu-storage-daemon.html
 qemu-trace-stap.html
 virtfs-proxy-helper.html
 virtiofsd.html
share/doc/qemu/user/
 index.html
 main.html


[FILE:297:manifests/plist.nls]
share/locale/bg/LC_MESSAGES/qemu.mo
share/locale/de_DE/LC_MESSAGES/qemu.mo
share/locale/fr_FR/LC_MESSAGES/qemu.mo
share/locale/hu/LC_MESSAGES/qemu.mo
share/locale/it/LC_MESSAGES/qemu.mo
share/locale/sv/LC_MESSAGES/qemu.mo
share/locale/tr/LC_MESSAGES/qemu.mo
share/locale/zh_CN/LC_MESSAGES/qemu.mo


[FILE:365:patches/patch-disas_libvixl_vixl_a64_disasm-a64.cc]
--- disas/libvixl/vixl/a64/disasm-a64.cc.orig	2021-04-29 17:18:58 UTC
+++ disas/libvixl/vixl/a64/disasm-a64.cc
@@ -2693,7 +2693,7 @@ void Disassembler::AppendPCRelativeOffse
   if (offset < 0) {
     abs_offset = -abs_offset;
   }
-  AppendToOutput("#%c0x%" PRIx64, sign, abs_offset);
+  AppendToOutput("#%c0x%" PRIx64, sign, offset < 0 ? -offset : offset);
 }
 
 


[FILE:1232:patches/patch-meson.build]
--- meson.build.orig	2021-04-29 17:18:58 UTC
+++ meson.build
@@ -607,15 +607,16 @@ if have_system and not get_option('curse
       has_curses_h = cc.has_header('curses.h', args: curses_compile_args)
     endif
     if has_curses_h
-      curses_libname_list = (targetos == 'windows' ? ['pdcurses'] : ['ncursesw', 'cursesw'])
+      libtinfo = cc.find_library('tinfow', required: false, static: enable_static)
+      curses_libname_list = (targetos == 'windows' ? ['pdcurses'] : ['ncursesw'])
       foreach curses_libname : curses_libname_list
         libcurses = cc.find_library(curses_libname,
                                     required: false,
                                     kwargs: static_kwargs)
         if libcurses.found()
-          if cc.links(curses_test, args: curses_compile_args, dependencies: libcurses)
+          if cc.links(curses_test, args: curses_compile_args, dependencies: [libcurses,libtinfo])
             curses = declare_dependency(compile_args: curses_compile_args,
-                                        dependencies: [libcurses])
+                                        dependencies: [libcurses, libtinfo])
             break
           else
             msg = 'curses library not usable'


[FILE:423:patches/patch-net_tap-bsd.c]
--- net/tap-bsd.c.orig	2021-04-29 17:18:58 UTC
+++ net/tap-bsd.c
@@ -31,9 +31,16 @@
 
 #if defined(__NetBSD__) || defined(__FreeBSD__)
 #include <sys/ioctl.h>
+#include <sys/socket.h>
 #include <net/if.h>
 #include <net/if_tap.h>
 #endif
+#if defined(__DragonFly)
+#include <sys/ioctl.h>
+#include <sys/socket.h>
+#include <net/if.h>
+#include <net/tap/if_tap.h>
+#endif
 
 #if defined(__OpenBSD__)
 #include <sys/param.h>


[FILE:314:patches/patch-util_getauxval.c]
--- util/getauxval.c.orig	2021-04-29 17:18:59 UTC
+++ util/getauxval.c
@@ -98,7 +98,7 @@ unsigned long qemu_getauxval(unsigned lo
     return 0;
 }
 
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) && __FreeBSD_version__ > 1200001
 #include <sys/auxv.h>
 
 unsigned long qemu_getauxval(unsigned long type)


[FILE:7685:files/pkg-message-single]
FreeBSD host notes
==================

- Needs to set net.link.tap.user_open sysctl in order to use /dev/tap*
  networking as non-root.  Don't forget to adjust device node permissions in
  /etc/devfs.rules.

- slirp (usermode networking) is fixed now in cvs, on FreeSBIE 1.0 guests you
  still have to manually do: echo nameserver 10.0.2.3 >/etc/resolv.conf but
  i've been told that that's normal.  (fixed on FreeSBIE 1.1.) And you have
  to wait a bit for dhclient to do its thing; traffic to address 10.0.2.2 is
  routed to 127.1 on the host.

- Expect timer problems when guest kernel HZ is > hosts, for example time
  sleep 1 takes 49 seconds and booting sleeps for minutes at the acd0 probe
  with a FreeSBIE 1.0 guest, thats because its kernel is built with HZ=5000,
  and FreeBSD's default is 100...  (no longer a problem with FreeSBIE 1.1.)
  The linux 2.6 kernel uses 1000 by default btw.  (changed to 250 later, and
  recent linux kernels now no longer have a fixed HZ, aka `tickless
  kernel'...)  Enabling /dev/rtc doesn't seem to help either (not included
  since it needs a patch to emulators/rtc.)

- Update: the above problem has gotten worse with FreeBSD guests
  somewhere before 8.0, mainly since the kernel now usually wants
  double or even quadruple number of timer irqs compared to HZ if
  it detects an apic (and at least early versions of FreeBSD 8 had
  a bug that essentially halved qemu's clock rate too); the only
  reason you usually don't see symptoms of this with FreeBSD 8
  guests is they automatically reduce their HZ to 100 when running
  in a VM while the default for the host kernel is still HZ=1000.
  Workaround: you can disable the apic clock in the guest by setting

    hint.apic.0.clock="0"

  in loader.conf(5) (or manually at the loader prompt), if that
  doesn't work the only things you can do is either reduce the
  guest's HZ to, say, 100 by setting e.g.

    kern.hz="100"

  from the loader as above (which usually is a good idea in a VM
  anyway and FreeBSD 8 now does by itself as mentioned), or otherwise
  increase the host's HZ to 2000 or even 4000 from the loader in
  the same way.

- The -smb option (smb-export local dir to guest using the default
  slirp networking) needs the samba port/package installed
  in addition to qemu. (SAMBA knob.)

- If you want to use usb devices connected to the host in the guest
  yot need either recent 10-current (not tested yet much) or you can
  use usbredir over the network (see below); also unless you are
  running qemu as root you then need to fix permissions for /dev/ugen*
  device nodes: if you are on 5.x or later (devfs) put a rule in
  /etc/devfs.rules, activate it in /etc/rc.conf and run /etc/rc.d/devfs
  restart.  Example devfs.rules:

    [ugen_ruleset=20]
    add path 'ugen*' mode 660 group operator

  corresponding rc.conf line:

    devfs_system_ruleset="ugen_ruleset"

- If you want to test the new (in 0.15.0) usb network redirection (USBREDIR
  option) see this thread by Hans de Goede <hdegoede <at> redhat.com>:

    http://thread.gmane.org/gmane.comp.emulators.qemu/110176/focus=110183

  Quote:

  Example usage:

  1) Start usbredirserver for a usb device:
  sudo usbredirserver 045e:0772
  2) Start qemu with usb2 support + a chardev talking to usbredirserver +
     a usb-redir device using this chardev:
  qemu -usb \
    -readconfig docs/ich9-ehci-uhci.cfg \
    -chardev socket,id=usbredirchardev,host=localhost,port=4000 \
    -device usb-redir,chardev=usbredirchardev,id=usbredirdev ...

  [you would replace docs/ich9-ehci-uhci.cfg with e.g.
  /raven/share/doc/qemu/docs/ich9-ehci-uhci.cfg, but turns out
  ehci was broken for me here with FreeBSD guests and the previous
  qemu version at least, I got:

    FETCHENTRY: entry at 22C5484 is of type 2 which is not supported yet processing error - resetting ehci HC
    Assertion failed: (0), function ehci_advance_state, file /data/ports/emulators/qemu-devel/work/qemu-0.15.0/hw/usb-ehci.c, line 2045.

  The new qemu version works better tho.]

- Still usb: since the hub is no longer attached to the uchi controller and
  the wakeup mechanism, resume interrupt is not implemented yet linux guests
  will suspend the bus, i.e. they wont see devices usb_add'ed after its
  (linux') uhci module got loaded.  Workaround: either add devices before
  linux loads the module or rmmod and modprobe it afterwards.  [Not sure
  if this still applies to the new libusb host code used on recent
  10-current.]

- If you build qemu wihout SDL and then get crashes running it try passing it
  -nographic.  This should probably be default in that case...

- qemu's network boot roms (-boot n) have a bug when bootfiles sizes are a
  multiple of blksize, if this affects you (like with FreeBSD's /boot/pxeboot)
  you can do like

    cp /boot/pxeboot pxeboot-qemu && chmod +w pxeboot-qemu && echo >>pxeboot-qemu

  and then use pxeboot-qemu.  Actually you need recent btx code
  (from after 7.0 was released) because of the real mode boot
  problem, so use at least pxeboot from there.  And I just did that
  for the pxeboot extracted out of

    ftp://ftp.freebsd.org/pub/FreeBSD/snapshots/200805/7.0-STABLE-200805-i386-bootonly.iso

  and placed it here:

    http://people.freebsd.org/~nox/qemu/pxeboot-qemu

- If you use slirp (usernet, the default) and want to mount nfs into the guest
  and you are not running qemu as root, then mountd(8) on the exporting box
  needs to be run with -n in order to accept requests from ports >= 1024.

- (not FreeBSD-specific:) There have been reports of qcow2 corruption with (at
  least) win2k guests on recent kvm (which uses similar qcow2 code than qemu
  now, see this thread:

    http://lists.gnu.org/archive/html/qemu-devel/2009-02/msg00713.html -

  the consensus on that thread seems to be that qcow(2) code has always been
  experimental and you should use raw images if you want reliability; raw is
  also usually faster.)  You should be able to migrate existing images to raw
  using qemu-img(1)'s convert function; raw doesn't support advanced features
  like snapshots tho.  [a few important qcow2 bugfixed have been committed in
  the meantime so this _might_ be less of an issue now; and meanwhile there
  also is the new qed format - I don't know how stable that one is.]

- (also not FreeBSD-specific:)  It is recommended to pass raw images using the
  new -drive syntax, specifying format=raw explicitly in order to avoid
  malicious guests being able to exploit the format autodetection thats
  otherwise getting used.  (Not that you should run malicious guests anyway,
  but this eleminates at least a known attack vector.)

- qemu now has improved physical cdrom support, but still there is at
  least one known problem: you need to have the guest eject the disc if you
  want to change it/take it out, or otherwise the guest may continue using
  state (like size) of the old disc.  (You can also do like `change ide1-cd0
  /dev/acd0' in the monitor after taking out the disc if a guest cannot eject
  it itself.)

- The default configuration location (qemu-ifup script etc.) has been changed
  from /etc to PREFIX/etc (usually /raven/etc).  Move your files accordingly.

- The pcap code (-net nic... -net pcap,ifname=...) should work properly now,
  with only one exception:  Advanced features like TSO used on the host
  interface can cause oversize packets which now do get truncated to avoid
  confusing/panicing guests but of course still will cause retransmissions.
  So if you see slow throughput and `pcap_send: packet size > ..., truncating'
  messages on qemu's tty try disabling TSO etc on the host interface at least
  while using pcap.


[FILE:20:files/qemu-ifdown.sample]
#!/bin/sh
exec true


[FILE:20:files/qemu-ifup.sample]
#!/bin/sh
exec true


[FILE:436:dragonfly/patch-disas_libvixl_vixl_utils.h]
--- disas/libvixl/vixl/utils.h.orig	2021-04-29 17:18:58 UTC
+++ disas/libvixl/vixl/utils.h
@@ -42,6 +42,13 @@ namespace vixl {
 #define PRINTF_CHECK(format_index, varargs_index)
 #endif
 
+#ifndef INT64_C
+#define INT32_C(c) c
+#define INT64_C(c) (c ## LL)
+#define UINT32_C(c) (c ## U)
+#define UINT64_C(c) (c ## ULL)
+#endif
+
 // Check number width.
 inline bool is_intn(unsigned n, int64_t x) {
   VIXL_ASSERT((0 < n) && (n < 64));


[FILE:323:dragonfly/patch-hw-ppc_newworld.c]
--- hw/ppc/mac_newworld.c.orig	2021-04-29 17:18:58 UTC
+++ hw/ppc/mac_newworld.c
@@ -75,6 +75,11 @@
 #include "hw/sysbus.h"
 #include "trace.h"
 
+/* FreeBSD headers define this */
+#ifdef round_page
+#undef round_page
+#endif
+
 #define MAX_IDE_BUS 2
 #define CFG_ADDR 0xf0000510
 #define TBFREQ (100UL * 1000UL * 1000UL)


[FILE:358:dragonfly/patch-hw_ppc_mac__oldworld.c]
--- hw/ppc/mac_oldworld.c.orig	2021-04-29 17:18:58 UTC
+++ hw/ppc/mac_oldworld.c
@@ -63,6 +63,11 @@
 #define PROM_BASE 0xffc00000
 #define PROM_SIZE (4 * MiB)
 
+/* FreeBSD headers define this */
+#ifdef round_page
+#undef round_page
+#endif
+
 static void fw_cfg_boot_set(void *opaque, const char *boot_device,
                             Error **errp)
 {


[FILE:906:dragonfly/patch-util_coroutine-ucontext.c]
--- util/coroutine-ucontext.c.orig	2021-04-29 17:18:59 UTC
+++ util/coroutine-ucontext.c
@@ -221,7 +221,15 @@ Coroutine *qemu_coroutine_new(void)
                 2, arg.i[0], arg.i[1]);
 
     /* swapcontext() in, siglongjmp() back out */
-    if (!sigsetjmp(old_env, 0)) {
+    /* Save signal mask in this sigsetjmp, because makecontext on DragonFly
+     * leaves all signals blocked when entering the new context with
+     * swapcontext.
+     * Workaround this, by just having the signal mask restored by the
+     * siglongjmp that brings us back from qemu_coroutine_new().
+     * XXX Remove this workaround when the makecontext behaviour is fixed
+     *     on DragonFly.
+     */
+    if (!sigsetjmp(old_env, 1)) {
         start_switch_fiber_asan(COROUTINE_YIELD, &fake_stack_save, co->stack,
                                 co->stack_size);
         start_switch_fiber_tsan(&fake_stack_save,

