# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		lagrange
VERSION=		1.18.4
KEYWORDS=		www
VARIANTS=		std
SDESC[std]=		Web Browser-like beautiful Gemini Client
HOMEPAGE=		https://github.com/skyjake/lagrange
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/skyjake/lagrange/releases/download/v1.18.4/
DISTFILE[1]=		lagrange-1.18.4.tar.gz:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			man

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		zip:primary:std
			mpg123:dev:std
			WebP:dev:std
			fribidi:dev:std
			harfbuzz:dev:std
			libunistring:dev:std
BUILDRUN_DEPENDS=	fribidi:primary:std
			harfbuzz:primary:std
			libunistring:primary:std
			mpg123:primary:std
			WebP:primary:std

USES=			cmake ncurses pcre pkgconfig zlib ssl curl
			desktop-utils:primary
SDL_COMPONENTS=		sdl2
XORG_COMPONENTS=	x11

LICENSE=		BSD2CLAUSE:primary
LICENSE_FILE=		BSD2CLAUSE:{{WRKSRC}}/LICENSE.md
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		www/lagrange

CMAKE_ARGS=		-DENABLE_FRIBIDI:BOOL=ON
			-DENABLE_FRIBIDI_BUILD:BOOL=OFF
			-DENABLE_HARFBUZZ:BOOL=ON
			-DENABLE_HARFBUZZ_MINIMAL:BOOL=OFF
			-DENABLE_MPG123:BOOL=ON
			-DENABLE_WEBP:BOOL=ON
			-DENABLE_X11_XLIB:BOOL=ON
			-DENABLE_TUI:BOOL=ON
			-DENABLE_GUI:BOOL=ON

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/*grange

[FILE:776:descriptions/desc.primary]
Lagrange is a desktop GUI client for browsing Geminispace. It offers 
modern conveniences familiar from web browsers, such as smooth scrolling, 
inline image viewing, multiple tabs, visual themes, Unicode fonts, 
bookmarks, history, and page outlines.

Some features:
* Ability to optionally view images inside the gemtext document
* Beautiful typography using Unicode fonts
* Autogenerated page style and Unicode icon for each Gemini domain
* Smart URL field suggestions: Search bookmarks, history, identities
* Sidebar for page outline, managing bookmarks and identities as well as 
  viewing history
* Multiple tabs
* Identity management: Create and use TLS client certificates
* Audio playback: MP3, Ogg Vorbis, WAV
* And more! Open about:help in the app, or see help.gmi


[FILE:101:distinfo]
6972750acfcbb836ec33fe7ddace9415081b926353d7d2eab7a2cf8faee66d30     11314489 lagrange-1.18.4.tar.gz


[FILE:266:manifests/plist.primary]
bin/
 clagrange
 lagrange
share/applications/
 fi.skyjake.Lagrange.desktop
 fi.skyjake.clagrange.desktop
share/icons/hicolor/256x256/apps/
 fi.skyjake.Lagrange.png
 fi.skyjake.clagrange.png
share/lagrange/resources.lgr
share/metainfo/fi.skyjake.Lagrange.appdata.xml


[FILE:26:manifests/plist.man]
share/man/man1/lagrange.1


[FILE:474:patches/patch-cmake_Depends.cmake]
--- cmake/Depends.cmake.orig	2024-12-10 15:28:21 UTC
+++ cmake/Depends.cmake
@@ -43,6 +43,7 @@ else ()
     set (TFDN_ENABLE_STATIC_LINK ${ENABLE_STATIC} CACHE BOOL "" FORCE)
     add_subdirectory (lib/the_Foundation)
     add_library (the_Foundation::the_Foundation ALIAS the_Foundation)
+    find_package (OpenSSL)
     if (NOT OPENSSL_FOUND)
         message (FATAL_ERROR "Lagrange requires OpenSSL for TLS. Please check if pkg-config can find 'openssl'.")
     endif ()


[FILE:362:patches/patch-lib_sealcurses_CMakeLists.txt]
--- lib/sealcurses/CMakeLists.txt.orig	2024-12-10 15:28:36 UTC
+++ lib/sealcurses/CMakeLists.txt
@@ -12,7 +12,7 @@ find_package (PkgConfig REQUIRED)
 set (CMAKE_C_STANDARD 11)
 
 # Find Curses.
-pkg_check_modules (CURSES ${NCURSES_PACKAGE}>=6)
+pkg_check_modules (CURSES ncurses)
 if (NOT CURSES_FOUND)
     find_library (CURSES ncurses>=6)
     if (NOT CURSES)


[FILE:1074:patches/patch-lib_the__Foundation_Depends.cmake]
--- lib/the_Foundation/Depends.cmake.orig	2024-12-10 15:28:36 UTC
+++ lib/the_Foundation/Depends.cmake
@@ -54,24 +54,7 @@ if (NOT IOS AND NOT ANDROID)
     if (TFDN_ENABLE_TLSREQUEST)
         set (OPENSSL_FOUND NO)
         set (iHaveOpenSSL NO)
-        if (FREEBSD)
-            # Try the system-provided libraries first.
-            find_library (LIBSSL ssl)
-            find_library (LIBCRYPTO crypto)
-            if (LIBSSL AND LIBCRYPTO)
-               message (STATUS "Using system-provided libssl: ${LIBSSL}")
-                add_library (libssl INTERFACE)
-                target_link_libraries (libssl INTERFACE ${LIBSSL} ${LIBCRYPTO})
-                set (OPENSSL_FOUND YES)
-            else ()
-                pkg_check_modules (OPENSSL eopenssl11)
-                if (OPENSSL_FOUND)
-                    set (EOPENSSL_FOUND YES)
-                endif ()
-            endif ()
-        else ()
-             pkg_check_modules (OPENSSL openssl)
-        endif ()
+        pkg_check_modules (OPENSSL openssl)
     endif ()
 
     # Unicode text strings


[FILE:444:patches/patch-lib_the__Foundation_src_tlsrequest.c]
--- lib/the_Foundation/src/tlsrequest.c.orig	2024-12-10 15:28:36 UTC
+++ lib/the_Foundation/src/tlsrequest.c
@@ -259,7 +259,9 @@ void init_Context(iContext *d) {
     SSL_load_error_strings();
     ERR_load_crypto_strings();
 #endif
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
     ERR_load_BIO_strings();
+#endif
     d->ctx = SSL_CTX_new(TLS_client_method());
     if (!d->ctx) {
         iDebug("[TlsRequest] failed to initialize OpenSSL\n");

