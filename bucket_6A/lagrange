# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		lagrange
VERSION=		1.16.7
KEYWORDS=		www
VARIANTS=		standard
SDESC[standard]=	Web Browser-like beautiful Gemini Client
HOMEPAGE=		https://github.com/skyjake/lagrange
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/skyjake/lagrange/releases/download/v1.16.7/
DISTFILE[1]=		lagrange-1.16.7.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			man

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		zip:single:standard
			mpg123:dev:standard
			WebP:dev:standard
			harfbuzz:dev:standard
BUILDRUN_DEPENDS=	fribidi:single:standard
			harfbuzz:primary:standard
			libunistring:primary:standard
			mpg123:primary:standard
			WebP:primary:standard

USES=			cmake ncurses pcre pkgconfig zlib ssl:openssl11 curl
			desktop-utils:primary
SDL_COMPONENTS=		sdl2
XORG_COMPONENTS=	x11

LICENSE=		BSD2CLAUSE:primary
LICENSE_FILE=		BSD2CLAUSE:{{WRKSRC}}/LICENSE.md
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		www/lagrange

CMAKE_ARGS=		-DENABLE_FRIBIDI:BOOL=ON
			-DENABLE_FRIBIDI_BUILD:BOOL=OFF
			-DENABLE_HARFBUZZ:BOOL=ON
			-DENABLE_HARFBUZZ_MINIMAL:BOOL=OFF
			-DENABLE_MPG123:BOOL=ON
			-DENABLE_WEBP:BOOL=ON

post-install:
	${INSTALL_PROGRAM} ${WRKSRC}/build-tui/clagrange ${STAGEDIR}${PREFIX}/bin/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/clagrange
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/lagrange

post-build:
	(cd ${WRKSRC} && ./build-tui.sh)

pre-configure:
	${REINPLACE_CMD} -i'' -e "s|__PREFIX__|${PREFIX}|g" \
		-e "s|__STAGEDIR__|${STAGEDIR}|" ${WRKSRC}/build-tui.sh
	# unclear why SDL_HINT_WINDOWS_DPI_AWARENESS is not defined; it's in SDL_hints.h
	# it's for windows only anywhy, just cut it out
	${REINPLACE_CMD} -e '/SDL_HINT_WINDOWS_DPI_AWARENESS/d' ${WRKSRC}/src/main.c

[FILE:776:descriptions/desc.primary]
Lagrange is a desktop GUI client for browsing Geminispace. It offers 
modern conveniences familiar from web browsers, such as smooth scrolling, 
inline image viewing, multiple tabs, visual themes, Unicode fonts, 
bookmarks, history, and page outlines.

Some features:
* Ability to optionally view images inside the gemtext document
* Beautiful typography using Unicode fonts
* Autogenerated page style and Unicode icon for each Gemini domain
* Smart URL field suggestions: Search bookmarks, history, identities
* Sidebar for page outline, managing bookmarks and identities as well as 
  viewing history
* Multiple tabs
* Identity management: Create and use TLS client certificates
* Audio playback: MP3, Ogg Vorbis, WAV
* And more! Open about:help in the app, or see help.gmi


[FILE:101:distinfo]
751f595b7e913ea8246fa4031f63c15dcef1cb114e057b2062fc601875ebe745     10009880 lagrange-1.16.7.tar.gz


[FILE:206:manifests/plist.primary]
bin/
 clagrange
 lagrange
share/applications/fi.skyjake.Lagrange.desktop
share/icons/hicolor/256x256/apps/fi.skyjake.Lagrange.png
share/lagrange/resources.lgr
share/metainfo/fi.skyjake.Lagrange.appdata.xml


[FILE:29:manifests/plist.man]
share/man/man1/lagrange.1.gz


[FILE:1854:patches/patch-build-tui.sh]
--- build-tui.sh.orig	2023-08-11 11:45:46 UTC
+++ build-tui.sh
@@ -14,25 +14,15 @@
 #
 # You can customize the install directory prefix here and build type here:
 
-INSTALL_PREFIX="/usr/local"
+INSTALL_PREFIX="__PREFIX__"
 CMAKE_BUILD_TYPE="Release"
+export PKG_CONFIG_PATH=/__PREFIX__/openssl11/lib/pkgconfig
+export LDFLAGS="-L/__PREFIX__/openssl11/lib -Wl,-rpath,/__PREFIX__/openssl11/lib"
 
 echo "\nThis script will build and optionally install clagrange with"
 echo "statically linked the_Foundation and SEALCurses. First, let's configure"
 echo "the build.\n"
 
-echo "Build type? [${CMAKE_BUILD_TYPE}]"
-read INPUT
-if [ "${INPUT}." != "." ]; then
-    CMAKE_BUILD_TYPE=${INPUT}
-fi
-
-echo "Install prefix? [${INSTALL_PREFIX}]"
-read INPUT
-if [ "${INPUT}." != "." ]; then
-    INSTALL_PREFIX=${INPUT}
-fi
-
 if [ ! -d lib/sealcurses ]; then
     echo "'lib/sealcurses' not found. Clone with Git? [Yn]"
     read INPUT
@@ -87,7 +77,7 @@ cmake --install .
 
 cd ..
 export PKG_CONFIG_PATH="${BUILD_DIR}/lib/pkgconfig":${PKG_CONFIG_PATH}
-LDFLAGS="`pkg-config --static --libs the_Foundation`"
+LDFLAGS="`pkg-config --static --libs the_Foundation` ${LDFLAGS}"
 cmake .. \
     -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
     -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
@@ -99,19 +89,11 @@ cmake .. \
     -DENABLE_HARFBUZZ=NO \
     -DENABLE_POPUP_MENUS=NO \
     -DENABLE_IDLE_SLEEP=NO \
+    -DCMAKE_SKIP_RPATH:BOOL=TRUE \
     -Dthe_Foundation_DIR="${BUILD_DIR}/lib/cmake/the_Foundation" \
     $*
 cmake --build . || exit 1
 
 echo "-----"
 echo "clagrange and resources.lgr can be found in 'build-tui'."
-echo "Do you want to install them to ${INSTALL_PREFIX}? (s=sudo) [syN]"
-read CONFIRMED
-if [ "${CONFIRMED}" = "s" ]; then
-    sudo cmake --install .
-    exit
-fi
-if [ "${CONFIRMED}" = "y" ]; then
-     cmake --install .
-    exit
-fi
+exit


[FILE:454:patches/patch-cmake_Depends.cmake]
--- cmake/Depends.cmake.orig	2023-08-11 11:45:46 UTC
+++ cmake/Depends.cmake
@@ -42,6 +42,7 @@ else ()
     set (TFDN_ENABLE_WEBREQUEST OFF CACHE BOOL "")
     add_subdirectory (lib/the_Foundation)
     add_library (the_Foundation::the_Foundation ALIAS the_Foundation)
+    find_package (OpenSSL)
     if (NOT OPENSSL_FOUND)
         message (FATAL_ERROR "Lagrange requires OpenSSL for TLS. Please check if pkg-config can find 'openssl'.")
     endif ()


[FILE:362:patches/patch-lib_sealcurses_CMakeLists.txt]
--- lib/sealcurses/CMakeLists.txt.orig	2023-08-11 11:46:01 UTC
+++ lib/sealcurses/CMakeLists.txt
@@ -10,7 +10,7 @@ find_package (PkgConfig REQUIRED)
 set (CMAKE_C_STANDARD 11)
 
 # Find Curses.
-pkg_check_modules (CURSES ${NCURSES_PACKAGE}>=6)
+pkg_check_modules (CURSES ncurses)
 if (NOT CURSES_FOUND)
     find_library (CURSES ncurses>=6)
     if (NOT CURSES)


[FILE:1138:patches/patch-lib_the__Foundation_Depends.cmake]
--- lib/the_Foundation/Depends.cmake.orig	2023-08-11 11:45:59 UTC
+++ lib/the_Foundation/Depends.cmake
@@ -14,24 +14,7 @@ if (NOT IOS AND NOT ANDROID)
     if (TFDN_ENABLE_TLSREQUEST)
         set (OPENSSL_FOUND NO)
         set (iHaveOpenSSL NO)
-        if (FREEBSD)
-            # Try the system-provided libraries first.
-            find_library (LIBSSL ssl)
-            find_library (LIBCRYPTO crypto)
-            if (LIBSSL AND LIBCRYPTO)
-               message (STATUS "Using system-provided libssl: ${LIBSSL}")
-                add_library (libssl INTERFACE)
-                target_link_libraries (libssl INTERFACE ${LIBSSL} ${LIBCRYPTO})
-                set (OPENSSL_FOUND YES)
-            else ()
-                pkg_check_modules (OPENSSL eopenssl11)
-                if (OPENSSL_FOUND)
-                    set (EOPENSSL_FOUND YES)
-                endif ()
-            endif ()
-        else ()
-             pkg_check_modules (OPENSSL openssl)
-        endif ()
+        pkg_check_modules (OPENSSL openssl)
     endif ()
     # Unicode text strings
     set (UNISTRING_DIR "" CACHE PATH "Location of libunistring")

