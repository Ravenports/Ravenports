# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		lagrange
VERSION=		1.13.8
KEYWORDS=		www
VARIANTS=		standard
SDESC[standard]=	Web Browser-like beautiful Gemini Client
HOMEPAGE=		https://github.com/skyjake/lagrange
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/skyjake/lagrange/releases/download/v1.13.8/
DISTFILE[1]=		lagrange-1.13.8.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		zip:single:standard
BUILDRUN_DEPENDS=	curl:primary:standard
			fribidi:single:standard
			harfbuzz:primary:standard
			libunistring:primary:standard
			mpg123:single:standard
			WebP:single:standard

USES=			cmake ncurses pcre pkgconfig zlib ssl:openssl11
			desktop-utils:single
SDL_COMPONENTS=		sdl2

LICENSE=		BSD2CLAUSE:single
LICENSE_FILE=		BSD2CLAUSE:{{WRKSRC}}/LICENSE.md
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		www/lagrange

CMAKE_ARGS=		-DENABLE_FRIBIDI:BOOL=ON
			-DENABLE_FRIBIDI_BUILD:BOOL=OFF
			-DENABLE_HARFBUZZ:BOOL=ON
			-DENABLE_HARFBUZZ_MINIMAL:BOOL=OFF
			-DENABLE_MPG123:BOOL=ON
			-DENABLE_WEBP:BOOL=ON

post-install:
	${INSTALL_PROGRAM} ${WRKSRC}/build-tui/clagrange ${STAGEDIR}${PREFIX}/bin/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/clagrange
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/lagrange

post-build:
	(cd ${WRKSRC} && ./build-tui.sh)

pre-configure:
	${REINPLACE_CMD} -i'' -e "s|__PREFIX__|${PREFIX}|g" \
		-e "s|__STAGEDIR__|${STAGEDIR}|" ${WRKSRC}/build-tui.sh

[FILE:776:descriptions/desc.single]
Lagrange is a desktop GUI client for browsing Geminispace. It offers 
modern conveniences familiar from web browsers, such as smooth scrolling, 
inline image viewing, multiple tabs, visual themes, Unicode fonts, 
bookmarks, history, and page outlines.

Some features:
* Ability to optionally view images inside the gemtext document
* Beautiful typography using Unicode fonts
* Autogenerated page style and Unicode icon for each Gemini domain
* Smart URL field suggestions: Search bookmarks, history, identities
* Sidebar for page outline, managing bookmarks and identities as well as 
  viewing history
* Multiple tabs
* Identity management: Create and use TLS client certificates
* Audio playback: MP3, Ogg Vorbis, WAV
* And more! Open about:help in the app, or see help.gmi


[FILE:101:distinfo]
eaef35ce459bba20dbba24ca47ed74f5f57982aab2d8da3506e3095eeb76ccd0      9879616 lagrange-1.13.8.tar.gz


[FILE:235:manifests/plist.single]
bin/
 clagrange
 lagrange
share/applications/fi.skyjake.Lagrange.desktop
share/icons/hicolor/256x256/apps/fi.skyjake.Lagrange.png
share/lagrange/resources.lgr
share/man/man1/lagrange.1.gz
share/metainfo/fi.skyjake.Lagrange.appdata.xml


[FILE:1437:patches/patch-build-tui.sh]
--- build-tui.sh.orig	2022-11-02 17:11:20 UTC
+++ build-tui.sh
@@ -14,25 +14,15 @@
 #
 # You can customize the install directory prefix here and build type here:
 
-INSTALL_PREFIX="/usr/local"
+INSTALL_PREFIX="__PREFIX__"
 CMAKE_BUILD_TYPE="Release"
+export PKG_CONFIG_PATH=/__PREFIX__/openssl11/lib/pkgconfig
+export LDFLAGS="-L/__PREFIX__/openssl11/lib -Wl,-rpath,/__PREFIX__/openssl11/lib"
 
 echo "\nThis script will build and optionally install clagrange with"
 echo "statically linked the_Foundation and SEALCurses. First, let's configure"
 echo "the build.\n"
 
-echo "Build type? [${CMAKE_BUILD_TYPE}]"
-read INPUT
-if [ "${INPUT}." != "." ]; then
-    CMAKE_BUILD_TYPE=${INPUT}
-fi
-
-echo "Install prefix? [${INSTALL_PREFIX}]"
-read INPUT
-if [ "${INPUT}." != "." ]; then
-    INSTALL_PREFIX=${INPUT}
-fi
-
 if [ ! -d lib/sealcurses ]; then
     echo "'lib/sealcurses' not found. Clone with Git? [Yn]"
     read INPUT
@@ -95,15 +85,11 @@ cmake .. \
     -DENABLE_HARFBUZZ=NO \
     -DENABLE_POPUP_MENUS=NO \
     -DENABLE_IDLE_SLEEP=NO \
+    -DCMAKE_SKIP_RPATH:BOOL=TRUE \
     -Dthe_Foundation_DIR="${BUILD_DIR}/lib/cmake/the_Foundation" \
     $*
 cmake --build . || exit 1
 
 echo "-----"
 echo "clagrange and resources.lgr can be found in 'build-tui'."
-echo "Do you want to install them to ${INSTALL_PREFIX}? (sudo) [yN]"
-read CONFIRMED
-if [ "${CONFIRMED}" = "y" ]; then
-    sudo cmake --install .
-    exit
-fi
+exit

