# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		db5
VERSION=		5.3.28
REVISION=		2
KEYWORDS=		databases java
VARIANTS=		standard
SDESC[standard]=	Oracle Berkeley DB, revision 5
HOMEPAGE=		http://www.oracle.com/us/products/database/berkeley-db/db/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://download.oracle.com/berkeley-db/
DISTFILE[1]=		db-5.3.28.tar.gz:main
DIST_SUBDIR=		bdb
DF_INDEX=		1
SPKGS[standard]=	complete
			shared
			static
			docs

OPTIONS_AVAILABLE=	CRYPTO TCL
OPTIONS_STANDARD=	CRYPTO TCL
OPT_ON[all]=		CRYPTO

USES=			gmake libtool c++:shared

DISTNAME=		db-5.3.28

LICENSE=		CUSTOM1:shared
LICENSE_NAME=		CUSTOM1:"Sleepycat License"
LICENSE_SCHEME=		solo
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE

MUST_CONFIGURE=		gnu
CONFIGURE_OUTSOURCE=	yes
CONFIGURE_WRKSRC=	{{WRKSRC}}/build_unix
CONFIGURE_SCRIPT=	dist/configure
CONFIGURE_ARGS=		--enable-dbm
			--enable-cxx
			--enable-stl
			--enable-sql
			--enable-sql_codegen
			--includedir={{PREFIX}}/include/db5
			--libdir={{PREFIX}}/lib/db5
			--bindir={{PREFIX}}/bin/db5

MAKE_ARGS=		docdir={{STD_DOCDIR}}

INSTALL_TARGET=		install_include install_lib install_utilities install_docs
PLIST_SUB=		BDBMAJ=5
			BDBVER=5.3

CFLAGS=			-fPIC
VAR_ARCH[aarch64]=	CONFIGURE_ARGS=--enable-posixmutexes
			CONFIGURE_ARGS=--with-mutex=POSIX/pthreads
VAR_ARCH[i386]=		CONFIGURE_ARGS=--with-mutex=x86/gcc-assembly

[TCL].CONFIGURE_ARGS_OFF=		--disable-tcl
[TCL].CONFIGURE_ARGS_ON=		--with-tcl={{TCL_LIBDIR}}

[CRYPTO].DESCRIPTION=			Cryptography support
[CRYPTO].CONFIGURE_WITH_BOTH=		cryptography=yes

post-install-TCL-OFF:
.for i in api_reference/TCL
	${RM} -r ${STAGEDIR}${STD_DOCDIR}/${i}
.endfor

post-patch:
	${REINPLACE_CMD} -e '/^DOCLIST/{s/csharp//;}' \
		${WRKSRC}/dist/Makefile.in
	${REINPLACE_CMD} -Ee 's/([^[:alnum:]])atomic_init([^[:alnum:]])/\1db_atomic_init\2/g' \
		${WRKSRC}/src/mp/mp_fget.c \
		${WRKSRC}/src/mp/mp_mvcc.c \
		${WRKSRC}/src/mp/mp_region.c \
		${WRKSRC}/src/mutex/mut_*

post-install-TCL-ON:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/db5/libdb_tcl-5.3.so.0.0.0
	${LN} -s -f db5/libdb_tcl-5.3.so.0.0.0 \
		${STAGEDIR}${PREFIX}/lib/libdb_tcl-5.3.so.0
	${LN} -s -f db5/libdb_tcl-5.3.so.0.0.0 \ \
		${STAGEDIR}${PREFIX}/lib/libdb_tcl-5.so
	${LN} -s -f db5/libdb_tcl-5.3.so.0.0.0 \
		${STAGEDIR}${PREFIX}/lib/libdb_tcl-5.3.so
	${LN} -s -f db5/libdb_tcl-5.3.so.0.0.0 \
		${STAGEDIR}${PREFIX}/lib/libdb_tcl-5.so.0
	${LN} -s -f libdb_tcl-5.3.a \
		${STAGEDIR}${PREFIX}/lib/db5/libdb_tcl.a
	echo "package ifneeded Db_tcl 5.3 \
	      [list load [file join $$dir libdb_tcl-5.3.so]] \
	     " > ${STAGEDIR}${PREFIX}/lib/db5/pkgIndex.tcl

post-install:
.for i in libdb libdb_cxx libdb_stl libdb_sql
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/db5/${i}-5.3.so.0.0.0
	${LN} -s -f db5/${i}-5.3.so.0.0.0 \
		${STAGEDIR}${PREFIX}/lib/${i}-5.3.so.0
	${LN} -s -f db5/${i}-5.3.so.0.0.0 \
		${STAGEDIR}${PREFIX}/lib/${i}-5.3.so
	${LN} -s -f db5/${i}-5.3.so.0.0.0 \
		${STAGEDIR}${PREFIX}/lib/${i}-5.so.0
	${LN} -s -f db5/${i}-5.3.so.0.0.0 \
		${STAGEDIR}${PREFIX}/lib/${i}-5.so
	${LN} -s -f ${i}-5.3.a ${STAGEDIR}${PREFIX}/lib/db5/${i}.a
	${LN} -s -f ${i}-5.3.a ${STAGEDIR}${PREFIX}/lib/db5/${i}-5.a
.endfor
	cd ${STAGEDIR}${PREFIX}/bin/db5; \
	for i in *; do ${LN} -s -f db5/$$i ../$$i-5.3 ; \
		       ${LN} -s -f db5/$$i ../$$i-5 ; done
	${RM} -r ${STAGEDIR}${STD_DOCDIR}/java
.for i in gsg gsg_db_rep gsg_txn
	${RM} -r ${STAGEDIR}${STD_DOCDIR}/${i}/JAVA
.endfor

[FILE:296:descriptions/desc.shared]
Oracle Berkeley DB is a family of open source embeddable databases
that allows developers to incorporate within their applications a
fast, scalable, transactional database engine with industrial grade
reliability and availability.

This package contains the executables and the shared libraries.


[FILE:604:descriptions/desc.static]
Oracle Berkeley DB is a family of open source embeddable databases
that allows developers to incorporate within their applications a
fast, scalable, transactional database engine with industrial grade
reliability and availability. As a result, customers and end-users
will experience an application that simply works, reliably manages
data, can scale under extreme load, but requires no ongoing database
administration. As a developer, you can focus on your application and
be confident that Oracle Berkeley DB will manage your persistence
needs.

This package contains the headers and static libraries.


[FILE:99:distinfo]
e0a992d740709892e81f9d93f06daf305cf73fb81b545afe72478043172c3628     35090431 bdb/db-5.3.28.tar.gz


[FILE:1821:manifests/plist.shared]
bin/db5/
 db_archive
 db_checkpoint
 db_deadlock
 db_dump
 db_hotbackup
 db_load
 db_log_verify
 db_printlog
 db_recover
 db_replicate
 db_sql_codegen
 db_stat
 db_tuner
 db_upgrade
 db_verify
 dbsql
bin/
 db_archive-%%BDBMAJ%%
 db_archive-%%BDBVER%%
 db_checkpoint-%%BDBMAJ%%
 db_checkpoint-%%BDBVER%%
 db_deadlock-%%BDBMAJ%%
 db_deadlock-%%BDBVER%%
 db_dump-%%BDBMAJ%%
 db_dump-%%BDBVER%%
 db_hotbackup-%%BDBMAJ%%
 db_hotbackup-%%BDBVER%%
 db_load-%%BDBMAJ%%
 db_load-%%BDBVER%%
 db_log_verify-%%BDBMAJ%%
 db_log_verify-%%BDBVER%%
 db_printlog-%%BDBMAJ%%
 db_printlog-%%BDBVER%%
 db_recover-%%BDBMAJ%%
 db_recover-%%BDBVER%%
 db_replicate-%%BDBMAJ%%
 db_replicate-%%BDBVER%%
 db_sql_codegen-%%BDBMAJ%%
 db_sql_codegen-%%BDBVER%%
 db_stat-%%BDBMAJ%%
 db_stat-%%BDBVER%%
 db_tuner-%%BDBMAJ%%
 db_tuner-%%BDBVER%%
 db_upgrade-%%BDBMAJ%%
 db_upgrade-%%BDBVER%%
 db_verify-%%BDBMAJ%%
 db_verify-%%BDBVER%%
 dbsql-%%BDBMAJ%%
 dbsql-%%BDBVER%%
lib/db5/
 libdb-%%BDBVER%%.so
 libdb-%%BDBVER%%.so.0
 libdb-%%BDBVER%%.so.0.0.0
 libdb-%%BDBMAJ%%.so
 libdb.so
 libdb_cxx-%%BDBVER%%.so
 libdb_cxx-%%BDBVER%%.so.0
 libdb_cxx-%%BDBVER%%.so.0.0.0
 libdb_cxx-%%BDBMAJ%%.so
 libdb_cxx.so
 libdb_sql-%%BDBVER%%.so
 libdb_sql-%%BDBVER%%.so.0
 libdb_sql-%%BDBVER%%.so.0.0.0
 libdb_sql.so
 libdb_sql-%%BDBMAJ%%.so
 libdb_stl-%%BDBVER%%.so
 libdb_stl-%%BDBVER%%.so.0
 libdb_stl-%%BDBVER%%.so.0.0.0
 libdb_stl-%%BDBMAJ%%.so
 libdb_stl.so
lib/
 libdb-%%BDBMAJ%%.so
 libdb-%%BDBMAJ%%.so.0
 libdb-%%BDBVER%%.so
 libdb-%%BDBVER%%.so.0
 libdb_cxx-%%BDBMAJ%%.so
 libdb_cxx-%%BDBMAJ%%.so.0
 libdb_cxx-%%BDBVER%%.so
 libdb_cxx-%%BDBVER%%.so.0
 libdb_sql-%%BDBMAJ%%.so
 libdb_sql-%%BDBMAJ%%.so.0
 libdb_sql-%%BDBVER%%.so
 libdb_sql-%%BDBVER%%.so.0
 libdb_stl-%%BDBMAJ%%.so
 libdb_stl-%%BDBMAJ%%.so.0
 libdb_stl-%%BDBVER%%.so
 libdb_stl-%%BDBVER%%.so.0


[FILE:511:manifests/plist.static]
include/db5/
 db.h
 db_cxx.h
 dbsql.h
 dbstl_base_iterator.h
 dbstl_common.h
 dbstl_container.h
 dbstl_dbc.h
 dbstl_dbt.h
 dbstl_element_ref.h
 dbstl_exception.h
 dbstl_inner_utility.h
 dbstl_map.h
 dbstl_resource_manager.h
 dbstl_set.h
 dbstl_utility.h
 dbstl_vector.h
lib/db5/
 libdb-%%BDBVER%%.a
 libdb-%%BDBMAJ%%.a
 libdb.a
 libdb_cxx-%%BDBVER%%.a
 libdb_cxx-%%BDBMAJ%%.a
 libdb_cxx.a
 libdb_sql-%%BDBVER%%.a
 libdb_sql-%%BDBMAJ%%.a
 libdb_sql.a
 libdb_stl-%%BDBVER%%.a
 libdb_stl-%%BDBMAJ%%.a
 libdb_stl.a


[FILE:1421:patches/patch-dist_configure]
--- dist/configure.orig	2013-09-09 15:35:02 UTC
+++ dist/configure
@@ -17712,10 +17712,10 @@ LIBTOOL="./libtool"
 INSTALLER="\$(LIBTOOL) --mode=install cp -p"
 
 MAKEFILE_CC="\$(LIBTOOL) --mode=compile ${MAKEFILE_CC}"
-MAKEFILE_SOLINK="\$(LIBTOOL) --mode=link ${MAKEFILE_CCLINK} -avoid-version"
+MAKEFILE_SOLINK="\$(LIBTOOL) --mode=link ${MAKEFILE_CCLINK} -version-info 0:0:0"
 MAKEFILE_CCLINK="\$(LIBTOOL) --mode=link ${MAKEFILE_CCLINK}"
 MAKEFILE_CXX="\$(LIBTOOL) --mode=compile ${MAKEFILE_CXX}"
-MAKEFILE_XSOLINK="\$(LIBTOOL) --mode=link ${MAKEFILE_CXXLINK} -avoid-version"
+MAKEFILE_XSOLINK="\$(LIBTOOL) --mode=link ${MAKEFILE_CXXLINK} -version-info 0:0:0"
 MAKEFILE_CXXLINK="\$(LIBTOOL) --mode=link ${MAKEFILE_CXXLINK}"
 
 
@@ -27322,7 +27322,7 @@ esac
 # !!! END COPIED from autoconf distribution
 
 sqlite_dir=$srcdir/../lang/sql/sqlite
-(cd sql && eval "\$SHELL ../$sqlite_dir/configure --disable-option-checking $ac_sub_configure_args CPPFLAGS=\"-I.. $CPPFLAGS\" --enable-amalgamation=$db_cv_sql_amalgamation --enable-readline=$with_readline" && cat build_config.h >> config.h) || exit 1
+(cd sql && eval "\$SHELL $sqlite_dir/configure --disable-option-checking $ac_sub_configure_args CPPFLAGS=\"-I.. $CPPFLAGS\" --enable-amalgamation=$db_cv_sql_amalgamation --enable-readline=$with_readline" && cat build_config.h >> config.h) || exit 1
 
 # Configure JDBC if --enable-jdbc
 if test "$db_cv_jdbc" != "no"; then


[FILE:1054:patches/patch-lang_tcl_tcl__db.c]
--- lang/tcl/tcl_db.c.orig	2013-09-09 15:35:07 UTC
+++ lang/tcl/tcl_db.c
@@ -3708,9 +3708,10 @@ tcl_DbGetFlags(interp, objc, objv, dbp)
 		for (i = 0; db_flags[i].flag != 0; i++)
 			if (LF_ISSET(db_flags[i].flag)) {
 				if (strlen(buf) > 0)
-					(void)strncat(buf, " ", sizeof(buf));
-				(void)strncat(
-				    buf, db_flags[i].arg, sizeof(buf));
+					(void)strncat(buf, " ",
+					    sizeof(buf) - (strlen(buf) + 1));
+				(void)strncat(buf, db_flags[i].arg,
+				    sizeof(buf) - (strlen(buf) + 1));
 			}
 
 		res = NewStringObj(buf, strlen(buf));
@@ -3764,9 +3765,10 @@ tcl_DbGetOpenFlags(interp, objc, objv, d
 		for (i = 0; open_flags[i].flag != 0; i++)
 			if (LF_ISSET(open_flags[i].flag)) {
 				if (strlen(buf) > 0)
-					(void)strncat(buf, " ", sizeof(buf));
-				(void)strncat(
-				    buf, open_flags[i].arg, sizeof(buf));
+					(void)strncat(buf, " ",
+					    sizeof(buf) - (strlen(buf) + 1));
+				(void)strncat(buf, open_flags[i].arg,
+				    sizeof(buf) - (strlen(buf) + 1));
 			}
 
 		res = NewStringObj(buf, strlen(buf));


[FILE:1571:patches/patch-lang_tcl_tcl__env.c]
--- lang/tcl/tcl_env.c.orig	2013-09-09 15:35:07 UTC
+++ lang/tcl/tcl_env.c
@@ -2864,9 +2864,10 @@ env_GetFlags(interp, objc, objv, dbenv)
 		for (i = 0; open_flags[i].flag != 0; i++)
 			if (LF_ISSET(open_flags[i].flag)) {
 				if (strlen(buf) > 0)
-					(void)strncat(buf, " ", sizeof(buf));
-				(void)strncat(
-				    buf, open_flags[i].arg, sizeof(buf));
+					(void)strncat(buf, " ",
+					    sizeof(buf) - (strlen(buf) + 1));
+				(void)strncat(buf, open_flags[i].arg,
+				    sizeof(buf) - (strlen(buf) + 1));
 			}
 
 		res = NewStringObj(buf, strlen(buf));
@@ -2930,9 +2931,10 @@ env_GetOpenFlag(interp, objc, objv, dben
 		for (i = 0; open_flags[i].flag != 0; i++)
 			if (LF_ISSET(open_flags[i].flag)) {
 				if (strlen(buf) > 0)
-					(void)strncat(buf, " ", sizeof(buf));
-				(void)strncat(
-				    buf, open_flags[i].arg, sizeof(buf));
+					(void)strncat(buf, " ",
+					    sizeof(buf) - (strlen(buf) + 1));
+				(void)strncat(buf, open_flags[i].arg,
+				    sizeof(buf) - (strlen(buf) + 1));
 			}
 
 		res = NewStringObj(buf, strlen(buf));
@@ -2982,9 +2984,10 @@ tcl_EnvGetEncryptFlags(interp, objc, obj
 		for (i = 0; encrypt_flags[i].flag != 0; i++)
 			if (LF_ISSET(encrypt_flags[i].flag)) {
 				if (strlen(buf) > 0)
-					(void)strncat(buf, " ", sizeof(buf));
-				(void)strncat(
-				    buf, encrypt_flags[i].arg, sizeof(buf));
+					(void)strncat(buf, " ",
+					    sizeof(buf) - (strlen(buf) + 1));
+				(void)strncat(buf, encrypt_flags[i].arg,
+				    sizeof(buf) - (strlen(buf) + 1));
 			}
 
 		res = NewStringObj(buf, strlen(buf));


[FILE:564:patches/patch-lang_tcl_tcl__seq.c]
--- lang/tcl/tcl_seq.c.orig	2013-09-09 15:35:07 UTC
+++ lang/tcl/tcl_seq.c
@@ -555,9 +555,10 @@ tcl_SeqGetFlags(interp, objc, objv, seq)
 		for (i = 0; seq_flags[i].flag != 0; i++)
 			if (LF_ISSET(seq_flags[i].flag)) {
 				if (strlen(buf) > 0)
-					(void)strncat(buf, " ", sizeof(buf));
-				(void)strncat(
-				    buf, seq_flags[i].arg, sizeof(buf));
+					(void)strncat(buf, " ",
+					    sizeof(buf) - (strlen(buf) + 1));
+				(void)strncat(buf, seq_flags[i].arg,
+				    sizeof(buf) - (strlen(buf) + 1));
 			}
 
 		res = NewStringObj(buf, strlen(buf));


[FILE:1465:patches/patch-src_dbinc_atomic.h]
--- src/dbinc/atomic.h.orig	2013-09-09 15:35:08 UTC
+++ src/dbinc/atomic.h
@@ -70,7 +70,7 @@ typedef struct {
  * These have no memory barriers; the caller must include them when necessary.
  */
 #define	atomic_read(p)		((p)->value)
-#define	atomic_init(p, val)	((p)->value = (val))
+#define	db_atomic_init(p, val)	((p)->value = (val))
 
 #ifdef HAVE_ATOMIC_SUPPORT
 
@@ -144,7 +144,7 @@ typedef LONG volatile *interlocked_val;
 #define	atomic_inc(env, p)	__atomic_inc(p)
 #define	atomic_dec(env, p)	__atomic_dec(p)
 #define	atomic_compare_exchange(env, p, o, n)	\
-	__atomic_compare_exchange((p), (o), (n))
+	__atomic_compare_exchange_db((p), (o), (n))
 static inline int __atomic_inc(db_atomic_t *p)
 {
 	int	temp;
@@ -176,7 +176,7 @@ static inline int __atomic_dec(db_atomic
  * http://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Atomic-Builtins.html
  * which configure could be changed to use.
  */
-static inline int __atomic_compare_exchange(
+static inline int __atomic_compare_exchange_db(
 	db_atomic_t *p, atomic_value_t oldval, atomic_value_t newval)
 {
 	atomic_value_t was;
@@ -206,7 +206,7 @@ static inline int __atomic_compare_excha
 #define	atomic_dec(env, p)	(--(p)->value)
 #define	atomic_compare_exchange(env, p, oldval, newval)		\
 	(DB_ASSERT(env, atomic_read(p) == (oldval)),		\
-	atomic_init(p, (newval)), 1)
+	db_atomic_init(p, (newval)), 1)
 #else
 #define atomic_inc(env, p)	__atomic_inc(env, p)
 #define atomic_dec(env, p)	__atomic_dec(env, p)


[FILE:247:patches/patch-src_dbinc_mutex__int.h]
--- src/dbinc/mutex_int.h.orig	2013-09-09 15:35:08 UTC
+++ src/dbinc/mutex_int.h
@@ -596,7 +596,7 @@ MUTEX_SET(int *tsl)  {
 	 : "=&r" (__r), "+r" (tsl)
 	 :
 	 : "cr0", "memory");
-	 return (int)tsl;
+	 return (tsl != 0);
 }
 
 static inline int


[FILE:341:patches/patch-src_heap_heap__verify.c]
--- src/heap/heap_verify.c.orig	2013-09-09 15:35:08 UTC
+++ src/heap/heap_verify.c
@@ -122,7 +122,7 @@ __heap_vrfy(dbp, vdp, h, pgno, flags)
 {
 	HEAPHDR *hdr;
 	int cnt, i, j, ret;
-	db_indx_t *offsets, *offtbl, end;
+	db_indx_t *offsets = NULL, *offtbl, end;
 
 	if ((ret = __db_vrfy_datapage(dbp, vdp, h, pgno, flags)) != 0)
 		goto err;

