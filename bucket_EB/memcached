# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		memcached
VERSION=		1.6.8
KEYWORDS=		databases
VARIANTS=		standard
SDESC[standard]=	Distributed memory object caching system
HOMEPAGE=		http://www.memcached.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://www.memcached.org/files/
DISTFILE[1]=		memcached-1.6.8.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		python-xml2rfc:single:python_default
BUILDRUN_DEPENDS=	libevent:single:standard
			cyrus-sasl:primary:standard

USES=			cpe shebangfix autoreconf

LICENSE=		BSD3CLAUSE:primary
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		databases/memcached
SHEBANG_FILES=		scripts/memcached-tool

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--with-libevent={{LOCALBASE}}
			--program-prefix=
			--disable-coverage
			--enable-sasl
			--enable-docs

RC_SUBR=		memcached:primary

VAR_ARCH[aarch64]=	CONFIGURE_ARGS=--enable-64bit
VAR_ARCH[x86_64]=	CONFIGURE_ARGS=--enable-64bit

post-install:
	${INSTALL_SCRIPT} ${WRKSRC}/scripts/memcached-tool \
		${STAGEDIR}${PREFIX}/bin
	# docs
	${MKDIR} ${STAGEDIR}${STD_DOCDIR}
.for i in protocol-binary-range.txt protocol-binary.txt protocol.txt \
		readme.txt threads.txt
	${INSTALL_DATA} ${WRKSRC}/doc/${i} ${STAGEDIR}${STD_DOCDIR}
.endfor

[FILE:185:descriptions/desc.primary]
memcached is a high-performance, distributed memory object caching
system, generic in nature, but intended for use in speeding up dynamic
web applications by alleviating database load.


[FILE:101:distinfo]
e23b3a11f6ff52ac04ae5ea2e287052ce58fd1eadd394622eb65c3598fcd7939       548024 memcached-1.6.8.tar.gz


[FILE:98:manifests/plist.primary]
bin/
 memcached
 memcached-tool
include/memcached/protocol_binary.h
share/man/man1/memcached.1.gz


[FILE:108:manifests/plist.docs]
share/doc/memcached/
 protocol-binary-range.txt
 protocol-binary.txt
 protocol.txt
 readme.txt
 threads.txt


[FILE:798:patches/patch-configure.ac]
--- configure.ac.orig	2020-10-26 22:27:00 UTC
+++ configure.ac
@@ -183,7 +183,7 @@ if test "x$enable_dtrace" = "xyes"; then
   if test "x$DTRACE" != "xno"; then
     AC_DEFINE([ENABLE_DTRACE],1,[Set to nonzero if you want to include DTRACE])
     build_dtrace=yes
-    $DTRACE -h -o conftest.h -s memcached_dtrace.d 2>/dev/zero
+    /usr/bin/true
     if test $? -eq 0
     then
         dtrace_instrument_obj=yes
@@ -782,7 +782,7 @@ then
 elif test "$GCC" = "yes"
 then
   GCC_VERSION=`$CC -dumpversion`
-  CFLAGS="$CFLAGS -Wall -Werror -pedantic -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls"
+  CFLAGS="$CFLAGS -Wall -pedantic -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls"
   if test "x$enable_asan" = "xyes"; then
     CFLAGS="$CFLAGS -fsanitize=address"
   fi


[FILE:3054:files/memcached.in]
#!/bin/sh

# PROVIDE: memcached
# REQUIRE: LOGIN
# KEYWORD: shutdown
#
# Add the following lines to /etc/rc.conf to run memcached:
#
# memcached_enable (bool):	Set it to "YES" to enable memcached.
#				Default is "NO".
# memcached_flags (flags):	Set extra flags here. More options in memcached(1)
#				Default is empty "".
# memcached_user (user):	Set user to run memcached.
#				Default is "nobody".
# memcached_group (group):	Set group to run memcached.
#				Default is "nobody".
# memcached_profiles (str):     Set to "" by default.
#                               Define your profiles here.
# memcached_post_start (str):   Set extra commands that should be executed after memcached was successfully
#                               started here.
#                               Default is empty "".

. /etc/rc.subr

name="memcached"
rcvar=memcached_enable

_piddir="/var/run/memcached"
pidfile="${_piddir}/memcached.pid"

: ${memcached_enable="NO"}
: ${memcached_user="nobody"}
: ${memcached_group="nobody"}

load_rc_config ${name}

if [ -n "$2" ]; then
	profile="$2"
	if [ -n "${memcached_profiles}" ]; then
		pidfile="${_piddir}/memcached.${profile}.pid"
		eval memcached_enable="\${memcached_${profile}_enable:-${memcached_enable}}"
                eval memcached_user="\${memcached_${profile}_user:-${memcached_user}}"
                eval memcached_group="\${memcached_${profile}_group:-${memcached_group}}"
		eval memcached_flags="\${memcached_${profile}_flags:-${memcached_flags}}"
		eval memcached_post_start="\${memcached_${profile}_post_start:-${memcached_post_start}}"
	else
		echo "%%PREFIX%%/etc/rc.d/memcached: extra argument ignored"
	fi
else
	if [ -n "${memcached_profiles}" -a -n "$1" ]; then
		for profile in ${memcached_profiles}; do
			eval _enable="\${memcached_${profile}_enable}"
			case "${_enable:-${memcached_enable}}" in
			[Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0)
				continue
				;;
			[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)
				;;
			*)
				if test -z "$_enable"; then
					_var=memcached_enable
				else
					_var=memcached_"${profile}"_enable
				fi
				warn "Bad value" \
				    "'${_enable:-${memcached_enable}}'" \
				    "for ${_var}. " \
				    "Profile ${profile} skipped."
				continue
				;;
			esac
			echo "===> memcached profile: ${profile}"
			if %%PREFIX%%/etc/rc.d/memcached $1 ${profile} ; then
				success="${profile} ${success:-}"
			else
				failed="${profile} (${retcode}) ${failed:-}"
			fi
		done
		exit 0
	fi
fi

memcached_poststart()
{
    if [ -n "$memcached_post_start" ]; then
        eval $memcached_post_start
    fi
}

memcached_poststop()
{
	if [ -n "${profile}" ]; then
		[ -e "$pidfile" ] && unlink $pidfile
	else
		local file

		for file in ${_piddir}/* ; do
			case "$file" in
			*\*)
				continue ;;
			esac
			unlink $file
		done
	fi
}

command=%%PREFIX%%/bin/memcached
command_args="-d -P ${pidfile} "

start_precmd="install -d -o $memcached_user -g $memcached_group -m 755 $_piddir"
start_postcmd="${name}_poststart"
stop_postcmd="${name}_poststop"

run_rc_command "$1"

