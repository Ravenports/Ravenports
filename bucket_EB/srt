# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		srt
VERSION=		1.5.4
KEYWORDS=		net
VARIANTS=		std
SDESC[std]=		Secure Reliable Transport (SRT) Protocol
HOMEPAGE=		https://github.com/Haivision/srt
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/Haivision:srt:v1.5.4
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			dev
			tools

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

EXRUN[tools]=		primary
			bash:primary:std

USES=			c++:primary cmake shebangfix ssl

LICENSE=		MPL:primary
LICENSE_FILE=		MPL:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		www/srt
SHEBANG_FILES=		scripts/srt-ffplay

CMAKE_ARGS=		-DOPENSSL_ROOT_DIR:STRING="{{OPENSSLBASE}}"
			-DENABLE_ENCRYPTION:BOOL=ON
			-DCMAKE_POLICY_VERSION_MINIMUM=3.5

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libsrt.so
.for f in file-transmit live-transmit tunnel
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/srt-${f}
.endfor

[FILE:607:descriptions/desc.primary]
Secure Reliable Transport (SRT) is a transport protocol for ultra low 
(sub-second) latency live video and audio streaming, as well as for 
generic bulk data transfer1. SRT is available as an open-source technology 
with the code on GitHub, a published Internet Draft, and a growing 
community of SRT users.

SRT is applied to contribution and distribution endpoints as part of a 
video stream workflow to deliver the best quality and lowest latency video 
at all times.

Secure: Encrypts video streams
Reliable: Recovers from severe packet loss
Transport: Dynamically adapts to changing network conditions


[FILE:55:descriptions/desc.tools]
This subpackage contains the tools that come with srt.


[FILE:105:distinfo]
d0a8b600fe1b4eaaf6277530e3cfc8f15b8ce4035f16af4a5eb5d4b123640cdd      1743040 Haivision-srt-1.5.4.tar.gz


[FILE:37:manifests/plist.primary]
lib/
 libsrt.so.1.5
 libsrt.so.1.5.4


[FILE:147:manifests/plist.dev]
include/srt/
 access_control.h
 logging_api.h
 platform_sys.h
 srt.h
 udt.h
 version.h
lib/
 libsrt.a
 libsrt.so
lib/pkgconfig/
 haisrt.pc
 srt.pc


[FILE:67:manifests/plist.tools]
bin/
 srt-ffplay
 srt-file-transmit
 srt-live-transmit
 srt-tunnel


[FILE:597:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2024-11-07 10:26:52 UTC
+++ CMakeLists.txt
@@ -41,7 +41,7 @@ set_if(DARWIN	   (${CMAKE_SYSTEM_NAME} M
 					OR (${CMAKE_SYSTEM_NAME} MATCHES "watchOS")
 					OR (${CMAKE_SYSTEM_NAME} MATCHES "visionOS"))
 set_if(LINUX       ${CMAKE_SYSTEM_NAME} MATCHES "Linux")
-set_if(BSD         ${SYSNAME_LC} MATCHES "bsd$")
+set_if(BSD         ${SYSNAME_LC} MATCHES "bsd$" OR ${CMAKE_SYSTEM_NAME} MATCHES "DragonFly")
 set_if(MICROSOFT   WIN32 AND (NOT MINGW AND NOT CYGWIN))
 set_if(GNU         ${CMAKE_SYSTEM_NAME} MATCHES "GNU")
 set_if(ANDROID     ${SYSNAME_LC} MATCHES "android")


[FILE:470:patches/patch-srtcore_threadname.h]
--- srtcore/threadname.h.orig	2024-11-07 10:26:52 UTC
+++ srtcore/threadname.h
@@ -104,7 +104,7 @@ class ThreadName
     #if defined(__APPLE__)
             return pthread_setname_np(name) == 0;
     #elif defined(__NetBSD__)
-            return pthread_setname_np(pthread_self(), "%s", name) == 0;
+            return pthread_setname_np(pthread_self(), "%s", (void *)name) == 0;
     #else
             return pthread_setname_np(pthread_self(), name) == 0;
     #endif

