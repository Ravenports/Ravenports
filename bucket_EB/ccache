# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ccache
VERSION=		3.7.5
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Fast C/C++ compiler cache tool
HOMEPAGE=		https://ccache.samba.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/ccache/ccache/releases/download/v3.7.5/
DISTFILE[1]=		ccache-3.7.5.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

DISTNAME=		ccache-3.7.5

LICENSE=		GPLv3+:primary
LICENSE_TERMS=		primary:{{WRKSRC}}/LICENSE.adoc
LICENSE_FILE=		GPLv3+:{{WRKSRC}}/GPL-3.0.txt
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/ccache
SKIP_CCACHE=		yes

MUST_CONFIGURE=		gnu

PLIST_SUB=		CCLINKDIR="libexec/ccache"

CPPFLAGS=		-DCC_IS_GCC
			-Wno-implicit-fallthrough
VAR_OPSYS[sunos]=	CPPFLAGS=-D_XPG6
			CPPFLAGS=-D_STDC_C99=

do-install:
	${INSTALL_PROGRAM} ${WRKSRC}/ccache ${STAGEDIR}${PREFIX}/bin
	${INSTALL_MAN} ${WRKSRC}/doc/ccache.1 \
		${STAGEDIR}${PREFIX}/share/man/man1
	@${MKDIR} ${STAGEDIR}${PREFIX}/libexec/ccache
.for compiler in cc c++ gcc g++ clang clang++
	${LN} -sf ${PREFIX}/bin/ccache ${STAGEDIR}${PREFIX}/libexec/ccache/${compiler}
.endfor
	@${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	${INSTALL_DATA} ${WRKSRC}/doc/MANUAL.html ${STAGEDIR}${STD_DOCDIR}

[FILE:253:descriptions/desc.primary]
ccache is a compiler cache.  It acts as a caching pre-processor to C/C++
compilers, using the -E compiler switch and a hash to detect when a
compilation can be satisfied from cache.  This often results in a 5 to 10
times speedup in common compilations.


[FILE:98:distinfo]
e51c611a3da865754cb0ff1ddd95bd7a6acac603576c0bd39583f8cc30af28d2       352440 ccache-3.7.5.tar.xz


[FILE:88:manifests/plist.primary]
%%CCLINKDIR%%/
 c++
 cc
 clang
 clang++
 g++
 gcc
bin/ccache
share/man/man1/ccache.1.gz


[FILE:29:manifests/plist.docs]
share/doc/ccache/MANUAL.html


[FILE:456:patches/patch-Makefile.in]
--- Makefile.in.orig	2019-10-22 18:51:15 UTC
+++ Makefile.in
@@ -126,11 +126,7 @@ install: ccache$(EXEEXT) @disable_man@cc
 clean:
 	rm -rf $(files_to_clean)
 
-$(non_3pp_objs) $(test_objs): CFLAGS += @more_warnings@
 
-src/snprintf.o: CFLAGS += @no_implicit_fallthrough_warning@
-$(zlib_objs): CPPFLAGS += -include config.h
-$(zlib_objs): CFLAGS += @no_implicit_fallthrough_warning@
 
 src/zlib/libz.a: $(zlib_objs)
 	$(if $(quiet),@echo "  AR       $@")


[FILE:1228:patches/patch-src_ccache.c]
- Don't hash -fcolor-diagnostics; make will auto use it while make -j will not.
  There's no reason to not use the cache in either of these cases if it is
  already available.

--- src/ccache.c.orig	2019-10-22 18:51:15 UTC
+++ src/ccache.c
@@ -1981,6 +1981,7 @@ calculate_common_hash(struct args *args,
 		free(p);
 	}
 
+#if 0
 	// Possibly hash GCC_COLORS (for color diagnostics).
 	if (guessed_compiler == GUESSED_GCC) {
 		const char *gcc_colors = getenv("GCC_COLORS");
@@ -1989,6 +1990,7 @@ calculate_common_hash(struct args *args,
 			hash_string(hash, gcc_colors);
 		}
 	}
+#endif
 }
 
 // Update a hash sum with information specific to the direct and preprocessor
@@ -2025,6 +2027,13 @@ calculate_object_hash(struct args *args,
 			continue;
 		}
 
+		/* Colors do not affect compilation. */
+		if (str_startswith(args->argv[i], "-fcolor-diagnostics") ||
+		    str_eq(args->argv[i], "-fdiagnostics-color") ||
+		    str_eq(args->argv[i], "-fdiagnostics-color=always")) {
+			continue;
+		}
+
 		// The -fdebug-prefix-map option may be used in combination with
 		// CCACHE_BASEDIR to reuse results across different directories. Skip using
 		// the value of the option from hashing but still hash the existence of the

