# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ccache
VERSION=		4.12.1
KEYWORDS=		devel
VARIANTS=		std
SDESC[std]=		Fast C/C++ compiler cache tool
HOMEPAGE=		https://ccache.samba.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main fmt
SITES[main]=		https://github.com/ccache/ccache/releases/download/v4.12.1/
DISTFILE[1]=		ccache-4.12.1.tar.xz:main
DIST_SUBDIR=		ccache
DF_INDEX=		1
SPKGS[std]=		set
			primary
			man
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		ruby-asciidoctor:single:ruby_default
			libblake3:dev:std
			xxhash:dev:std

USES=			cmake perl:build c++:primary zstd:build

DISTNAME=		ccache-4.12.1
EXTRACT_ONLY=		1

LICENSE=		GPLv3+:primary
LICENSE_TERMS=		primary:{{WRKSRC}}/LICENSE.adoc
LICENSE_FILE=		GPLv3+:{{WRKSRC}}/GPL-3.0.txt
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/ccache

BUILD_TARGET=		all doc

PLIST_SUB=		CCLINKDIR="libexec/ccache"

CMAKE_ARGS=		-DENABLE_TESTING:BOOL=OFF
			-DREDIS_STORAGE_BACKEND:BOOL=OFF
			-DDEP_FMT:STRING=BUNDLED
VAR_OPSYS[sunos]=	LDFLAGS=-lsocket
			LDFLAGS=-lsendfile

post-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/libexec/ccache
.for compiler in cc c++ gcc g++ clang clang++
	${LN} -sf ${PREFIX}/bin/ccache ${STAGEDIR}${PREFIX}/libexec/ccache/${compiler}
.endfor
	${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	${INSTALL_DATA} ${INSTALL_WRKSRC}/doc/MANUAL.html ${STAGEDIR}${STD_DOCDIR}
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/ccache

[FILE:253:descriptions/desc.primary]
ccache is a compiler cache.  It acts as a caching pre-processor to C/C++
compilers, using the -E compiler switch and a hash to detect when a
compilation can be satisfied from cache.  This often results in a 5 to 10
times speedup in common compilations.


[FILE:106:distinfo]
42e6c4b260cffd92dfa755e26390f45f5842e8c1a5f64f2b2e68adfbe82d1542       509872 ccache/ccache-4.12.1.tar.xz


[FILE:61:manifests/plist.primary]
%%CCLINKDIR%%/
 c++
 cc
 clang
 clang++
 g++
 gcc
bin/ccache


[FILE:24:manifests/plist.man]
share/man/man1/ccache.1


[FILE:122:manifests/plist.docs]
share/doc/ccache/
 AUTHORS.adoc
 AUTHORS.html
 LICENSE.adoc
 LICENSE.html
 MANUAL.adoc
 MANUAL.html
 NEWS.adoc
 NEWS.html


[FILE:511:patches/patch-cmake_FindBlake3.cmake]
--- cmake/FindBlake3.cmake.orig	2025-09-14 12:23:17 UTC
+++ cmake/FindBlake3.cmake
@@ -5,7 +5,7 @@ if(DEP_BLAKE3 STREQUAL "BUNDLED")
   message(STATUS "Using bundled Blake3 as requested")
 else()
   find_path(BLAKE3_INCLUDE_DIR blake3.h)
-  find_library(BLAKE3_LIBRARY blake3)
+  find_library(BLAKE3_LIBRARY blake3_pic)
   if(BLAKE3_INCLUDE_DIR)
     file(READ "${BLAKE3_INCLUDE_DIR}/blake3.h" _blake3_h)
     string(REGEX MATCH "#define BLAKE3_VERSION_STRING \"([0-9]+).([0-9]+).*([0-9]+)\"" _ "${_blake3_h}")


[FILE:481:patches/patch-cmake_FindXxhash.cmake]
--- cmake/FindXxhash.cmake.orig	2025-09-14 12:23:17 UTC
+++ cmake/FindXxhash.cmake
@@ -39,7 +39,7 @@ if(_download_xxhash)
   include(FetchContent)
   FetchContent_Declare(
     Xxhash
-    URL "https://github.com/Cyan4973/xxhash/archive/refs/tags/v${_xxhash_version_string}.tar.gz"
+    URL "file:///distfiles/ccache/v${_xxhash_version_string}.tar.gz"
     URL_HASH SHA256=aae608dfe8213dfd05d909a57718ef82f30722c392344583d3f39050c7f29a80
   )
   FetchContent_MakeAvailable(Xxhash)


[FILE:534:patches/patch-cmake_FindZstd.cmake]
--- cmake/FindZstd.cmake.orig	2025-09-14 12:23:17 UTC
+++ cmake/FindZstd.cmake
@@ -5,7 +5,7 @@ if(DEPS STREQUAL "DOWNLOAD" OR DEP_ZSTD
   set(_download_zstd TRUE)
 else()
   find_path(ZSTD_INCLUDE_DIR zstd.h)
-  find_library(ZSTD_LIBRARY zstd)
+  find_library(ZSTD_LIBRARY zstd_pic)
   if(ZSTD_INCLUDE_DIR AND ZSTD_LIBRARY)
     file(READ "${ZSTD_INCLUDE_DIR}/zstd.h" _zstd_h)
     string(REGEX MATCH "#define ZSTD_VERSION_MAJOR +([0-9]+).*#define ZSTD_VERSION_MINOR +([0-9]+).*#define ZSTD_VERSION_RELEASE +([0-9]+)" _ "${_zstd_h}")


[FILE:721:patches/patch-cmake_config.h.in]
--- cmake/config.h.in.orig	2025-09-14 12:23:17 UTC
+++ cmake/config.h.in
@@ -35,16 +35,18 @@
 #cmakedefine _DARWIN_C_SOURCE
 
 // Define to activate features from IEEE Stds 1003.1-2008.
+#if !defined(__sun)
 #define _POSIX_C_SOURCE 200809L
+#endif
 
 #if defined(__SunOS_5_8) || defined(__SunOS_5_9) || defined(__SunOS_5_10)
 #  define _XOPEN_SOURCE 500
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #  define _XOPEN_SOURCE 700
 #elif defined(__ibmxl__) && defined(__clang__) // Compiler xlclang
 #  define _XOPEN_SOURCE 600
 #  define _ALL_SOURCE 1
-#elif !defined(__SunOS_5_11) && !defined(__APPLE__)
+#elif !defined(__sun) && !defined(__APPLE__)
 #  define _XOPEN_SOURCE
 #endif
 


[FILE:333:files/Makefile.BSD.in]
.SUFFIXES:
.SUFFIXES: .o .c

SRCS=	src/main.c \
	src/args.c \
	src/ccache.c \ 
	src/cleanup.c \
	src/compopt.c \
	src/conf.c \
	src/confitems.c \
	src/counters.c \
	src/execute.c \
	src/exitfn.c \
	src/main.c

OBJS=		${SRCS:R:S/$/.o/}

CFLAGS+=	-I./src \
		-I./src/zlib \
		-I./unittest \
		-DCC_IS_GCC \
		-Wno-implicit-fallthrough

