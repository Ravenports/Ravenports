# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ccache
VERSION=		4.4.2
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Fast C/C++ compiler cache tool
HOMEPAGE=		https://ccache.samba.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/ccache/ccache/releases/download/v4.4.2/
DISTFILE[1]=		ccache-4.4.2.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		ruby-asciidoctor:single:ruby_default

USES=			cmake perl:build c++:primary zstd:build

DISTNAME=		ccache-4.4.2

LICENSE=		GPLv3+:primary
LICENSE_TERMS=		primary:{{WRKSRC}}/LICENSE.adoc
LICENSE_FILE=		GPLv3+:{{WRKSRC}}/GPL-3.0.txt
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/ccache

BUILD_TARGET=		all doc

INSTALL_REQ_TOOLCHAIN=	yes
PLIST_SUB=		CCLINKDIR="libexec/ccache"

CMAKE_ARGS=		-DENABLE_TESTING:BOOL=OFF
			-DREDIS_STORAGE_BACKEND:BOOL=OFF

post-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/libexec/ccache
.for compiler in cc c++ gcc g++ clang clang++
	${LN} -sf ${PREFIX}/bin/ccache ${STAGEDIR}${PREFIX}/libexec/ccache/${compiler}
.endfor
	${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	${INSTALL_DATA} ${INSTALL_WRKSRC}/doc/MANUAL.html ${STAGEDIR}${STD_DOCDIR}
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/ccache

[FILE:253:descriptions/desc.primary]
ccache is a compiler cache.  It acts as a caching pre-processor to C/C++
compilers, using the -E compiler switch and a hash to detect when a
compilation can be satisfied from cache.  This often results in a 5 to 10
times speedup in common compilations.


[FILE:98:distinfo]
9200cafbaa5fd62c2600fccb40a18214e57747825e6cdcd76688b4b61c2dcba0       510260 ccache-4.4.2.tar.xz


[FILE:88:manifests/plist.primary]
%%CCLINKDIR%%/
 c++
 cc
 clang
 clang++
 g++
 gcc
bin/ccache
share/man/man1/ccache.1.gz


[FILE:29:manifests/plist.docs]
share/doc/ccache/MANUAL.html


[FILE:310:patches/patch-cmake_Findzstd.cmake]
--- cmake/Findzstd.cmake.orig	2021-09-28 19:39:22 UTC
+++ cmake/Findzstd.cmake
@@ -41,7 +41,7 @@ if(ZSTD_FROM_INTERNET)
 
   set(zstd_FOUND TRUE)
 else()
-  find_library(ZSTD_LIBRARY zstd)
+  find_library(ZSTD_LIBRARY zstd_pic)
   find_path(ZSTD_INCLUDE_DIR zstd.h)
 
   include(FindPackageHandleStandardArgs)


[FILE:721:patches/patch-cmake_config.h.in]
--- cmake/config.h.in.orig	2021-09-28 19:39:22 UTC
+++ cmake/config.h.in
@@ -36,16 +36,18 @@
 #cmakedefine _DARWIN_C_SOURCE
 
 // Define to activate features from IEEE Stds 1003.1-2008.
+#if !defined(__sun)
 #define _POSIX_C_SOURCE 200809L
+#endif
 
 #if defined(__SunOS_5_8) || defined(__SunOS_5_9) || defined(__SunOS_5_10)
 #  define _XOPEN_SOURCE 500
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #  define _XOPEN_SOURCE 700
 #elif defined(__ibmxl__) && defined(__clang__) // Compiler xlclang
 #  define _XOPEN_SOURCE 600
 #  define _ALL_SOURCE 1
-#elif !defined(__SunOS_5_11) && !defined(__APPLE__)
+#elif !defined(__sun) && !defined(__APPLE__)
 #  define _XOPEN_SOURCE
 #endif
 


[FILE:398:patches/patch-src_CMakeLists.txt]
--- src/CMakeLists.txt.orig	2021-09-28 19:39:22 UTC
+++ src/CMakeLists.txt
@@ -61,6 +61,8 @@ if(WIN32)
   elseif(STATIC_LINK AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
     target_link_libraries(ccache_framework PRIVATE -static c++ -dynamic)
   endif()
+else()
+      target_link_libraries(ccache_framework PRIVATE -static-libgcc -static-libstdc++)
 endif()
 
 set(THREADS_PREFER_PTHREAD_FLAG ON)


[FILE:448:patches/patch-src_third__party_CMakeLists.txt]
--- src/third_party/CMakeLists.txt.orig	2021-09-28 19:39:22 UTC
+++ src/third_party/CMakeLists.txt
@@ -46,6 +46,10 @@ target_include_directories(
 target_link_libraries(third_party PRIVATE standard_settings)
 target_link_libraries(third_party INTERFACE blake3)
 
+if(CMAKE_SYSTEM_NAME MATCHES "(Solaris|SunOS)")
+  target_link_libraries(third_party PUBLIC socket)
+endif()
+
 if(WIN32)
   target_link_libraries(third_party PRIVATE ws2_32)
 endif()


[FILE:303:patches/patch-src_third__party_httplib.cpp]
--- src/third_party/httplib.cpp.orig	2021-09-28 19:39:22 UTC
+++ src/third_party/httplib.cpp
@@ -730,7 +730,7 @@ bool bind_ip_address(socket_t sock, cons
   return ret;
 }
 
-#if !defined _WIN32 && !defined ANDROID
+#if !defined _WIN32 && !defined ANDROID && !defined __sun
 #define USE_IF2IP
 #endif
 


[FILE:288:patches/patch-src_third__party_httplib.h]
--- src/third_party/httplib.h.orig	2021-09-28 19:39:22 UTC
+++ src/third_party/httplib.h
@@ -161,7 +161,9 @@ using socket_t = SOCKET;
 
 #include <arpa/inet.h>
 #include <cstring>
+#ifndef __sun
 #include <ifaddrs.h>
+#endif
 #include <netdb.h>
 #include <netinet/in.h>
 #ifdef __linux__


[FILE:333:files/Makefile.BSD.in]
.SUFFIXES:
.SUFFIXES: .o .c

SRCS=	src/main.c \
	src/args.c \
	src/ccache.c \ 
	src/cleanup.c \
	src/compopt.c \
	src/conf.c \
	src/confitems.c \
	src/counters.c \
	src/execute.c \
	src/exitfn.c \
	src/main.c

OBJS=		${SRCS:R:S/$/.o/}

CFLAGS+=	-I./src \
		-I./src/zlib \
		-I./unittest \
		-DCC_IS_GCC \
		-Wno-implicit-fallthrough

