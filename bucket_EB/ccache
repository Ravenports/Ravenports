# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ccache
VERSION=		4.2.1
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Fast C/C++ compiler cache tool
HOMEPAGE=		https://ccache.samba.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/ccache/ccache/releases/download/v4.2.1/
DISTFILE[1]=		ccache-4.2.1.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		asciidoc:single:standard

USES=			cmake perl:build c++:primary zstd:build

DISTNAME=		ccache-4.2.1

LICENSE=		GPLv3+:primary
LICENSE_TERMS=		primary:{{WRKSRC}}/LICENSE.adoc
LICENSE_FILE=		GPLv3+:{{WRKSRC}}/GPL-3.0.txt
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/ccache

BUILD_TARGET=		all doc

INSTALL_REQ_TOOLCHAIN=	yes
PLIST_SUB=		CCLINKDIR="libexec/ccache"

CMAKE_ARGS=		-DENABLE_TESTING:BOOL=OFF

post-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/libexec/ccache
.for compiler in cc c++ gcc g++ clang clang++
	${LN} -sf ${PREFIX}/bin/ccache ${STAGEDIR}${PREFIX}/libexec/ccache/${compiler}
.endfor
	${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	${INSTALL_DATA} ${INSTALL_WRKSRC}/doc/MANUAL.html ${STAGEDIR}${STD_DOCDIR}
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/ccache

[FILE:253:descriptions/desc.primary]
ccache is a compiler cache.  It acts as a caching pre-processor to C/C++
compilers, using the -E compiler switch and a hash to detect when a
compilation can be satisfied from cache.  This often results in a 5 to 10
times speedup in common compilations.


[FILE:98:distinfo]
9d6ba1cdefdc690401f404b747d81a9a1802b17af4235815866b7620d980477e       431484 ccache-4.2.1.tar.xz


[FILE:88:manifests/plist.primary]
%%CCLINKDIR%%/
 c++
 cc
 clang
 clang++
 g++
 gcc
bin/ccache
share/man/man1/ccache.1.gz


[FILE:29:manifests/plist.docs]
share/doc/ccache/MANUAL.html


[FILE:310:patches/patch-cmake_Findzstd.cmake]
--- cmake/Findzstd.cmake.orig	2021-03-27 18:54:20 UTC
+++ cmake/Findzstd.cmake
@@ -41,7 +41,7 @@ if(ZSTD_FROM_INTERNET)
 
   set(zstd_FOUND TRUE)
 else()
-  find_library(ZSTD_LIBRARY zstd)
+  find_library(ZSTD_LIBRARY zstd_pic)
   find_path(ZSTD_INCLUDE_DIR zstd.h)
 
   include(FindPackageHandleStandardArgs)


[FILE:566:patches/patch-cmake_config.h.in]
--- cmake/config.h.in.orig	2021-03-27 18:54:20 UTC
+++ cmake/config.h.in
@@ -32,12 +32,12 @@
 
 #if defined(__SunOS_5_8) || defined(__SunOS_5_9) || defined(__SunOS_5_10)
 #  define _XOPEN_SOURCE 500
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #  define _XOPEN_SOURCE 700
 #elif defined(__ibmxl__) && defined(__clang__) // Compiler xlclang
 #  define _XOPEN_SOURCE 600
 #  define _ALL_SOURCE 1
-#elif !defined(__SunOS_5_11) && !defined(__APPLE__)
+#elif !defined(__sun) && !defined(__APPLE__)
 #  define _XOPEN_SOURCE
 #endif
 


[FILE:386:patches/patch-src_CMakeLists.txt]
--- src/CMakeLists.txt.orig	2021-03-27 18:54:20 UTC
+++ src/CMakeLists.txt
@@ -68,6 +68,8 @@ if(WIN32)
   elseif(STATIC_LINK AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
     target_link_libraries(ccache_lib PRIVATE -static c++ -dynamic)
   endif()
+else()
+      target_link_libraries(ccache_lib PRIVATE -static-libgcc -static-libstdc++)
 endif()
 
 set(THREADS_PREFER_PTHREAD_FLAG ON)


[FILE:333:files/Makefile.BSD.in]
.SUFFIXES:
.SUFFIXES: .o .c

SRCS=	src/main.c \
	src/args.c \
	src/ccache.c \ 
	src/cleanup.c \
	src/compopt.c \
	src/conf.c \
	src/confitems.c \
	src/counters.c \
	src/execute.c \
	src/exitfn.c \
	src/main.c

OBJS=		${SRCS:R:S/$/.o/}

CFLAGS+=	-I./src \
		-I./src/zlib \
		-I./unittest \
		-DCC_IS_GCC \
		-Wno-implicit-fallthrough

