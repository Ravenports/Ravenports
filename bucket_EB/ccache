# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ccache
VERSION=		3.4.1
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Fast C/C++ compiler cache tool
HOMEPAGE=		https://ccache.samba.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://www.samba.org/ftp/ccache/
DISTFILE[1]=		ccache-3.4.1.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

LICENSE=		GPLv3:primary
LICENSE_SCHEME=		solo
LICENSE_FILE=		GPLv3:{{WRKSRC}}/GPL-3.0.txt

FPC_EQUIVALENT=		devel/ccache
SKIP_CCACHE=		yes

MUST_CONFIGURE=		gnu

PLIST_SUB=		CCLINKDIR="libexec/ccache"

CPPFLAGS=		-DCC_IS_GCC
			-Wno-implicit-fallthrough
VAR_OPSYS[sunos]=	CPPFLAGS=-D_XPG6
			CPPFLAGS=-D_STDC_C99=

do-install:
	${INSTALL_PROGRAM} ${WRKSRC}/ccache ${STAGEDIR}${PREFIX}/bin
	${INSTALL_MAN} ${WRKSRC}/ccache.1 ${STAGEDIR}${PREFIX}/share/man/man1
	@${MKDIR} ${STAGEDIR}${PREFIX}/libexec/ccache
.for compiler in cc c++ CC gcc g++ clang clang++
	${LN} -sf ${PREFIX}/bin/ccache ${STAGEDIR}${PREFIX}/libexec/ccache/${compiler}
.endfor
	@${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	${INSTALL_DATA} ${WRKSRC}/MANUAL.html ${STAGEDIR}${STD_DOCDIR}

[FILE:253:descriptions/desc.primary]
ccache is a compiler cache.  It acts as a caching pre-processor to C/C++
compilers, using the -E compiler switch and a hash to detect when a
compilation can be satisfied from cache.  This often results in a 5 to 10
times speedup in common compilations.


[FILE:98:distinfo]
b176c33ebad799c7758713aa5a9ffcfc07a16ca7cb6d84bcac66d13419a5e886       458735 ccache-3.4.1.tar.gz


[FILE:92:manifests/plist.primary]
bin/ccache
share/man/man1/ccache.1.gz
%%CCLINKDIR%%/
 cc
 gcc
 c++
 g++
 CC
 clang
 clang++


[FILE:29:manifests/plist.docs]
share/doc/ccache/MANUAL.html


[FILE:362:patches/patch-Makefile.in]
--- Makefile.in.orig	2018-02-11 18:16:12 UTC
+++ Makefile.in
@@ -90,7 +90,8 @@ clean:
 
 conf.c: confitems_lookup.c envtoconfitems_lookup.c
 
-$(zlib_objs): CPPFLAGS += -include config.h
+$(zlib_objs):
+	$(CC) $(all_cppflags) -include config.h $(all_cflags) -c src/zlib/${.TARGET:T:.o=.c} -o ${.TARGET} $<
 
 zlib/libz.a: $(zlib_objs)
 	$(AR) cr $@ $(zlib_objs)


[FILE:459:patches/patch-configure]
--- configure.orig	2018-02-11 18:16:12 UTC
+++ configure
@@ -2478,7 +2478,7 @@ $as_echo "#define _XOPEN_SOURCE 500" >>c
       ;;
     *)
 
-$as_echo "#define _XOPEN_SOURCE 600" >>confdefs.h
+$as_echo "#define _XOPEN_SOURCE 700" >>confdefs.h
 
       ;;
   esac
@@ -2503,7 +2503,7 @@ $as_echo "#define _XOPEN_SOURCE_EXTENDED
   esac
 
 
-$as_echo "#define _POSIX_C_SOURCE 200112L" >>confdefs.h
+$as_echo "#define _POSIX_C_SOURCE 200809L" >>confdefs.h
 
 
 fi


[FILE:1888:patches/patch-src_ccache.c]
- Determine whether cc(1) is clang or gcc at compile-time.
- Don't hash -fcolor-diagnostics; make will auto use it while make -j will not.
  There's no reason to not use the cache in either of these cases if it is
  already available.
-bdrewery

--- src/ccache.c.orig	2018-02-11 18:16:12 UTC
+++ src/ccache.c
@@ -477,6 +477,11 @@ compiler_is_clang(struct args *args)
 {
 	char *name = basename(args->argv[0]);
 	bool result = strstr(name, "clang") != NULL;
+#ifdef CC_IS_CLANG
+	if (strcmp(name, "cc") == 0 || strcmp(name, "CC") == 0 ||
+	    strcmp(name, "c++") == 0)
+	        result = true;
+#endif
 	free(name);
 	return result;
 }
@@ -486,6 +491,11 @@ compiler_is_gcc(struct args *args)
 {
 	char *name = basename(args->argv[0]);
 	bool result = strstr(name, "gcc") || strstr(name, "g++");
+#ifdef CC_IS_GCC
+	if (strcmp(name, "cc") == 0 || strcmp(name, "CC") == 0 ||
+	    strcmp(name, "c++") == 0)
+	        result = true;
+#endif
 	free(name);
 	return result;
 }
@@ -1673,6 +1683,7 @@ calculate_common_hash(struct args *args,
 		free(p);
 	}
 
+#if 0
 	// Possibly hash GCC_COLORS (for color diagnostics).
 	if (compiler_is_gcc(args)) {
 		const char *gcc_colors = getenv("GCC_COLORS");
@@ -1681,6 +1692,7 @@ calculate_common_hash(struct args *args,
 			hash_string(hash, gcc_colors);
 		}
 	}
+#endif
 }
 
 // Update a hash sum with information specific to the direct and preprocessor
@@ -1716,6 +1728,13 @@ calculate_object_hash(struct args *args,
 			continue;
 		}
 
+		/* Colors do not affect compilation. */
+		if (str_startswith(args->argv[i], "-fcolor-diagnostics") ||
+		    str_eq(args->argv[i], "-fdiagnostics-color") ||
+		    str_eq(args->argv[i], "-fdiagnostics-color=always")) {
+			continue;
+		}
+
 		// The -fdebug-prefix-map option may be used in combination with
 		// CCACHE_BASEDIR to reuse results across different directories. Skip it
 		// from hashing.

