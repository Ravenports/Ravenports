# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-funcy
VERSION=		1.10.1
KEYWORDS=		python devel
VARIANTS=		py27 py35 py36
SDESC[py35]=		Fancy and practical functional tools (PY 35)
SDESC[py36]=		Fancy and practical functional tools (PY 36)
SDESC[py27]=		Fancy and practical functional tools (PY 27)
HOMEPAGE=		https://github.com/Suor/funcy
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/f/funcy
DISTFILE[1]=		funcy-1.10.1.tar.gz:main
DF_INDEX=		1
SPKGS[py35]=		single
SPKGS[py36]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY35 PY36
OPTIONS_STANDARD=	none
VOPTS[py35]=		PY27=OFF PY35=ON PY36=OFF
VOPTS[py36]=		PY27=OFF PY35=OFF PY36=ON
VOPTS[py27]=		PY27=ON PY35=OFF PY36=OFF

DISTNAME=		funcy-1.10.1

LICENSE=		BSDGROUP:single
LICENSE_FILE=		BSDGROUP:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

GENERATED=		yes

[PY35].USES_ON=				python:py35

[PY36].USES_ON=				python:py36

[PY27].USES_ON=				python:py27

[FILE:2481:descriptions/desc.single]
Funcy
=====

|Gitter|

A collection of fancy functional tools focused on practicality.

Inspired by clojure, underscore and my own abstractions. Keep reading to
get an overview
or `read the docs <http://funcy.readthedocs.org/>`_.
Or jump directly to `cheatsheet
<http://funcy.readthedocs.io/en/stable/cheatsheet.html>`_.

Works with Python 2.6+, 3.3+ and pypy.


Installation
-------------

::

    pip install funcy


Overview
--------------

Import stuff from funcy to make things happen:

.. code:: python

    from funcy import whatever, you, need


Merge collections of same type
(works for dicts, sets, lists, tuples, iterators and even strings):

.. code:: python

    merge(coll1, coll2, coll3, ...)
    join(colls)
    merge_with(sum, dict1, dict2, ...)


Walk through collection, creating its transform (like map but preserves
type):

.. code:: python

    walk(str.upper, {'a', 'b'})            # {'A', 'B'}
    walk(reversed, {'a': 1, 'b': 2})       # {1: 'a', 2: 'b'}
    walk_keys(double, {'a': 1, 'b': 2})    # {'aa': 1, 'bb': 2}
    walk_values(inc, {'a': 1, 'b': 2})     # {'a': 2, 'b': 3}


Select a part of collection:

.. code:: python

    select(even, {1,2,3,10,20})                  # {2,10,20}
    select(r'^a', ('a','b','ab','ba'))           # ('a','ab')
    select_keys(callable, {str: '', None: None}) # {str: ''}
    compact({2, None, 1, 0})                     # {1,2}


Manipulate sequences:

.. code:: python

    take(4, iterate(double, 1)) # [1, 2, 4, 8]
    first(drop(3, count(10)))   # 13

    remove(even, [1, 2, 3])     # [1, 3]
    concat([1, 2], [5, 6])      # [1, 2, 5, 6]
    cat(map(range, range(4)))   # [0, 0, 1, 0, 1, 2]
    mapcat(range, range(4))     # same
    flatten(nested_structure)   # flat_list
    distinct('abacbdd')         # list('abcd')

    split(odd, range(5))        # ([1, 3], [0, 2, 4])
    split_at(2, range(5))       # ([0, 1], [2, 3, 4])
    group_by(mod3, range(5))    # {0: [0, 3], 1: [1, 4], 2: [2]}

    partition(2, range(5))      # [[0, 1], [2, 3]]
    chunks(2, range(5))         # [[0, 1], [2, 3], [4]]
    pairwise(range(5))          # iter: [0, 1], [1, 2], ...


And functions:

.. code:: python

    partial(add, 1)             # inc
    curry(add)(1)(2)            # 3
    compose(inc, double)(10)    # 21
    complement(even)            # odd
    all_fn(isa(int), even)      # is_even_int

    one_third = rpartial(operator.div, 3.0)
    has_suffix = rcurry(str.endswith)


Create decorators easily:


[FILE:98:distinfo]
c38ef134d34c767b9d631de453e19f710ac0575b9463d55e30f4f93274e089e4        29657 funcy-1.10.1.tar.gz

