# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-scp
VERSION=		0.13.3
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Scp module for paramiko (PY37)
SDESC[py38]=		Scp module for paramiko (PY38)
HOMEPAGE=		https://github.com/jbardin/scp.py
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/b7/37/122d300034f2c8576158a7830e02c687730635e65a95f9eb2b4eb002554d
DISTFILE[1]=		scp-0.13.3-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		scp-0.13.3.dist-info

GENERATED=		yes

[PY37].BUILD_DEPENDS_ON=		python-pip:single:py37
[PY37].RUN_DEPENDS_ON=			python-paramiko:single:py37
[PY37].USES_ON=				python:py37,wheel

[PY38].BUILD_DEPENDS_ON=		python-pip:single:py38
[PY38].RUN_DEPENDS_ON=			python-paramiko:single:py38
[PY38].USES_ON=				python:py38,wheel

[FILE:2467:descriptions/desc.single]
Pure python scp module
======================

The scp.py module uses a paramiko transport to send and recieve files via
the
scp1 protocol. This is the protocol as referenced from the openssh scp
program,
and has only been tested with this implementation.

Example
-------

..  code-block:: python

    from paramiko import SSHClient
    from scp import SCPClient

    ssh = SSHClient()
    ssh.load_system_host_keys()
    ssh.connect('example.com')

    # SCPCLient takes a paramiko transport as an argument
    scp = SCPClient(ssh.get_transport())

    scp.put('test.txt', 'test2.txt')
    scp.get('test2.txt')

    # Uploading the 'test' directory with its content in the
    # '/home/user/dump' remote directory
    scp.put('test', recursive=True, remote_path='/home/user/dump')

    scp.close()

..  code-block::

    $ md5sum test.txt test2.txt
    fc264c65fb17b7db5237cf7ce1780769 test.txt
    fc264c65fb17b7db5237cf7ce1780769 test2.txt

Using 'with' keyword
--------------------

..  code-block:: python

    from paramiko import SSHClient
    from scp import SCPClient

    ssh = SSHClient()
    ssh.load_system_host_keys()
    ssh.connect('example.com')

    with SCPClient(ssh.get_transport()) as scp:
        scp.put('test.txt', 'test2.txt')
        scp.get('test2.txt')

..  code-block::

    $ md5sum test.txt test2.txt
    fc264c65fb17b7db5237cf7ce1780769 test.txt
    fc264c65fb17b7db5237cf7ce1780769 test2.txt

Uploading file-like objects
---------------------------

The putfo method can be used to upload file-like objects:

..  code-block:: python

    import io
    from paramiko import SSHClient
    from scp import SCPClient

    ssh = SSHClient()
    ssh.load_system_host_keys()
    ssh.connect('example.com')

    # SCPCLient takes a paramiko transport as an argument
    scp = SCPClient(ssh.get_transport())

    # generate in-memory file-like object
    fl = io.BytesIO()
    fl.write(b'test')
    fl.seek(0)
    # upload it directly from memory
    scp.putfo(fl, '/tmp/test.txt')
    # close connection
    scp.close()
    # close file handler
    fl.close()

Tracking progress of your file uploads/downloads
------------------------------------------------

A progress function can be given as a callback to the SCPClient to handle
how the current SCP operation handles the progress of the transfers. In the
example below we print the percentage complete of the file transfer.

..  code-block:: python

    from paramiko import SSHClient


[FILE:110:distinfo]
f2fa9fb269ead0f09b4e2ceb47621beb7000c135f272f6b70d3d9d29928d7bf0         8153 scp-0.13.3-py2.py3-none-any.whl

