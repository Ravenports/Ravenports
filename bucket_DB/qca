# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		qca
VERSION=		2.3.6
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Cross-platform crypto API for Qt
HOMEPAGE=		https://userbase.kde.org/QCA
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://download.kde.org/stable/qca/2.3.6/
DISTFILE[1]=		qca-2.3.6.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		botan:dev:standard
			doxygen:single:standard
			libgcrypt:dev:standard
BUILDRUN_DEPENDS=	botan:primary:standard
			cyrus-sasl:primary:standard
			gnupg:primary:standard
			nss:complete:standard
			qt5-qtbase:primary:standard

USES=			cmake pkgconfig qt5

FPC_EQUIVALENT=		devel/qca

CONFIGURE_ENV=		QC_CERTSTORE_PATH={{LOCALBASE}}/share/certs/ca-root-nss.crt

SOVERSION=		2.3.6

CMAKE_ARGS=		-DBUILD_PLUGINS=none
			-DBUILD_TESTS=no
			-DQT4_BUILD=OFF
			-DWITH_botan_PLUGIN=yes
			-DWITH_cyrus-sasl_PLUGIN=yes
			-DWITH_gcrypt_PLUGIN=yes
			-DWITH_gnupg_PLUGIN=yes
			-DWITH_logger_PLUGIN=yes
			-DWITH_nss_PLUGIN=yes
			-DWITH_ossl_PLUGIN=no
			-DWITH_pkcs11_PLUGIN=no
			-DWITH_softstore_PLUGIN=yes
			-DCMAKE_PREFIX_PATH={{PREFIX}}/lib/qt5/cmake
			-DQCA_FEATURE_INSTALL_DIR={{PREFIX}}/lib/qt5/mkspecs/features
			-DQCA_MAN_INSTALL_DIR={{PREFIX}}/share/man

post-stage:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/mozcerts-qt5
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/qcatool-qt5
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libqca-qt5.so.2.3.6
.for PLUGIN in cyrus-sasl gcrypt gnupg logger nss softstore
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/qca-qt5/crypto/libqca-${PLUGIN}.so
.endfor

do-install:
	cd ${WRKDIR}/.build && make DESTDIR="${STAGEDIR}" install

[FILE:587:descriptions/desc.single]
Taking a hint from the similarly-named Java Cryptography Architecture, QCA 
aims to provide a straightforward and cross-platform crypto API, using Qt 
datatypes and conventions. QCA separates the API from the implementation, 
using plugins known as Providers. The advantage of this model is to allow 
applications to avoid linking to or explicitly depending on any particular 
cryptographic library. This allows one to easily change or upgrade crypto 
implementations without even needing to recompile the application! QCA 
should work everywhere Qt does, including Windows/Unix/MacOSX.


[FILE:95:distinfo]
ee59d531d4b82fb1685f4d8d74c2caa0777f501800f7426eaa372109a4305249       745864 qca-2.3.6.tar.xz


[FILE:739:manifests/plist.single]
bin/
 mozcerts-qt5
 qcatool-qt5
include/Qca-qt5/QtCrypto/
 QtCrypto
 qca.h
 qca_basic.h
 qca_cert.h
 qca_core.h
 qca_export.h
 qca_keystore.h
 qca_publickey.h
 qca_safetimer.h
 qca_securelayer.h
 qca_securemessage.h
 qca_support.h
 qca_textfilter.h
 qca_tools.h
 qca_version.h
 qcaprovider.h
 qpipe.h
lib/
 libqca-qt5.so
 libqca-qt5.so.%%SOMAJOR%%
 libqca-qt5.so.%%SOVERSION%%
lib/cmake/Qca-qt5/
 Qca-qt5Config.cmake
 Qca-qt5ConfigVersion.cmake
 Qca-qt5Targets-release.cmake
 Qca-qt5Targets.cmake
lib/pkgconfig/qca2-qt5.pc
lib/qca-qt5/crypto/
 libqca-botan.so
 libqca-cyrus-sasl.so
 libqca-gcrypt.so
 libqca-gnupg.so
 libqca-logger.so
 libqca-nss.so
 libqca-softstore.so
lib/qt5/mkspecs/features/crypto.prf
share/man/man1/qcatool-qt5.1.gz


[FILE:277:patches/patch-src_support_console.cpp]
--- src/support/console.cpp.orig	2022-10-18 21:57:43 UTC
+++ src/support/console.cpp
@@ -30,7 +30,7 @@
 #ifdef Q_OS_WIN
 #include <windows.h>
 #else
-#ifdef Q_OS_ANDROID
+#if defined(Q_OS_ANDROID) || defined(Q_OS_FREEBSD)
 #include <termios.h>
 #else
 #include <sys/termios.h>

