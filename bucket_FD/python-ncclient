# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-ncclient
VERSION=		0.6.16
KEYWORDS=		python
VARIANTS=		v11 v12
SDESC[v11]=		Python library for NETCONF clients (3.11)
SDESC[v12]=		Python library for NETCONF clients (3.12)
HOMEPAGE=		https://github.com/ncclient/ncclient
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/n/ncclient
DISTFILE[1]=		ncclient-0.6.16.tar.gz:main
DF_INDEX=		1
SPKGS[v11]=		single
SPKGS[v12]=		single

OPTIONS_AVAILABLE=	PY311 PY312
OPTIONS_STANDARD=	none
VOPTS[v11]=		PY311=ON PY312=OFF
VOPTS[v12]=		PY311=OFF PY312=ON

DISTNAME=		ncclient-0.6.16

GENERATED=		yes

[PY311].BUILDRUN_DEPENDS_ON=		python-setuptools:single:v11
					python-paramiko:single:v11
					python-lxml:single:v11
					python-six:single:v11
[PY311].USES_ON=			python:v11,sutools

[PY312].BUILDRUN_DEPENDS_ON=		python-setuptools:single:v12
					python-paramiko:single:v12
					python-lxml:single:v12
					python-six:single:v12
[PY312].USES_ON=			python:v12,sutools

[FILE:2314:descriptions/desc.single]
ncclient: Python library for NETCONF clients
--------------------------------------------

ncclient is a Python library that facilitates client-side scripting and
application development around the NETCONF protocol. ncclient was
developed by [Shikar Bhushan]. It is now
maintained by `Leonidas Poulopoulos (@leopoul) <http://ncclient.org>`
and `Einar Nilsen-Nygaard (@einarnn)`.

Docs:
`http://ncclient.readthedocs.org <http://ncclient.readthedocs.org>`_

Github:
`https://github.com/ncclient/ncclient
<https://github.com/ncclient/ncclient>`_

Requirements:
^^^^^^^^^^^^^

-  Python 2.7 or Python 3.4+
-  setuptools 0.6+
-  Paramiko 1.7+
-  lxml 3.3.0+
-  libxml2
-  libxslt

If you are on Debian/Ubuntu install the following libs (via aptitude or
apt-get):

-  libxml2-dev
-  libxslt1-dev

Installation:
^^^^^^^^^^^^^

::

    [ncclient] $ sudo python setup.py install

or via pip:

::

    pip install ncclient

Examples:
^^^^^^^^^

::

    [ncclient] $ python examples/juniper/*.py

Usage
~~~~~

Get device running config
'''''''''''''''''''''''''

Use either an interactive Python console (ipython) or integrate the
following in your code:

::

    from ncclient import manager

    with manager.connect(host=host, port=830, username=user,
hostkey_verify=False) as m:
        c = m.get_config(source='running').data_xml
        with open("%s.xml" % host, 'w') as f:
            f.write(c)

As of 0.4.1 ncclient integrates Juniper's and Cisco's forks, lots of new
concepts
have been introduced that ease management of Juniper and Cisco devices
respectively.
The biggest change is the introduction of device handlers in connection
paramms.
For example to invoke Juniper's functions annd params one has to re-write
the above with 
**device\_params={'name':'junos'}**:

::

    from ncclient import manager

    with manager.connect(host=host, port=830, username=user,
hostkey_verify=False, device_params={'name':'junos'}) as m:
        c = m.get_config(source='running').data_xml
        with open("%s.xml" % host, 'w') as f:
            f.write(c)

Device handlers are easy to implement and prove to be futureproof.

Supported device handlers
'''''''''''''''''''''''''

* Alcatel Lucent: `device_params={'name':'alu'}`
* Ciena: `device_params={'name':'ciena'}`
* Cisco:
    - CSR: `device_params={'name':'csr'}`


[FILE:101:distinfo]
a16a351d8c234e3bbf3495577b63c96ae4adfcdf67f2d84194313473ea65b805       112619 ncclient-0.6.16.tar.gz

