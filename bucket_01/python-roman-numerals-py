# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-roman-numerals-py
VERSION=		3.1.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Manipulate well-formed Roman numerals (3.12)
SDESC[v13]=		Manipulate well-formed Roman numerals (3.13)
HOMEPAGE=		https://pypi.org/project/roman-numerals-py/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/53/97/d2cbbaa10c9b826af0e10fdf836e1bf344d9f0abb873ebc34d1f49642d3f
DISTFILE[1]=		roman_numerals_py-3.1.0-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		roman_numerals_py-3.1.0.dist-info

GENERATED=		yes

[PY312].USES_ON=			python:v12,wheel

[PY313].USES_ON=			python:v13,wheel

[FILE:2129:descriptions/desc.single]
===============
 roman-numerals
===============

A library for manipulating well-formed Roman numerals.

Integers between 1 and 3,999 (inclusive) are supported.
Numbers beyond this range will return an OutOfRangeError.

The classical system of roman numerals requires that
the same character may not appear more than thrice consecutively,
meaning that 'MMMCMXCIX' (3,999) is the largest well-formed Roman numeral.
The smallest is 'I' (1), as there is no symbol for zero in Roman numerals.

Both upper- and lower-case formatting of roman numerals are supported,
and likewise for parsing strings,
although the entire string must be of the same case.
Numerals that do not adhere to the classical form are rejected
with an InvalidRomanNumeralError.

Example usage
=============

Creating a roman numeral
------------------------

.. code-block:: python

   from roman_numerals import RomanNumeral

   num = RomanNumeral(16)
   assert str(num) == 'XVI'

   num = RomanNumeral.from_string("XVI")
   assert int(num) == 16

Convert a roman numeral to a string
-----------------------------------

.. code-block:: python

   from roman_numerals import RomanNumeral

   num = RomanNumeral(16)
   assert str(num) == 'XVI'
   assert num.to_uppercase() == 'XVI'
   assert num.to_lowercase() == 'xvi'
   assert repr(num) == 'RomanNumeral(16)'

Extract the decimal value of a roman numeral
--------------------------------------------

.. code-block:: python

   from roman_numerals import RomanNumeral

   num = RomanNumeral(42)
   assert int(num) == 42

Invalid input
-------------

.. code-block:: python

   from roman_numerals import RomanNumeral, InvalidRomanNumeralError

   num = RomanNumeral.from_string("Spam!")  # raises
InvalidRomanNumeralError
   num = RomanNumeral.from_string("CLL")  # raises InvalidRomanNumeralError
   num = RomanNumeral(0)  # raises OutOfRangeError
   num = RomanNumeral(4_000)  # raises OutOfRangeError

Licence
=======

This project is licenced under the terms of either the Zero-Clause BSD
licence
or the CC0 1.0 Universal licence.
See `LICENCE.rst`__ for the full text of both licences.

__ ./LICENCE.rst


[FILE:130:distinfo]
9da2ad2fb670bcf24e81070ceb3be72f6c11c440d73bd579fbeca1e9f330954c         7742 python-src/roman_numerals_py-3.1.0-py3-none-any.whl

