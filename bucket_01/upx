# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		upx
VERSION=		4.1.0
KEYWORDS=		archivers
VARIANTS=		standard
SDESC[standard]=	Ultimate Packer for eXecutables
HOMEPAGE=		https://upx.github.io/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/upx/upx/releases/download/v4.1.0/
DISTFILE[1]=		upx-4.1.0-src.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			man
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cpe cmake c++:primary

DISTNAME=		upx-4.1.0-src

LICENSE=		GPLv2+:primary
LICENSE_TERMS=		primary:{{WRKSRC}}/LICENSE
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

CPE_VENDOR=		upx_project
FPC_EQUIVALENT=		archivers/upx

post-install:
	${RM} ${STAGEDIR}${STD_DOCDIR}/COPYING
	${RM} ${STAGEDIR}${STD_DOCDIR}/LICENSE
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/upx

[FILE:290:descriptions/desc.primary]
UPX is a free, portable, extendable, high-performance executable packer for
several different executable formats. It achieves an excellent compression
ratio and offers very fast decompression. Your executables suffer no memory
overhead or other drawbacks because of in-place decompression.


[FILE:99:distinfo]
0582f78b517ea87ba1caa6e8c111474f58edd167e5f01f074d7d9ca2f81d47d0      1267708 upx-4.1.0-src.tar.xz


[FILE:8:manifests/plist.primary]
bin/upx


[FILE:24:manifests/plist.man]
share/man/man1/upx.1.gz


[FILE:68:manifests/plist.docs]
share/doc/upx/
 NEWS
 README
 THANKS.txt
 upx-doc.html
 upx-doc.txt


[FILE:401:patches/patch-src-packer.h]
--- src/packer.h.orig	2023-08-08 08:38:12 UTC
+++ src/packer.h
@@ -221,7 +221,7 @@ protected:
     void addLoader(C, C, C, C, C, C, C, C, C);
     void addLoader(C, C, C, C, C, C, C, C, C, C);
 #undef C
-#if (ACC_CC_CLANG || ACC_CC_GNUC)
+#if 0 && (ACC_CC_CLANG || ACC_CC_GNUC)
     void addLoaderVA(const char *s, ...) __attribute__((__sentinel__));
 #else
     void addLoaderVA(const char *s, ...);


[FILE:605:patches/patch-src_bele.h]
--- src/bele.h.orig	2023-08-08 08:38:12 UTC
+++ src/bele.h
@@ -95,6 +95,7 @@ static forceinline unsigned bswap32(unsi
 static forceinline upx_uint64_t bswap64(upx_uint64_t v) noexcept { return _byteswap_uint64(v); }
 
 #else
+# if defined(__FreeBSD__) || defined(__DragonFly__)
 
 static forceinline constexpr unsigned bswap16(unsigned v) noexcept {
     // return __builtin_bswap16((upx_uint16_t) (v & 0xffff));
@@ -109,6 +110,7 @@ static forceinline constexpr upx_uint64_
     return __builtin_bswap64(v);
 }
 
+# endif
 #endif
 
 static forceinline constexpr unsigned no_bswap16(unsigned v) noexcept {

