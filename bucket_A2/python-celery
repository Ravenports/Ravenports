# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-celery
VERSION=		5.5.1
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Distributed Task Queue (3.12)
SDESC[v13]=		Distributed Task Queue (3.13)
HOMEPAGE=		https://docs.celeryq.dev/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/75/e4/9bc19817230cb88d35ff4dd4415dbb0666cca525875b4c577af47aaf59e9
DISTFILE[1]=		celery-5.5.1-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

USES=			cpe

DISTNAME=		celery-5.5.1.dist-info

CPE_PRODUCT=		celery
CPE_TARGET_SW=		python
CPE_VENDOR=		celeryproject
GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-billiard:single:v12
					python-kombu:single:v12
					python-vine:single:v12
					python-click:single:v12
					python-click-didyoumean:single:v12
					python-click-repl:single:v12
					python-click-plugins:single:v12
					python-python-dateutil:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-billiard:single:v13
					python-kombu:single:v13
					python-vine:single:v13
					python-click:single:v13
					python-click-didyoumean:single:v13
					python-click-repl:single:v13
					python-click-plugins:single:v13
					python-python-dateutil:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:1027:descriptions/desc.single]

What's a Task Queue?
====================

Task queues are used as a mechanism to distribute work across threads or
machines.

A task queue's input is a unit of work, called a task, dedicated worker
processes then constantly monitor the queue for new work to perform.

Celery communicates via messages, usually using a broker
to mediate between clients and workers. To initiate a task a client puts a
message on the queue, the broker then delivers the message to a worker.

A Celery system can consist of multiple workers and brokers, giving way
to high availability and horizontal scaling.

Celery is written in Python, but the protocol can be implemented in any
language. In addition to Python there's node-celery_ for Node.js,
a `PHP client`_, `gocelery`_, gopher-celery_ for Go, and rusty-celery_ for
Rust.

Language interoperability can also be achieved by using webhooks
in such a way that the client enqueues an URL to be requested by a worker.

Backers
-------

Thank you to all our backers! üôè [`Become a backer`_]


[FILE:119:distinfo]
9f4f9e57e36000c097c1b6f7a8ab29814b82771e5439836f83915823809729c8       438525 python-src/celery-5.5.1-py3-none-any.whl

