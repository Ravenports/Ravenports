# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		keepassxc
VERSION=		2.7.4
REVISION=		1
KEYWORDS=		security
VARIANTS=		standard
SDESC[standard]=	Community fork of the KeePassX password manager
HOMEPAGE=		https://keepassxc.org
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/keepassxreboot/keepassxc/releases/download/2.7.4/
DISTFILE[1]=		keepassxc-2.7.4-src.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		libsodium:dev:standard
			ruby-asciidoctor:single:ruby_default
BUILDRUN_DEPENDS=	argon2:single:standard
			libsodium:primary:standard
			qrencode:single:standard
			qt5-qtbase:primary:standard
			qt5-qttools:single:standard
			qt5-qtsvg:single:standard
			qt5-qtx11extras:single:standard
			quazip:single:standard
			botan:primary:standard
			minizip:primary:standard

USES=			cmake pkgconfig qt5 zlib desktop-utils:primary
			mime-info:primary
XORG_COMPONENTS=	x11 xi xtst

LICENSE=		GPLv2:primary GPLv3:primary BSD3CLAUSE:primary
			MIT:primary LGPL20:primary LGPL21:primary
			LGPL3+:primary CUSTOM1:primary CUSTOM2:primary
LICENSE_TERMS=		primary:{{WRKSRC}}/COPYING
LICENSE_NAME=		CUSTOM1:"Boost Software License 1.0"
			CUSTOM2:"Nokia LGPL exception"
LICENSE_FILE=		GPLv2:{{WRKSRC}}/LICENSE.GPL-2
			GPLv3:{{WRKSRC}}/LICENSE.GPL-3
			BSD3CLAUSE:{{WRKSRC}}/LICENSE.BSD
			MIT:{{WRKSRC}}/LICENSE.MIT
			LGPL20:stock
			LGPL21:{{WRKSRC}}/LICENSE.LGPL-2.1
			LGPL3+:{{WRKSRC}}/LICENSE.LGPL-3
			CUSTOM1:{{WRKSRC}}/LICENSE.BOOST-1.0
			CUSTOM2:{{WRKSRC}}/LICENSE.NOKIA-LGPL-EXCEPTION
LICENSE_SCHEME=		multi

FPC_EQUIVALENT=		security/keepassxc

CMAKE_ARGS=		-DKEEPASSXC_BUILD_TYPE:STRING=Release
			-DWITH_XC_BROWSER:BOOL=ON
			-DWITH_XC_KEESHARE:BOOL=ON
			-DWITH_XC_NETWORKING:BOOL=ON
			-DWITH_XC_SSHAGENT:BOOL=ON
			-DWITH_XC_UPDATECHECK:BOOL=OFF
			-Wno-dev

post-patch:
	${REINPLACE_CMD} -e "s|__PREFIX__|${PREFIX}|" \
		${WRKSRC}/CMakeLists.txt \
		${WRKSRC}/src/autotype/CMakeLists.txt

do-install:
	(cd ${WRKDIR}/.build ; \
	${MAKE_CMD} DESTDIR=${STAGEDIR} install)
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/keepassxc
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/keepassxc-cli
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/keepassxc-proxy
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/keepassxc/libkeepassxc-autotype-xcb.so
	# relocate docs
	${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	${MV} ${STAGEDIR}${PREFIX}/share/keepassxc/docs/* \
		${STAGEDIR}${STD_DOCDIR}/
	${RMDIR} ${STAGEDIR}${PREFIX}/share/keepassxc/docs

[FILE:260:descriptions/desc.primary]
KeePassXC is a community fork of KeePassX, a native cross-platform port of 
KeePass Password Safe, with the goal to extend and improve it with new 
features and bugfixes to provide a feature-rich, fully cross-platform and 
modern open-source password manager.


[FILE:105:distinfo]
560052961da0389327e759171f660230dfa4e0f4e1fab6139600fb85c6e5dece      8957372 keepassxc-2.7.4-src.tar.xz


[FILE:1483:manifests/plist.primary]
bin/
 keepassxc
 keepassxc-cli
 keepassxc-proxy
lib/keepassxc/libkeepassxc-autotype-xcb.so
share/applications/org.keepassxc.KeePassXC.desktop
share/icons/hicolor/256x256/apps/keepassxc.png
share/icons/hicolor/scalable/apps/
 keepassxc-locked.svg
 keepassxc-monochrome-dark-locked.svg
 keepassxc-monochrome-dark.svg
 keepassxc-monochrome-light-locked.svg
 keepassxc-monochrome-light.svg
 keepassxc-unlocked.svg
 keepassxc.svg
share/icons/hicolor/scalable/mimetypes/application-x-keepassxc.svg
share/keepassxc/icons/application/256x256/apps/keepassxc.png
share/keepassxc/translations/
 keepassxc_ar.qm
 keepassxc_bg.qm
 keepassxc_ca.qm
 keepassxc_cs.qm
 keepassxc_da.qm
 keepassxc_de.qm
 keepassxc_el.qm
 keepassxc_en.qm
 keepassxc_en_GB.qm
 keepassxc_en_US.qm
 keepassxc_es.qm
 keepassxc_et.qm
 keepassxc_fi.qm
 keepassxc_fr.qm
 keepassxc_fr_CA.qm
 keepassxc_he.qm
 keepassxc_hr.qm
 keepassxc_hu.qm
 keepassxc_id.qm
 keepassxc_it.qm
 keepassxc_ja.qm
 keepassxc_ko.qm
 keepassxc_lt.qm
 keepassxc_my.qm
 keepassxc_nb.qm
 keepassxc_nl.qm
 keepassxc_pl.qm
 keepassxc_pt_BR.qm
 keepassxc_pt_PT.qm
 keepassxc_ro.qm
 keepassxc_ru.qm
 keepassxc_si.qm
 keepassxc_sk.qm
 keepassxc_sl.qm
 keepassxc_sr.qm
 keepassxc_sv.qm
 keepassxc_th.qm
 keepassxc_tr.qm
 keepassxc_uk.qm
 keepassxc_zh_CN.qm
 keepassxc_zh_TW.qm
share/keepassxc/wordlists/eff_large.wordlist
share/man/man1/
 keepassxc-cli.1.gz
 keepassxc.1.gz
share/metainfo/org.keepassxc.KeePassXC.appdata.xml
share/mime/packages/keepassxc.xml


[FILE:112:manifests/plist.docs]
share/doc/keepassxc/
 KeePassXC_GettingStarted.html
 KeePassXC_KeyboardShortcuts.html
 KeePassXC_UserGuide.html


[FILE:484:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2022-10-29 19:07:50 UTC
+++ CMakeLists.txt
@@ -476,7 +476,7 @@ if(UNIX AND NOT APPLE)
     if(WITH_XC_X11)
         list(APPEND QT_COMPONENTS X11Extras)
     endif()
-    find_package(Qt5 COMPONENTS ${QT_COMPONENTS} DBus REQUIRED)
+    find_package(Qt5 COMPONENTS ${QT_COMPONENTS} DBus REQUIRED HINTS /__PREFIX__/lib/qt5/cmake ENV PATH)
 elseif(APPLE)
     find_package(Qt5 COMPONENTS ${QT_COMPONENTS} REQUIRED HINTS
             /usr/local/opt/qt@5/lib/cmake


[FILE:615:patches/patch-src_autotype_CMakeLists.txt]
--- src/autotype/CMakeLists.txt.orig	2022-10-29 19:07:50 UTC
+++ src/autotype/CMakeLists.txt
@@ -1,7 +1,7 @@
 if(WITH_XC_AUTOTYPE)
     if(UNIX AND NOT APPLE AND NOT HAIKU)
         find_package(X11 REQUIRED COMPONENTS Xi XTest)
-        find_package(Qt5X11Extras 5.2 REQUIRED)
+        find_package(Qt5X11Extras 5.2 REQUIRED HINTS /__PREFIX__/lib/qt5/cmake ENV PATH)
         if(PRINT_SUMMARY)
             add_feature_info(libXi X11_Xi_FOUND "The X11 Xi Protocol library is required for auto-type")
             add_feature_info(libXtst X11_XTest_FOUND "The X11 XTEST Protocol library is required for auto-type")


[FILE:298:patches/patch-src_core_Alloc.cpp]
--- src/core/Alloc.cpp.orig	2022-10-29 19:07:50 UTC
+++ src/core/Alloc.cpp
@@ -20,7 +20,7 @@
 #include <cstdlib>
 #if defined(Q_OS_MACOS)
 #include <malloc/malloc.h>
-#elif defined(Q_OS_FREEBSD)
+#elif defined(__FreeBSD__)
 #include <malloc_np.h>
 #elif defined(HAVE_MALLOC_H)
 #include <malloc.h>

