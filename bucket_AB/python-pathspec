# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pathspec
VERSION=		0.8.1
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Library for git file pattern matching (PY37)
SDESC[py38]=		Library for git file pattern matching (PY38)
HOMEPAGE=		https://github.com/cpburnz/python-path-specification
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/p/pathspec
DISTFILE[1]=		pathspec-0.8.1.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		pathspec-0.8.1

GENERATED=		yes

[PY37].USES_ON=				python:py37

[PY38].USES_ON=				python:py38

[FILE:3066:descriptions/desc.single]
*pathspec*: Path Specification
==============================

*pathspec* is a utility library for pattern matching of file paths. So
far this only includes Git's wildmatch pattern matching which itself is
derived from Rsync's wildmatch. Git uses wildmatch for its `gitignore`_
files.

.. _`gitignore`: http://git-scm.com/docs/gitignore

Tutorial
--------

Say you have a "Projects" directory and you want to back it up, but only
certain files, and ignore others depending on certain conditions::

	>>> import pathspec
	>>> # The gitignore-style patterns for files to select, but we're
including
	>>> # instead of ignoring.
	>>> spec = """
	...
	... # This is a comment because the line begins with a hash: "#"
	...
	... # Include several project directories (and all descendants) relative
to
	... # the current directory. To reference a directory you must end with a
	... # slash: "/"
	... /project-a/
	... /project-b/
	... /project-c/
	...
	... # Patterns can be negated by prefixing with exclamation mark: "!"
	...
	... # Ignore temporary files beginning or ending with "~" and ending with
	... # ".swp".
	... !~*
	... !*~
	... !*.swp
	...
	... # These are python projects so ignore compiled python files from
	... # testing.
	... !*.pyc
	...
	... # Ignore the build directories but only directly under the project
	... # directories.
	... !/*/build/
	...
	... """

We want to use the GitWildMatchPattern class to compile our patterns. The
PathSpec class provides an interface around pattern implementations::

	>>> spec =
pathspec.PathSpec.from_lines(pathspec.patterns.GitWildMatchPattern,
spec.splitlines())

That may be a mouthful but it allows for additional patterns to be
implemented
in the future without them having to deal with anything but matching the
paths
sent to them. GitWildMatchPattern is the implementation of the actual
pattern which internally gets converted into a regular expression.
PathSpec is a simple wrapper around a list of compiled patterns.

To make things simpler, we can use the registered name for a pattern class
instead of always having to provide a reference to the class itself. The
GitWildMatchPattern class is registered as **gitwildmatch**::

	>>> spec = pathspec.PathSpec.from_lines('gitwildmatch', spec.splitlines())

If we wanted to manually compile the patterns we can just do the
following::

	>>> patterns = map(pathspec.patterns.GitWildMatchPattern,
spec.splitlines())
	>>> spec = PathSpec(patterns)

``PathSpec.from_lines()`` is simply a class method which does just that.

If you want to load the patterns from file, you can pass the file instance
directly as well::

	>>> with open('patterns.list', 'r') as fh:
	>>>     spec = pathspec.PathSpec.from_lines('gitwildmatch', fh)

You can perform matching on a whole directory tree with::

	>>> matches = spec.match_tree('path/to/directory')

Or you can perform matching on a specific set of file paths with::

	>>> matches = spec.match_files(file_paths)

Or check to see if an individual file matches::

	>>> is_matched = spec.match_file(file_path)

License
-------


[FILE:100:distinfo]
86379d6b86d75816baba717e64b1a3a3469deb93bb76d613c9ce79edc5cb68fd        26644 pathspec-0.8.1.tar.gz

