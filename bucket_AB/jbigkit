# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		jbigkit
VERSION=		2.1
KEYWORDS=		graphics
VARIANTS=		standard
SDESC[standard]=	Lossless compression for bi-level images
HOMEPAGE=		http://www.cl.cam.ac.uk/~mgk25/jbigkit/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://www.cl.cam.ac.uk/~mgk25/download/
DISTFILE[1]=		jbigkit-2.1.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

FPC_EQUIVALENT=		graphics/jbigkit

do-install:
.for item in jbgtopbm pbmtojbg jbgtopbm85 pbmtojbg85
	${INSTALL_PROGRAM} ${WRKSRC}/pbmtools/${item} \
		${STAGEDIR}${PREFIX}/bin
.endfor
.for item in jbgtopbm.1 pbmtojbg.1
	${INSTALL_MAN} ${WRKSRC}/pbmtools/${item} \
		${STAGEDIR}${MANPREFIX}/man/man1
.endfor
.for item in libjbig.a libjbig85.a
	${INSTALL_DATA} ${WRKSRC}/libjbig/${item} \
		${STAGEDIR}${PREFIX}/lib
.endfor
.for item in libjbig.so.2 libjbig85.so.1
	${INSTALL_LIB} ${WRKSRC}/libjbig/${item} \
		${STAGEDIR}${PREFIX}/lib
.endfor
	${INSTALL_DATA} ${WRKSRC}/libjbig/*.h ${STAGEDIR}${PREFIX}/include
	${LN} -sf libjbig.so.2 ${STAGEDIR}${PREFIX}/lib/libjbig.so
	${LN} -sf libjbig85.so.1 ${STAGEDIR}${PREFIX}/lib/libjbig85.so

[FILE:1297:descriptions/desc.single]
JBIG-KIT implements a highly effective data compression algorithm for
bi-level high-resolution images such as fax pages or scanned documents.

This is a portable library of compression and decompression functions
with a documented interface that can be included into your image or
document processing software. Also provided are ready-to-use compression
and decompression programs with a simple command line interface (similar
to the converters found in Jef Poskanzer's PBM conversion package).

JBIG-KIT implements the specification

 International Standard ISO/IEC 11544:1993 and ITU-T Recommendation
 T.82(1993), "Information technology - Coded representation of picture
 and audio information - progressive bi-level image compression",
 <http://www.itu.ch/itudoc/itu-t/rec/t/t82_23822.html>,

which is commonly referred to as the "JBIG standard". JBIG (Joint
Bi-level Image experts Group) is the committee which developed this
international standard for the lossless compression of images using
arithmetic coding. Like the well-known compression algorithms JPEG and
MPEG, also JBIG has been developed and published by the International
Organization  for  Standardization  (ISO)  and  the  International
Telecommunication Union  (ITU) (see also  <http://www.iso.ch/> and
<http://www.itu.ch/>).


[FILE:97:distinfo]
de7106b6bfaf495d6865c7dd7ac6ca1381bd12e0d81405ea81e7f2167263d932       438710 jbigkit-2.1.tar.gz


[FILE:218:manifests/plist.single]
bin/
 jbgtopbm
 jbgtopbm85
 pbmtojbg
 pbmtojbg85
include/
 jbig.h
 jbig85.h
 jbig_ar.h
lib/
 libjbig.a
 libjbig.so
 libjbig.so.2
 libjbig85.a
 libjbig85.so
 libjbig85.so.1
share/man/man1/
 jbgtopbm.1.gz
 pbmtojbg.1.gz


[FILE:778:patches/patch-Makefile]
--- ./Makefile.orig	2014-03-27 18:47:15.000000000 +0000
+++ ./Makefile	2014-06-21 22:53:57.000000000 +0000
@@ -1,24 +1,22 @@
 # Unix makefile for JBIG-KIT
 
 # Select an ANSI/ISO C compiler here, GNU gcc is recommended
-CC = gcc
+#CC = gcc
 
 # Options for the compiler: A high optimization level is suggested
-CFLAGS = -O2 -W -Wno-unused-result
+CFLAGS += -W # -Wno-unused-result -- older compilers don't have this
 # CFLAGS = -O -g -W -Wall -Wno-unused-result -ansi -pedantic # -DDEBUG
 
-export CC CFLAGS
-
 VERSION=2.1
 
 all: lib pbm
 	@echo "Enter 'make test' in order to start some automatic tests."
 
 lib:
-	cd libjbig && $(MAKE) -e
+	cd libjbig && $(MAKE)
 
 pbm: lib
-	cd pbmtools && $(MAKE) -e
+	cd pbmtools && $(MAKE)
 
 test: lib pbm
 	cd libjbig  && $(MAKE) test


[FILE:1115:patches/patch-libjbig_Makefile]
--- libjbig/Makefile	2014-03-27 14:47:15.000000000 -0400
+++ libjbig/Makefile	2014-04-08 08:43:57.000000000 -0400
@@ -2,10 +2,14 @@
 
 # Select an ANSI/ISO C compiler here, GNU gcc is recommended
-CC = gcc
+#CC = gcc
 
 # Options for the compiler: A high optimization level is suggested
-CFLAGS = -g -O -W -Wall -ansi -pedantic # --coverage
+CFLAGS += -W -Wall -ansi -pedantic # --coverage
 
-all: libjbig.a libjbig85.a tstcodec tstcodec85
+all: libjbig.a libjbig85.a tstcodec tstcodec85 libjbig.so.2 libjbig85.so.1
+
+.SUFFIXES: .c .So
+.c.So:
+	$(CC) -c -fpic -DPIC ${CFLAGS} ${.IMPSRC} -o ${.TARGET}
 
 tstcodec: tstcodec.o jbig.o jbig_ar.o
@@ -20,4 +24,8 @@
 	-ranlib libjbig.a
 
+libjbig.so.2: jbig.So jbig_ar.So
+	rm -f ${.TARGET}
+	$(CC) -o ${.TARGET} ${LDFLAGS} -shared -Wl,-soname,${.TARGET} ${.ALLSRC}
+
 libjbig85.a: jbig85.o jbig_ar.o
 	rm -f libjbig85.a
@@ -25,4 +33,8 @@
 	-ranlib libjbig85.a
 
+libjbig85.so.1: jbig85.So jbig_ar.So
+	rm -f ${.TARGET}
+	$(CC) -o ${.TARGET} ${LDFLAGS} -shared -Wl,-soname,${.TARGET} ${.ALLSRC}
+
 jbig.o: jbig.c jbig.h jbig_ar.h
 jbig85.o: jbig85.c jbig85.h jbig_ar.h


[FILE:902:patches/patch-pbmtools_Makefile]
--- pbmtools/Makefile	2014-03-27 14:47:15.000000000 -0400
+++ pbmtools/Makefile	2014-04-08 09:18:42.000000000 -0400
@@ -2,14 +2,14 @@
 
 # Select an ANSI/ISO C compiler here, e.g. GNU gcc is recommended
-CC = gcc
+#CC = gcc
 
 # Options for the compiler
-CFLAGS = -g -O -W -Wall -Wno-unused-result -ansi -pedantic # --coverage
-CPPFLAGS = -I../libjbig 
+CFLAGS += -W -Wall -ansi -pedantic # --coverage -Wno-unused-result
+CFLAGS += -I../libjbig 
 
 .SUFFIXES: .1 .5 .txt $(SUFFIXES)
 .PHONY: txt test test82 test85 clean
 
-all: pbmtojbg jbgtopbm pbmtojbg85 jbgtopbm85 txt
+all: pbmtojbg jbgtopbm pbmtojbg85 jbgtopbm85
 
 txt: pbmtojbg.txt jbgtopbm.txt pbm.txt pgm.txt
@@ -144,6 +144,8 @@
 	cmp test-$(IMG).pbm test-$(IMG).pbm85
 
-test-%.pbm: ../examples/%.jbg
-	./jbgtopbm $< $@
+.for i in 1 2 3
+test-ccitt$i.pbm: ../examples/ccitt$i.jbg
+	./jbgtopbm ${.ALLSRC} ${.TARGET}
+.endfor
 
 test-t82.pbm:


[FILE:881:patches/patch-warnings]
--- pbmtools/pbmtojbg85.c	2014-03-27 14:47:15.000000000 -0400
+++ pbmtools/pbmtojbg85.c	2014-04-08 09:00:16.000000000 -0400
@@ -71,8 +71,12 @@
   if (c != EOF) {
     ungetc(c, f);
-    fscanf(f, "%lu", &i);
-  }
+    if (fscanf(f, "%lu", &i) == 1)
+       return i;
+    else
+       fprintf(stderr, "%s: corrupt input", progname);
+  } else
+       fprintf(stderr, "%s: unexpected end of input", progname);
 
-  return i;
+  return -1;
 }

--- pbmtools/pbmtojbg.c	2014-03-27 14:47:15.000000000 -0400
+++ pbmtools/pbmtojbg.c	2014-04-08 09:00:16.000000000 -0400
@@ -87,8 +87,12 @@
   if (c != EOF) {
     ungetc(c, f);
-    fscanf(f, "%lu", &i);
-  }
+    if (fscanf(f, "%lu", &i) == 1)
+       return i;
+    else
+       fprintf(stderr, "%s: corrupt input", progname);
+  } else
+       fprintf(stderr, "%s: unexpected end of input", progname);
 
-  return i;
+  return -1;
 }
 

