# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		recoll
VERSION=		1.42.0
KEYWORDS=		deskutils
VARIANTS=		std
SDESC[std]=		Full text search tool based on Xapian backend
HOMEPAGE=		https://www.lesbonscomptes.com/recoll/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://www.recoll.org/
DISTFILE[1]=		recoll-1.42.0.tar.gz:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			tools
			dev
			lang
			man
			docs
			examples

OPTIONS_AVAILABLE=	LINUX QT6 WEBKIT ONLYTEXT
OPTIONS_STANDARD=	LINUX QT6 WEBKIT ONLYTEXT
OPTGROUP_RADIO=		GUI
OPTDESCR[GUI]=		Graphical Interface Selection
OPTGROUP[GUI]=		QT6 WEBKIT ONLYTEXT
OPT_ON[linux]=		LINUX
OPT_ON[all]=		QT6

BUILD_DEPENDS=		xapian-core:dev:std
			chmlib:dev:std
			file:dev:std
			aspell:dev:std
BUILDRUN_DEPENDS=	xapian-core:primary:std
			aspell:primary:std
			chmlib:primary:std
			file:primary:std
RUN_DEPENDS=		unrar:primary:std
			antiword:primary:std
			catdoc:primary:std
			libwpd:tools:std
			unrtf:set:std
			perl-Image-ExifTool:single:perl_default
			poppler:utils:std
			pstotext:primary:std
			python-mutagen:single:python_default
EXRUN[tools]=		primary

USES=			bison meson pkgconfig shebangfix zlib:build
			python:build
GNOME_COMPONENTS=	libxslt
XORG_COMPONENTS=	x11

LICENSE=		GPLv2+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"_PYRECOLL_H_INCLUDED_"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/python/recoll/pyrecoll.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		deskutils/recoll
MESON_ARGS=		-Daspell=true
			-Drecollq=true
			-Dsystemd-system-unit-dir="{{LOCALBASE}}/lib/systemd/system"
SHEBANG_FILES=		filters/*.py
			filters/rclimg
			python/recoll/recoll/fsudi.py
			desktop/hotrecoll.py

MAKE_ENV=		PYTHON_CMD={{PYTHON_CMD}}
SINGLE_JOB=		yes

SOVERSION=		1.42.0
PLIST_SUB=		VERSION=1.42.0

[ONLYTEXT].DESCRIPTION=			Build without Grapical User Interface

[WEBKIT].DESCRIPTION=			Build Webkit Graphical User Interface
[WEBKIT].BROKEN_ON=			Webkit option not yet implemented
[WEBKIT].CONFIGURE_ARGS_OFF=		-Dwebkit=false
[WEBKIT].CONFIGURE_ARGS_ON=		-Dwebkit=true

[QT6].DESCRIPTION=			Build QT6 Graphical User Interface
[QT6].BUILDRUN_DEPENDS_ON=		qt6-qttools:primary:std
[QT6].BUILD_DEPENDS_ON=			qt6-qttools:dev:std
[QT6].CONFIGURE_ARGS_OFF=		-Dqtgui=false
[QT6].CONFIGURE_ARGS_ON=		-Dqtgui=true
[QT6].MAKE_ENV_ON=			QMAKE={{LOCALBASE}}/lib/qt6/bin/qmake

[LINUX].DESCRIPTION=			Build on Linux systems
[LINUX].CONFIGURE_ARGS_OFF=		-Dsystemd=false
[LINUX].CONFIGURE_ARGS_ON=		-Dsystemd=false
[LINUX].LDFLAGS_OFF=			{{ICONV_LIB}}
[LINUX].USES_OFF=			iconv

post-install-QT6-ON:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/recoll   # only with QT6

post-install:
	${STRIP_CMD} ${STAGEDIR}${PYTHON_SITELIBDIR}/recoll*/*.so \
		${STAGEDIR}${PREFIX}/lib/*.so
	# relocate examples
	${MKDIR} ${STAGEDIR}${STD_EXAMPLESDIR}
	${MV} ${STAGEDIR}${PREFIX}/share/recoll/examples/* \
		${STAGEDIR}${STD_EXAMPLESDIR}/
	${RM} -r ${STAGEDIR}${PREFIX}/share/recoll/examples
	# relocate docs
	${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	${MV} ${STAGEDIR}${PREFIX}/share/recoll/doc/* \
		${STAGEDIR}${STD_DOCDIR}/
	${RM} -r ${STAGEDIR}${PREFIX}/share/recoll/doc
	# autoplist for python files
	@(cd ${STAGEDIR}${PREFIX} && \
	${FIND} lib/python* \( -type f -o -type l \) 2>/dev/null | ${SORT}) \
	>> ${WRKDIR}/.manifest.primary.mktmp

[FILE:42:descriptions/desc.primary]
This package contains the recoil library.


[FILE:793:descriptions/desc.tools]
Recoll is a desktop full-text search tool.

Recoll finds documents based on their contents as well as their file names.
 * It can search most document formats. You may need external applications
   for text extraction.
 * It can reach any storage place: files, archive members, email
   attachments, transparently handling decompression.
 * One click will open the document inside a native editor or display an
   even quicker text preview.
 * A web front-end with preview and download features can replace or
   supplement the GUI for remote use.
 * The software is free, open source, and licensed under the GPL.

Recoll is based on the very capable Xapian search engine library, for which
it provides a powerful text extraction layer and a complete, yet easy to
use, Qt graphical interface.


[FILE:99:distinfo]
538c8f2ce21ffe16566ecf440313028b50f25c526991e1b571ed7f0026a271c5      3184107 recoll-1.42.0.tar.gz


[FILE:85:manifests/plist.primary]
@comment python files autopackaged
lib/
 librecoll.so.39
 librecoll.so.%%SOVERSION%%


[FILE:1959:manifests/plist.tools]
%%QT6-ON%%bin/recoll
%%QT6-ON%%share/applications/recoll-searchgui.desktop
%%QT6-ON%%share/icons/hicolor/48x48/apps/recoll.png
%%QT6-ON%%share/icons/hicolor/scalable/apps/recoll.svg
%%QT6-ON%%share/metainfo/org.recoll.recoll.appdata.xml
%%QT6-ON%%share/pixmaps/recoll.png
%%QT6-ON%%share/recoll/images/
 aptosid-book.png
 aptosid-manual.png
 archive.png
 book.png
 bookchap.png
 document.png
 drawing.png
 emblem-symbolic-link.png
 folder.png
 html.png
 image.png
 message.png
 mozilla_doc.png
 pdf.png
 pidgin.png
 postscript.png
 presentation.png
 sidux-book.png
 soffice.png
 source.png
 sownd.png
 spreadsheet.png
 text-x-python.png
 txt.png
 video.png
 wordprocessing.png
bin/
 recollindex
 recollq
share/recoll/filters/
 abiword.xsl
 archivextract.py
 cmdtalk.py
 cnsplitter.py
 conftree.py
 fb2.xsl
 gnumeric.xsl
 kosplitter.py
 msodump.zip
 okular-note.xsl
 opendoc-body.xsl
 opendoc-flat.xsl
 opendoc-meta.xsl
 openxml-meta.xsl
 openxml-word-body.xsl
 openxml-xls-body.xsl
 ppt-dump.py
 rcl7z.py
 rclaptosidman
 rclaspell-sugg.py
 rclaudio.py
 rclbasehandler.py
 rclbibtex.sh
 rclcheckneedretry.sh
 rclchm.py
 rclconfig.py
 rcldia.py
 rcldjvu.py
 rcldoc.py
 rcldvi
 rclepub.py
 rclepub1.py
 rclexec1.py
 rclexecm.py
 rclfb2.py
 rclgaim
 rclgenxslt.py
 rclhwp.py
 rclics.py
 rclimg
 rclimg.py
 rclinfo.py
 rclipynb.py
 rcljoplin.py
 rclkar.py
 rclkwd
 rcllatinclass.py
 rcllatinstops.zip
 rcllink.py
 rcllyx
 rclman
 rclmd.py
 rclmidi.py
 rclnamefilter.py
 rclnull.py
 rclocr.py
 rclocrabbyy.py
 rclocrcache.py
 rclocrtesseract.py
 rclopxml.py
 rclorgmode.py
 rclpages.py
 rclpdf.py
 rclppt.py
 rclps
 rclpst.py
 rclpurple
 rclpython.py
 rclrar.py
 rclrtf.py
 rclscribus
 rclsfz.py
 rclshowinfo
 rcltar.py
 rcltex
 rcltext.py
 rcltxtlines.py
 rcluncomp
 rcluncomp.py
 rclwar.py
 rclxls.py
 rclxml.py
 rclxmp.py
 rclxslt.py
 rclzip.py
 recoll-we-move-files.py
 recollepub.zip
 svg.xsl
 thunderbird-open-message.sh
 xls-dump.py
 xlsxmltocsv.py
 xml.xsl


[FILE:297:manifests/plist.dev]
include/recoll/
 Filter.h
 docseq.h
 docseqdb.h
 hldata.h
 idxstatus.h
 internfile.h
 log.h
 mimehandler.h
 pathut.h
 plaintorich.h
 qresultstore.h
 rclconfig.h
 rcldb.h
 rcldoc.h
 rclinit.h
 rclquery.h
 rclutil.h
 readfile.h
 reslistpager.h
 searchdata.h
 smallut.h
 wasatorcl.h
lib/librecoll.so


[FILE:320:manifests/plist.lang]
%%QT6-ON%%share/recoll/translations/
 recoll_cs.qm
 recoll_da.qm
 recoll_de.qm
 recoll_el.qm
 recoll_es.qm
 recoll_fr.qm
 recoll_hu.qm
 recoll_it.qm
 recoll_ja.qm
 recoll_ko.qm
 recoll_lt.qm
 recoll_nl.qm
 recoll_pl.qm
 recoll_ru.qm
 recoll_sv.qm
 recoll_tr.qm
 recoll_uk.qm
 recoll_xx.qm
 recoll_zh.qm
 recoll_zh_CN.qm


[FILE:91:manifests/plist.man]
share/man/man1/
 recoll.1
 recollindex.1
 recollq.1
 xadump.1
share/man/man5/recoll.conf.5


[FILE:52:manifests/plist.docs]
share/doc/recoll/
 docbook-xsl.css
 usermanual.html


[FILE:264:manifests/plist.examples]
share/examples/recoll/
 backends
 fields
 fragment-buttons.xml
 mimeconf
 mimemap
 mimeview
 rclmon.sh
 recoll-common.css
 recoll-common.qss
 recoll-dark.css
 recoll-dark.qss
 recoll.conf
 recoll.qss
 recollindex.desktop
 recollindex.service
 recollindex@.service


[FILE:661:patches/patch-qtgui_qmkmk.sh]
--- qtgui/qmkmk.sh.orig	2024-11-24 13:43:48 UTC
+++ qtgui/qmkmk.sh
@@ -2,6 +2,7 @@
 # This is used with meson for the recoll custom_target().
 # This just runs qmake then make
 # I could find no way to do this in 2 steps inside meson
+set -x
 set -e
 pro_file=$1
 shift
@@ -13,16 +14,6 @@ QMAKE=${QMAKE:-qmake}
 MAKE=${MAKE:-make}
 
 ncpus=2
-if which nproc > /dev/null ; then
-    ncpus=`nproc`
-elif which sysctl > /dev/null ; then
-    ncpus=`sysctl hw.ncpu | awk '{print $2}'`
-elif test -f /proc/cpuinfo ; then
-    ncpus=`grep -E '^processor[        ]*:' /proc/cpuinfo | wc -l`
-fi
-if test -z "$ncpus" ; then
-    ncpus=1
-fi
 
 cd $dir
 ${QMAKE} $fn $*


[FILE:200:patches/patch-utils_fileudi.cpp]
--- utils/fileudi.cpp.orig	2024-09-02 15:46:49 UTC
+++ utils/fileudi.cpp
@@ -18,6 +18,7 @@
 
 #include <cstdlib>
 #include <iostream>
+#include <sys/types.h>
 
 #include "fileudi.h"
 #include "md5.h"


[FILE:272:patches/patch-utils_fstreewalk.cpp]
--- utils/fstreewalk.cpp.orig	2024-09-02 15:46:49 UTC
+++ utils/fstreewalk.cpp
@@ -22,6 +22,9 @@
 #include <errno.h>
 #include <fnmatch.h>
 #include <cstring>
+#ifdef __FreeBSD__
+#include <sys/types.h>
+#endif
 #include <algorithm>
 #include <sstream>
 #include <vector>


[FILE:419:patches/patch-utils_pxattr.cpp]
--- utils/pxattr.cpp.orig	2024-09-02 15:46:49 UTC
+++ utils/pxattr.cpp
@@ -42,7 +42,7 @@
 
 // Not exactly true for win32, but makes my life easier by avoiding ifdefs in recoll (the calls just
 // fail, which is expected)
-#if defined(__DragonFly__) || defined(__OpenBSD__) || defined(_WIN32)
+#if defined(__DragonFly__) || defined(__OpenBSD__) || defined(_WIN32) || defined(__NetBSD__)
 #define HAS_NO_XATTR
 #endif
 

