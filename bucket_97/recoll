# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		recoll
VERSION=		1.33.2
KEYWORDS=		deskutils
VARIANTS=		standard
SDESC[standard]=	Full text search tool based on Xapian backend
HOMEPAGE=		https://www.lesbonscomptes.com/recoll/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://www.lesbonscomptes.com/recoll/
DISTFILE[1]=		recoll-1.33.2.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs
			examples
			nls

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	xapian-core:primary:standard
			aspell:primary:standard
			chmlib:single:standard
			qt5-qtbase:primary:standard
RUN_DEPENDS=		unrar:single:standard
			antiword:primary:standard
			catdoc:primary:standard
			libwpd:single:standard
			unrtf:single:standard
			perl-Image-ExifTool:single:perl_default
			poppler:utils:standard
			pstotext:single:standard
			python-mutagen:single:python_default

USES=			bison gmake iconv libtool pkgconfig shebangfix
			python:sutools qt5 mesa
GNOME_COMPONENTS=	libxslt

LICENSE=		GPLv2+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"_PYRECOLL_H_INCLUDED_"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/python/recoll/pyrecoll.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		deskutils/recoll
SHEBANG_FILES=		filters/*.py
			filters/rclimg
			desktop/hotrecoll.py

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--with-aspell
			--enable-qtgui
			--disable-webkit
CONFIGURE_ENV=		QMAKE="{{QMAKE_CMD}}"
			QMAKESPEC="{{QMAKESPEC}}"
			QTDIR="{{PREFIX}}"

MAKE_ARGS=		DESTDIR={{STAGEDIR}}
MAKE_ENV=		PYTHON_CMD={{PYTHON_CMD}}

PLIST_SUB=		VERSION=1.33.2

LDFLAGS=		-Wl,-rpath,{{PREFIX}}/lib/qt5
QMAKE_ARGS=		PREFIX={{PREFIX}}

post-patch:
	${REINPLACE_CMD} -e \
		's|@QMAKE@|${TRUE}|' \
		${WRKSRC}/Makefile.in
	${REINPLACE_CMD} \
		-e 's|/usr/local/lib|${LOCALBASE}/lib|' \
		-e '/LTLIBICONV=/ s|-R|-Wl,-rpath,|' \
		${WRKSRC}/configure
	${REINPLACE_CMD} -e \
		's|%%PYTHON_CMD%%|${PYTHON_CMD}|' \
		${WRKSRC}/Makefile.in

pre-build:
	cd ${WRKSRC}/qtgui && ${SETENV} ${QMAKE_ENV} ${QMAKE_CMD} \
		${QMAKE_ARGS} recoll.pro

post-install:
	${STRIP_CMD} ${STAGEDIR}${PYTHON_SITELIBDIR}/recoll*/*.so \
		${STAGEDIR}${PREFIX}/lib/recoll/*.so \
		${STAGEDIR}${PREFIX}/bin/recoll
	# relocate examples
	${MKDIR} ${STAGEDIR}${STD_EXAMPLESDIR}
	${MV} ${STAGEDIR}${PREFIX}/share/recoll/examples/* \
		${STAGEDIR}${STD_EXAMPLESDIR}/
	${RM} -r ${STAGEDIR}${PREFIX}/share/recoll/examples
	# relocate docs
	${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	${MV} ${STAGEDIR}${PREFIX}/share/recoll/doc/* \
		${STAGEDIR}${STD_DOCDIR}/
	${RM} -r ${STAGEDIR}${PREFIX}/share/recoll/doc
	# autoplist for python files
	@(cd ${STAGEDIR}${PREFIX} && \
	${FIND} lib/python* \( -type f -o -type l \) 2>/dev/null | ${SORT}) \
	>> ${WRKDIR}/.manifest.primary.mktmp

[FILE:793:descriptions/desc.primary]
Recoll is a desktop full-text search tool.

Recoll finds documents based on their contents as well as their file names.
 * It can search most document formats. You may need external applications
   for text extraction.
 * It can reach any storage place: files, archive members, email
   attachments, transparently handling decompression.
 * One click will open the document inside a native editor or display an
   even quicker text preview.
 * A web front-end with preview and download features can replace or
   supplement the GUI for remote use.
 * The software is free, open source, and licensed under the GPL.

Recoll is based on the very capable Xapian search engine library, for which
it provides a powerful text extraction layer and a complete, yet easy to
use, Qt graphical interface.


[FILE:99:distinfo]
aa5e151e26e5227f2e8a151b17586d3e7a6f8f0d2a3317735bc1cb1a552b656d      3676905 recoll-1.33.2.tar.gz


[FILE:1884:manifests/plist.primary]
@comment python files autopackaged
bin/
 recoll
 recollindex
lib/recoll/
 librecoll-%%VERSION%%.so
 librecoll.so
share/applications/recoll-searchgui.desktop
share/icons/hicolor/48x48/apps/recoll.png
share/man/man1/
 rclgrep.1.gz
 recoll.1.gz
 recollindex.1.gz
 recollq.1.gz
 xadump.1.gz
share/man/man5/recoll.conf.5.gz
share/metainfo/recoll.appdata.xml
share/pixmaps/recoll.png
share/recoll/filters/
 abiword.xsl
 cmdtalk.py
 conftree.py
 fb2.xsl
 gnumeric.xsl
 hotrecoll.py
 kosplitter.py
 msodump.zip
 okular-note.xsl
 opendoc-body.xsl
 opendoc-flat.xsl
 opendoc-meta.xsl
 openxml-meta.xsl
 openxml-word-body.xsl
 openxml-xls-body.xsl
 ppt-dump.py
 rcl7z.py
 rclaptosidman
 rclaudio.py
 rclbasehandler.py
 rclbibtex.sh
 rclcheckneedretry.sh
 rclchm.py
 rclconfig.py
 rcldia.py
 rcldjvu.py
 rcldoc.py
 rcldvi
 rclepub.py
 rclepub1.py
 rclexec1.py
 rclexecm.py
 rclfb2.py
 rclgaim
 rclgenxslt.py
 rclhwp.py
 rclics.py
 rclimg
 rclimg.py
 rclinfo.py
 rclipynb.py
 rclkar.py
 rclkwd
 rcllatinclass.py
 rcllatinstops.zip
 rcllyx
 rclman
 rclmidi.py
 rclocr.py
 rclocrabbyy.py
 rclocrcache.py
 rclocrtesseract.py
 rclopxml.py
 rclorgmode.py
 rclpdf.py
 rclppt.py
 rclps
 rclpst.py
 rclpurple
 rclpython.py
 rclrar.py
 rclrtf.py
 rclscribus
 rclshowinfo
 rcltar.py
 rcltex
 rcltext.py
 rcluncomp
 rcluncomp.py
 rclwar.py
 rclxls.py
 rclxml.py
 rclxmp.py
 rclxslt.py
 rclzip.py
 recoll-we-move-files.py
 recollepub.zip
 svg.xsl
 thunderbird-open-message.sh
 xls-dump.py
 xlsxmltocsv.py
 xml.xsl
share/recoll/images/
 aptosid-book.png
 aptosid-manual.png
 archive.png
 book.png
 bookchap.png
 document.png
 drawing.png
 emblem-symbolic-link.png
 folder.png
 html.png
 image.png
 message.png
 mozilla_doc.png
 pdf.png
 pidgin.png
 postscript.png
 presentation.png
 sidux-book.png
 soffice.png
 source.png
 sownd.png
 spreadsheet.png
 text-x-python.png
 txt.png
 video.png
 wordprocessing.png


[FILE:52:manifests/plist.docs]
share/doc/recoll/
 docbook-xsl.css
 usermanual.html


[FILE:254:manifests/plist.examples]
share/examples/recoll/
 fields
 fragment-buttons.xml
 mimeconf
 mimemap
 mimeview
 rclmon.sh
 recoll-common.css
 recoll-common.qss
 recoll-dark.css
 recoll-dark.qss
 recoll.conf
 recoll.qss
 recollindex.desktop
 recollindex.service
 recollindex@.service


[FILE:296:manifests/plist.nls]
share/recoll/translations/
 recoll_cs.qm
 recoll_da.qm
 recoll_de.qm
 recoll_el.qm
 recoll_es.qm
 recoll_fr.qm
 recoll_hu.qm
 recoll_it.qm
 recoll_ja.qm
 recoll_ko.qm
 recoll_lt.qm
 recoll_nl.qm
 recoll_pl.qm
 recoll_sv.qm
 recoll_tr.qm
 recoll_uk.qm
 recoll_xx.qm
 recoll_zh.qm
 recoll_zh_CN.qm


[FILE:2054:patches/patch-Makefile.in]
--- Makefile.in.orig	2022-11-07 17:41:31 UTC
+++ Makefile.in
@@ -2811,16 +2811,12 @@ PicStatic: $(librecoll_la_OBJECTS)
 @MAKEPYTHON_TRUE@clean-local:: recollpython-clean
 @MAKEPYTHON_TRUE@recollpython: librecoll.la
 @MAKEPYTHON_TRUE@	(cd python/recoll; set -x; \
-@MAKEPYTHON_TRUE@        for v in 2 3;do test -n "`which python$${v}`" && \
-@MAKEPYTHON_TRUE@        libdir=$(libdir) python$${v} setup.py build; \
-@MAKEPYTHON_TRUE@        done \
+@MAKEPYTHON_TRUE@        libdir=$(libdir) %%PYTHON_CMD%% setup.py build; \
 @MAKEPYTHON_TRUE@        )
 @MAKEPYTHON_TRUE@recollpython-install:
 @MAKEPYTHON_TRUE@	(cd python/recoll; set -x; \
-@MAKEPYTHON_TRUE@        for v in 2 3;do test -n "`which python$${v}`" && \
-@MAKEPYTHON_TRUE@        python$${v} setup.py install \
+@MAKEPYTHON_TRUE@        %%PYTHON_CMD%% setup.py install \
 @MAKEPYTHON_TRUE@         --prefix=${prefix} --root=$${DESTDIR:-/} $(OPTSFORPYTHON); \
-@MAKEPYTHON_TRUE@        done; \
 @MAKEPYTHON_TRUE@         )
 @MAKEPYTHON_TRUE@recollpython-clean:
 @MAKEPYTHON_TRUE@	rm -f python/recoll/*.pyc
@@ -2836,16 +2832,12 @@ PicStatic: $(librecoll_la_OBJECTS)
 @MAKEPYTHONCHM_TRUE@clean-local:: rclpychm-clean
 @MAKEPYTHONCHM_TRUE@rclpychm:
 @MAKEPYTHONCHM_TRUE@	(cd python/pychm; set -x; \
-@MAKEPYTHONCHM_TRUE@        for v in 3;do \
-@MAKEPYTHONCHM_TRUE@        test -n "`which python$${v}`" && python$${v} setup.py build;\
-@MAKEPYTHONCHM_TRUE@        done \
+@MAKEPYTHONCHM_TRUE@        %%PYTHON_CMD%% setup.py build;\
 @MAKEPYTHONCHM_TRUE@        )
 @MAKEPYTHONCHM_TRUE@rclpychm-install:
 @MAKEPYTHONCHM_TRUE@	(cd python/pychm; set -x; \
-@MAKEPYTHONCHM_TRUE@        for v in 3;do test -n "`which python$${v}`" && \
-@MAKEPYTHONCHM_TRUE@        python$${v} setup.py install \
+@MAKEPYTHONCHM_TRUE@        %%PYTHON_CMD%% setup.py install \
 @MAKEPYTHONCHM_TRUE@         --prefix=${prefix} --root=$${DESTDIR:-/} $(OPTSFORPYTHON); \
-@MAKEPYTHONCHM_TRUE@        done \
 @MAKEPYTHONCHM_TRUE@        )
 @MAKEPYTHONCHM_TRUE@rclpychm-clean:
 @MAKEPYTHONCHM_TRUE@	rm -rf python/pychm/build


[FILE:728:patches/patch-common_conf__post.h]
--- common/conf_post.h.orig	2022-09-24 12:12:59 UTC
+++ common/conf_post.h
@@ -67,18 +67,4 @@ typedef int ssize_t;
 #  define PRETEND_USE(expr) ((void)(expr))
 #endif /* PRETEND_USE */
 
-// It's complicated to really detect gnu gcc because other compilers define __GNUC__
-// See stackoverflow questions/38499462/how-to-tell-clang-to-stop-pretending-to-be-other-compilers
-#if defined(__GNUC__) && !defined(__llvm__) && !defined(__INTEL_COMPILER)
-#define REAL_GCC   __GNUC__ // probably
-#endif
-
-#ifdef REAL_GCC
-// Older gcc versions pretended to supply std::regex, but the resulting programs mostly crashed.
-#include <features.h>
-#if ! __GNUC_PREREQ(6,0)
-#define NO_STD_REGEX 1
-#endif
-#endif
-
 #endif /* INCLUDED */


[FILE:200:patches/patch-utils_fileudi.cpp]
--- utils/fileudi.cpp.orig	2022-01-14 09:19:06 UTC
+++ utils/fileudi.cpp
@@ -18,6 +18,7 @@
 
 #include <cstdlib>
 #include <iostream>
+#include <sys/types.h>
 
 #include "fileudi.h"
 #include "md5.h"


[FILE:272:patches/patch-utils_fstreewalk.cpp]
--- utils/fstreewalk.cpp.orig	2022-09-24 12:12:59 UTC
+++ utils/fstreewalk.cpp
@@ -22,6 +22,9 @@
 #include <errno.h>
 #include <fnmatch.h>
 #include <cstring>
+#ifdef __FreeBSD__
+#include <sys/types.h>
+#endif
 #include <algorithm>
 #include <sstream>
 #include <vector>

