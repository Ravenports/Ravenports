# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-atomicwrites
VERSION=		1.4.1
KEYWORDS=		python
VARIANTS=		v11 v12
SDESC[v11]=		Atomic file writes (3.11)
SDESC[v12]=		Atomic file writes (3.12)
HOMEPAGE=		https://github.com/untitaker/python-atomicwrites
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/a/atomicwrites
DISTFILE[1]=		atomicwrites-1.4.1.tar.gz:main
DF_INDEX=		1
SPKGS[v11]=		single
SPKGS[v12]=		single

OPTIONS_AVAILABLE=	PY311 PY312
OPTIONS_STANDARD=	none
VOPTS[v11]=		PY311=ON PY312=OFF
VOPTS[v12]=		PY311=OFF PY312=ON

DISTNAME=		atomicwrites-1.4.1

GENERATED=		yes

[PY311].USES_ON=			python:v11,sutools

[PY312].USES_ON=			python:v12,sutools

[FILE:2996:descriptions/desc.single]
===================
python-atomicwrites
===================

   :alt: Documentation Status

**Atomic file writes.**

.. code-block:: python

    from atomicwrites import atomic_write

    with atomic_write('foo.txt', overwrite=True) as f:
        f.write('Hello world.')
        # "foo.txt" doesn't exist yet.

    # Now it does.
    
See [API documentation] for more
low-level interfaces.

Features that distinguish it from other similar libraries (see
`Alternatives and Credit`_):

- Race-free assertion that the target file doesn't yet exist. This can be
  controlled with the overwrite parameter.

- Windows support, although not well-tested. The MSDN resources are not
very
  explicit about which operations are atomic. I'm basing my assumptions off
[a
  comment
 ]
  by [Doug Cook
 ], who appears
  to be a Microsoft employee:

      Question: Is MoveFileEx atomic if the existing and new
      files are both on the same drive?

      The simple answer is "usually, but in some cases it will silently
fall-back
      to a non-atomic method, so don't count on it".

      The implementation of MoveFileEx looks something like this: [...]

      The problem is if the rename fails, you might end up with a CopyFile,
which
      is definitely not atomic.

      If you really need atomic-or-nothing, you can try calling
      NtSetInformationFile, which is unsupported but is much more likely to
be
      atomic. 

- Simple high-level API that wraps a very flexible class-based API.

- Consistent error handling across platforms.

How it works
============

It uses a temporary file in the same directory as the given path. This
ensures
that the temporary file resides on the same filesystem.

The temporary file will then be atomically moved to the target location: On
POSIX, it will use rename if files should be overwritten, otherwise a
combination of link and unlink. On Windows, it uses MoveFileEx_ through
stdlib's ctypes with the appropriate flags.

Note that with link and unlink, there's a timewindow where the file
might be available under two entries in the filesystem: The name of the
temporary file, and the name of the target file.

Also note that the permissions of the target file may change this way. In
some
situations a chmod can be issued without any concurrency problems, but
since that is not always the case, this library doesn't do it by itself.

.. _MoveFileEx:
https://msdn.microsoft.com/en-us/library/windows/desktop/aa365240%28v=vs.85%29.aspx

fsync
-----

On POSIX, fsync is invoked on the temporary file after it is written (to
flush file content and metadata), and on the parent directory after the
file is
moved (to flush filename).

fsync does not take care of disks' internal buffers, but there don't seem
to be any standard POSIX APIs for that. On OS X, fcntl is used with
F_FULLFSYNC instead of fsync for that reason.

On Windows, [_commit]
is used, but there are no guarantees about disk internal buffers.

Alternatives and Credit
=======================


[FILE:104:distinfo]
81b2c9071a49367a7f770170e5eec8cb66567cfbbc8c73d20ce5ca4a8d71cf11        14227 atomicwrites-1.4.1.tar.gz

