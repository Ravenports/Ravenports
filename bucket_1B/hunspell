# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		hunspell
VERSION=		1.6.2
KEYWORDS=		textproc
VARIANTS=		standard
SDESC[standard]=	Most popular spellchecking library
HOMEPAGE=		http://hunspell.github.io/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/hunspell:hunspell:v1.6.2
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			autoreconf libtool:keepla iconv ncurses readline
			shebangfix perl

LICENSE=		GPLv2+:single LGPL21+:single MPL:single
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/COPYING
			LGPL21+:{{WRKSRC}}/COPYING.LESSER
			MPL:{{WRKSRC}}/COPYING.MPL
LICENSE_SCHEME=		dual

FPC_EQUIVALENT=		textproc/hunspell
SHEBANG_FILES=		src/tools/ispellaff2myspell

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-nls
			--with-readline
			--with-ui
			{{ICONV_CONFIGURE_ARG}}

INSTALL_TARGET=		install-strip
PLIST_SUB=		SHLIB_VER=1.6

CPPFLAGS=		-I{{NCURSESINC}}

post-patch:
	${REINPLACE_CMD} -e 's|%%PREFIX%%|${PREFIX}|g' \
		${WRKSRC}/src/tools/hunspell.cxx

[FILE:1328:descriptions/desc.single]
Hunspell is a spell checker and morphological analyzer library and program
designed for languages with rich morphology and complex word compounding or
character encoding. Hunspell interfaces: Ispell-like terminal interface
using Curses library, Ispell pipe interface, C++ class and C functions.

Hunspell's code base comes from the OpenOffice.org MySpell
(http://lingucomponent.openoffice.org/MySpell-3.zip). See README.MYSPELL,
AUTHORS.MYSPELL and license.myspell files. Hunspell is designed to
eventually replace Myspell in OpenOffice.org.

Main features of Hunspell spell checker and morphological analyzer:

* Unicode support (affix rules work only with first 65535 Unicode chars)
* Morphological analysis (custom item and arrangement style) and stemming
* Max. 65535 affix classes and twofold affix stripping (for agglutinative
  languages like Azeri, Basque, Estonian, Finnish, Hungarian, Turkish)
* Support complex compoundings (for example, Hungarian and German)
* Support language specific features (for example, special casing of Azeri
  and Turkish dotted i, or German sharp s)
* Handle conditional affixes, circumfixes, fogemorphemes, forbidden words,
  pseudoroots and homonyms.
* Free software. Versions 1.x are licenced under LGPL, GPL, MPL
  tri-license.  The upcoming Version 2 is licenced only under GNU LGPL.


[FILE:109:distinfo]
3cd9ceb062fe5814f668e4f22b2fa6e3ba0b339b921739541ce180cac4d6f4c4       721165 hunspell-hunspell-1.6.2.tar.gz


[FILE:576:manifests/plist.single]
bin/
 affixcompress
 analyze
 chmorph
 hunspell
 hunzip
 hzip
 ispellaff2myspell
 makealias
 munch
 unmunch
 wordforms
 wordlist2hunspell
include/hunspell/
 atypes.hxx
 csutil.hxx
 htypes.hxx
 hunspell.h
 hunspell.hxx
 hunvisapi.h
 w_char.hxx
lib/
 libhunspell-%%SHLIB_VER%%.a
 libhunspell-%%SHLIB_VER%%.la
 libhunspell-%%SHLIB_VER%%.so
 libhunspell-%%SHLIB_VER%%.so.0
 libhunspell-%%SHLIB_VER%%.so.0.0.1
lib/pkgconfig/hunspell.pc
share/man/hu/man1/hunspell.1.gz
share/man/man1/
 hunspell.1.gz
 hunzip.1.gz
 hzip.1.gz
share/man/man3/hunspell.3.gz
share/man/man5/hunspell.5.gz


[FILE:2572:patches/patch-add-const]
Add back `const` keyword to keep consumers forward compatible by
reverting https://github.com/hunspell/hunspell/commit/dd4b14899bfb

--- src/hunspell/hunspell.cxx.orig	2016-11-28 10:34:55 UTC
+++ src/hunspell/hunspell.cxx
@@ -110,7 +110,7 @@ public:
   int remove(const std::string& word);
   const std::string& get_version() const;
   struct cs_info* get_csconv();
-  std::vector<char> dic_encoding_vec;
+
 
 private:
   AffixMgr* pAMgr;
@@ -181,9 +181,6 @@ HunspellImpl::HunspellImpl(const char* a
   complexprefixes = pAMgr->get_complexprefixes();
   wordbreak = pAMgr->get_breaktable();
 
-  dic_encoding_vec.resize(encoding.size()+1);
-  strcpy(&dic_encoding_vec[0], encoding.c_str());
-
   /* and finally set up the suggestion manager */
   pSMgr = new SuggestMgr(try_string, MAXSUGGESTION, pAMgr);
   if (try_string)
@@ -1850,8 +1847,8 @@ int Hunspell::suffix_suggest(char*** sls
   return munge_vector(slst, stems);
 }
 
-char* Hunspell::get_dic_encoding() {
-  return &(m_Impl->dic_encoding_vec[0]);
+const char* Hunspell::get_dic_encoding() const {
+  return Hunspell_get_dic_encoding((Hunhandle*)(this));
 }
 
 int Hunspell::stem(char*** slst, char** desc, int n) {
@@ -1896,8 +1893,8 @@ int Hunspell_spell(Hunhandle* pHunspell,
   return reinterpret_cast<Hunspell*>(pHunspell)->spell(std::string(word));
 }
 
-char* Hunspell_get_dic_encoding(Hunhandle* pHunspell) {
-  return reinterpret_cast<Hunspell*>(pHunspell)->get_dic_encoding();
+const char* Hunspell_get_dic_encoding(Hunhandle* pHunspell) {
+  return (reinterpret_cast<Hunspell*>(pHunspell)->get_dict_encoding()).c_str();
 }
 
 int Hunspell_suggest(Hunhandle* pHunspell, char*** slst, const char* word) {
--- src/hunspell/hunspell.h.orig	2016-11-28 10:34:55 UTC
+++ src/hunspell/hunspell.h
@@ -68,7 +68,7 @@ LIBHUNSPELL_DLL_EXPORTED int Hunspell_ad
  */
 LIBHUNSPELL_DLL_EXPORTED int Hunspell_spell(Hunhandle* pHunspell, const char*);
 
-LIBHUNSPELL_DLL_EXPORTED char* Hunspell_get_dic_encoding(Hunhandle* pHunspell);
+LIBHUNSPELL_DLL_EXPORTED const char* Hunspell_get_dic_encoding(Hunhandle* pHunspell);
 
 /* suggest(suggestions, word) - search suggestions
  * input: pointer to an array of strings pointer and the (bad) word
--- src/hunspell/hunspell.hxx.orig	2016-11-28 10:34:55 UTC
+++ src/hunspell/hunspell.hxx
@@ -155,7 +155,7 @@ class LIBHUNSPELL_DLL_EXPORTED Hunspell 
   H_DEPRECATED void free_list(char*** slst, int n);
 
   const std::string& get_dict_encoding() const;
-  char* get_dic_encoding();
+  H_DEPRECATED const char* get_dic_encoding() const;
 
   /* morphological functions */
 


[FILE:2323:patches/patch-src_tools_hunspell.cxx]
--- src/tools/hunspell.cxx.orig	2017-09-03 11:38:44 UTC
+++ src/tools/hunspell.cxx
@@ -115,29 +115,23 @@
 #include "xmlparser.hxx"
 #include "odfparser.hxx"
 
-#define LIBDIR                \
-  "/usr/share/hunspell:"      \
-  "/usr/share/myspell:"       \
-  "/usr/share/myspell/dicts:" \
+#define LIBDIR                      \
+  "%%PREFIX%%/share/hunspell:"      \
+  "%%PREFIX%%/share/myspell:"       \
+  "%%PREFIX%%/share/myspell/dicts:" \
   "/Library/Spelling"
-#define USEROOODIR {                  \
-  ".openoffice.org/3/user/wordbook", \
-  ".openoffice.org2/user/wordbook",  \
-  ".openoffice.org2.0/user/wordbook",\
+#define USEROOODIR {                 \
+  ".openoffice.org/3/user/wordbook"  \
+  ".openoffice.org2/user/wordbook"   \
+  ".openoffice.org2.0/user/wordbook" \
   "Library/Spelling" }
-#define OOODIR                                       \
-  "/opt/openoffice.org/basis3.0/share/dict/ooo:"     \
-  "/usr/lib/openoffice.org/basis3.0/share/dict/ooo:" \
-  "/opt/openoffice.org2.4/share/dict/ooo:"           \
-  "/usr/lib/openoffice.org2.4/share/dict/ooo:"       \
-  "/opt/openoffice.org2.3/share/dict/ooo:"           \
-  "/usr/lib/openoffice.org2.3/share/dict/ooo:"       \
-  "/opt/openoffice.org2.2/share/dict/ooo:"           \
-  "/usr/lib/openoffice.org2.2/share/dict/ooo:"       \
-  "/opt/openoffice.org2.1/share/dict/ooo:"           \
-  "/usr/lib/openoffice.org2.1/share/dict/ooo:"       \
-  "/opt/openoffice.org2.0/share/dict/ooo:"           \
-  "/usr/lib/openoffice.org2.0/share/dict/ooo"
+#define OOODIR                                         \
+  "%%PREFIX%%/openoffice.org/basis3.0/share/dict/ooo:" \
+  "%%PREFIX%%/openoffice.org2.4/share/dict/ooo:"       \
+  "%%PREFIX%%/openoffice.org2.3/share/dict/ooo:"       \
+  "%%PREFIX%%/openoffice.org2.2/share/dict/ooo:"       \
+  "%%PREFIX%%/openoffice.org2.1/share/dict/ooo:"       \
+  "%%PREFIX%%/openoffice.org2.0/share/dict/ooo"
 #define HOME getenv("HOME")
 #define DICBASENAME ".hunspell_"
 #define LOGFILE "/tmp/hunspell.log"
@@ -643,6 +637,12 @@ char* mymkdtemp(char *templ) {
     return NULL;
   }
   return odftmpdir;
+#elif defined __sun__
+  char *tmplt;
+  tmplt = mktemp(templ);
+  if (tmplt == NULL)
+	return NULL;
+  return (mkdir (tmplt, 0700) == 0) ? tmplt : NULL;
 #else
   return mkdtemp(templ);
 #endif

