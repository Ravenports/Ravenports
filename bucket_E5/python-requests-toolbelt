# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-requests-toolbelt
VERSION=		0.9.1
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Utilities collection for Requests (PY37)
SDESC[py38]=		Utilities collection for Requests (PY38)
HOMEPAGE=		https://toolbelt.readthedocs.org
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/60/ef/7681134338fc097acef8d9b2f8abe0458e4d87559c689a8c306d0957ece5
DISTFILE[1]=		requests_toolbelt-0.9.1-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		requests_toolbelt-0.9.1.dist-info

GENERATED=		yes

[PY37].BUILD_DEPENDS_ON=		python-pip:single:py37
[PY37].RUN_DEPENDS_ON=			python-requests:single:py37
[PY37].USES_ON=				python:py37,wheel

[PY38].BUILD_DEPENDS_ON=		python-pip:single:py38
[PY38].RUN_DEPENDS_ON=			python-requests:single:py38
[PY38].USES_ON=				python:py38,wheel

[FILE:2707:descriptions/desc.single]
The Requests Toolbelt
=====================

This is just a collection of utilities for `python-requests`_, but don't 
really belong in requests proper. The minimum tested requests version is 
``2.1.0``. In reality, the toolbelt should work with ``2.0.1`` as well, but

some idiosyncracies prevent effective or sane testing on that version.

``pip install requests-toolbelt`` to get started!

multipart/form-data Encoder
---------------------------

The main attraction is a streaming multipart form-data object,
MultipartEncoder.
Its API looks like this:

.. code-block:: python

    from requests_toolbelt import MultipartEncoder
    import requests

    m = MultipartEncoder(
        fields={'field0': 'value', 'field1': 'value',
                'field2': ('filename', open('file.py', 'rb'),
'text/plain')}
        )

    r = requests.post('http://httpbin.org/post', data=m,
                      headers={'Content-Type': m.content_type})

You can also use ``multipart/form-data`` encoding for requests that don't
require files:

.. code-block:: python

    from requests_toolbelt import MultipartEncoder
    import requests

    m = MultipartEncoder(fields={'field0': 'value', 'field1': 'value'})

    r = requests.post('http://httpbin.org/post', data=m,
                      headers={'Content-Type': m.content_type})

Or, you can just create the string and examine the data:

.. code-block:: python

    # Assuming `m` is one of the above
    m.to_string()  # Always returns unicode

User-Agent constructor
----------------------

You can easily construct a requests-style ``User-Agent`` string::

    from requests_toolbelt import user_agent

    headers = {
        'User-Agent': user_agent('my_package', '0.0.1')
        }

    r = requests.get('https://api.github.com/users', headers=headers)

SSLAdapter
----------

The SSLAdapter was originally published on `Cory Benfield's blog`_. 
This adapter allows the user to choose one of the SSL protocols made
available 
in Python's ssl module for outgoing HTTPS connections:

.. code-block:: python

    from requests_toolbelt import SSLAdapter
    import requests
    import ssl

    s = requests.Session()
    s.mount('https://', SSLAdapter(ssl.PROTOCOL_TLSv1))

cookies/ForgetfulCookieJar
--------------------------

The ForgetfulCookieJar prevents a particular requests session from storing 
cookies:

.. code-block:: python

    from requests_toolbelt.cookies.forgetful import ForgetfulCookieJar

    session = requests.Session()
    session.cookies = ForgetfulCookieJar()

Known Issues
------------

On Python 3.3.0 and 3.3.1, the standard library's http module will fail
when passing an instance of the MultipartEncoder. This is fixed in later


[FILE:123:distinfo]
380606e1d10dc85c3bd47bf5a6095f815ec007be7a8b69c878507068df059e6f        54314 requests_toolbelt-0.9.1-py2.py3-none-any.whl

