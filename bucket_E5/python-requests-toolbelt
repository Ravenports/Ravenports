# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-requests-toolbelt
VERSION=		0.10.1
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Utilities collection for Requests (3.10)
SDESC[v11]=		Utilities collection for Requests (3.11)
HOMEPAGE=		https://toolbelt.readthedocs.io/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/05/d3/bf87a36bff1cb88fd30a509fd366c70ec30676517ee791b2f77e0e29817a
DISTFILE[1]=		requests_toolbelt-0.10.1-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		requests_toolbelt-0.10.1.dist-info

GENERATED=		yes

[PY310].RUN_DEPENDS_ON=			python-requests:single:py310
[PY310].USES_ON=			python:py310,wheel

[PY311].RUN_DEPENDS_ON=			python-requests:single:v11
[PY311].USES_ON=			python:v11,wheel

[FILE:2628:descriptions/desc.single]
The Requests Toolbelt
=====================

This is just a collection of utilities for `python-requests`_, but don't
really belong in requests proper. The minimum tested requests version is
``2.1.0``. In reality, the toolbelt should work with ``2.0.1`` as well, but
some idiosyncracies prevent effective or sane testing on that version.

``pip install requests-toolbelt`` to get started!

multipart/form-data Encoder
---------------------------

The main attraction is a streaming multipart form-data object,
MultipartEncoder.
Its API looks like this:

.. code-block:: python

    from requests_toolbelt import MultipartEncoder
    import requests

    m = MultipartEncoder(
        fields={'field0': 'value', 'field1': 'value',
                'field2': ('filename', open('file.py', 'rb'),
'text/plain')}
        )

    r = requests.post('http://httpbin.org/post', data=m,
                      headers={'Content-Type': m.content_type})

You can also use ``multipart/form-data`` encoding for requests that don't
require files:

.. code-block:: python

    from requests_toolbelt import MultipartEncoder
    import requests

    m = MultipartEncoder(fields={'field0': 'value', 'field1': 'value'})

    r = requests.post('http://httpbin.org/post', data=m,
                      headers={'Content-Type': m.content_type})

Or, you can just create the string and examine the data:

.. code-block:: python

    # Assuming `m` is one of the above
    m.to_string()  # Always returns unicode

User-Agent constructor
----------------------

You can easily construct a requests-style ``User-Agent`` string::

    from requests_toolbelt import user_agent

    headers = {
        'User-Agent': user_agent('my_package', '0.0.1')
        }

    r = requests.get('https://api.github.com/users', headers=headers)

SSLAdapter
----------

The SSLAdapter was originally published on `Cory Benfield's blog`_.
This adapter allows the user to choose one of the SSL protocols made
available
in Python's ssl module for outgoing HTTPS connections:

.. code-block:: python

    from requests_toolbelt import SSLAdapter
    import requests
    import ssl

    s = requests.Session()
    s.mount('https://', SSLAdapter(ssl.PROTOCOL_TLSv1))

cookies/ForgetfulCookieJar
--------------------------

The ForgetfulCookieJar prevents a particular requests session from storing
cookies:

.. code-block:: python

    from requests_toolbelt.cookies.forgetful import ForgetfulCookieJar

    session = requests.Session()
    session.cookies = ForgetfulCookieJar()

Contributing
------------

Please read the [suggested workflow
] for
contributing to this project.


[FILE:124:distinfo]
18565aa58116d9951ac39baa288d3adb5b3ff975c4f25eee78555d89e8f247f7        54525 requests_toolbelt-0.10.1-py2.py3-none-any.whl

