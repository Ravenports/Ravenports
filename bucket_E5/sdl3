# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		sdl3
VERSION=		3.2.12
KEYWORDS=		devel
VARIANTS=		std
SDESC[std]=		Cross-platform multimedia development API
HOMEPAGE=		http://www.libsdl.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/libsdl-org:SDL:release-3.2.12
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			dev

OPTIONS_AVAILABLE=	OSS SNDIO ALSA OPENGL X11 MMX SSE SSE2 SSE3 SSE41
			SSE42
OPTIONS_STANDARD=	OSS SNDIO ALSA OPENGL X11 MMX SSE SSE2 SSE3 SSE41
			SSE42
OPTGROUP_UNLIMITED=	AUDIO CPUEXT
OPTDESCR[CPUEXT]=	CPU Extension Support
OPTDESCR[AUDIO]=	Audio Support
OPTGROUP[CPUEXT]=	MMX SSE SSE2 SSE3 SSE41 SSE42
OPTGROUP[AUDIO]=	OSS SNDIO ALSA
OPT_ON[freebsd]=	OSS
OPT_ON[all]=		OPENGL X11
OPT_ON[dragonfly]=	OSS
OPT_ON[midnightbsd]=	OSS

USES=			cpe cmake pkgconfig iconv
C_USES[freebsd]=	clang

DISTNAME=		SDL-release-3.2.12

LICENSE=		ZLIB:primary
LICENSE_FILE=		ZLIB:{{WRKSRC}}/LICENSE.txt
LICENSE_SCHEME=		solo

CPE_PRODUCT=		simple_directmedia_layer
CPE_VENDOR=		libsdl
FPC_EQUIVALENT=		devel/sdl3

SOVERSION=		0.2.12

[OPENGL].BUILDRUN_DEPENDS_ON=		libglvnd:primary:std
					libdrm:primary:std
[OPENGL].BUILD_DEPENDS_ON=		libglvnd:dev:std
					libdrm:dev:std
[OPENGL].CMAKE_BOOL_T_BOTH=		SDL_OPENGL

[SNDIO].BUILDRUN_DEPENDS_ON=		sndio:primary:std
[SNDIO].BUILD_DEPENDS_ON=		sndio:dev:std
[SNDIO].CMAKE_BOOL_T_BOTH=		SDL_SNDIO
					SDL_SNDIO_SHARED

[SSE].DESCRIPTION=			Streaming SIMD Extensions
[SSE].CMAKE_BOOL_T_BOTH=		SSE

[MMX].DESCRIPTION=			Matrix Math Extensions (MMX from Intel)
[MMX].CMAKE_BOOL_T_BOTH=		SDL_MMX

[ALSA].BROKEN_ON=			not yet implemented
[ALSA].BUILDRUN_DEPENDS_ON=		alsa:single:std
[ALSA].CMAKE_BOOL_T_BOTH=		SDL_ALSA
					SDL_ALSA_SHARED

[OSS].CMAKE_BOOL_T_BOTH=		SDL_OSS

[SSE2].DESCRIPTION=			Streaming SIMD Extensions 2
[SSE2].CMAKE_BOOL_T_BOTH=		SSE2

[SSE41].DESCRIPTION=			Streaming SIMD Extensions 4.1
[SSE41].CMAKE_BOOL_T_BOTH=		SSE4_1

[SSE3].DESCRIPTION=			Streaming SIMD Extensions 3
[SSE3].CMAKE_BOOL_T_BOTH=		SSE3

[SSE42].DESCRIPTION=			Streaming SIMD Extensions 4.2
[SSE42].CMAKE_BOOL_T_BOTH=		SSE4_2

[X11].BUILDRUN_DEPENDS_ON=		libxkbcommon:primary:std
[X11].BUILD_DEPENDS_ON=			libxkbcommon:dev:std
[X11].CMAKE_BOOL_T_BOTH=		SDL_X11
					SDL_X11_SHARED
					SDL_X11_XCURSOR
					SDL_X11_XDBE
					SDL_X11_XINPUT
					SDL_X11_XFIXES
					SDL_X11_XRANDR
					SDL_X11_XSCRNSAVER
					SDL_X11_XSHAPE
					SDL_X11_XSYNC
[X11].XORG_COMPONENTS_ON=		x11
					xcursor
					xi
					xrandr
					xscrnsaver
					xxf86vm
					xext

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libSDL3.so
	${RM} -r ${STAGEDIR}${PREFIX}/share/licenses

[FILE:403:descriptions/desc.primary]
The SDL library (series 3) is designed to make it easy to write games that
run on UNIX, Win32, MacOS X and other platforms using the various native
high-performance media interfaces (for video, audio, etc) and presenting
a single source-code level API to your application. This is a fairly low
level API, but using this, completely portable applications can be
written with a great deal of flexibility.


[FILE:115:distinfo]
e8202c117b5a4eaa48f27790d29aa7c4c0ab0421fe7bdfe95dc9c4f8eae1580b     16117560 libsdl-org-SDL-release-3.2.12.tar.gz


[FILE:55:manifests/plist.primary]
lib/
 libSDL3.so.%%SOMAJOR%%
 libSDL3.so.%%SOVERSION%%


[FILE:1572:manifests/plist.dev]
include/SDL3/
 SDL.h
 SDL_assert.h
 SDL_asyncio.h
 SDL_atomic.h
 SDL_audio.h
 SDL_begin_code.h
 SDL_bits.h
 SDL_blendmode.h
 SDL_camera.h
 SDL_clipboard.h
 SDL_close_code.h
 SDL_copying.h
 SDL_cpuinfo.h
 SDL_dialog.h
 SDL_egl.h
 SDL_endian.h
 SDL_error.h
 SDL_events.h
 SDL_filesystem.h
 SDL_gamepad.h
 SDL_gpu.h
 SDL_guid.h
 SDL_haptic.h
 SDL_hidapi.h
 SDL_hints.h
 SDL_init.h
 SDL_intrin.h
 SDL_iostream.h
 SDL_joystick.h
 SDL_keyboard.h
 SDL_keycode.h
 SDL_loadso.h
 SDL_locale.h
 SDL_log.h
 SDL_main.h
 SDL_main_impl.h
 SDL_messagebox.h
 SDL_metal.h
 SDL_misc.h
 SDL_mouse.h
 SDL_mutex.h
 SDL_oldnames.h
 SDL_opengl.h
 SDL_opengl_glext.h
 SDL_opengles.h
 SDL_opengles2.h
 SDL_opengles2_gl2.h
 SDL_opengles2_gl2ext.h
 SDL_opengles2_gl2platform.h
 SDL_opengles2_khrplatform.h
 SDL_pen.h
 SDL_pixels.h
 SDL_platform.h
 SDL_platform_defines.h
 SDL_power.h
 SDL_process.h
 SDL_properties.h
 SDL_rect.h
 SDL_render.h
 SDL_revision.h
 SDL_scancode.h
 SDL_sensor.h
 SDL_stdinc.h
 SDL_storage.h
 SDL_surface.h
 SDL_system.h
 SDL_test.h
 SDL_test_assert.h
 SDL_test_common.h
 SDL_test_compare.h
 SDL_test_crc32.h
 SDL_test_font.h
 SDL_test_fuzzer.h
 SDL_test_harness.h
 SDL_test_log.h
 SDL_test_md5.h
 SDL_test_memory.h
 SDL_thread.h
 SDL_time.h
 SDL_timer.h
 SDL_touch.h
 SDL_tray.h
 SDL_version.h
 SDL_video.h
 SDL_vulkan.h
lib/
 libSDL3.so
 libSDL3_test.a
lib/cmake/SDL3/
 SDL3Config.cmake
 SDL3ConfigVersion.cmake
 SDL3headersTargets.cmake
 SDL3sharedTargets-release.cmake
 SDL3sharedTargets.cmake
 SDL3testTargets-release.cmake
 SDL3testTargets.cmake
lib/pkgconfig/sdl3.pc


[FILE:576:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2025-05-04 17:36:33 UTC
+++ CMakeLists.txt
@@ -3529,12 +3529,7 @@ else()
 endif()
 set(SDL_INSTALL_CMAKEDIR_ROOT "${SDL_INSTALL_CMAKEDIR_ROOT_DEFAULT}" CACHE STRING "Root folder where to install SDL3Config.cmake related files (SDL3 subfolder for MSVC projects)")
 
-if(FREEBSD)
-  # FreeBSD uses ${PREFIX}/libdata/pkgconfig
-  set(SDL_PKGCONFIG_INSTALLDIR "libdata/pkgconfig")
-else()
   set(SDL_PKGCONFIG_INSTALLDIR "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
-endif()
 
 if(WINDOWS AND NOT MINGW)
   set(SDL_INSTALL_CMAKEDIR "${SDL_INSTALL_CMAKEDIR_ROOT}")


[FILE:610:patches/patch-include_SDL3_SDL__endian.h]
--- include/SDL3/SDL_endian.h.orig	2025-05-04 17:36:33 UTC
+++ include/SDL3/SDL_endian.h
@@ -140,10 +140,10 @@ _m_prefetch(void *__P)
 #else
 #error Unsupported endianness
 #endif
-#elif defined(SDL_PLATFORM_OPENBSD) || defined(__DragonFly__)
+#elif defined(SDL_PLATFORM_OPENBSD)
 #include <endian.h>
 #define SDL_BYTEORDER  BYTE_ORDER
-#elif defined(SDL_PLATFORM_FREEBSD) || defined(SDL_PLATFORM_NETBSD)
+#elif defined(SDL_PLATFORM_FREEBSD) || defined(SDL_PLATFORM_NETBSD) || defined(__DragonFly__)
 #include <sys/endian.h>
 #define SDL_BYTEORDER  BYTE_ORDER
 /* predefs from newer gcc and clang versions: */

