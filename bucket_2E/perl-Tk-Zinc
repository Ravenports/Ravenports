# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		perl-Tk-Zinc
VERSION=		3.306
KEYWORDS=		perl
VARIANTS=		538 540
SDESC[540]=		Another graphics canvas (5.40)
SDESC[538]=		Another graphics canvas (5.38)
HOMEPAGE=		https://github.com/asb-capfan/TkZinc
CONTACT=		Perl_Automaton[perl@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		CPAN/ID:A/AS/ASB
DISTFILE[1]=		Tk-Zinc-3.306.tar.gz:main
DF_INDEX=		1
SPKGS[540]=		single
SPKGS[538]=		single

OPTIONS_AVAILABLE=	PERL_538 PERL_540
OPTIONS_STANDARD=	none
VOPTS[540]=		PERL_538=OFF PERL_540=ON
VOPTS[538]=		PERL_538=ON PERL_540=OFF

BUILD_DEPENDS=		libGLU:dev:std
			libglvnd:dev:std
BUILDRUN_DEPENDS=	perl-Tk:single:perl_used
			libGLU:primary:std
			libglvnd:primary:std

XORG_COMPONENTS=	x11 xext

DISTNAME=		Tk-Zinc-3.306

GENERATED=		yes

SINGLE_JOB=		yes

[PERL_540].BUILDRUN_DEPENDS_ON=		perl-Tk:single:540
[PERL_540].USES_ON=			perl:540,configure

[PERL_538].BUILDRUN_DEPENDS_ON=		perl-Tk:single:538
[PERL_538].USES_ON=			perl:538,configure

post-patch:
	${REINPLACE_CMD} -e 's|defined(__APPLE__)|1|' \
		${WRKSRC}/OverlapMan.c

[FILE:665:descriptions/desc.single]
The Zinc widget is very similar to Tk Canvase in that it supports
structured graphics. Like the Canvas, TkZinc implements items used to
display graphical entities. Those items can be manipulated and bindings can
be associated with them to implement interaction behaviors. But unlike the
Canvas, TkZinc can structure the items in a hierarchy (with the use of
group items), has support for affine 2D transforms (i.e. translation,
scaling, and rotation), clipping can be set for sub-trees of the item
hierarchy, the item set is quite more powerful including field specific
items for Air Traffic systems and new rendering techniques such as
transparency and gradients.


[FILE:99:distinfo]
21b29808c8348cd41b22bd07ccc83fdf09f026c466b67e0fd5bc4a7cfafeb20f       595689 Tk-Zinc-3.306.tar.gz


[FILE:549:patches/patch-PostScript.c]
--- PostScript.c.orig	2020-11-25 19:23:17 UTC
+++ PostScript.c
@@ -305,7 +305,7 @@ ZnPostScriptCmd(ZnWInfo        *wi,
   ps_info.prolog = 1;
   Tcl_InitHashTable(&ps_info.fontTable, TCL_STRING_KEYS);
   result = Tk_ConfigureWidget(wi->interp, wi->win, config_specs,
-                              argc-2, (CONST char **) argv+2,
+                              argc-2, (Tcl_Obj * const*) argv+2,
                               (char *) &ps_info,
                               TK_CONFIG_ARGV_ONLY|TK_CONFIG_OBJS);
   if (result != TCL_OK) {


[FILE:1102:patches/patch-tkZinc.c]
--- tkZinc.c.orig	2020-11-25 19:23:17 UTC
+++ tkZinc.c
@@ -8999,11 +8999,11 @@ InitZinc(Tcl_Interp *interp) {
   ZnTesselator.tess = gluNewTess();
   ZnTesselator.combine_list = NULL;
         ZnTesselator.combine_length = 0;
-  gluTessCallback(ZnTesselator.tess, GLU_TESS_BEGIN_DATA, ZnTessBegin);
-  gluTessCallback(ZnTesselator.tess, GLU_TESS_VERTEX_DATA, ZnTessVertex);
-  gluTessCallback(ZnTesselator.tess, GLU_TESS_END_DATA, ZnTessEnd);
-  gluTessCallback(ZnTesselator.tess, GLU_TESS_COMBINE_DATA, ZnTessCombine);
-  gluTessCallback(ZnTesselator.tess, GLU_TESS_ERROR_DATA, ZnTessError);
+  gluTessCallback(ZnTesselator.tess, GLU_TESS_BEGIN_DATA, (_GLUfuncptr)ZnTessBegin);
+  gluTessCallback(ZnTesselator.tess, GLU_TESS_VERTEX_DATA, (_GLUfuncptr)ZnTessVertex);
+  gluTessCallback(ZnTesselator.tess, GLU_TESS_END_DATA, (_GLUfuncptr)ZnTessEnd);
+  gluTessCallback(ZnTesselator.tess, GLU_TESS_COMBINE_DATA, (_GLUfuncptr)ZnTessCombine);
+  gluTessCallback(ZnTesselator.tess, GLU_TESS_ERROR_DATA, (_GLUfuncptr)ZnTessError);
   gluTessNormal(ZnTesselator.tess, 0.0, 0.0, -1.0);
 
   /*

