# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-orderly-set
VERSION=		5.2.2
KEYWORDS=		python
VARIANTS=		v11 v12
SDESC[v11]=		Multiple Ordered Set implementations (3.11)
SDESC[v12]=		Multiple Ordered Set implementations (3.12)
HOMEPAGE=		https://github.com/seperman/orderly-set
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/69/71/6f9554919da608cb5bcf709822a9644ba4785cc7856e01ea375f6d808774
DISTFILE[1]=		orderly_set-5.2.2-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v11]=		single
SPKGS[v12]=		single

OPTIONS_AVAILABLE=	PY311 PY312
OPTIONS_STANDARD=	none
VOPTS[v11]=		PY311=ON PY312=OFF
VOPTS[v12]=		PY311=OFF PY312=ON

DISTNAME=		orderly_set-5.2.2.dist-info

GENERATED=		yes

[PY311].USES_ON=			python:v11,wheel

[PY312].USES_ON=			python:v12,wheel

[FILE:2370:descriptions/desc.single]
# Orderly Set 5.2.2

Orderly Set is a package containing multiple implementations of Ordered
Set.

## OrderlySet

This implementation keeps the order in all set operations except set
difference operations.
As a result, it can do set difference operations much faster than other
implementations. Still 2X slower than of Python's built-in set.

## StableSet

A StableSet is a mutable set that remembers its insertion order.
Featuring: Fast O(1) insertion, deletion, iteration and membership testing.
But slow O(N) Index Lookup.

## StableSetEq

Same as StableSet but the order of items doesn't matter for equality
comparisons.

## OrderedSet

An OrderedSet is a mutable data structure that is a hybrid of a list and a
set.
It remembers its insertion order so that every entry has an index that can
be looked up. 
Featuring: O(1) Index lookup, insertion, iteration and membership testing.
But slow O(N) Deletion.

## SortedSet

SortedSet is basically set but when printed, turned into string, or
iterated over, returns the items in alphabetical order.

# Installation

`pip install orderly-set`

# Usage examples

An OrderedSet is created and used like a set:

    >>> from orderly_set import OrderedSet

    >>> letters = OrderedSet('abracadabra')

    >>> letters
    OrderedSet(['a', 'b', 'r', 'c', 'd'])

    >>> 'r' in letters
    True

It is efficient to find the index of an entry in an OrderedSet, or find an
entry by its index. To help with this use case, the `.add()` method returns
the index of the added item, whether it was already in the set or not.

    >>> letters.index('r')
    2

    >>> letters[2]
    'r'

    >>> letters.add('r')
    2

    >>> letters.add('x')
    5

OrderedSets implement the union (`|`), intersection (`&`), and difference
(`-`)
operators like sets do.

    >>> letters |= OrderedSet('shazam')

    >>> letters
    OrderedSet(['a', 'b', 'r', 'c', 'd', 'x', 's', 'h', 'z', 'm'])

    >>> letters & set('aeiou')
    OrderedSet(['a'])

    >>> letters -= 'abcd'

    >>> letters
    OrderedSet(['r', 'x', 's', 'h', 'z', 'm'])

The `__getitem__()` and `index()` methods have been extended to accept any
iterable except a string, returning a list, to perform NumPy-like "fancy
indexing".

    >>> letters = OrderedSet('abracadabra')

    >>> letters[[0, 2, 3]]
    ['a', 'r', 'c']

    >>> letters.index(['a', 'r', 'c'])
    [0, 2, 3]



[FILE:113:distinfo]
f7a37c95a38c01cdfe41c3ffb62925a318a2286ea0a41790c057fc802aec54da        11621 orderly_set-5.2.2-py3-none-any.whl

