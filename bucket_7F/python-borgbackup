# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-borgbackup
VERSION=		1.4.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Deduplicated, encrypted, compressed backups (3.12)
SDESC[v13]=		Deduplicated, encrypted, compressed backups (3.13)
HOMEPAGE=		https://borgbackup.org/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/b/borgbackup
DISTFILE[1]=		borgbackup-1.4.0.tar.gz:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

BUILD_DEPENDS=		xxhash:dev:std
BUILDRUN_DEPENDS=	xxhash:primary:std

USES=			cpe ssl lz4 zstd

DISTNAME=		borgbackup-1.4.0

CPE_PRODUCT=		borg
CPE_VENDOR=		borgbackup
GENERATED=		yes

MAKE_ENV=		BORG_OPENSSL_PREFIX={{OPENSSLBASE}}

VAR_OPSYS[freebsd]=	CFLAGS=-Wno-implicit-function-declaration

[PY312].BUILDRUN_DEPENDS_ON=		python-msgpack:single:v12
					python-packaging:single:v12
[PY312].BUILD_DEPENDS_ON=		python-setuptools-scm:single:v12
					python-pkgconfig:single:v12
					python-Cython:single:v12
[PY312].USES_ON=			python:v12,pep517

[PY313].BUILDRUN_DEPENDS_ON=		python-msgpack:single:v13
					python-packaging:single:v13
[PY313].BUILD_DEPENDS_ON=		python-setuptools-scm:single:v13
					python-pkgconfig:single:v13
					python-Cython:single:v13
[PY313].USES_ON=			python:v13,pep517

post-patch:
	${SED} -i'' -e 's|msgpack-python|msgpack|' \
	${WRKSRC}/setup.py ${WRKSRC}/src/borgbackup.egg-info/requires.txt

post-extract-freebsd:
	${CP} ${FILESDIR}/acl_extended_file_np.c ${WRKSRC}/src/borg/platform/

[FILE:3430:descriptions/desc.single]

What is BorgBackup?
-------------------

BorgBackup (short: Borg) is a deduplicating backup program.
Optionally, it supports compression and authenticated encryption.

The main goal of Borg is to provide an efficient and secure way to backup
data.
The data deduplication technique used makes Borg suitable for daily backups
since only changes are stored.
The authenticated encryption technique makes it suitable for backups to not
fully trusted targets.

See the `installation manual`_ or, if you have already
downloaded Borg, ``docs/installation.rst`` to get started with Borg.
There is also an `offline documentation`_ available, in multiple formats.

.. _installation manual:
https://borgbackup.readthedocs.org/en/stable/installation.html
.. _offline documentation:
https://readthedocs.org/projects/borgbackup/downloads

Main features
~~~~~~~~~~~~~

**Space efficient storage**
  Deduplication based on content-defined chunking is used to reduce the
number
  of bytes stored: each file is split into a number of variable length
chunks
  and only chunks that have never been seen before are added to the
repository.

  A chunk is considered duplicate if its id_hash value is identical.
  A cryptographically strong hash or MAC function is used as id_hash, e.g.
  (hmac-)sha256.

  To deduplicate, all the chunks in the same repository are considered, no
  matter whether they come from different machines, from previous backups,
  from the same backup or even from the same single file.

  Compared to other deduplication approaches, this method does NOT depend
on:

  * file/directory names staying the same: So you can move your stuff
around
    without killing the deduplication, even between machines sharing a
repo.

  * complete files or time stamps staying the same: If a big file changes a
    little, only a few new chunks need to be stored - this is great for VMs
or
    raw disks.

  * The absolute position of a data chunk inside a file: Stuff may get
shifted
    and will still be found by the deduplication algorithm.

**Speed**
  * performance-critical code (chunking, compression, encryption) is
    implemented in C/Cython
  * local caching of files/chunks index data
  * quick detection of unmodified files

**Data encryption**
    All data can be protected using 256-bit AES encryption, data integrity
and
    authenticity is verified using HMAC-SHA256. Data is encrypted
clientside.

**Obfuscation**
    Optionally, borg can actively obfuscate e.g. the size of files / chunks
to
    make fingerprinting attacks more difficult.

**Compression**
    All data can be optionally compressed:

    * lz4 (super fast, low compression)
    * zstd (wide range from high speed and low compression to high
compression
      and lower speed)
    * zlib (medium speed and compression)
    * lzma (low speed, high compression)

**Off-site backups**
    Borg can store data on any remote host accessible over SSH.  If Borg is
    installed on the remote host, big performance gains can be achieved
    compared to using a network filesystem (sshfs, nfs, ...).

**Backups mountable as filesystems**
    Backup archives are mountable as userspace filesystems for easy
interactive
    backup examination and restores (e.g. by using a regular file manager).

**Easy installation on multiple platforms**
    We offer single-file binaries that do not require installing anything -
    you can just run them on these platforms:



[FILE:113:distinfo]
c54c45155643fa66fed7f9ff2d134ea0a58d0ac197c18781ddc2fb236bf6ed29      3798511 python-src/borgbackup-1.4.0.tar.gz


[FILE:707:patches/patch-setup.py]
--- setup.py.orig	2024-07-02 22:06:38 UTC
+++ setup.py
@@ -181,7 +181,7 @@ if not on_rtd:
     syncfilerange_ext = Extension(
         "borg.platform.syncfilerange", [platform_syncfilerange_source], extra_compile_args=cflags
     )
-    freebsd_ext = Extension("borg.platform.freebsd", [platform_freebsd_source], extra_compile_args=cflags)
+    freebsd_ext = Extension("borg.platform.freebsd", [platform_freebsd_source, 'src/borg/platform/acl_extended_file_np.c'], extra_compile_args=cflags)
     darwin_ext = Extension("borg.platform.darwin", [platform_darwin_source], extra_compile_args=cflags)
     windows_ext = Extension("borg.platform.windows", [platform_windows_source], extra_compile_args=cflags)
 


[FILE:2633:files/acl_extended_file_np.c]
/*-
 * SPDX-License-Identifier: BSD-2-Clause
 *
 * Copyright (c) 2021 Gleb Popov
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
/* taken from FreeBSD src branch as of 559a218c9b25 Wed Nov 1 16:43:37 2023 -0600 */
/*
 * acl_extended_file_np: Check if the file has extended ACLs set.
 */

#include <sys/param.h>
#include <sys/errno.h>
#include <sys/acl.h>

#include <unistd.h>

typedef acl_t (*acl_get_func)(const char *, acl_type_t);
typedef long (*pathconf_func)(const char *, int);

static int
_acl_extended_file(acl_get_func f, pathconf_func pathconf_f, const char* path_p);

int
acl_extended_file_np(const char *path_p)
{
	return (_acl_extended_file(acl_get_file, pathconf, path_p));
}

int
acl_extended_file_nofollow_np(const char *path_p)
{
	return (_acl_extended_file(acl_get_link_np, lpathconf, path_p));
}

int
acl_extended_link_np(const char *path_p)
{
	return (_acl_extended_file(acl_get_link_np, lpathconf, path_p));
}

int
_acl_extended_file(acl_get_func acl_get, pathconf_func pathconf_f, const char* path_p)
{
	acl_t acl;
	int retval, istrivial, acltype = ACL_TYPE_ACCESS;

	retval = pathconf_f(path_p, _PC_ACL_NFS4);
	if (retval > 0)
		acltype = ACL_TYPE_NFS4;

	acl = acl_get(path_p, acltype);
	if (acl == NULL)
		return (-1);

	retval = acl_is_trivial_np(acl, &istrivial);
	acl_free(acl);
	if (retval == -1)
		return (-1);

	return (!istrivial);
}

