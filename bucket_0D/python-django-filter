# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-django-filter
VERSION=		23.1
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Django dynamic filter of querysets (3.10)
SDESC[v11]=		Django dynamic filter of querysets (3.11)
HOMEPAGE=		https://github.com/carltongibson/django-filter/tree/main
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/7f/83/35f62a59ce976309ae974ba6aceaf159f40e5c1a8d8e997327e0211d97dc
DISTFILE[1]=		django_filter-23.1-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

USES=			cpe

DISTNAME=		django_filter-23.1.dist-info

CPE_PRODUCT=		django-filter
CPE_VENDOR=		django-filter_project
GENERATED=		yes

[PY310].RUN_DEPENDS_ON=			python-Django:single:py310
[PY310].USES_ON=			python:py310,wheel

[PY311].RUN_DEPENDS_ON=			python-Django:single:v11
[PY311].USES_ON=			python:v11,wheel

[FILE:2763:descriptions/desc.single]
Django Filter
=============

Django-filter is a reusable Django application allowing users to
declaratively
add dynamic QuerySet filtering from URL parameters.

Full documentation on `read the docs`_.

Versioning and stability policy
-------------------------------

Django-Filter is a mature and stable package. It uses a two-part CalVer
versioning scheme, such as ``21.1``. The first number is the year. The
second
is the release number within that year.

On an on-going basis, Django-Filter aims to support all current Django
versions, the matching current Python versions, and the latest version of
Django REST Framework.

Please see:

* [Status of supported Python branches]
* [List of supported Django versions]

Support for Python and Django versions will be dropped when they reach
end-of-life. Support for Python versions will dropped when they reach
end-of-life, even when still supported by a current version of Django.

Other breaking changes are rare. Where required, every effort will be made
to
apply a "Year plus two" deprecation period. For example, a change initially
introduced in ``23.x would offer a fallback where feasible and finally be
removed in 25.1``. Where fallbacks are not feasible, breaking changes
without
deprecation will be called out in the release notes.

Installation
------------

Install using pip:

.. code-block:: sh

    pip install django-filter

Then add 'django_filters' to your INSTALLED_APPS.

.. code-block:: python

    INSTALLED_APPS = [
        ...
        'django_filters',
   ]

Usage
-----

Django-filter can be used for generating interfaces similar to the Django
admin's list_filter interface.  It has an API very similar to Django's
ModelForms.  For example, if you had a Product model you could have a
filterset for it with the code:

.. code-block:: python

    import django_filters

    class ProductFilter(django_filters.FilterSet):
        class Meta:
            model = Product
            fields = ['name', 'price', 'manufacturer']

And then in your view you could do:

.. code-block:: python

    def product_list(request):
        filter = ProductFilter(request.GET, queryset=Product.objects.all())
        return render(request, 'my_app/template.html', {'filter': filter})

Usage with Django REST Framework
--------------------------------

Django-filter provides a custom FilterSet and filter backend for use with
Django REST Framework.

To use this adjust your import to use
``django_filters.rest_framework.FilterSet``.

.. code-block:: python

    from django_filters import rest_framework as filters

    class ProductFilter(filters.FilterSet):
        class Meta:
            model = Product
            fields = ('category', 'in_stock')

For more details see the `DRF integration docs`_.


[FILE:114:distinfo]
e3c52ad83c32fb5882125105efb5fea2a1d6a85e7dc64b04ef52edbf14451b6c        91573 django_filter-23.1-py3-none-any.whl

