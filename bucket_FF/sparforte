# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		sparforte
VERSION=		2.1
KEYWORDS=		shells lang
VARIANTS=		standard
SDESC[standard]=	Shell and scripting for mission-critical projects
HOMEPAGE=		http://www.sparforte.com
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/kburtch:SparForte:v2.1
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			examples
			docs

OPTIONS_AVAILABLE=	CGI OPENGL SOUND MYSQL PGSQL
OPTIONS_STANDARD=	CGI OPENGL SOUND MYSQL PGSQL
OPTGROUP_RESTRICTED=	DBASE
OPTDESCR[DBASE]=	Databases supported
OPTGROUP[DBASE]=	MYSQL PGSQL
OPT_ON[all]=		MYSQL PGSQL OPENGL SOUND

BROKEN[aarch64]=	fails to compile: gnat1: error: unknown value aarch64 for -march

USES=			bdb gettext-runtime gmake pkgconfig readline
			execinfo
SDL_COMPONENTS=		image1

LICENSE=		GPLv2+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/src/spar.adb
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		shells/sparforte

MUST_CONFIGURE=		yes
CONFIGURE_SCRIPT=	new_configure

MAKE_ARGS=		RPM_BUILD_ROOT=1
SINGLE_JOB=		yes

[OPENGL].MAKEFILE_OFF=			SFARG+=-DOPENGL=false
					SETGL=0
[OPENGL].MAKEFILE_ON=			SFARG+=-DOPENGL=true
					SETGL=1
[OPENGL].USES_ON=			mesa

[MYSQL].MAKEFILE_OFF=			SFARG+=-DMYSQL=false
					SETMYSQL=0
[MYSQL].MAKEFILE_ON=			SFARG+=-DMYSQL=true
					SETMYSQL=1
[MYSQL].USES_ON=			mysql:client

[SOUND].BUILDRUN_DEPENDS_ON=		gstreamer:single:standard
[SOUND].GNOME_COMPONENTS_ON=		glib
					libxml2
[SOUND].MAKEFILE_OFF=			SFARG+=-DSOUND=false
					SETSOUND=0
[SOUND].MAKEFILE_ON=			SFARG+=-DSOUND=true
					SETSOUND=1

[PGSQL].MAKEFILE_OFF=			SFARG+=-DPOSTGRES=false
					SETPGSQL=0
[PGSQL].MAKEFILE_ON=			SFARG+=-DPOSTGRES=true
					SETPGSQL=1
[PGSQL].USES_ON=			pgsql:client

[CGI].DESCRIPTION=			Common Gateway Interface (breaks other features)
[CGI].MAKEFILE_OFF=			SFARG+=-DGCGI=false
[CGI].MAKEFILE_ON=			SFARG+=-DGCGI=true

post-patch:
	# Use the gcc compiler associated with the ada frontend.
	# Without this substitution, the base compiler is used instead.
	${REINPLACE_CMD} -e "s|cc |gcc |" ${WRKSRC}/src/pegasock/Makefile
	# Avoid use of malloc.h
	${REINPLACE_CMD} -e "s|<malloc.h>|<stdlib.h>|" \
		${WRKSRC}/src/bdb/c_bdb.c
	# Use db.h from db5 and link to it
	# Fix multi-job support
	${REINPLACE_CMD} -e "s|BDB4|BDB4 -I${PREFIX}/include/db5|" \
		-e "s|-ldb|-L${PREFIX}/lib/db5 -ldb|" \
		-e "s|db: db.adb|db: bdb_constants.ads db.adb|" \
		-e "s| -fstack-protector||" \
		${WRKSRC}/src/bdb/GNUmakefile
	# shebang fix
	${REINPLACE_CMD} -e "s|#|#!/bin/sh|" \
		${WRKSRC}/src/apq-2.1/mysql_incl
	${REINPLACE_CMD} -e "s|\.\/mysql_x|/bin/sh ./mysql_x|" \
		${WRKSRC}/src/apq-2.1/Makefile

post-patch-linux:
	${REINPLACE_CMD} -e "s| -lintl||" ${WRKSRC}/new_configure

post-install:
	@${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	@${MKDIR} ${STAGEDIR}${STD_EXAMPLESDIR}
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/spar
	(cd ${WRKSRC}/doc && ${COPYTREE_SHARE} \* ${STAGEDIR}${STD_DOCDIR})
	${MV} ${WRKSRC}/examples/incomplete ${WRKDIR}/
	(cd ${WRKSRC}/examples && \
		${COPYTREE_SHARE} \* ${STAGEDIR}${STD_EXAMPLESDIR})

post-configure:
.for f in world.ads user_io-getline.adb scanner_res.ads scanner_res.adb parser.adb builtins.adb parser_db.adb parser_dbm.adb parser_mysql.adb parser_mysqlm.adb parser_sound.adb parser_pen.adb parser_gnat_cgi.adb parser_bdb.adb parser_btree_io.adb parser_hash_io.adb
	(cd ${WRKSRC}/src && ${SETENV} ${MAKE_ENV} \
		gnatprep ${SFARG} ${f}.orig ${f})
.endfor

post-extract:
	${CP} ${WRKSRC}/src/scanner-calendar-latest.ads ${WRKSRC}/src/scanner-calendar.ads
	${CP} ${WRKSRC}/src/scanner-calendar-latest.adb ${WRKSRC}/src/scanner-calendar.adb
	${CP} ${WRKSRC}/src/${OSBIND}.ads ${WRKSRC}/src/spar_os.ads
	${CP} ${WRKSRC}/src/${CPU_SDL}.ads ${WRKSRC}/src/spar_os-sdl.ads
	# Create a compact configure script for ports collection
	${SED} -e "s|@CPU_FLAG@|${SF_CPU_FLAG}|" \
		-e "s|@ARCH@|${SF_ARCH}|" \
		-e "s|@MAKECMD@|${MAKE_CMD}|" \
		-e "s|@CFLAGSTYPE@|${SF_CFLAGSTYPE}|" \
		-e "s|@PREFIX@|${PREFIX}|" \
		-e "s|@SETAPQ@|${SETAPQ}|" \
		-e "s|@SETMYSQL@|${SETMYSQL}|" \
		-e "s|@SETPGSQL@|${SETPGSQL}|" \
		-e "s|@SETSOUND@|${SETSOUND}|" \
		-e "s|@SETGL@|${SETGL}|" \
		-e "s|@SED@|${SED}|" \
		${FILESDIR}/new_configure.in > ${WRKSRC}/new_configure
	${CHMOD} 755 ${WRKSRC}/new_configure

[FILE:1013:descriptions/desc.primary]
SPARforte is an open source programming language for high-integrity tasks,
efficient development over the project lifecycle and assuming best practices.

Language characteristics:
* Paradigm: imperative/ procedural, scripting, shell, limited reflexive
* Typing Disciplines: strong typing, type safety, nominative static with
  optional limited weak and duck typing
* Appeared: 2001 (Ken O. Burtch)
* Source Code: GCC Ada, GCC C, Bourne-Again Shell, GCC Make
* Influenced by: Ada 95, Bourne Shell, SQL, and minorly BASIC, PHP, Python
* Usual File Extensions: .sp, .bush

The computer language that the SparForte shell understands is called
AdaScript. Unlike JavaScript, which has no relation to Java, AdaScript is a
small subset of the Ada programming language, with additional features
related to shell commands and databases.

AdaScript is intended to be "upward compatible" with Ada. AdaScript scripts
should run with little difficulty under Ada, but Ada programs may require
large changes run under SparForte.


[FILE:107:distinfo]
e4bd07a63e990d46dbb04cd837f3634cbebfb07128ef1f0236c34c4c643c582c      2824000 kburtch-SparForte-2.1.tar.gz


[FILE:34:manifests/plist.primary]
bin/spar
share/man/man1/spar.1.gz


[FILE:3106:manifests/plist.examples]
share/examples/sparforte/
 8ball.html
 8ball.sp
 add_ramdisk.html
 add_ramdisk.sp
 add_swap.html
 add_swap.sp
 aligncols.html
 aligncols.sp
 aplusb.html
 aplusb.sp
 archive.html
 archive.sp
 arraycat.html
 arraycat.sp
 arrayloop.html
 arrayloop.sp
 arraysum.html
 arraysum.sp
 arrow.wav
 attention.html
 attention.sp
 audio.html
 audio.sp
 bases.html
 bases.sp
 bats.wav
 best_shuffle.html
 best_shuffle.sp
 bitarith.html
 bitarith.sp
 bjack.html
 bjack.sp
 bottles.html
 bottles.sp
 calcrms.html
 calcrms.sp
 camel.html
 camel.sp
 cecho.html
 cecho.sp
 charcode.html
 charcode.sp
 chessboard.html
 chessboard.png
 chessboard.sp
 chomp.html
 chomp.sp
 chomp2.html
 chomp2.sp
 clap.wav
 combinations.html
 combinations.sp
 count_statements.html
 count_statements.sp
 database.gif
 database.html
 database.sp
 dateformat.html
 dateformat.sp
 de_RPM.html
 de_RPM.sp
 dispatch.html
 dispatch.sp
 distance.html
 distance.sp
 doors.html
 doors.sp
 dotproduct.html
 dotproduct.sp
 draco_ii.html
 draco_ii.sp
 draco_score.txt
 drawline.html
 drawline.sp
 dynamic_css.html
 dynamic_css.sp
 dynamic_css2.html
 dynamic_css2.sp
 eliza.data
 eliza.html
 eliza.sp
 env.cgi
 env.html
 env.tmpl
 factorial.html
 factorial.sp
 fibonacci.html
 fibonacci.sp
 file_creation.html
 file_creation.sp
 filecopy.html
 filecopy.sp
 files.html
 fizzbuzz.html
 fizzbuzz.sp
 game.html
 game.sp
 geometry.sp
 get_env_data.gif
 get_env_data.html
 get_env_data.sp
 gray.html
 gray.sp
 gss.html
 gss.sp
 hello.html
 hello.sp
 incstr.html
 incstr.sp
 index.html
 int_sort.html
 int_sort.sp
 introsp.html
 introsp.sp
 isxwindows.html
 isxwindows.sp
 json_health_check.cgi
 json_health_check.html
 linear_reg.html
 linear_reg.sp
 loopsbreak.html
 loopsbreak.sp
 main.html
 mandel.html
 mandel.png
 mandel.sp
 mapping.html
 mapping.sp
 menu.html
 menu.sp
 menu2.html
 menu2.sp
 minimal.sp
 minimal_cgi.html
 minimal_cgi.sp
 minsort.html
 minsort.sp
 moire.html
 moire.png
 moire.sp
 monte.html
 monte.sp
 monty.html
 monty.sp
 neartime.html
 neartime.sp
 nonsquares.html
 nonsquares.sp
 opengl_first.html
 opengl_first.png
 opengl_first.sp
 opengl_second.html
 opengl_second.png
 opengl_second.sp
 pack.html
 pack.sp
 palindrome.html
 palindrome.sp
 perfect.html
 perfect.sp
 pit.wav
 poetry.html
 poetry.sp
 postgres_csv.html
 postgres_csv.sp
 prime.html
 prime.sp
 printargs.html
 printargs.sp
 quest.html
 quest.sp
 radices.html
 radices.sp
 ramcache.html
 ramcache.sp
 randdist.html
 randdist.sp
 random.cgi
 random.html
 random.tmpl
 rle.html
 rle.sp
 rm_ramdisk.html
 rm_ramdisk.sp
 rm_swap.html
 rm_swap.sp
 roman_numerals.html
 roman_numerals.sp
 rot13.html
 rot13.sp
 run.wav
 scream.wav
 scripting.c
 shuffle.html
 shuffle.sp
 sieve.html
 sieve.sp
 sleep.html
 sleep.sp
 stringcase.html
 stringcase.sp
 stripcomment.html
 stripcomment.sp
 timestamp.html
 timestamp.sp
 title.html
 title.sp
 tmpfile.html
 tmpfile.sp
 validate_name.html
 validate_name.sp
 weave.html
 weave.png
 weave.sp
 web_summary.html
 web_summary.sp
 whattime.html
 whattime.sp
 wumpus.gif
 wumpus.html
 wumpus.sp
 yorn.html
 yorn.sp
 yuletide.html
 yuletide.sp


[FILE:3478:files/new_configure.in]
#!/bin/sh
# Configure script tailored for FreeBSD ports collection

SETAPQ=@SETAPQ@
SETMYSQL=@SETMYSQL@
SETPGSQL=@SETPGSQL@
SETSOUND=@SETSOUND@
SETGL=@SETGL@

CCTYPE=ada
CPUTYPE="@ARCH@"
CPUFLAG="@CPU_FLAG@"
GMAKETYPE="@MAKECMD@"
PREFIXSUB="@PREFIX@"
MANPREFIXSUB="@PREFIX@/share/man"
CFLAGSTYPE="@CFLAGSTYPE@"
BDBINCLSUB="-I@PREFIX@/include/db5 -I./bdb/"
BDBSUB="-L@PREFIX@/lib/db5 -ldb bdb/c_bdb.o"
RLINCLSUB="-I./areadline/"
RLLIBSSUB="-L@PREFIX@/lib -lreadline -lhistory"
FASTCGISUB=
SDLINCLSSUB=
SDLLIBSTYPE=$(@PREFIX@/bin/pkgconf --libs SDL_image)
SDLINCLTYPE=$(@PREFIX@/bin/pkgconf --cflags SDL_image)

# Blank defaults
GSTREAMERLIBSSUB=
GSTREAMERFLAGSUB=
GSTREAMEROUTSUB=
MESAINCLSUB=
MESALIBSSUB=
MYSQLLIBSSUB=
PGLIBSSUB=

if [ ${SETAPQ} -eq 1 ]; then
  APQ="apq-2.1"
  APQMAKESUB="\$(MAKE) -C ${APQ}"
  APQLIBSSUB="-L./${APQ} "
  APQINCLSSUB="-I./${APQ} "
  if [ ${SETMYSQL} -eq 1 ]; then
     MYSQLLIBSSUB="-L@PREFIX@/lib/mysql -lmysqlclient -pthread -lm"
     APQLIBSSUB="${APQLIBSSUB} ./${APQ}/c_mysql.o"
     if [ ${SETPGSQL} -eq 0 ]; then
        echo "Executing APQ's configure (skipping PostgreSQL)"
        (cd src/${APQ} && /usr/bin/env HAVE_MY=1 HAVE_PG=0 ./configure)
     fi
  fi
  if [ ${SETPGSQL} -eq 1 ]; then
     PGLIBSSUB="-L@PREFIX@/lib -lintl -lssl -lcrypto"
     if [ ${SETMYSQL} -eq 1 ]; then
        echo "Executing APQ's configure"
        (cd src/${APQ} && /usr/bin/env HAVE_MY=1 HAVE_PG=1 ./configure)
     else
        echo "Executing APQ's configure (skipping MySQL)"
        (cd src/${APQ} && /usr/bin/env HAVE_MY=0 HAVE_PG=1 ./configure)
     fi
  fi
else
  APQMAKESUB="@echo disabled"
  APQLIBSSUB=
  APQINCLSSUB=  
fi

if [ ${SETSOUND} -eq 1 ]; then
   GSTREAMERLIBSSUB=$(@PREFIX@/bin/pkgconf --cflags --libs gstreamer-0.10)
   GSTREAMEROUTSUB="c_gstreamer.o"
   GSTREAMERFLAGSUB="-DGSTREAMER"
fi

if [ ${SETGL} -eq 1 ]; then
   MESAINCLSUB=$(@PREFIX@/bin/pkgconf --cflags gl glu)
   MESALIBSSUB=$(@PREFIX@/bin/pkgconf --libs gl glu)
fi

echo "Creating GNUmakefile"
@SED@ -e "s|CPUFLAG|${CPUFLAG}|g" \
 -e "s|CCTYPE|${CCTYPE}|g" \
 -e "s|CPUTYPE|${CPUTYPE}|g" \
 -e "s|GMAKETYPE|${GMAKETYPE}|g" \
 -e "s|CFLAGSTYPE|${CFLAGSTYPE}|g" \
 -e "s|MANPREFIXSUB|${MANPREFIXSUB}|g" \
 -e "s|PREFIXSUB|${PREFIXSUB}|g" \
 GNUmakefile.orig > Makefile

echo "Creating src/GNUmakefile"
@SED@ -e "s|CPUFLAG|${CPUFLAG}|g" \
 -e "s|CCTYPE|${CCTYPE}|g" \
 -e "s|CPUTYPE|${CPUTYPE}|g" \
 -e "s|GMAKETYPE|${GMAKETYPE}|g" \
 -e "s|CFLAGSTYPE|${CFLAGSTYPE}|g" \
 -e "s|MANPREFIXSUB|${MANPREFIXSUB}|g" \
 -e "s|PREFIXSUB|${PREFIXSUB}|g" \
 -e "s|SDLLIBSTYPE|${SDLLIBSTYPE}|g" \
 -e "s|SDLINCLTYPE|${SDLINCLTYPE}|g" \
 -e "s|PGLIBSSUB|${PGLIBSSUB}|g" \
 -e "s|MYSQLLIBSSUB|${MYSQLLIBSSUB}|g" \
 -e "s|APQLIBSSUB|${APQLIBSSUB}|g" \
 -e "s|APQINCLSSUB|${APQINCLSSUB}|g" \
 -e "s|SDLINCLSSUB|${SDLINCLSSUB}|g" \
 -e "s|APQMAKESUB|${APQMAKESUB}|g" \
 -e "s|FASTCGISUB|${FASTCGISUB}|g" \
 -e "s|GSTREAMERLIBSSUB|${GSTREAMERLIBSSUB}|g" \
 -e "s|GSTREAMERFLAGSUB|${GSTREAMERFLAGSUB}|g" \
 -e "s|GSTREAMEROUTSUB|${GSTREAMEROUTSUB}|g" \
 -e "s|MESAINCLSUB|${MESAINCLSUB}|g" \
 -e "s|MESALIBSSUB|${MESALIBSSUB}|g" \
 -e "s|BDBSUB|${BDBSUB}|g" \
 -e "s|BDBINCLSUB|${BDBINCLSUB}|g" \
 -e "s|RLINCLSUB|${RLINCLSUB}|g" \
 -e "s|RLLIBSSUB|${RLLIBSSUB}|g" \
 src/GNUmakefile.orig > src/GNUmakefile

echo "Creating src/areadline/GNUmakefile"
@SED@ -e "s|RLINCLSUB|${RLINCLSUB}|g" \
 -e "s|RLLIBSSUB|${RLLIBSSUB}|g" \
 src/areadline/GNUmakefile.orig > src/areadline/GNUmakefile


[FILE:609:files/special.mk]
.if ${SETMYSQL} == 1 || ${SETPGSQL} == 1
SFARG+=		-DAPQ=true
SETAPQ=		1
.else
SFARG+=		-DAPQ=false
SETAPG=		0
.endif

SFARG+=		-DREADLINE=true -DBDB=true

# Currently Ada is only available for x86, so we can assume the following
SF_ARCH=		${ARCH_STANDARD:S/x86_64/athlon64/}
SF_CPU_FLAG=		-march

.if ${OPSYS} == FreeBSD || ${OPSYS} == DragonFly
SF_CFLAGSTYPE=		-DFREEBSD
OSBIND=			os_bindings/spar_freebsd
.else
SF_CFLAGSTYPE=		-DLINUX
OSBIND=			os_bindings/spar_linux
.endif

.if ${ARCH_STANDARD} == x86_64 || ${ARCH_STANDARD} == aarch64
CPU_SDL=		spar_os-sdl-64bit
.else
CPU_SDL=		spar_os-sdl-32bit
.endif

