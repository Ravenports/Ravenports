# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		openpgm
VERSION=		5.3.128
KEYWORDS=		net
VARIANTS=		standard
SDESC[standard]=	Implementation of PGM reliable multicast protocol
HOMEPAGE=		https://github.com/steve-o/openpgm
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/steve-o:openpgm:release-5-3-128
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			examples
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BROKEN[dragonfly]=	Does not have pgm headers

USES=			autoreconf perl:build libtool python:build

DISTNAME=		openpgm-release-5-3-128/openpgm/pgm

LICENSE=		LGPL21+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		LGPL21+:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/include/pgm/pgm.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		net/openpgm

MUST_CONFIGURE=		gnu

INSTALL_TARGET=		install-strip
PLIST_SUB=		SOVERSION=0.0.128
			SOMAJOR=0
			PGMVER=5.3

post-install:
	@${MKDIR} ${STAGEDIR}${STD_DOCDIR} ${STAGEDIR}${STD_EXAMPLESDIR}
	(cd ${WRKSRC}/../doc && ${INSTALL_DATA} \
		draft-ietf-rmt-bb-pgmcc-03.txt rfc3208.txt \
		${STAGEDIR}${STD_DOCDIR})
	(cd ${WRKSRC}/examples && \
		${COPYTREE_SHARE} . ${STAGEDIR}${STD_EXAMPLESDIR})

post-extract:
	${MV} ${WRKSRC}/openpgm-5.2.pc.in ${WRKSRC}/openpgm-5.3.pc.in

[FILE:1360:descriptions/desc.primary]
OpenPGM is an open source implementation of the Pragmatic General 
Multicast (PGM) specification in RFC 3208 available at www.ietf.org. PGM 
is a reliable and scalable multicast protocol that enables receivers to 
detect loss, request retransmission of lost data, or notify an application 
of unrecoverable loss. PGM is a receiver-reliable protocol, which means 
the receiver is responsible for ensuring all data is received, absolving 
the sender of reception responsibility. PGM runs over a best effort 
datagram service, currently OpenPGM uses IP multicast but could be 
implemented above switched fabrics such as InfiniBand.

PGM is appropriate for applications that require duplicate-free multicast 
data delivery from multiple sources to multiple receivers. PGM does not 
support acknowledged delivery, nor does it guarantee ordering of packets 
from multiple senders.

PGM is primarly used on internal networks to help integrate disparate 
systems through a common communication platform. A lack of IPv4 
multicast-enabled infrastructure leads to limited capability for internet 
applications, IPv6 promotes multicast to be a part of the core 
functionality of IP but may still be disabled on core routers. Support of 
Source-Specific Multicast (SSM) allows for improved WAN deployment by 
allowing end-point router filtering of unwanted source traffic


[FILE:117:distinfo]
8d707ef8dda45f4a7bc91016d7f2fed6a418637185d76c7ab30b306499c6d393       673842 steve-o-openpgm-release-5-3-128.tar.gz


[FILE:363:manifests/plist.primary]
include/pgm-%%PGMVER%%/pgm/
 atomic.h
 engine.h
 error.h
 gsi.h
 if.h
 in.h
 list.h
 macros.h
 mem.h
 messages.h
 msgv.h
 packet.h
 pgm.h
 skbuff.h
 socket.h
 time.h
 tsi.h
 types.h
 version.h
 winint.h
 wininttypes.h
 zinttypes.h
lib/
 libpgm-%%PGMVER%%.so.%%SOMAJOR%%
 libpgm-%%PGMVER%%.so.%%SOVERSION%%
 libpgm.a
 libpgm.so
lib/pkgconfig/openpgm-%%PGMVER%%.pc


[FILE:813:patches/patch-include_impl_byteorder.h]
--- include/impl/byteorder.h.orig	2020-08-31 03:14:09 UTC
+++ include/impl/byteorder.h
@@ -33,6 +33,8 @@
 #	include <ws2tcpip.h>
 #elif defined (__APPLE__)
 #	include <libkern/OSByteOrder.h>
+#elif defined (__FreeBSD__) || defined (__DragonFly__)
+#       include <sys/endian.h>
 #else
 #	include <byteswap.h>
 #endif
@@ -49,6 +51,8 @@ pgm_byteswap16 (uint16_t x) {
 	return _byteswap_ushort (x);
 #elif defined (__APPLE__)
 	return OSSwapInt16 (x);
+#elif defined (__FreeBSD__) || defined (__DragonFly__)
+	return bswap16 (x);
 #else
 	return bswap_16 (x);
 #endif
@@ -61,6 +65,8 @@ pgm_byteswap32 (uint32_t x) {
 	return _byteswap_ulong (x);
 #elif defined (__APPLE__)
 	return OSSwapInt32 (x);
+#elif defined (__FreeBSD__) || defined (__DragonFly__)
+	return bswap32 (x);
 #else
 	return bswap_32 (x);
 #endif

