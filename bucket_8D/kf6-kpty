# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		kf6-kpty
VERSION=		6.18.0
KEYWORDS=		devel
VARIANTS=		std
SDESC[std]=		KF6 interfacing with pseudo terminal devices
HOMEPAGE=		https://api.kde.org/kpty-index.html
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://download.kde.org/stable/frameworks/6.18/
DISTFILE[1]=		kpty-6.18.0.tar.xz:main
DIST_SUBDIR=		kde6
DF_INDEX=		1
SPKGS[std]=		set
			primary
			dev
			nls

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		kf6-extra-cmake-modules:primary:std
			kf6-kcoreaddons:dev:std
			kf6-ki18n:dev:std
			qt6-qtbase:dev:std
			qt6-qttools:set:std
BUILDRUN_DEPENDS=	kf6-kcoreaddons:primary:std
			kf6-ki18n:primary:std
			qt6-qtbase:primary:std

USES=			cmake gettext

DISTNAME=		kpty-6.18.0

LICENSE=		GPLv2+:primary LGPL20+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/LICENSES/GPL-2.0-or-later.txt
			LGPL20+:{{WRKSRC}}/LICENSES/LGPL-2.0-or-later.txt
LICENSE_SCHEME=		multi

FPC_EQUIVALENT=		devel/kf6-kpty

SOVERSION=		6.18.0

CMAKE_ARGS=		-DCMAKE_PREFIX_PATH:PATH={{PREFIX}}/lib/qt6/cmake

post-stage:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libKF6Pty.so

post-extract:
	${ECHO} "Terms extracted from 'src/kgrantpty.c':" > ${WRKDIR}/TERMS
	${SED} -n '/include/!p;//q' ${WRKSRC}/src/kgrantpty.c >> ${WRKDIR}/TERMS
	${ECHO} "Terms extracted from 'src/kpty.h':" >> ${WRKDIR}/TERMS
	${SED} -n '/ifndef/!p;//q' ${WRKSRC}/src/kpty.h >> ${WRKDIR}/TERMS

[FILE:182:descriptions/desc.primary]
This library provides primitives to interface with pseudo terminal devices 
as well as a KProcess derived class for running child processes and 
communicating with them using a pty.


[FILE:102:distinfo]
3f800638fcc0dbea0810930a1f2decfa6b894bb00732ff8646182c7dfd2ac76d      2384932 kde6/kpty-6.18.0.tar.xz


[FILE:102:manifests/plist.primary]
lib/
 libKF6Pty.so.%%SOMAJOR%%
 libKF6Pty.so.%%SOVERSION%%
share/qlogging-categories6/kpty.categories


[FILE:249:manifests/plist.dev]
include/KF6/KPty/
 KPty
 KPtyDevice
 KPtyProcess
 kpty.h
 kpty_export.h
 kpty_version.h
 kptydevice.h
 kptyprocess.h
lib/libKF6Pty.so
lib/cmake/KF6Pty/
 KF6PtyConfig.cmake
 KF6PtyConfigVersion.cmake
 KF6PtyTargets-release.cmake
 KF6PtyTargets.cmake


[FILE:449:patches/patch-cmake_FindUTEMPTER.cmake]
--- cmake/FindUTEMPTER.cmake.orig	2024-08-02 11:15:14 UTC
+++ cmake/FindUTEMPTER.cmake
@@ -29,7 +29,9 @@ else ()
 
     # On FreeBSD for example we have to use ulog-helper
     if (NOT UTEMPTER_EXECUTABLE)
-        find_program (UTEMPTER_EXECUTABLE ulog-helper PATHS /usr/libexec)
+        if(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD|Midnight")
+           set(UTEMPTER_EXECUTABLE "/usr/libexec/ulog-helper")
+        endif()
     endif ()
 endif ()
 


[FILE:276:patches/patch-metainfo.yaml]
--- metainfo.yaml.orig	2024-08-02 11:15:14 UTC
+++ metainfo.yaml
@@ -5,6 +5,9 @@ type: integration
 platforms:
     - name: Linux
     - name: FreeBSD
+    - name: DragonFly
+    - name: NetBSD
+    - name: MidnightBSD
     - name: macOS
 portingAid: false
 deprecated: false


[FILE:234:patches/patch-src_kpty.cpp]
--- src/kpty.cpp.orig	2024-08-02 11:15:14 UTC
+++ src/kpty.cpp
@@ -73,7 +73,9 @@ public:
     int cmdFd;
 };
 #else
+# if defined __NetBSD__ || defined __linux__
 #include <utmp.h>
+# endif
 #if HAVE_UTMPX
 #include <utmpx.h>
 #endif

