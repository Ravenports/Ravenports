# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-salt
VERSION=		2019.2.0
KEYWORDS=		python sysutils
VARIANTS=		py27 py37 py36
SDESC[py36]=		Remote execution and config mgmt system (PY 36)
SDESC[py37]=		Remote execution and config mgmt system (PY 37)
SDESC[py27]=		Remote execution and config mgmt system (PY 27)
HOMEPAGE=		http://saltstack.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/s/salt
DISTFILE[1]=		salt-2019.2.0.tar.gz:main
DF_INDEX=		1
SPKGS[py36]=		single
SPKGS[py37]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY37 PY36
OPTIONS_STANDARD=	none
VOPTS[py36]=		PY27=OFF PY37=OFF PY36=ON
VOPTS[py37]=		PY27=OFF PY37=ON PY36=OFF
VOPTS[py27]=		PY27=ON PY37=OFF PY36=OFF

USES=			cpe

DISTNAME=		salt-2019.2.0

LICENSE=		APACHE20:single
LICENSE_TERMS=		single:{{WRKSRC}}/LICENSE
LICENSE_FILE=		APACHE20:stock
LICENSE_SCHEME=		solo

CPE_PRODUCT=		salt
CPE_VENDOR=		saltstack
FPC_EQUIVALENT=		sysutils/py-salt
PYD_INSTALL_TARGET=	--salt-root-dir=/
			--salt-config-dir={{PREFIX}}/etc/salt
			--salt-cache-dir=/var/cache/salt
			--salt-sock-dir=/var/run/salt
			--salt-srv-root-dir={{PREFIX}}/etc/salt
			--salt-base-file-roots-dir={{PREFIX}}/etc/salt/states
			--salt-base-pillar-roots-dir={{PREFIX}}/etc/salt/pillar
			--salt-base-master-roots-dir={{PREFIX}}/etc/salt/salt-master
			--salt-logs-dir=/var/log/salt
			--salt-pidfile-dir=/var/run
			install

RC_SUBR=		salt_api:single
			salt_master:single
			salt_minion:single
			salt_proxy:single
			salt_syndic:single
SUB_FILES=		pkg-message-single
SUB_LIST=		PYTHON_CMD={{PYTHON_CMD}}

[PY36].BUILDRUN_DEPENDS_ON=		python-Jinja2:single:py36
					python-msgpack:single:py36
					python-PyYAML:single:py36
					python-MarkupSafe:single:py36
					python-requests:single:py36
					python-tornado:single:py36
					python-raet:single:py36
					python-pycrypto:single:py36
					python-pyzmq:single:py36
[PY36].USES_ON=				python:py36

[PY37].BUILDRUN_DEPENDS_ON=		python-Jinja2:single:py37
					python-msgpack:single:py37
					python-PyYAML:single:py37
					python-MarkupSafe:single:py37
					python-requests:single:py37
					python-tornado:single:py37
					python-raet:single:py37
					python-pycrypto:single:py37
					python-pyzmq:single:py37
[PY37].USES_ON=				python:py37

[PY27].BUILDRUN_DEPENDS_ON=		python-Jinja2:single:py27
					python-msgpack:single:py27
					python-PyYAML:single:py27
					python-MarkupSafe:single:py27
					python-requests:single:py27
					python-tornado:single:py27
					python-raet:single:py27
					python-pycrypto:single:py27
					python-pyzmq:single:py27
					python-futures:single:py27
					python-enum34:single:py27
[PY27].USES_ON=				python:py27

post-patch:
.for file in conf/minion conf/master doc/man/salt-key.1 \
	doc/man/salt-cp.1 doc/man/salt-minion.1 doc/man/salt-syndic.1 \
	doc/man/salt-master.1 doc/man/salt-run.1 doc/man/salt.7 doc/man/salt.1 \
	doc/man/salt-call.1 \
	salt/modules/mysql.py salt/utils/parsers.py salt/modules/tls.py \
	salt/modules/postgres.py salt/utils/migrations.py
	${REINPLACE_CMD} -e 's|/etc/salt|${PREFIX}/etc/salt|' \
		-e 's|/srv/salt|${PREFIX}/etc/salt/states|' \
		-e 's|/srv/pillar|${PREFIX}/etc/salt/pillar|' ${WRKSRC}/${file}
.endfor
	${REINPLACE_CMD} -e 's|yumpkg5|pkg|' ${WRKSRC}/conf/minion
	${REINPLACE_CMD} -e 's|__PREFIX__|${PREFIX}|' ${WRKSRC}/salt/utils/rsax931.py

post-install:
	@${MKDIR} ${STAGEDIR}${PREFIX}/etc/salt
	${INSTALL_DATA} ${WRKSRC}/conf/master \
		${STAGEDIR}${PREFIX}/etc/salt/master.sample
	${INSTALL_DATA} ${WRKSRC}/conf/minion \
		${STAGEDIR}${PREFIX}/etc/salt/minion.sample

[FILE:405:descriptions/desc.single]
SaltStack takes a new approach to infrastructure management by developing 
software that is easy enough to get running in seconds, scalable enough to 
manage tens of thousands of servers, and fast enough to control and 
communicate with them in milliseconds. SaltStack delivers a dynamic 
infrastructure communication bus used for orchestration, remote execution, 
configuration management and much more.


[FILE:99:distinfo]
5695bb2b3fa288bcfc0e3b93d9449afd75220bd8f0deefb5e7fc03af381df6cd     14952746 salt-2019.2.0.tar.gz


[FILE:62:manifests/plist.single]
@sample etc/salt/master.sample
@sample etc/salt/minion.sample


[FILE:663:patches/patch-salt_utils_rsax931.py]
--- salt/utils/rsax931.py.orig	2018-08-03 14:17:17.391935000 +0200
+++ salt/utils/rsax931.py	2018-08-03 14:18:20.948802000 +0200
@@ -43,7 +43,7 @@
             # This could be /opt/tools/lib (Global Zone)
             # or /opt/local/lib (non-Global Zone), thus the
             # two checks below
-            lib = glob.glob('/opt/local/lib/libcrypto.so*') + glob.glob('/opt/tools/lib/libcrypto.so*')
+            lib = glob.glob('/opt/local/lib/libcrypto.so*') + glob.glob('/opt/tools/lib/libcrypto.so*') + glob.glob('__PREFIX__/lib/libcrypto.so*')
             lib = lib[0] if len(lib) > 0 else None
         if lib:
             return cdll.LoadLibrary(lib)


[FILE:1520:files/pkg-message-single.in]

===================================================================================================

To configure a Salt Master, do the following:

  o Copy %%PREFIX%%/etc/salt/master.sample to %%PREFIX%%/etc/salt/master
  o Update to meet your needs
  o sysrc salt_master_enable="YES"

---------------------------------------------------------------------------------------------------

To configure a Salt Minion, do the following:

  o Copy %%PREFIX%%/etc/salt/minion.sample to %%PREFIX%%/etc/salt/minion
  o Update 'master: salt' to point to your Salt Master's hostname or IP
  o sysrc salt_minion_enable="YES"

---------------------------------------------------------------------------------------------------

To configure a Salt Proxy Minion, do the following:

  o sysrc salt_proxy_enable="YES"
  o sysrc salt_proxy_list=""
  o Update the salt_proxy_list with the proxy minion name(s)

---------------------------------------------------------------------------------------------------

To change the Transport method from the default option of Zeromq to either TCP or RAET:

  o Re-build the port with the desired options enabled to install the correct runtime dependencies
  o Ensure the master and minions all have salt installed with these same options and dependencies
  o Add the line 'transport: [tcp|raet]' to both the master and minion configuration files
  o Restart salt on the master and minions

===================================================================================================



[FILE:546:files/salt_api.in]
#!/bin/sh

# Salt API startup script
#
# PROVIDE: salt_api
# REQUIRE: LOGIN
# KEYWORD: shutdown

# Add the following to /etc/rc.conf[.local] to enable this service
#
# salt_api_enable (bool):          Set to NO by default.
#               Set it to YES to enable salt_api
#

. /etc/rc.subr

name=salt_api
rcvar=salt_api_enable

load_rc_config ${name}

: ${salt_api_enable:=NO}

command="%%PREFIX%%/bin/salt-api"
command_interpreter="%%PYTHON_CMD%%"
required_files="%%PREFIX%%/etc/salt"
command_args="-c ${required_files} -d"

run_rc_command "$1"


[FILE:1164:files/salt_master.in]
#!/bin/sh

# Salt Master startup script
#
# PROVIDE: salt_master
# REQUIRE: LOGIN
# KEYWORD: shutdown

# Add the following to /etc/rc.conf[.local] to enable this service
#
# salt_master_enable (bool):       Set to NO by default.
#               Set it to YES to enable salt_master.
# salt_master_paths (string):      Set to "/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin" by default.
#               Default $PATH for salt_master.
# salt_master_eggcache (string):   Set to "/tmp" by default.
#               Allows defining egg cache directory to fix runtime on diskless systems.
#

. /etc/rc.subr

name=salt_master
rcvar=salt_master_enable

load_rc_config ${name}

: ${salt_master_enable:=NO}
: ${salt_master_paths=/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin}
: ${salt_master_pidfile:=/var/run/salt-master.pid}
: ${salt_master_eggcache=/tmp}

command="%%PREFIX%%/bin/salt-master"
command_interpreter="%%PYTHON_CMD%%"
required_files="%%PREFIX%%/etc/salt"
command_args="-c ${required_files} -d"
pidfile=${salt_master_pidfile}

export PATH="${salt_master_paths}"
export PYTHON_EGG_CACHE="${salt_master_eggcache}"

run_rc_command "$1"


[FILE:1162:files/salt_minion.in]
#!/bin/sh

# Salt Minion startup script
#
# PROVIDE: salt_minion
# REQUIRE: LOGIN
# KEYWORD: shutdown

# Add the following to /etc/rc.conf[.local] to enable this service
#
# salt_minion_enable (bool):       Set to NO by default.
#               Set it to YES to enable salt_minion
# salt_minion_paths (string):      Set to "/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin" by default.
#               Default $PATH for salt_minion
# salt_minion_eggcache (string):   Set to "/tmp" by default.
#               Allows defining egg cache directory to fix runtime on diskless systems.
#

. /etc/rc.subr

name=salt_minion
rcvar=salt_minion_enable

load_rc_config ${name}

: ${salt_minion_enable:=NO}
: ${salt_minion_paths=/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin}
: ${salt_minion_pidfile:=/var/run/salt-minion.pid}
: ${salt_minion_eggcache=/tmp}

command="%%PREFIX%%/bin/salt-minion"
command_interpreter="%%PYTHON_CMD%%"
required_files="%%PREFIX%%/etc/salt"
command_args="-c ${required_files} -d"
pidfile=${salt_minion_pidfile}

export PATH="${salt_minion_paths}"
export PYTHON_EGG_CACHE="${salt_minion_eggcache}"

run_rc_command "$1"


[FILE:1530:files/salt_proxy.in]
#!/bin/sh

# Salt Proxy startup script
#
# PROVIDE: salt_proxy
# REQUIRE: LOGIN
# KEYWORD: shutdown

# Add the following to /etc/rc.conf[.local] to enable this service
#
# salt_proxy_enable (bool):        Set to NO by default.
#               Set it to YES to enable salt_proxy.
# salt_proxy_paths (string):       Set to "/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin" by default.
#               Default $PATH for Salt
# salt_proxy_eggcache (string):    Set to "/tmp" by default.
#               Allows defining egg cache directory to fix runtime on diskless systems.
# salt_proxy_list (string):        Set to "" by default.
#               Space separated list of proxies.
#

. /etc/rc.subr

name=salt_proxy
rcvar=salt_proxy_enable

load_rc_config ${name}

: ${salt_proxy_enable:=NO}
: ${salt_proxy_paths=/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin}
: ${salt_proxy_eggcache=/tmp}

start_cmd=salt_proxy_start

command="%%PREFIX%%/bin/salt-proxy"
command_interpreter="%%PYTHON_CMD%%"
required_files="%%PREFIX%%/etc/salt"
command_args="-c ${required_files} -d"

export PATH="${salt_minion_paths}"
export PYTHON_EGG_CACHE="${salt_minion_eggcache}"

salt_proxy_start()
{
    if [ ! -n "${salt_proxy_list}" ]; then
        echo "${salt_proxy_list} is undefined"
        return 1
    fi

    local _proxy

    for _proxy in ${salt_proxy_list}; do
        echo "Starting salt-proxy: ${_proxy}"
        ${command_interpreter} ${command} --proxyid ${_proxy} ${command_args}
    done
}

run_rc_command "$1"


[FILE:566:files/salt_syndic.in]
#!/bin/sh

# Salt Synic startup script
#
# PROVIDE: salt_syndic
# REQUIRE: LOGIN
# KEYWORD: shutdown

# Add the following to /etc/rc.conf[.local] to enable this service
#
# salt_syndic_enable (bool):       Set to NO by default.
#               Set it to YES to enable salt_syndic
#

. /etc/rc.subr

name=salt_syndic
rcvar=salt_syndic_enable

load_rc_config ${name}

: ${salt_syndic_enable:=NO}

command="%%PREFIX%%/bin/salt-syndic"
command_interpreter="%%PYTHON_CMD%%"
required_files="%%PREFIX%%/etc/salt"
command_args="-c ${required_files} -d"

run_rc_command "$1"

