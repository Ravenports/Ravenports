# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-salt
VERSION=		3000.3
REVISION=		1
KEYWORDS=		python sysutils
VARIANTS=		py37
SDESC[py37]=		Remote execution and config mgmt system (PY 37)
HOMEPAGE=		http://saltstack.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/s/salt
DISTFILE[1]=		salt-3000.3.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single

OPTIONS_AVAILABLE=	PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY37=ON

USES=			cpe

DISTNAME=		salt-3000.3

LICENSE=		APACHE20:single
LICENSE_TERMS=		single:{{WRKSRC}}/LICENSE
LICENSE_FILE=		APACHE20:stock
LICENSE_SCHEME=		solo

CPE_PRODUCT=		salt
CPE_VENDOR=		saltstack
FPC_EQUIVALENT=		sysutils/py-salt
PYD_INSTALL_TARGET=	--salt-root-dir=/
			--salt-config-dir={{PREFIX}}/etc/salt
			--salt-cache-dir=/var/cache/salt
			--salt-sock-dir=/var/run/salt
			--salt-srv-root-dir={{PREFIX}}/etc/salt
			--salt-base-file-roots-dir={{PREFIX}}/etc/salt/states
			--salt-base-pillar-roots-dir={{PREFIX}}/etc/salt/pillar
			--salt-base-master-roots-dir={{PREFIX}}/etc/salt/salt-master
			--salt-logs-dir=/var/log/salt
			--salt-pidfile-dir=/var/run
			install

RC_SUBR=		salt_api:single
			salt_master:single
			salt_minion:single
			salt_proxy:single
			salt_syndic:single
SUB_FILES=		pkg-message-single
SUB_LIST=		PYTHON_CMD={{PYTHON_CMD}}

[PY37].BUILDRUN_DEPENDS_ON=		python-Jinja2:single:py37
					python-msgpack:single:py37
					python-PyYAML:single:py37
					python-MarkupSafe:single:py37
					python-requests:single:py37
					python-raet:single:py37
					python-pycrypto:single:py37
					python-pyzmq:single:py37
[PY37].USES_ON=				python:py37

post-patch:
.for file in conf/minion conf/master doc/man/salt-key.1 \
	doc/man/salt-cp.1 doc/man/salt-minion.1 doc/man/salt-syndic.1 \
	doc/man/salt-master.1 doc/man/salt-run.1 doc/man/salt.7 doc/man/salt.1 \
	doc/man/salt-call.1 \
	salt/modules/mysql.py salt/utils/parsers.py salt/modules/tls.py \
	salt/modules/postgres.py salt/utils/migrations.py
	${REINPLACE_CMD} -e 's|/etc/salt|${PREFIX}/etc/salt|' \
		-e 's|/srv/salt|${PREFIX}/etc/salt/states|' \
		-e 's|/srv/pillar|${PREFIX}/etc/salt/pillar|' ${WRKSRC}/${file}
.endfor
	${REINPLACE_CMD} -e 's|yumpkg5|pkg|' ${WRKSRC}/conf/minion
	${REINPLACE_CMD} -e 's|__PREFIX__|${PREFIX}|' ${WRKSRC}/salt/utils/rsax931.py

post-install:
	@${MKDIR} ${STAGEDIR}${PREFIX}/etc/salt
	${INSTALL_DATA} ${WRKSRC}/conf/master \
		${STAGEDIR}${PREFIX}/etc/salt/master.sample
	${INSTALL_DATA} ${WRKSRC}/conf/minion \
		${STAGEDIR}${PREFIX}/etc/salt/minion.sample

[FILE:405:descriptions/desc.single]
SaltStack takes a new approach to infrastructure management by developing 
software that is easy enough to get running in seconds, scalable enough to 
manage tens of thousands of servers, and fast enough to control and 
communicate with them in milliseconds. SaltStack delivers a dynamic 
infrastructure communication bus used for orchestration, remote execution, 
configuration management and much more.


[FILE:97:distinfo]
fcca49985e697d914e5a7f34b2fd8bbd833bcf7779d30174a279a4de2294cea7     15237557 salt-3000.3.tar.gz


[FILE:62:manifests/plist.single]
@sample etc/salt/master.sample
@sample etc/salt/minion.sample


[FILE:219:patches/patch-requirements_base.txt]
--- requirements/base.txt.orig	2020-06-16 17:53:18.344029000 +0200
+++ requirements/base.txt	2020-06-16 17:53:40.504695000 +0200
@@ -1,5 +1,4 @@
 Jinja2
-msgpack>=0.5,!=0.5.5,<1.0.0
 PyYAML
 MarkupSafe
 requests>=1.0.0


[FILE:1717:patches/patch-salt_utils_msgpack.py]
--- salt/utils/msgpack.py.orig	2020-06-16 17:48:56.676387000 +0200
+++ salt/utils/msgpack.py	2020-06-16 17:51:42.199540000 +0200
@@ -68,13 +68,27 @@
 
     return kwargs
 
+def _sanitize_msgpack_unpack_kwargs(kwargs):
+    """
+    Clean up msgpack keyword arguments for unpack operations, based on
+    the version
+    https://github.com/msgpack/msgpack-python/blob/master/ChangeLog.rst
+    """
+    assert isinstance(kwargs, dict)
+    if version >= (1, 0, 0) and kwargs.get("raw", None) is None:
+        log.info("adding `raw=True` argument to msgpack call")
+        kwargs["raw"] = True
+
+    return _sanitize_msgpack_kwargs(kwargs)
 
 class Unpacker(msgpack.Unpacker):
     '''
     Wraps the msgpack.Unpacker and removes non-relevant arguments
     '''
     def __init__(self, *args, **kwargs):
-        msgpack.Unpacker.__init__(self, *args, **_sanitize_msgpack_kwargs(kwargs))
+            msgpack.Unpacker.__init__(
+            self, *args, **_sanitize_msgpack_unpack_kwargs(kwargs)
+        )
 
 
 def pack(o, stream, **kwargs):
@@ -113,7 +127,7 @@
     By default, this function uses the msgpack module and falls back to
     msgpack_pure, if the msgpack is not available.
     '''
-    return msgpack.unpack(stream, **_sanitize_msgpack_kwargs(kwargs))
+    return msgpack.unpack(stream, **_sanitize_msgpack_unpack_kwargs(kwargs))
 
 
 def unpackb(packed, **kwargs):
@@ -125,7 +139,7 @@
     By default, this function uses the msgpack module and falls back to
     msgpack_pure.
     '''
-    return msgpack.unpackb(packed, **_sanitize_msgpack_kwargs(kwargs))
+    return msgpack.unpackb(packed, **_sanitize_msgpack_unpack_kwargs(kwargs))
 
 
 # alias for compatibility to simplejson/marshal/pickle.


[FILE:681:patches/patch-salt_utils_rsax931.py]
--- salt/utils/rsax931.py.orig	2020-04-29 18:29:44 UTC
+++ salt/utils/rsax931.py
@@ -43,7 +43,7 @@ def _load_libcrypto():
             # This could be /opt/tools/lib (Global Zone)
             # or /opt/local/lib (non-Global Zone), thus the
             # two checks below
-            lib = glob.glob('/opt/local/lib/libcrypto.so*') + glob.glob('/opt/tools/lib/libcrypto.so*')
+            lib = glob.glob('/opt/local/lib/libcrypto.so*') + glob.glob('/opt/tools/lib/libcrypto.so*') + glob.glob('__PREFIX__/lib/libcrypto.so*')
             lib = lib[0] if len(lib) > 0 else None
         if not lib and salt.utils.platform.is_aix():
             if os.path.isdir('/opt/salt/lib'):


[FILE:3334:patches/patch-tests_unit_utils_test__msgpack.py]
--- tests/unit/utils/test_msgpack.py.orig	2020-05-13 20:58:34.000000000 +0200
+++ tests/unit/utils/test_msgpack.py	2020-06-16 17:52:29.680014000 +0200
@@ -184,6 +184,75 @@
         msgpack_util_items = set(dir(salt.utils.msgpack))
         self.assertFalse(msgpack_items - msgpack_util_items, 'msgpack functions with no alias in `salt.utils.msgpack`')
 
+    def test_sanitize_msgpack_kwargs(self):
+        """
+        Test helper function _sanitize_msgpack_kwargs
+        """
+        version = salt.utils.msgpack.version
+
+        kwargs = {"strict_map_key": True, "raw": True, "use_bin_type": True}
+        salt.utils.msgpack.version = (0, 6, 0)
+        self.assertEqual(
+            salt.utils.msgpack._sanitize_msgpack_kwargs(kwargs),
+            {"raw": True, "strict_map_key": True, "use_bin_type": True},
+        )
+
+        kwargs = {"strict_map_key": True, "raw": True, "use_bin_type": True}
+        salt.utils.msgpack.version = (0, 5, 2)
+        self.assertEqual(
+            salt.utils.msgpack._sanitize_msgpack_kwargs(kwargs),
+            {"raw": True, "use_bin_type": True},
+        )
+
+        kwargs = {"strict_map_key": True, "raw": True, "use_bin_type": True}
+        salt.utils.msgpack.version = (0, 4, 0)
+        self.assertEqual(
+            salt.utils.msgpack._sanitize_msgpack_kwargs(kwargs), {"use_bin_type": True}
+        )
+
+        kwargs = {"strict_map_key": True, "raw": True, "use_bin_type": True}
+        salt.utils.msgpack.version = (0, 3, 0)
+        self.assertEqual(salt.utils.msgpack._sanitize_msgpack_kwargs(kwargs), {})
+        salt.utils.msgpack.version = version
+
+    def test_sanitize_msgpack_unpack_kwargs(self):
+        """
+        Test helper function _sanitize_msgpack_unpack_kwargs
+        """
+        version = salt.utils.msgpack.version
+
+        kwargs = {"strict_map_key": True, "use_bin_type": True}
+        salt.utils.msgpack.version = (1, 0, 0)
+        self.assertEqual(
+            salt.utils.msgpack._sanitize_msgpack_unpack_kwargs(kwargs),
+            {"raw": True, "strict_map_key": True, "use_bin_type": True},
+        )
+
+        kwargs = {"strict_map_key": True, "use_bin_type": True}
+        salt.utils.msgpack.version = (0, 6, 0)
+        self.assertEqual(
+            salt.utils.msgpack._sanitize_msgpack_unpack_kwargs(kwargs),
+            {"strict_map_key": True, "use_bin_type": True},
+        )
+
+        kwargs = {"strict_map_key": True, "use_bin_type": True}
+        salt.utils.msgpack.version = (0, 5, 2)
+        self.assertEqual(
+            salt.utils.msgpack._sanitize_msgpack_unpack_kwargs(kwargs),
+            {"use_bin_type": True},
+        )
+
+        kwargs = {"strict_map_key": True, "use_bin_type": True}
+        salt.utils.msgpack.version = (0, 4, 0)
+        self.assertEqual(
+            salt.utils.msgpack._sanitize_msgpack_unpack_kwargs(kwargs),
+            {"use_bin_type": True},
+        )
+        kwargs = {"strict_map_key": True, "use_bin_type": True}
+        salt.utils.msgpack.version = (0, 3, 0)
+        self.assertEqual(salt.utils.msgpack._sanitize_msgpack_unpack_kwargs(kwargs), {})
+        salt.utils.msgpack.version = version
+
     def _test_base(self, pack_func, unpack_func):
         '''
         In msgpack, 'dumps' is an alias for 'packb' and 'loads' is an alias for 'unpackb'.


[FILE:1520:files/pkg-message-single.in]

===================================================================================================

To configure a Salt Master, do the following:

  o Copy %%PREFIX%%/etc/salt/master.sample to %%PREFIX%%/etc/salt/master
  o Update to meet your needs
  o sysrc salt_master_enable="YES"

---------------------------------------------------------------------------------------------------

To configure a Salt Minion, do the following:

  o Copy %%PREFIX%%/etc/salt/minion.sample to %%PREFIX%%/etc/salt/minion
  o Update 'master: salt' to point to your Salt Master's hostname or IP
  o sysrc salt_minion_enable="YES"

---------------------------------------------------------------------------------------------------

To configure a Salt Proxy Minion, do the following:

  o sysrc salt_proxy_enable="YES"
  o sysrc salt_proxy_list=""
  o Update the salt_proxy_list with the proxy minion name(s)

---------------------------------------------------------------------------------------------------

To change the Transport method from the default option of Zeromq to either TCP or RAET:

  o Re-build the port with the desired options enabled to install the correct runtime dependencies
  o Ensure the master and minions all have salt installed with these same options and dependencies
  o Add the line 'transport: [tcp|raet]' to both the master and minion configuration files
  o Restart salt on the master and minions

===================================================================================================



[FILE:546:files/salt_api.in]
#!/bin/sh

# Salt API startup script
#
# PROVIDE: salt_api
# REQUIRE: LOGIN
# KEYWORD: shutdown

# Add the following to /etc/rc.conf[.local] to enable this service
#
# salt_api_enable (bool):          Set to NO by default.
#               Set it to YES to enable salt_api
#

. /etc/rc.subr

name=salt_api
rcvar=salt_api_enable

load_rc_config ${name}

: ${salt_api_enable:=NO}

command="%%PREFIX%%/bin/salt-api"
command_interpreter="%%PYTHON_CMD%%"
required_files="%%PREFIX%%/etc/salt"
command_args="-c ${required_files} -d"

run_rc_command "$1"


[FILE:1164:files/salt_master.in]
#!/bin/sh

# Salt Master startup script
#
# PROVIDE: salt_master
# REQUIRE: LOGIN
# KEYWORD: shutdown

# Add the following to /etc/rc.conf[.local] to enable this service
#
# salt_master_enable (bool):       Set to NO by default.
#               Set it to YES to enable salt_master.
# salt_master_paths (string):      Set to "/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin" by default.
#               Default $PATH for salt_master.
# salt_master_eggcache (string):   Set to "/tmp" by default.
#               Allows defining egg cache directory to fix runtime on diskless systems.
#

. /etc/rc.subr

name=salt_master
rcvar=salt_master_enable

load_rc_config ${name}

: ${salt_master_enable:=NO}
: ${salt_master_paths=/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin}
: ${salt_master_pidfile:=/var/run/salt-master.pid}
: ${salt_master_eggcache=/tmp}

command="%%PREFIX%%/bin/salt-master"
command_interpreter="%%PYTHON_CMD%%"
required_files="%%PREFIX%%/etc/salt"
command_args="-c ${required_files} -d"
pidfile=${salt_master_pidfile}

export PATH="${salt_master_paths}"
export PYTHON_EGG_CACHE="${salt_master_eggcache}"

run_rc_command "$1"


[FILE:1162:files/salt_minion.in]
#!/bin/sh

# Salt Minion startup script
#
# PROVIDE: salt_minion
# REQUIRE: LOGIN
# KEYWORD: shutdown

# Add the following to /etc/rc.conf[.local] to enable this service
#
# salt_minion_enable (bool):       Set to NO by default.
#               Set it to YES to enable salt_minion
# salt_minion_paths (string):      Set to "/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin" by default.
#               Default $PATH for salt_minion
# salt_minion_eggcache (string):   Set to "/tmp" by default.
#               Allows defining egg cache directory to fix runtime on diskless systems.
#

. /etc/rc.subr

name=salt_minion
rcvar=salt_minion_enable

load_rc_config ${name}

: ${salt_minion_enable:=NO}
: ${salt_minion_paths=/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin}
: ${salt_minion_pidfile:=/var/run/salt-minion.pid}
: ${salt_minion_eggcache=/tmp}

command="%%PREFIX%%/bin/salt-minion"
command_interpreter="%%PYTHON_CMD%%"
required_files="%%PREFIX%%/etc/salt"
command_args="-c ${required_files} -d"
pidfile=${salt_minion_pidfile}

export PATH="${salt_minion_paths}"
export PYTHON_EGG_CACHE="${salt_minion_eggcache}"

run_rc_command "$1"


[FILE:1530:files/salt_proxy.in]
#!/bin/sh

# Salt Proxy startup script
#
# PROVIDE: salt_proxy
# REQUIRE: LOGIN
# KEYWORD: shutdown

# Add the following to /etc/rc.conf[.local] to enable this service
#
# salt_proxy_enable (bool):        Set to NO by default.
#               Set it to YES to enable salt_proxy.
# salt_proxy_paths (string):       Set to "/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin" by default.
#               Default $PATH for Salt
# salt_proxy_eggcache (string):    Set to "/tmp" by default.
#               Allows defining egg cache directory to fix runtime on diskless systems.
# salt_proxy_list (string):        Set to "" by default.
#               Space separated list of proxies.
#

. /etc/rc.subr

name=salt_proxy
rcvar=salt_proxy_enable

load_rc_config ${name}

: ${salt_proxy_enable:=NO}
: ${salt_proxy_paths=/sbin:/bin:/usr/sbin:/usr/bin:%%PREFIX%%/bin:%%PREFIX%%/sbin}
: ${salt_proxy_eggcache=/tmp}

start_cmd=salt_proxy_start

command="%%PREFIX%%/bin/salt-proxy"
command_interpreter="%%PYTHON_CMD%%"
required_files="%%PREFIX%%/etc/salt"
command_args="-c ${required_files} -d"

export PATH="${salt_minion_paths}"
export PYTHON_EGG_CACHE="${salt_minion_eggcache}"

salt_proxy_start()
{
    if [ ! -n "${salt_proxy_list}" ]; then
        echo "${salt_proxy_list} is undefined"
        return 1
    fi

    local _proxy

    for _proxy in ${salt_proxy_list}; do
        echo "Starting salt-proxy: ${_proxy}"
        ${command_interpreter} ${command} --proxyid ${_proxy} ${command_args}
    done
}

run_rc_command "$1"


[FILE:566:files/salt_syndic.in]
#!/bin/sh

# Salt Synic startup script
#
# PROVIDE: salt_syndic
# REQUIRE: LOGIN
# KEYWORD: shutdown

# Add the following to /etc/rc.conf[.local] to enable this service
#
# salt_syndic_enable (bool):       Set to NO by default.
#               Set it to YES to enable salt_syndic
#

. /etc/rc.subr

name=salt_syndic
rcvar=salt_syndic_enable

load_rc_config ${name}

: ${salt_syndic_enable:=NO}

command="%%PREFIX%%/bin/salt-syndic"
command_interpreter="%%PYTHON_CMD%%"
required_files="%%PREFIX%%/etc/salt"
command_args="-c ${required_files} -d"

run_rc_command "$1"

