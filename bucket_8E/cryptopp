# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		cryptopp
VERSION=		8.9.0
KEYWORDS=		security
VARIANTS=		standard
SDESC[standard]=	C++ class library of cryptographic schemes
HOMEPAGE=		https://www.cryptopp.com/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://www.cryptopp.com/
DISTFILE[1]=		cryptopp890.zip:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cpe gmake dos2unix c++:single

EXTRACT_DIRTY=		1

LICENSE=		PUBDOM:single
LICENSE_FILE=		PUBDOM:{{WRKSRC}}/License.txt
LICENSE_SCHEME=		solo

CPE_PRODUCT=		crypto\+\+
CPE_VENDOR=		cryptopp
FPC_EQUIVALENT=		security/cryptopp

BUILD_TARGET=		static shared libcryptopp.pc cryptest.exe
MAKEFILE=		GNUmakefile
MAKE_ENV=		CRYPTOPP_DATA_DIR=share/cryptopp/

SOVERSION=		8.9.0

do-install:
	${INSTALL_DATA} ${WRKSRC}/libcryptopp.a ${STAGEDIR}${PREFIX}/lib/
	${INSTALL_LIB} ${WRKSRC}/libcryptopp.so.8.9.0 \
		${STAGEDIR}${PREFIX}/lib/
	${LN} -fs libcryptopp.so.8.9.0 \
		${STAGEDIR}${PREFIX}/lib/libcryptopp.so.8
	${LN} -fs libcryptopp.so.8.9.0 \
		${STAGEDIR}${PREFIX}/lib/libcryptopp.so
	${INSTALL_DATA} ${WRKSRC}/libcryptopp.pc \
		${STAGEDIR}${PREFIX}/lib/pkgconfig/
	${MKDIR} ${STAGEDIR}${PREFIX}/include/cryptopp
	for i in `${FIND} ${WRKSRC}/ -name '*.h' \
		-and -not -name 'dll.h' \
		-and -not -name 'resource.h'`; do \
		${INSTALL_DATA} $$i ${STAGEDIR}${PREFIX}/include/cryptopp; \
	done
	${MKDIR} ${STAGEDIR}${PREFIX}/share/cryptopp/TestData
	${INSTALL_PROGRAM} ${WRKSRC}/cryptest.exe \
		${STAGEDIR}${PREFIX}/bin/cryptest
	${INSTALL_DATA} ${WRKSRC}/TestData/usage.dat \
		${STAGEDIR}${PREFIX}/share/cryptopp/TestData/

[FILE:1956:descriptions/desc.single]
Crypto++ Library is a free C++ class library of cryptographic schemes.

The library contains the following algorithms
---------------------------------------------
authenticated encryption schemes:
  GCM, CCM, EAX, ChaCha20Poly1305, XChaCha20Poly1305

high speed stream ciphers:
  ChaCha (8/12/20), ChaCha (IETF) HC (128/256), Panama, Rabbit (128/256),
  Sosemanuk, Salsa20 (8/12/20), XChaCha (8/12/20), XSalsa20

AES and AES candidates:
  AES (Rijndael), RC6, MARS, Twofish, Serpent, CAST-256

other block ciphers:
  ARIA, Blowfish, Camellia, CHAM, HIGHT, IDEA, Kalyna (128/256/512), LEA,
  SEED, RC5, SHACAL-2, SIMECK, SIMON (64/128), Skipjack, SPECK (64/128),
  Simeck, SM4,Threefish (256/512/1024), Triple-DES (DES-EDE2 and DES-EDE3),
  TEA, XTEA

block cipher modes of operation:
  ECB, CBC, CBC ciphertext stealing (CTS), CFB, OFB, CTR, XTS

message authentication codes:
  BLAKE2b, BLAKE2s, CMAC, CBC-MAC, DMAC, GMAC (GCM), HMAC, Poly1305,
  SipHash, Two-Track-MAC, VMAC hash functions, BLAKE2b, BLAKE2s,
  Keccack (F1600), SHA-1, SHA-2, SHA-3, SHAKE (128/256), SipHash, Tiger,
  RIPEMD (128/160/256/320), SM3, WHIRLPOOL

public-key cryptography:
  RSA, DSA, Determinsitic DSA (RFC 6979), ElGamal, Nyberg-Rueppel (NR),
  Rabin-Williams (RW), EC-based German Digital Signature (ECGDSA), LUC,
  LUCELG, DLIES (variants of DHAES), ESIGN

padding schemes for public-key systems:
  PKCS#1 v2.0, OAEP, PSS, PSSR, IEEE P1363 EMSA2 and EMSA5

key agreement schemes:
  Diffie-Hellman (DH), Unified Diffie-Hellman (DH2),
  Menezes-Qu-Vanstone (MQV), Hashed MQV (HMQV), Fully Hashed MQV (FHMQV),
  LUCDIF, XTR-DH

elliptic curve cryptography:
  ECDSA, Determinsitic ECDSA (RFC 6979), ed25519, ECGDSA, ECNR, ECIES,
  x25519, ECDH, ECMQV

insecure or obsolescent algorithms retained for backwards compatibility
and historical value:
  MD2, MD4, MD5, Panama Hash, DES, ARC4, SEAL 3.0, WAKE-OFB,
  DESX (DES-XEX3), RC2, SAFER, 3-WAY, GOST, SHARK, CAST-128, Square


[FILE:94:distinfo]
4cc0ccc324625b80b695fcd3dee63a66f1a460d3e51b71640cdbfc4cd1a3779c      9288053 cryptopp890.zip


[FILE:2078:manifests/plist.single]
bin/cryptest
include/cryptopp/
 3way.h
 adler32.h
 adv_simd.h
 aes.h
 aes_armv4.h
 algebra.h
 algparam.h
 allocate.h
 arc4.h
 argnames.h
 aria.h
 arm_simd.h
 asn.h
 authenc.h
 base32.h
 base64.h
 basecode.h
 bench.h
 blake2.h
 blowfish.h
 blumshub.h
 camellia.h
 cast.h
 cbcmac.h
 ccm.h
 chacha.h
 chachapoly.h
 cham.h
 channels.h
 cmac.h
 config.h
 config_align.h
 config_asm.h
 config_cpu.h
 config_cxx.h
 config_dll.h
 config_int.h
 config_misc.h
 config_ns.h
 config_os.h
 config_ver.h
 cpu.h
 crc.h
 cryptlib.h
 darn.h
 default.h
 des.h
 dh.h
 dh2.h
 dmac.h
 donna.h
 donna_32.h
 donna_64.h
 donna_sse.h
 drbg.h
 dsa.h
 eax.h
 ec2n.h
 eccrypto.h
 ecp.h
 ecpoint.h
 elgamal.h
 emsa2.h
 eprecomp.h
 esign.h
 factory.h
 fhmqv.h
 files.h
 filters.h
 fips140.h
 fltrimpl.h
 gcm.h
 gf256.h
 gf2_32.h
 gf2n.h
 gfpcrypt.h
 gost.h
 gzip.h
 hashfwd.h
 hc128.h
 hc256.h
 hex.h
 hight.h
 hkdf.h
 hmac.h
 hmqv.h
 hrtimer.h
 ida.h
 idea.h
 integer.h
 iterhash.h
 kalyna.h
 keccak.h
 lea.h
 lsh.h
 lubyrack.h
 luc.h
 mars.h
 md2.h
 md4.h
 md5.h
 mdc.h
 mersenne.h
 misc.h
 modarith.h
 modes.h
 modexppc.h
 mqueue.h
 mqv.h
 naclite.h
 nbtheory.h
 nr.h
 oaep.h
 oids.h
 osrng.h
 ossig.h
 padlkrng.h
 panama.h
 pch.h
 pkcspad.h
 poly1305.h
 polynomi.h
 ppc_simd.h
 pssr.h
 pubkey.h
 pwdbased.h
 queue.h
 rabbit.h
 rabin.h
 randpool.h
 rc2.h
 rc5.h
 rc6.h
 rdrand.h
 rijndael.h
 ripemd.h
 rng.h
 rsa.h
 rw.h
 safer.h
 salsa.h
 scrypt.h
 seal.h
 secblock.h
 secblockfwd.h
 seckey.h
 seed.h
 serpent.h
 serpentp.h
 sha.h
 sha1_armv4.h
 sha256_armv4.h
 sha3.h
 sha512_armv4.h
 shacal2.h
 shake.h
 shark.h
 simeck.h
 simon.h
 simple.h
 siphash.h
 skipjack.h
 sm3.h
 sm4.h
 smartptr.h
 sosemanuk.h
 speck.h
 square.h
 stdcpp.h
 strciphr.h
 tea.h
 threefish.h
 tiger.h
 trap.h
 trunhash.h
 ttmac.h
 tweetnacl.h
 twofish.h
 validate.h
 vmac.h
 wake.h
 whrlpool.h
 words.h
 xed25519.h
 xtr.h
 xtrcrypt.h
 xts.h
 zdeflate.h
 zinflate.h
 zlib.h
lib/
 libcryptopp.a
 libcryptopp.so
 libcryptopp.so.%%SOMAJOR%%
 libcryptopp.so.%%SOVERSION%%
lib/pkgconfig/libcryptopp.pc
share/cryptopp/TestData/usage.dat


[FILE:506:patches/patch-GNUmakefile]
--- GNUmakefile.orig	2023-10-01 16:38:21 UTC
+++ GNUmakefile
@@ -70,7 +70,7 @@ ifeq ($(SYSTEMX),)
   SYSTEMX := $(shell uname -s 2>/dev/null)
 endif
 
-IS_LINUX := $(shell echo "$(SYSTEMX)" | $(GREP) -i -c "Linux")
+IS_LINUX := $(shell echo "$(SYSTEMX)" | $(GREP) -i -c -E "Linux|DragonFly|FreeBSD|NetBSD")
 IS_HURD := $(shell echo "$(SYSTEMX)" | $(GREP) -i -c -E "GNU|Hurd")
 IS_MINGW := $(shell echo "$(SYSTEMX)" | $(GREP) -i -c "MinGW")
 IS_CYGWIN := $(shell echo "$(SYSTEMX)" | $(GREP) -i -c "Cygwin")

