# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-aiohttp
VERSION=		3.8.3
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Async http client/server framework (3.10)
SDESC[py39]=		Async http client/server framework (3.9)
HOMEPAGE=		https://github.com/aio-libs/aiohttp
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/a/aiohttp
DISTFILE[1]=		aiohttp-3.8.3.tar.gz:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		aiohttp-3.8.3

GENERATED=		yes

[PY39].BUILDRUN_DEPENDS_ON=		python-attrs:single:py39
					python-charset-normalizer:single:py39
					python-multidict:single:py39
					python-async-timeout:single:py39
					python-yarl:single:py39
					python-frozenlist:single:py39
					python-aiosignal:single:py39
[PY39].USES_ON=				python:py39,sutools

[PY310].BUILDRUN_DEPENDS_ON=		python-attrs:single:py310
					python-charset-normalizer:single:py310
					python-multidict:single:py310
					python-async-timeout:single:py310
					python-yarl:single:py310
					python-frozenlist:single:py310
					python-aiosignal:single:py310
[PY310].USES_ON=			python:py310,sutools

[FILE:2241:descriptions/desc.single]
==================================
Async http client/server framework
==================================

   :alt: GitHub Actions status for master branch

   :alt: codecov.io status for master branch

   :alt: Latest PyPI package version

   :alt: Latest Read The Docs

   :alt: Discourse status

   :alt: Chat on Gitter

Key Features
============

- Supports both client and server side of HTTP protocol.
- Supports both client and server Web-Sockets out-of-the-box and avoids
  Callback Hell.
- Provides Web-server with middlewares and plugable routing.

Getting started
===============

Client
------

To get something from the web:

.. code-block:: python

  import aiohttp
  import asyncio

  async def main():

      async with aiohttp.ClientSession() as session:
          async with session.get('http://python.org') as response:

              print("Status:", response.status)
              print("Content-type:", response.headers['content-type'])

              html = await response.text()
              print("Body:", html[:15], "...")

    asyncio.run(main())

This prints:

.. code-block::

    Status: 200
    Content-type: text/html; charset=utf-8
    Body: <!doctype html> ...

Coming from [requests] ? Read [why we need so many lines].

Server
------

An example using a simple server:

.. code-block:: python

    # examples/server_simple.py
    from aiohttp import web

    async def handle(request):
        name = request.match_info.get('name', "Anonymous")
        text = "Hello, " + name
        return web.Response(text=text)

    async def wshandle(request):
        ws = web.WebSocketResponse()
        await ws.prepare(request)

        async for msg in ws:
            if msg.type == web.WSMsgType.text:
                await ws.send_str("Hello, {}".format(msg.data))
            elif msg.type == web.WSMsgType.binary:
                await ws.send_bytes(msg.data)
            elif msg.type == web.WSMsgType.close:
                break

        return ws

    app = web.Application()
    app.add_routes([web.get('/', handle),
                    web.get('/echo', wshandle),
                    web.get('/{name}', handle)])

    if __name__ == '__main__':
        web.run_app(app)

Documentation
=============



[FILE:99:distinfo]
3828fb41b7203176b82fe5d699e0d845435f2374750a44b480ea6b930f6be269      7337480 aiohttp-3.8.3.tar.gz

