# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-charset-normalizer
VERSION=		3.2.0
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Charset Detection, for Everyone (3.10)
SDESC[v11]=		Charset Detection, for Everyone (3.11)
HOMEPAGE=		https://github.com/Ousret/charset_normalizer
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/bf/a0/188f223c7d8b924fb9b554b9d27e0e7506fd5bf9cfb6dbacb2dfd5832b53
DISTFILE[1]=		charset_normalizer-3.2.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		charset_normalizer-3.2.0.dist-info

GENERATED=		yes

[PY310].USES_ON=			python:py310,wheel

[PY311].USES_ON=			python:v11,wheel

[FILE:4806:descriptions/desc.single]
<h1 align="center">Charset Detection, for Everyone üëã</h1>

<p align="center">
  <sup>The Real First Universal Charset Detector</sup><br>
  
    [image]
  
  
    [image]
  
  
    [image]
  
</p>

> A library that helps you read text from an unknown charset encoding.<br
/> Motivated by `chardet`,
> I'm trying to resolve the issue by taking a new approach.
> All IANA character set names for which the Python core library provides
codecs are supported.

<p align="center">
  >>>>> üëâ Try Me Online Now, Then Adopt Me üëà  <<<<<
</p>

This project offers you an alternative to **Universal Charset Encoding
Detector**, also known as **Chardet**.

| Feature                                          | [Chardet] |           
                               Charset Normalizer                          
                | [cChardet] |
|--------------------------------------------------|:---------------------------------------------:|:------------------------------------------------------------------------------------------------------:|:-----------------------------------------------:|
| `Fast`                                           |                    
‚ùå<br>                     |                                              
  ‚úÖ<br>                                                  |               
     ‚úÖ <br>                      |
| `Universal**`                                    |                      
‚ùå                       |                                                
  ‚úÖ                                                    |                 
      ‚ùå                        |
| `Reliable` **without** distinguishable standards |                      
‚ùå                       |                                                
  ‚úÖ                                                    |                 
      ‚úÖ                        |
| `Reliable` **with** distinguishable standards    |                      
‚úÖ                       |                                                
  ‚úÖ                                                    |                 
      ‚úÖ                        |
| `License`                                        |          
LGPL-2.1<br>_restrictive_           |                                      
           MIT                                                   |         
  MPL-1.1<br>_restrictive_             |
| `Native Python`                                  |                      
‚úÖ                       |                                                
  ‚úÖ                                                    |                 
      ‚ùå                        |
| `Detect spoken language`                         |                      
‚ùå                       |                                                
  ‚úÖ                                                    |                 
     N/A                       |
| `UnicodeDecodeError Safety`                      |                      
‚ùå                       |                                                
  ‚úÖ                                                    |                 
      ‚ùå                        |
| `Whl Size`                                       |                  
193.6 kB                    |                                              
  40 kB                                                  |                 
   ~200 kB                     |
| `Supported Encoding`                             |                     
33                       | üéâ [90] |                       40            
           |

<p align="center">
[image][image]

*\*\* : They are clearly using specific code for a specific encoding even
if covering most of used one*<br> 
Did you got there because of the logs? See
[https://charset-normalizer.readthedocs.io/en/latest/user/miscellaneous.html]

## ‚ö° Performance

This package offer better performance than its counterpart Chardet. Here
are some numbers.

| Package                                       | Accuracy | Mean per file
(ms) | File per sec (est) |
|-----------------------------------------------|:--------:|:------------------:|:------------------:|
| [chardet] |   86 %   |       200 ms       |     5 file/sec     |
| charset-normalizer                            | **98 %** |     **10 ms** 
    |    100 file/sec    |

| Package                                       | 99th percentile | 95th
percentile | 50th percentile |
|-----------------------------------------------|:---------------:|:---------------:|:---------------:|
| [chardet] |     1200 ms     |     287 ms      |      23 ms      |
| charset-normalizer                            |     100 ms      |      50
ms      |      5 ms       |

Chardet's performance on larger file (1MB+) are very poor. Expect huge


[FILE:120:distinfo]
8e098148dd37b4ce3baca71fb394c81dc5d9c7728c95df695d2dca218edf40e6        46668 charset_normalizer-3.2.0-py3-none-any.whl

