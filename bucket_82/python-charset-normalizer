# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-charset-normalizer
VERSION=		2.0.6
KEYWORDS=		python
VARIANTS=		py38 py39
SDESC[py38]=		Charset Detection, for Everyone (PY38)
SDESC[py39]=		Charset Detection, for Everyone (PY39)
HOMEPAGE=		https://github.com/ousret/charset_normalizer
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/3f/65/69e6754102dcd018a0f29e4db673372eb323ee504431125ab6c9109cb21c
DISTFILE[1]=		charset_normalizer-2.0.6-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py38]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY38 PY39
OPTIONS_STANDARD=	none
VOPTS[py38]=		PY38=ON PY39=OFF
VOPTS[py39]=		PY38=OFF PY39=ON

DISTNAME=		charset_normalizer-2.0.6.dist-info

GENERATED=		yes

[PY38].USES_ON=				python:py38,wheel

[PY39].USES_ON=				python:py39,wheel

[FILE:3022:descriptions/desc.single]

<h1 align="center">Charset Detection, for Everyone üëã [image]</h1>

<p align="center">
  <sup>The Real First Universal Charset Detector</sup><br>
  
    [image]
  
  
      [image]
  
  
    [image]
  
</p>

> A library that helps you read text from an unknown charset encoding.<br
/> Motivated by `chardet`,
> I'm trying to resolve the issue by taking a new approach.
> All IANA character set names for which the Python core library provides
codecs are supported.

<p align="center">
  >>>>> üëâ Try Me Online Now, Then Adopt Me üëà  <<<<<
</p>

This project offers you an alternative to **Universal Charset Encoding
Detector**, also known as **Chardet**.

| Feature       | [Chardet]       | Charset Normalizer | [cChardet] |
| ------------- | :-------------: | :------------------: |
:------------------: |
| `Fast`         | ‚ùå<br>          | ‚úÖ<br>             | ‚úÖ <br> |
| `Universal**`     | ‚ùå            | ‚úÖ                 | ‚ùå |
| `Reliable` **without** distinguishable standards | ‚ùå | ‚úÖ | ‚úÖ |
| `Reliable` **with** distinguishable standards | ‚úÖ | ‚úÖ | ‚úÖ |
| `Free & Open`  | ‚úÖ             | ‚úÖ                | ‚úÖ |
| `License` | LGPL-2.1 | MIT | MPL-1.1
| `Native Python` | ‚úÖ | ‚úÖ | ‚ùå |
| `Detect spoken language` | ‚ùå | ‚úÖ | N/A |
| `Supported Encoding` | 30 | :tada: [93]  | 40

<p align="center">
[image][image]

*\*\* : They are clearly using specific code for a specific encoding even
if covering most of used one*<br> 

## ‚≠ê Your support

*Fork, test-it, star-it, submit your ideas! We do listen.*
  
## ‚ö° Performance

This package offer better performance than its counterpart Chardet. Here
are some numbers.

| Package       | Accuracy       | Mean per file (ns) | File per sec (est)
|
| ------------- | :-------------: | :------------------: |
:------------------: |
|      [chardet]        |     92.0 %     |     220 ms      |       5
file/sec        |
| charset-normalizer |    **97.0 %**     |     **40 ms**      |       25
file/sec    |

| Package       | 99th percentile       | 95th percentile | 50th percentile
|
| ------------- | :-------------: | :------------------: |
:------------------: |
|      [chardet]        |     888 ms     |     300 ms      |       27 ms   
    |
| charset-normalizer |    430 ms     |     220 ms      |       18 ms    |

Chardet's performance on larger file (1MB+) are very poor. Expect huge
difference on large payload.

> Stats are generated using 400+ files using default parameters. More
details on used files, see GHA workflows.
> And yes, these results might change at any time. The dataset can be
updated to include more files.

[cchardet] is a non-native (cpp binding) faster alternative. If speed is
the most important factor,
you should try it.

## ‚ú® Installation

Using PyPi for latest stable
```sh
pip install charset-normalizer -U
```

If you want a more up-to-date `unicodedata` than the one available in your
Python setup.
```sh
pip install charset-normalizer[unicode_backport] -U
```

## üöÄ Basic Usage


[FILE:120:distinfo]
5d209c0a931f215cee683b6445e2d77677e7e75e159f78def0db09d68fafcaa6        37951 charset_normalizer-2.0.6-py3-none-any.whl

