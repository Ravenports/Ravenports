# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		opencv
VERSION=		4.7.0
KEYWORDS=		graphics
VARIANTS=		standard
SDESC[standard]=	Open Source Computer Vision library
HOMEPAGE=		https://opencv.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/opencv:opencv:4.7.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	primary
			core

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		eigen:single:standard
			ffmpeg:dev:standard
BUILDRUN_DEPENDS=	jasper:primary:standard
			WebP:single:standard
			ffmpeg:primary:standard
EXRUN[primary]=		opencv:core:standard

USES=			cpe cmake pkgconfig jpeg png tiff zlib shebangfix

LICENSE=		BSD3CLAUSE:primary
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		graphics/opencv
SHEBANG_FILES=		cmake/templates/opencv_run_all_tests_unix.sh.in
			cmake/templates/setup_vars_linux.sh.in
			cmake/templates/setup_vars_macosx.sh.in

SOVERSION=		4.7.0
PLIST_SUB=		MAJOR=407
SUB_FILES=		FindOpenCVCore.cmake
SUB_LIST=		OCV_VERSION=4.7.0

CMAKE_ARGS=		-DWITH_VTK:BOOL=OFF
			-DWITH_CUDA:BOOL=OFF
			-DWITH_CUFFT:BOOL=OFF
			-DWITH_CUBLAS:BOOL=OFF
			-DWITH_NVCUVID:BOOL=OFF
			-DWITH_GSTREAMER_0_10:BOOL=OFF
			-DWITH_GTK:BOOL=OFF
			-DWITH_IPP:BOOL=OFF
			-DWITH_PVAPI:BOOL=OFF
			-DWITH_GIGEAPI:BOOL=OFF
			-DWITH_QUICKTIME:BOOL=OFF
			-DWITH_OPENCL_SVM:BOOL=OFF
			-DWITH_INTELPERC:BOOL=OFF
			-DWITH_IPP_A:BOOL=OFF
			-DWITH_MATLAB:BOOL=OFF
			-DWITH_VA:BOOL=OFF
			-DWITH_VA_INTEL:BOOL=OFF
			-DWITH_LAPACK:BOOL=OFF
			-DWITH_EIGEN:BOOL=ON
			-DWITH_JASPER:BOOL=ON
			-DWITH_JPEG:BOOL=ON
			-DWITH_PNG:BOOL=ON
			-DWITH_TIFF:BOOL=ON
			-DWITH_WEBP:BOOL=ON
			-DWITH_V4L:BOOL=OFF
			-DWITH-LIB4VL:BOOL=OFF
			-DBUILD_SHARED_LIBS:BOOL=ON
			-DBUILD_ANDROID_EXAMPLES:BOOL=OFF
			-DBUILD_DOCS:BOOL=OFF
			-DBUILD_PACKAGE:BOOL=OFF
			-DBUILD_PERF_TESTS:BOOL=OFF
			-DBUILD_TESTS:BOOL=OFF
			-DBUILD_WITH_DEBUG_INFO:BOOL=OFF
			-DBUILD_WITH_STATIC_CRT:BOOL=OFF
			-DBUILD_WITH_DYNAMIC_IPP:BOOL=OFF
			-DBUILD_FAT_JAVA_LIB:BOOL=OFF
			-DBUILD_ANDROID_SERVICE:BOOL=OFF
			-DBUILD_CUDA_STUBS:BOOL=OFF
			-DBUILD_ZLIB:BOOL=OFF
			-DBUILD_TIFF:BOOL=OFF
			-DBUILD_JASPER:BOOL=OFF
			-DBUILD_JPEG:BOOL=OFF
			-DBUILD_PNG:BOOL=OFF
			-DBUILD_OPENEXR:BOOL=OFF
			-DBUILD_TBB:BOOL=OFF
			-DBUILD_PROTOBUF:BOOL=OFF
			-DBUILD_EXAMPLES:BOOL=OFF
			-DENABLE_OMIT_FRAME_POINTER:BOOL=ON
			-DENABLE_FAST_MATH:BOOL=OFF
			-DENABLE_PRECOMPILED_HEADERS:BOOL=OFF
			-DEOPENCV_WARNINGS_ARE_ERRORS:BOOL=OFF
			-DANDROID_EXAMPLES_WITH_LIBS:BOOL=ON
			-DDOWNLOAD_EXTERNAL_TEST_DATA:BOOL=OFF
			-DBUILD_opencv_apps:BOOL=ON
			-DBUILD_opencv_cnn_3dobj:BOOL=OFF
			-DBUILD_opencv_ts:BOOL=OFF
			-DBUILD_opencv_world:BOOL=OFF
			-DBUILD_opencv_java:BOOL=OFF
			-DBUILD_opencv_python2:BOOL=OFF
			-DBUILD_opencv_python3:BOOL=OFF
			-DOPENCV_GENERATE_PKGCONFIG:BOOL=ON
			-DOPENCV_ENABLE_NONFREE:BOOL=ON
VAR_ARCH[x86_64]=	CMAKE_ARGS=-DCPU_BASELINE_DISABLE:STRING="FP16,POPCNT,FMA3"

post-patch:
	${REINPLACE_CMD} -e 's|share/OpenCV/doc|${DOCSDIR_REL}|g' \
		-e 's|share/OpenCV/samples|${EXAMPLESDIR_REL}|g' \
		${WRKSRC}/CMakeLists.txt
	${FIND} ${WRKSRC} -name '*.orig' -delete
	${REINPLACE_CMD} -e 's|__PREFIX__|${PREFIX}|' \
		${WRKSRC}/cmake/templates/opencv_run_all_tests_unix.sh.in \
		${WRKSRC}/cmake/templates/setup_vars_linux.sh.in \
		${WRKSRC}/cmake/templates/setup_vars_macosx.sh.in \

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/*.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/opencv_*

[FILE:796:descriptions/desc.primary]
OpenCV (Open Source Computer Vision Library) is released under a BSD
license and hence it is free for both academic and commercial use. It has
C++, C, Python and Java interfaces and supports Windows, Linux, Mac OS, iOS
and Android. OpenCV was designed for computational efficiency and with a
strong focus on real-time applications. Written in optimized C/C++, the
library can take advantage of multi-core processing. Enabled with OpenCL,
it can take advantage of the hardware acceleration of the underlying
heterogeneous compute platform.

Adopted all around the world, OpenCV has more than 47 thousand people of
user community and estimated number of downloads exceeding 14 million.
Usage ranges from interactive art, to mines inspection, stitching maps on
the web or through advanced robotics.


[FILE:198:descriptions/desc.core]
OpenCV (Open Source Computer Vision Library) is released under a BSD
license and hence it is free for both academic and commercial use. 

This package contains files of the core and improc modules.


[FILE:105:distinfo]
8df0079cdbe179748a18d44731af62a245a45ebf5085223dc03133954c662973     91027497 opencv-opencv-4.7.0.tar.gz


[FILE:4901:manifests/plist.primary]
bin/
 opencv_annotation
 opencv_interactive-calibration
 opencv_version
 opencv_visualisation
 setup_vars_opencv4.sh
include/opencv4/opencv2/
 calib3d.hpp
 core.hpp
 cvconfig.h
 features2d.hpp
 flann.hpp
 highgui.hpp
 imgcodecs.hpp
 ml.hpp
 objdetect.hpp
 opencv.hpp
 opencv_modules.hpp
 photo.hpp
 stitching.hpp
 video.hpp
 videoio.hpp
include/opencv4/opencv2/calib3d/
 calib3d.hpp
 calib3d_c.h
include/opencv4/opencv2/core/
 dualquaternion.hpp
 dualquaternion.inl.hpp
 quaternion.hpp
 quaternion.inl.hpp
include/opencv4/opencv2/core/detail/dispatch_helper.impl.hpp
include/opencv4/opencv2/core/hal/
 intrin_lasx.hpp
 intrin_rvv.hpp
 intrin_rvv_scalable.hpp
 simd_utils.impl.hpp
include/opencv4/opencv2/core/parallel/parallel_backend.hpp
include/opencv4/opencv2/core/parallel/backend/
 parallel_for.openmp.hpp
 parallel_for.tbb.hpp
include/opencv4/opencv2/core/utils/
 instrumentation.hpp
 tls.hpp
include/opencv4/opencv2/features2d/features2d.hpp
include/opencv4/opencv2/features2d/hal/interface.h
include/opencv4/opencv2/flann/
 all_indices.h
 allocator.h
 any.h
 autotuned_index.h
 composite_index.h
 config.h
 defines.h
 dist.h
 dummy.h
 dynamic_bitset.h
 flann.hpp
 flann_base.hpp
 general.h
 ground_truth.h
 hdf5.h
 heap.h
 hierarchical_clustering_index.h
 index_testing.h
 kdtree_index.h
 kdtree_single_index.h
 kmeans_index.h
 linear_index.h
 logger.h
 lsh_index.h
 lsh_table.h
 matrix.h
 miniflann.hpp
 nn_index.h
 object_factory.h
 params.h
 random.h
 result_set.h
 sampling.h
 saving.h
 simplex_downhill.h
 timer.h
include/opencv4/opencv2/highgui/
 highgui.hpp
 highgui_c.h
include/opencv4/opencv2/imgcodecs/
 imgcodecs.hpp
 imgcodecs_c.h
 ios.h
 macosx.h
include/opencv4/opencv2/imgcodecs/legacy/constants_c.h
include/opencv4/opencv2/imgproc/
 bindings.hpp
 segmentation.hpp
include/opencv4/opencv2/ml/
 ml.hpp
 ml.inl.hpp
include/opencv4/opencv2/objdetect/
 aruco_board.hpp
 aruco_detector.hpp
 aruco_dictionary.hpp
 charuco_detector.hpp
 detection_based_tracker.hpp
 face.hpp
 objdetect.hpp
include/opencv4/opencv2/photo/
 cuda.hpp
 photo.hpp
include/opencv4/opencv2/photo/legacy/constants_c.h
include/opencv4/opencv2/stitching/warpers.hpp
include/opencv4/opencv2/stitching/detail/
 autocalib.hpp
 blenders.hpp
 camera.hpp
 exposure_compensate.hpp
 matchers.hpp
 motion_estimators.hpp
 seam_finders.hpp
 timelapsers.hpp
 util.hpp
 util_inl.hpp
 warpers.hpp
 warpers_inl.hpp
include/opencv4/opencv2/video/
 background_segm.hpp
 tracking.hpp
 video.hpp
include/opencv4/opencv2/video/detail/tracking.detail.hpp
include/opencv4/opencv2/video/legacy/constants_c.h
include/opencv4/opencv2/videoio/
 cap_ios.h
 registry.hpp
 videoio.hpp
 videoio_c.h
include/opencv4/opencv2/videoio/legacy/constants_c.h
lib/
 libopencv_calib3d.so
 libopencv_calib3d.so.%%MAJOR%%
 libopencv_calib3d.so.%%SOVERSION%%
 libopencv_features2d.so
 libopencv_features2d.so.%%MAJOR%%
 libopencv_features2d.so.%%SOVERSION%%
 libopencv_flann.so
 libopencv_flann.so.%%MAJOR%%
 libopencv_flann.so.%%SOVERSION%%
 libopencv_highgui.so
 libopencv_highgui.so.%%MAJOR%%
 libopencv_highgui.so.%%SOVERSION%%
 libopencv_imgcodecs.so
 libopencv_imgcodecs.so.%%MAJOR%%
 libopencv_imgcodecs.so.%%SOVERSION%%
 libopencv_ml.so
 libopencv_ml.so.%%MAJOR%%
 libopencv_ml.so.%%SOVERSION%%
 libopencv_objdetect.so
 libopencv_objdetect.so.%%MAJOR%%
 libopencv_objdetect.so.%%SOVERSION%%
 libopencv_photo.so
 libopencv_photo.so.%%MAJOR%%
 libopencv_photo.so.%%SOVERSION%%
 libopencv_stitching.so
 libopencv_stitching.so.%%MAJOR%%
 libopencv_stitching.so.%%SOVERSION%%
 libopencv_video.so
 libopencv_video.so.%%MAJOR%%
 libopencv_video.so.%%SOVERSION%%
 libopencv_videoio.so
 libopencv_videoio.so.%%MAJOR%%
 libopencv_videoio.so.%%SOVERSION%%
lib/cmake/opencv4/
 OpenCVConfig-version.cmake
 OpenCVConfig.cmake
 OpenCVModules-release.cmake
 OpenCVModules.cmake
lib/pkgconfig/opencv4.pc
share/licenses/opencv4/
 SoftFloat-COPYING.txt
 ittnotify-LICENSE.BSD
 ittnotify-LICENSE.GPL
 libopenjp2-LICENSE
 libopenjp2-README.md
 opencl-headers-LICENSE.txt
 openexr-AUTHORS.ilmbase
 openexr-AUTHORS.openexr
 openexr-LICENSE
 quirc-LICENSE
share/opencv4/
 valgrind.supp
 valgrind_3rdparty.supp
share/opencv4/haarcascades/
 haarcascade_eye.xml
 haarcascade_eye_tree_eyeglasses.xml
 haarcascade_frontalcatface.xml
 haarcascade_frontalcatface_extended.xml
 haarcascade_frontalface_alt.xml
 haarcascade_frontalface_alt2.xml
 haarcascade_frontalface_alt_tree.xml
 haarcascade_frontalface_default.xml
 haarcascade_fullbody.xml
 haarcascade_lefteye_2splits.xml
 haarcascade_license_plate_rus_16stages.xml
 haarcascade_lowerbody.xml
 haarcascade_profileface.xml
 haarcascade_righteye_2splits.xml
 haarcascade_russian_plate_number.xml
 haarcascade_smile.xml
 haarcascade_upperbody.xml
share/opencv4/lbpcascades/
 lbpcascade_frontalcatface.xml
 lbpcascade_frontalface.xml
 lbpcascade_frontalface_improved.xml
 lbpcascade_profileface.xml
 lbpcascade_silverware.xml


[FILE:2601:manifests/plist.core]
include/opencv4/opencv2/imgproc.hpp
include/opencv4/opencv2/core/
 affine.hpp
 async.hpp
 base.hpp
 bindings_utils.hpp
 bufferpool.hpp
 check.hpp
 core.hpp
 core_c.h
 cuda.hpp
 cuda.inl.hpp
 cuda_stream_accessor.hpp
 cuda_types.hpp
 cv_cpu_dispatch.h
 cv_cpu_helper.h
 cvdef.h
 cvstd.hpp
 cvstd.inl.hpp
 cvstd_wrapper.hpp
 directx.hpp
 eigen.hpp
 fast_math.hpp
 mat.hpp
 mat.inl.hpp
 matx.hpp
 neon_utils.hpp
 ocl.hpp
 ocl_genbase.hpp
 opengl.hpp
 operations.hpp
 optim.hpp
 ovx.hpp
 persistence.hpp
 saturate.hpp
 simd_intrinsics.hpp
 softfloat.hpp
 sse_utils.hpp
 traits.hpp
 types.hpp
 types_c.h
 utility.hpp
 va_intel.hpp
 version.hpp
 vsx_utils.hpp
include/opencv4/opencv2/core/cuda/
 block.hpp
 border_interpolate.hpp
 color.hpp
 common.hpp
 datamov_utils.hpp
 dynamic_smem.hpp
 emulation.hpp
 filters.hpp
 funcattrib.hpp
 functional.hpp
 limits.hpp
 reduce.hpp
 saturate_cast.hpp
 scan.hpp
 simd_functions.hpp
 transform.hpp
 type_traits.hpp
 utility.hpp
 vec_distance.hpp
 vec_math.hpp
 vec_traits.hpp
 warp.hpp
 warp_reduce.hpp
 warp_shuffle.hpp
include/opencv4/opencv2/core/cuda/detail/
 color_detail.hpp
 reduce.hpp
 reduce_key_val.hpp
 transform_detail.hpp
 type_traits_detail.hpp
 vec_distance_detail.hpp
include/opencv4/opencv2/core/detail/
 async_promise.hpp
 exception_ptr.hpp
include/opencv4/opencv2/core/hal/
 hal.hpp
 interface.h
 intrin.hpp
 intrin_avx.hpp
 intrin_avx512.hpp
 intrin_cpp.hpp
 intrin_forward.hpp
 intrin_msa.hpp
 intrin_neon.hpp
 intrin_rvv071.hpp
 intrin_sse.hpp
 intrin_sse_em.hpp
 intrin_vsx.hpp
 intrin_wasm.hpp
 msa_macros.h
include/opencv4/opencv2/core/opencl/
 ocl_defs.hpp
 opencl_info.hpp
 opencl_svm.hpp
include/opencv4/opencv2/core/opencl/runtime/
 opencl_clblas.hpp
 opencl_clfft.hpp
 opencl_core.hpp
 opencl_core_wrappers.hpp
 opencl_gl.hpp
 opencl_gl_wrappers.hpp
 opencl_svm_20.hpp
 opencl_svm_definitions.hpp
 opencl_svm_hsa_extension.hpp
include/opencv4/opencv2/core/opencl/runtime/autogenerated/
 opencl_clblas.hpp
 opencl_clfft.hpp
 opencl_core.hpp
 opencl_core_wrappers.hpp
 opencl_gl.hpp
 opencl_gl_wrappers.hpp
include/opencv4/opencv2/core/utils/
 allocator_stats.hpp
 allocator_stats.impl.hpp
 filesystem.hpp
 fp_control_utils.hpp
 logger.defines.hpp
 logger.hpp
 logtag.hpp
 trace.hpp
include/opencv4/opencv2/imgproc/
 imgproc.hpp
 imgproc_c.h
 types_c.h
include/opencv4/opencv2/imgproc/detail/gcgraph.hpp
include/opencv4/opencv2/imgproc/hal/
 hal.hpp
 interface.h
lib/
 libopencv_core.so
 libopencv_core.so.%%MAJOR%%
 libopencv_core.so.%%SOVERSION%%
 libopencv_imgproc.so
 libopencv_imgproc.so.%%MAJOR%%
 libopencv_imgproc.so.%%SOVERSION%%


[FILE:457:patches/patch-3rdparty_ittnotify_include_ittnotify.h]
--- 3rdparty/ittnotify/include/ittnotify.h.orig	2022-12-28 14:31:52 UTC
+++ 3rdparty/ittnotify/include/ittnotify.h
@@ -146,7 +146,7 @@ The same ID may not be reused for differ
 #    define ITT_OS ITT_OS_WIN
 #  elif defined( __APPLE__ ) && defined( __MACH__ )
 #    define ITT_OS ITT_OS_MAC
-#  elif defined( __FreeBSD__ )
+#  elif defined( __FreeBSD__ ) || defined __DragonFly__
 #    define ITT_OS ITT_OS_FREEBSD
 #  else
 #    define ITT_OS ITT_OS_LINUX


[FILE:428:patches/patch-3rdparty_ittnotify_include_legacy_ittnotify.h]
--- 3rdparty/ittnotify/include/legacy/ittnotify.h.orig	2022-12-28 14:31:52 UTC
+++ 3rdparty/ittnotify/include/legacy/ittnotify.h
@@ -85,7 +85,7 @@
 #    define ITT_OS ITT_OS_WIN
 #  elif defined( __APPLE__ ) && defined( __MACH__ )
 #    define ITT_OS ITT_OS_MAC
-#  elif defined( __FreeBSD__ )
+#  elif defined( __FreeBSD__ ) || defined __DragonFly__
 #    define ITT_OS ITT_OS_FREEBSD
 #  else
 #    define ITT_OS ITT_OS_LINUX


[FILE:440:patches/patch-3rdparty_ittnotify_src_ittnotify_ittnotify__config.h]
--- 3rdparty/ittnotify/src/ittnotify/ittnotify_config.h.orig	2022-12-28 14:31:52 UTC
+++ 3rdparty/ittnotify/src/ittnotify/ittnotify_config.h
@@ -80,7 +80,7 @@
 #    define ITT_OS ITT_OS_WIN
 #  elif defined( __APPLE__ ) && defined( __MACH__ )
 #    define ITT_OS ITT_OS_MAC
-#  elif defined( __FreeBSD__ )
+#  elif defined( __FreeBSD__ ) || defined __DragonFly__
 #    define ITT_OS ITT_OS_FREEBSD
 #  else
 #    define ITT_OS ITT_OS_LINUX


[FILE:622:patches/patch-modules_core_include_opencv2_core_utils_filesystem.private.hpp]
--- modules/core/include/opencv2/core/utils/filesystem.private.hpp.orig	2022-12-28 14:31:52 UTC
+++ modules/core/include/opencv2/core/utils/filesystem.private.hpp
@@ -12,7 +12,7 @@
 #  elif defined WINRT || defined _WIN32_WCE
      /* not supported */
 #  elif defined __ANDROID__ || defined __linux__ || defined _WIN32 || \
-        defined __FreeBSD__ || defined __bsdi__ || defined __HAIKU__
+        defined __FreeBSD__ || defined __bsdi__ || defined __HAIKU__ || defined __DragonFly__ || defined __sun__
 #      define OPENCV_HAVE_FILESYSTEM_SUPPORT 1
 #  elif defined(__APPLE__)
 #    include <TargetConditionals.h>


[FILE:2056:patches/patch-modules_core_include_opencv2_core_utils_plugin__loader.private.hpp]
--- modules/core/include/opencv2/core/utils/plugin_loader.private.hpp.orig	2022-12-28 14:31:52 UTC
+++ modules/core/include/opencv2/core/utils/plugin_loader.private.hpp
@@ -12,7 +12,7 @@
 
 #if defined(_WIN32)
 #include <windows.h>
-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__HAIKU__) || defined(__GLIBC__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__HAIKU__) || defined(__GLIBC__) || defined(__DragonFly__)
 #include <dlfcn.h>
 #endif
 
@@ -65,7 +65,7 @@ void* getSymbol_(LibHandle_t h, const ch
 {
 #if defined(_WIN32)
     return (void*)GetProcAddress(h, symbolName);
-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__HAIKU__) || defined(__GLIBC__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__HAIKU__) || defined(__GLIBC__) || defined(__DragonFly__)
     return dlsym(h, symbolName);
 #endif
 }
@@ -79,7 +79,7 @@ LibHandle_t libraryLoad_(const FileSyste
 # else
     return LoadLibraryW(filename.c_str());
 #endif
-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__HAIKU__) || defined(__GLIBC__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__HAIKU__) || defined(__GLIBC__) || defined(__DragonFly__)
     void* handle = dlopen(filename.c_str(), RTLD_NOW);
     CV_LOG_IF_DEBUG(NULL, !handle, "dlopen() error: " << dlerror());
     return handle;
@@ -91,7 +91,7 @@ void libraryRelease_(LibHandle_t h)
 {
 #if defined(_WIN32)
     FreeLibrary(h);
-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__HAIKU__) || defined(__GLIBC__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__HAIKU__) || defined(__GLIBC__) || defined(__DragonFly__)
     dlclose(h);
 #endif
 }


[FILE:457:patches/patch-modules_core_src_downhill__simplex.cpp]
Avoid DS conflict on SunOS

--- modules/core/src/downhill_simplex.cpp.orig	2022-12-28 14:31:52 UTC
+++ modules/core/src/downhill_simplex.cpp
@@ -449,7 +449,9 @@ protected:
     }
 };
 
-
+#ifdef __sun__
+#undef DS
+#endif
 // both minRange & minError are specified by termcrit.epsilon;
 // In addition, user may specify the number of iterations that the algorithm does.
 Ptr<DownhillSolver> DownhillSolver::create( const Ptr<MinProblemSolver::Function>& f,


[FILE:391:patches/patch-modules_core_src_parallel.cpp]
--- modules/core/src/parallel.cpp.orig	2022-12-28 14:31:52 UTC
+++ modules/core/src/parallel.cpp
@@ -58,6 +58,7 @@
 
 #if defined __unix__ || defined __APPLE__ || defined __GLIBC__ \
     || defined __HAIKU__ || defined __EMSCRIPTEN__ \
+    || defined __DragonFly__ \
     || defined __FreeBSD__ || defined __NetBSD__ || defined __OpenBSD__
     #include <unistd.h>
     #include <stdio.h>


[FILE:1051:patches/patch-modules_core_src_system.cpp]
--- modules/core/src/system.cpp.orig	2022-12-28 14:31:52 UTC
+++ modules/core/src/system.cpp
@@ -131,7 +131,7 @@ void* allocSingletonNewBuffer(size_t siz
 #include <cstdlib>        // std::abort
 #endif
 
-#if defined __ANDROID__ || defined __unix__ || defined __FreeBSD__ || defined __OpenBSD__ || defined __HAIKU__ || defined __Fuchsia__
+#if defined __ANDROID__ || defined __unix__ || defined __FreeBSD__ || defined __OpenBSD__ || defined __HAIKU__ || defined __Fuchsia__ || defined __DragonFly__ || defined __sun__
 #  include <unistd.h>
 #  include <fcntl.h>
 #if defined __QNX__
@@ -255,7 +255,7 @@ std::wstring GetTempFileNameWinRT(std::w
 #include "omp.h"
 #endif
 
-#if defined __unix__ || defined __APPLE__ || defined __EMSCRIPTEN__ || defined __FreeBSD__ || defined __GLIBC__ || defined __HAIKU__
+#if defined __unix__ || defined __APPLE__ || defined __EMSCRIPTEN__ || defined __FreeBSD__ || defined __GLIBC__ || defined __HAIKU__ || defined __DragonFly__ || defined __sun__
 #include <unistd.h>
 #include <stdio.h>
 #include <sys/types.h>


[FILE:1683:patches/patch-modules_core_src_utils_filesystem.cpp]
--- modules/core/src/utils/filesystem.cpp.orig	2022-12-28 14:31:52 UTC
+++ modules/core/src/utils/filesystem.cpp
@@ -34,7 +34,7 @@
 #include <errno.h>
 #include <io.h>
 #include <stdio.h>
-#elif defined __linux__ || defined __APPLE__ || defined __HAIKU__ || defined __FreeBSD__
+#elif defined __linux__ || defined __APPLE__ || defined __HAIKU__ || defined __FreeBSD__ || defined __DragonFly__ || defined __sun__
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
@@ -194,7 +194,7 @@ cv::String getcwd()
     sz = GetCurrentDirectoryA((DWORD)buf.size(), buf.data());
     return cv::String(buf.data(), (size_t)sz);
 #endif
-#elif defined __linux__ || defined __APPLE__ || defined __HAIKU__ || defined __FreeBSD__
+#elif defined __linux__ || defined __APPLE__ || defined __HAIKU__ || defined __FreeBSD__ || defined __DragonFly__ || defined __sun__
     for(;;)
     {
         char* p = ::getcwd(buf.data(), buf.size());
@@ -228,7 +228,7 @@ bool createDirectory(const cv::String& p
 #else
     int result = _mkdir(path.c_str());
 #endif
-#elif defined __linux__ || defined __APPLE__ || defined __HAIKU__ || defined __FreeBSD__
+#elif defined __linux__ || defined __APPLE__ || defined __HAIKU__ || defined __FreeBSD__ || defined __DragonFly__ || defined __sun__
     int result = mkdir(path.c_str(), 0777);
 #else
     int result = -1;
@@ -343,7 +343,7 @@ private:
     Impl& operator=(const Impl&); // disabled
 };
 
-#elif defined __linux__ || defined __APPLE__ || defined __HAIKU__ || defined __FreeBSD__
+#elif defined __linux__ || defined __APPLE__ || defined __HAIKU__ || defined __FreeBSD__ || defined __DragonFly__ || defined __sun__
 
 struct FileLock::Impl
 {


[FILE:302:patches/patch-modules_flann_include_opencv2_flann_defines.h]
--- modules/flann/include/opencv2/flann/defines.h.orig	2022-12-28 14:31:52 UTC
+++ modules/flann/include/opencv2/flann/defines.h
@@ -60,6 +60,9 @@
 #define FLANN_PLATFORM_32_BIT
 #endif
 
+#ifdef __sun__
+#undef CS
+#endif
 
 #undef FLANN_ARRAY_LEN
 #define FLANN_ARRAY_LEN(a) (sizeof(a)/sizeof(a[0]))


[FILE:298:patches/patch-modules_videoio_src_cap__v4l.cpp]
--- modules/videoio/src/cap_v4l.cpp.orig	2022-12-28 14:31:52 UTC
+++ modules/videoio/src/cap_v4l.cpp
@@ -227,7 +227,9 @@ make & enjoy!
 #include <poll.h>
 
 #ifdef HAVE_CAMV4L2
+#ifdef __linux__
 #include <asm/types.h>          /* for videodev2.h */
+#endif
 #include <linux/videodev2.h>
 #endif
 


[FILE:1363:files/FindOpenCVCore.cmake.in]
# Module for finding the core components of OpenCV installed by
# graphics/opencv-core.  Use for projects that require only
# opencv_core or opencv_imgproc.  Others should use the
# standard OpenCV CMake find routines provided by graphics/opencv.
#
# This module provides:
# OPENCVCORE_FOUND - defined if the required OpenCV components are found
# OpenCV_INCLUDE_DIRS - the path to the OpenCV headers
# OpenCV_LIBS - the OpenCV libraries to link to
# OpenCV_VERSION - the version of OpenCV
#
# Example usage: find_package( OpenCVCore COMPONENTS core imgproc REQUIRED )

include( FindPackageHandleStandardArgs )

set( OpenCV_VERSION %%OCV_VERSION%% )

find_path( OpenCV_INCLUDE_DIRS NAMES opencv2/core/core.hpp )

if( OpenCVCore_FIND_COMPONENTS )
  foreach( component ${OpenCVCore_FIND_COMPONENTS} )
    string( TOUPPER ${component} _COMPONENT )
    set( OPENCV_USE_${_COMPONENT} 1 )
  endforeach()
endif()

# opencv_core is always required
find_library( OPENCV_CORE_LIBRARY NAMES opencv_core )

if( OPENCV_USE_IMGPROC OR NOT OpenCVCore_FIND_COMPONENTS )
  find_library( OPENCV_IMGPROC_LIBRARY NAMES opencv_imgproc )
endif()

set( OpenCV_LIBS ${OPENCV_CORE_LIBRARY} ${OPENCV_IMGPROC_LIBRARY} )

find_package_handle_standard_args( OpenCVCore DEFAULT_MSG OpenCV_LIBS OpenCV_INCLUDE_DIRS )

mark_as_advanced( ${OpenCV_LIBS} ${OpenCV_INCLUDE_DIRS} ${OpenCV_VERSION} )

