# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ragel
VERSION=		6.10
REVISION=		1
KEYWORDS=		devel
VARIANTS=		std
SDESC[std]=		Finite state machine compiler
HOMEPAGE=		https://www.colm.net/open-source/ragel/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://www.colm.net/files/ragel/
DISTFILE[1]=		ragel-6.10.tar.gz:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			examples
			man

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			gmake c++:primary

LICENSE=		GPLv2+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"_RAGEL_H"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/ragel/ragel.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/ragel

MUST_CONFIGURE=		gnu

post-install:
	# install examplesdir
	${MKDIR} ${STAGEDIR}${STD_EXAMPLESDIR}
	(cd ${WRKSRC}/test && \
		${COPYTREE_SHARE} . ${STAGEDIR}${STD_EXAMPLESDIR})
	# remove docs (requires latex and transfig to build pdf files)
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc

[FILE:706:descriptions/desc.primary]
Ragel compiles finite state machines from regular languages into runnable C
code. Ragel state machines can not only recognize byte sequences as regular
expression machines do, but can also execute code at arbitrary points in
the recognition of a regular language.

When you wish to write down a regular language you start with some simple
regular language and build a bigger one using the regular language
operators union, concatenation, kleene star, intersection and subtraction.
This is precisely the way you describe to Ragel how to compile your finite
state machines. Ragel also understands operators that insert function calls
into machines and operators that control any non-determinism in machines.


[FILE:96:distinfo]
5f156edb65d20b856d638dd9ee2dfb43285914d9aa2b6ec779dac0270cd56c3f      1232993 ragel-6.10.tar.gz


[FILE:10:manifests/plist.primary]
bin/ragel


[FILE:1326:manifests/plist.examples]
share/examples/ragel/
 Makefile
 Makefile.am
 Makefile.in
 README
 atoi1.rl
 atoi2.rl
 atoi3.rl
 awkemu.rl
 builtin.rl
 call1.rl
 call2.rl
 call3.rl
 checkeofact.txl
 clang1.rl
 clang2.rl
 clang3.rl
 clang4.rl
 cond1.rl
 cond2.rl
 cond3.rl
 cond4.rl
 cond5.rl
 cond6.rl
 cond7.rl
 cppscan1.h
 cppscan1.rl
 cppscan2.rl
 cppscan3.rl
 cppscan4.rl
 cppscan5.rl
 cppscan6.rl
 element1.rl
 element2.rl
 element3.rl
 eofact.h
 eofact.rl
 erract1.rl
 erract2.rl
 erract3.rl
 erract4.rl
 erract5.rl
 erract6.rl
 erract7.rl
 erract8.rl
 erract9.rl
 export1.rl
 export2.rl
 export3.rl
 export4.rl
 fnext1.rl
 forder1.rl
 forder2.rl
 forder3.rl
 gotocallret1.rl
 gotocallret2.rl
 high1.rl
 high2.rl
 high3.rl
 import1.rl
 include1.rl
 include2.rl
 java1.rl
 java2.rl
 keller1.rl
 langtrans_c.sh
 langtrans_c.txl
 langtrans_csharp.sh
 langtrans_csharp.txl
 langtrans_d.sh
 langtrans_d.txl
 langtrans_java.sh
 langtrans_java.txl
 langtrans_ruby.sh
 langtrans_ruby.txl
 lmgoto.rl
 mailbox1.h
 mailbox1.rl
 mailbox2.rl
 mailbox3.rl
 minimize1.rl
 patact.rl
 range.rl
 recdescent1.rl
 recdescent2.rl
 recdescent3.rl
 repetition.rl
 rlscan.rl
 ruby1.rl
 runtests
 runtests.in
 scan1.rl
 scan2.rl
 scan3.rl
 scan4.rl
 stateact1.rl
 statechart1.rl
 strings1.rl
 strings2.h
 strings2.rl
 testcase.txl
 tokstart1.rl
 union.rl
 xml.rl
 xmlcommon.rl


[FILE:23:manifests/plist.man]
share/man/man1/ragel.1

