# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		zoom
VERSION=		1.1.5
KEYWORDS=		games
VARIANTS=		standard
SDESC[standard]=	Player for Z-Code, TADS and HUGO stories or games
HOMEPAGE=		https://www.logicalshift.co.uk/unix/zoom/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://www.logicalshift.co.uk/unix/zoom/
DISTFILE[1]=		zoom-1.1.5.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		t1lib:dev:standard
BUILDRUN_DEPENDS=	t1lib:primary:standard

USES=			gmake png zlib perl:build
XORG_COMPONENTS=	x11 xft xrender

LICENSE=		LGPL21+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		LGPL21+:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/src/zmachine.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		games/zoom

MUST_CONFIGURE=		gnu

post-install:
	${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	cd ${WRKSRC}/manual && ${INSTALL_DATA} idx *.html *.gif *.png ${STAGEDIR}${STD_DOCDIR}

[FILE:779:descriptions/desc.primary]
Zoom is a player for Z-Code, TADS and HUGO stories or games. These are
usually text adventures ('interactive fiction'), and were first created by
Infocom with the Zork series of games. Throughout the 80's, Infocom
released many interactive fiction stories before their ambitions to enter
the database market finally brought them low.

Zoom is quite capable of playing Zork, so those of you who have access to
the increasingly rare Infocom games can continue to play them. However,
back in 1993, Graham Nelson released Curses and more importantly the Inform
compiler that created it. There is now a considerable collection of new
interactive fiction of variable quality available. Baf's guide to the
interactive fiction archive is absolutely essential for those new to the
scene.


[FILE:96:distinfo]
f2967f1c0555df8d4ae90443502d14cf33b6ac65b602f499fbe3e9e38e55dbbc      2185098 zoom-1.1.5.tar.gz


[FILE:27:manifests/plist.primary]
bin/zoom
share/zoom/zoomrc


[FILE:223:manifests/plist.docs]
share/doc/zoom/
 colours.png
 configXwin.html
 configmac.html
 fonts.png
 game.png
 generalset.png
 idx
 index.html
 intro.html
 resources.png
 troubleshooting.html
 ui.png
 zicon.gif
 zoom-icon.png
 zoom.html
 ztitle.html


[FILE:420:patches/patch-src_interp.c]
$NetBSD: patch-src_interp.c,v 1.1 2019/07/04 10:17:34 nia Exp $

Fix C99 inline usage.

--- src/interp.c.orig	2011-11-05 11:40:53 UTC
+++ src/interp.c
@@ -232,7 +232,7 @@ ZFrame* call_routine(ZDWord* pc, ZStack*
   return newframe;
 }
 
-inline void store(ZStack* stack, int var, ZWord value)
+void store(ZStack* stack, int var, ZWord value)
 {
 #ifdef DEBUG
   printf_debug("Storing %i in Variable #%x\n", value, var);


[FILE:481:patches/patch-src_tokenise.c]
$NetBSD: patch-src_tokenise.c,v 1.2 2015/07/27 22:24:51 wiz Exp $

Fix C99 inline usage.

--- src/tokenise.c.orig	2011-11-05 11:40:53 UTC
+++ src/tokenise.c
@@ -154,9 +154,9 @@ ZDictionary* dictionary_cache(const ZUWo
 
 int cache = 1;
 
-inline ZUWord lookup_word(unsigned int*  word,
-			  int            wordlen,
-			  ZUWord         dct)
+ZUWord lookup_word(unsigned int*  word,
+		   int            wordlen,
+		   ZUWord         dct)
 {
   ZByte packed[12];
   int zscii_len;

