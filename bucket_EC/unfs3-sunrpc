# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		unfs3-sunrpc
VERSION=		0.9.23
REVISION=		1
KEYWORDS=		net
VARIANTS=		std
SDESC[std]=		User-space implementation of the NFSv3 server spec
HOMEPAGE=		https://unfs3.github.io
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/unfs3/unfs3/releases/download/unfs3-0.9.23/
DISTFILE[1]=		unfs3-0.9.23.tar.gz:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			man

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

NOT_FOR_OPSYS=		linux

USES=			autoreconf bison:build gmake pkgconfig

DISTNAME=		unfs3-0.9.23

LICENSE=		BSD3CLAUSE:primary
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		net/unfs3

MUST_CONFIGURE=		gnu
CONFIGURE_ENV=		YACC=bison

SINGLE_JOB=		yes

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/sbin/unfsd

[FILE:531:descriptions/desc.primary]
UNFS3 is a user-space implementation of the NFSv3 server specification.

It supports all NFSv3 procedures with the exception of the READDIRPLUS 
procedure. It tries to provide as much information to NFS clients as 
possible, within the limits possible from user-space.

This is the last version before UNFS3 dropped SunRPC support, accidentally 
making the project Linux-only. This port will be dropped when the issue is 
resolved upstream.

Since it runs in user-space, it can be used in jails on FreeBSD as well as
DragonFlyBSD.


[FILE:98:distinfo]
380b36d6559c0b18100807e93872da72b64415427566992e8bf34673a161d4c7       147949 unfs3-0.9.23.tar.gz


[FILE:11:manifests/plist.primary]
sbin/unfsd


[FILE:45:manifests/plist.man]
share/man/man7/tags.7
share/man/man8/unfsd.8


[FILE:381:patches/patch-Config_Makefile.in]
--- Config/Makefile.in.orig	2023-01-04 21:24:49.419237000 +0100
+++ Config/Makefile.in	2023-01-04 21:24:59.476740000 +0100
@@ -16,7 +16,7 @@
 	$(AR) crs lib.a $(OBJS)
 
 y.tab.h y.tab.c: $(srcdir)/exports.y
-	$(YACC) -d $(srcdir)/exports.y
+	$(YACC) -dy $(srcdir)/exports.y
 
 y.tab.o: y.tab.c $(srcdir)/exports.h $(top_srcdir)/nfs.h $(top_srcdir)/mount.h $(top_srcdir)/daemon.h
 


[FILE:199:patches/patch-Config_exports.l]
--- Config/exports.l.orig	2023-01-07 22:25:45.429616000 +0100
+++ Config/exports.l	2023-01-07 22:26:06.542037000 +0100
@@ -50,6 +50,7 @@
 
 %option nounput
 %option noinput
+%option noyywrap
 
 %%
 


[FILE:203:patches/patch-attr.c]
--- attr.c.orig	2022-11-17 12:28:15 UTC
+++ attr.c
@@ -7,6 +7,8 @@
 
 #include "config.h"
 
+#include <stdlib.h>
+#include <string.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <rpc/rpc.h>


[FILE:537:patches/patch-configure.ac]
--- configure.ac.orig	2019-06-12 14:22:57 UTC
+++ configure.ac
@@ -31,14 +31,12 @@ AC_CHECK_FUNCS(xdr_int xdr_u_int)
 AC_CHECK_FUNCS(xdr_int32 xdr_int32_t)
 AC_CHECK_FUNCS(xdr_uint32 xdr_uint32_t xdr_u_int32_t)
 AC_CHECK_FUNCS(xdr_uint64 xdr_uint64_t xdr_u_int64_t)
-AC_CHECK_FUNCS(svc_getreq_poll)
 AC_CHECK_FUNCS(statvfs)
 AC_CHECK_FUNCS(seteuid setegid)
 AC_CHECK_FUNCS(setresuid setresgid)
 AC_CHECK_FUNCS(vsyslog)
 AC_CHECK_FUNCS(lchown)
 AC_CHECK_FUNCS(setgroups)
-UNFS3_SOLARIS_RPC
 UNFS3_PORTMAP_DEFINE
 UNFS3_COMPILE_WARNINGS
 


[FILE:846:patches/patch-fh.c]
--- fh.c.orig	2022-11-17 12:27:07 UTC
+++ fh.c
@@ -86,7 +86,7 @@ uint32 get_gen(backend_statstruct obuf, U(int fd), U(c
     backend_setegid(0);
     backend_seteuid(0);
 
-    if (fd != FD_NONE) {
+    if (fd != -1) {
 	res = ioctl(fd, EXT2_IOC_GETVERSION, &gen);
 	if (res == -1)
 	    gen = 0;
@@ -220,7 +220,7 @@ unfs3_fh_t fh_comp_raw(const char *path, struct svc_re
 
     fh.dev = buf.st_dev;
     fh.ino = buf.st_ino;
-    fh.gen = backend_get_gen(buf, FD_NONE, path);
+    fh.gen = backend_get_gen(buf, -1, path);
 
     /* special case for root directory */
     if (strcmp(path, "/") == 0)
@@ -341,7 +341,7 @@ post_op_fh3 fh_extend_type(nfs_fh3 fh, const char *pat
     st_cache = buf;
 
     return fh_extend_post(fh, buf.st_dev, buf.st_ino,
-			  backend_get_gen(buf, FD_NONE, path));
+			  backend_get_gen(buf, -1, path));
 }
 
 /*


[FILE:287:patches/patch-fh.h]
--- fh.h.orig	2022-11-17 12:27:31 UTC
+++ fh.h
@@ -30,8 +30,6 @@ typedef struct {
 #define FH_ANY 0
 #define FH_DIR 1
 
-#define FD_NONE (-1)			/* used for get_gen */
-
 extern int st_cache_valid;		/* stat value is valid */
 extern backend_statstruct st_cache;	/* cached stat value */
 


[FILE:591:patches/patch-md5.c]
--- md5.c.orig	2022-11-17 12:35:16 UTC
+++ md5.c
@@ -54,6 +54,7 @@
 
 #include "md5.h"
 #include <string.h>
+#include <stdint.h>
 
 #undef BYTE_ORDER		       /* 1 = big-endian, -1 = little-endian, 
 				          0 = unknown */
@@ -162,7 +163,7 @@ static void md5_process(md5_state_t * pms, const md5_b
 	     * On little-endian machines, we can process properly aligned
 	     * data without copying it.
 	     */
-	    if (!((data - (const md5_byte_t *) 0) & 3)) {
+	    if (((uintptr_t)data & 3) == 0) {
 		/* data are properly aligned */
 		X = (const md5_word_t *) data;
 	    } else {


[FILE:419:patches/patch-nfs.c]
--- nfs.c.orig	2022-11-17 12:27:52 UTC
+++ nfs.c
@@ -209,7 +209,7 @@ LOOKUP3res *nfsproc3_lookup_3_svc(LOOKUP3args * argp, 
 		strcmp(argp->what.name, "..") == 0) {
 		fh = fh_comp_ptr(obj, rqstp, 0);
 	    } else {
-		gen = backend_get_gen(buf, FD_NONE, obj);
+		gen = backend_get_gen(buf, -1, obj);
 		fh = fh_extend(argp->what.dir, buf.st_dev, buf.st_ino, gen);
 		fh_cache_add(buf.st_dev, buf.st_ino, obj);
 	    }


[FILE:257:patches/patch-nfs.h]
--- nfs.h.orig	2022-11-07 12:11:48 UTC
+++ nfs.h
@@ -65,6 +65,9 @@ typedef int32_t int32;
 #ifdef __APPLE__
 typedef off_t off64_t;
 #endif
+#if defined __NetBSD__ || defined __DragonFly__
+typedef off_t off64_t;
+#endif
 #endif
 
 typedef char *filename3;

