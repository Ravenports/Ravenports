# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		clang
VERSION=		15.0.6
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	C language family frontend for LLVM 15.0
HOMEPAGE=		http://llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.6/
			http://llvm.org/releases/15.0.6/
DISTFILE[1]=		clang-15.0.6.src.tar.xz:main
DISTFILE[2]=		clang-tools-extra-15.0.6.src.tar.xz:main
DF_INDEX=		1 2
SPKGS[standard]=	complete
			compiler
			extra
			dynlibs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	llvm:single:standard
EXRUN[compiler]=	clang:dynlibs:standard

USES=			cmake ninja ncurses zlib execinfo shebangfix
			python:build c++:compiler,extra
GNOME_COMPONENTS=	libxml2

DISTNAME=		clang-15.0.6.src

LICENSE=		CUSTOM1:compiler
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
SHEBANG_FILES=		utils/hmaptool/hmaptool
			tools/scan-view/bin/scan-view
			tools/clang-format/git-clang-format
			tools/clang-format/clang-format-diff.py
			tools/extra/clang-tidy/tool/clang-tidy-diff.py
			tools/extra/clang-tidy/tool/run-clang-tidy.py
			tools/extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
			tools/scan-build-py/bin/analyze-build
			tools/scan-build-py/bin/intercept-build
			tools/scan-build-py/bin/scan-build
			tools/scan-build-py/libexec/analyze-cc
			tools/scan-build-py/libexec/analyze-c++
			tools/scan-build-py/libexec/intercept-cc
			tools/scan-build-py/libexec/intercept-c++

PLIST_SUB=		LLVM_RELEASE="15.0.6"
			LLVM_MAJOR="15"
			LLVM_SOVERSION="15.0"

CFLAGS=			-O2
			-pipe
			-DNDEBUG
CXXFLAGS=		-O2
			-pipe
			-DNDEBUG
CMAKE_ARGS=		-DLLVM_BUILD_LLVM_DYLIB=ON
			-DLLVM_LINK_LLVM_DYLIB=ON
			-DLLVM_PARALLEL_LINK_JOBS=1
			-DLLVM_PARALLEL_COMPILE_JOBS={{MAKE_JOBS_NUMBER}}
			-DLLVM_INCLUDE_TESTS:BOOL=OFF
			-DLLVM_BUILD_32_BITS:BOOL=OFF
			-DLLVM_ENABLE_RTTI=ON
			-DGCC_INSTALL_PREFIX={{LOCALBASE}}/toolchain/ravensys-gcc
			-DCLANG_ENABLE_CLANGD:BOOL=OFF
			-DPython3_EXECUTABLE={{PYTHON_CMD}}
VAR_OPSYS[freebsd]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
			CMAKE_ARGS=-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"
VAR_OPSYS[sunos]=	CMAKE_ARGS=-DCMAKE_SKIP_RPATH:BOOL=TRUE
			LDFLAGS=-Wl,-R{{LOCALBASE}}/llvm/lib
VAR_OPSYS[linux]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
			CMAKE_ARGS=-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"
VAR_OPSYS[dragonfly]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
			CMAKE_ARGS=-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"

post-patch:
	${REINPLACE_CMD} -e 's,/usr/local/,${LOCALBASE}/,' \
		${WRKSRC}/lib/Driver/ToolChains/CommonArgs.cpp
	${REINPLACE_CMD} \
		-e 's|@LOCALBASE@|${LOCALBASE}|' \
		-e 's|@RAVEN_GCC@|${LOCALBASE}/toolchain/ravensys-gcc/${ASLIB}|' \
		-e 's|@RAVEN_GCC_TARGET@|${LOCALBASE}/toolchain/ravensys-gcc/${ASLIB}/gcc/${CONFIGURE_TARGET}/11.2.0|' \
		-e 's|@RAVEN_GXX_HEADERS_DIR@|${LOCALBASE}/toolchain/ravensys-gcc/include/c++/11.2.0|' \
		${WRKSRC}/lib/Driver/ToolChains/DragonFly.cpp \
		${WRKSRC}/lib/Driver/ToolChains/FreeBSD.cpp \
		${WRKSRC}/lib/Driver/ToolChains/Gnu.cpp \
		${WRKSRC}/lib/Lex/InitHeaderSearch.cpp

post-patch-dragonfly:
	# Remove headers that conflict with /usr/include
	${REINPLACE_CMD} \
		-e '/ limits.h/d' \
		-e '/ stdalign.h/d' \
		-e '/ stdarg.h/d' \
		-e '/ stdbool.h/d' \
		-e '/ stddef.h/d' \
		-e '/ stdint.h/d' \
		-e '/ stdnoreturn.h/d' \
		${WRKSRC}/lib/Headers/CMakeLists.txt

post-install:
	${RMDIR} ${STAGEDIR}${PREFIX}/include/clang-tidy/plugin
	${RMDIR} ${STAGEDIR}${PREFIX}/include/clang-tidy/misc/ConfusableTable
	${INSTALL_PROGRAM} ${WRKDIR}/.build/bin/clang-tblgen \
		${STAGEDIR}${PREFIX}/bin/
.for F in c-index-test clang-15 clang-check clang-doc clang-format \
	clang-extdef-mapping clang-offload-bundler \
	clang-move clang-offload-wrapper clang-refactor clang-rename clang-apply-replacements \
	clang-scan-deps clang-change-namespace clang-include-fixer clang-query \
	clang-reorder-fields clang-tidy find-all-symbols clang-linker-wrapper \
	clang-nvlink-wrapper clang-repl clang-offload-packager clang-pseudo \
	modularize diagtool pp-trace #clangd
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/${F}
.endfor
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libclang.${LIBEXT}
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libclang-cpp.${LIBEXT}

post-extract:
	${MV} ${WRKDIR}/clang-tools-extra-15.0.6.src \
		${WRKDIR}/clang-tools-extra
	# hack around clang 12.0.0 bug
	${CP} -a ${WRKDIR}/clang-tools-extra ${WRKSRC}/tools/extra

post-patch-freebsd:
	# Remove headers that conflict with /usr/include
	${REINPLACE_CMD} \
		-e '/ limits.h/d' \
		-e '/ stdalign.h/d' \
		-e '/ stdarg.h/d' \
		-e '/ stdatomic.h/d' \
		-e '/ stdbool.h/d' \
		-e '/ stddef.h/d' \
		-e '/ stdint.h/d' \
		-e '/ stdnoreturn.h/d' \
		-e '/ varargs.h/d' \
		${WRKSRC}/lib/Headers/CMakeLists.txt

[FILE:842:descriptions/desc.compiler]
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies. Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them. The name "LLVM" itself is not an
acronym; it is the full name of the project.

This package contains Clang is an "LLVM native" C/C++/Objective-C
compiler, which aims to deliver amazingly fast compiles (e.g. about 3x
faster than GCC when compiling Objective-C code in a debug
configuration), extremely useful error and warning messages and to
provide a platform for building great source level tools. The Clang
Static Analyzer is a tool that automatically finds bugs in your code,
and is a great example of the sort of tool that can be built using
the Clang frontend as a library to parse C/C++ code.


[FILE:558:descriptions/desc.extra]
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies. Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them. The name "LLVM" itself is not an
acronym; it is the full name of the project.

This package holds tools that are developed as part of the LLVM compiler
infrastructure project and the Clang frontend.  These tools are kept in a
separate "extra" repository to allow lighter weight checkouts of the core
Clang codebase.


[FILE:445:descriptions/desc.dynlibs]
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies. Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them. The name "LLVM" itself is not an
acronym; it is the full name of the project.

This package contains the dynamic clang libraries which are potentially
dependencies for ports that require clang to build.


[FILE:216:distinfo]
10119ae195f1b4f979fe42e67b781e175b0c0d4e982fd6a2f44c4aa7fc925233     18838320 clang-15.0.6.src.tar.xz
92b1714294efe13906d3b3f87d3273ea9eb38cb7f3b78631820086f0b0173b25      3080252 clang-tools-extra-15.0.6.src.tar.xz


[FILE:19818:manifests/plist.compiler]
%%ONLY-DRAGONFLY%%lib/clang/%%LLVM_RELEASE%%/include/
 stdatomic.h
 varargs.h
%%ONLY-LINUX%%lib/clang/%%LLVM_RELEASE%%/include/
 limits.h
 stdalign.h
 stdarg.h
 stdatomic.h
 stdbool.h
 stddef.h
 stdint.h
 stdnoreturn.h
 varargs.h
%%ONLY-NETBSD%%lib/clang/%%LLVM_RELEASE%%/include/
 limits.h
 stdalign.h
 stdarg.h
 stdatomic.h
 stdbool.h
 stddef.h
 stdint.h
 stdnoreturn.h
 varargs.h
%%ONLY-SUNOS%%lib/clang/%%LLVM_RELEASE%%/include/
 limits.h
 stdalign.h
 stdarg.h
 stdatomic.h
 stdbool.h
 stddef.h
 stdint.h
 stdnoreturn.h
 varargs.h
bin/
 c-index-test
 clang
 clang++
 clang-%%LLVM_MAJOR%%
 clang-check
 clang-cl
 clang-cpp
 clang-extdef-mapping
 clang-format
 clang-offload-bundler
 clang-offload-wrapper
 clang-refactor
 clang-rename
 clang-scan-deps
 clang-tblgen
 diagtool
 git-clang-format
 hmaptool
 scan-build
 scan-view
include/clang-c/
 BuildSystem.h
 CXCompilationDatabase.h
 CXErrorCode.h
 CXString.h
 Documentation.h
 ExternC.h
 FatalErrorHandler.h
 Index.h
 Platform.h
 Rewrite.h
include/clang/APINotes/
 APINotesYAMLCompiler.h
 Types.h
include/clang/ARCMigrate/
 ARCMT.h
 ARCMTActions.h
 FileRemapper.h
include/clang/AST/
 APValue.h
 AST.h
 ASTConcept.h
 ASTConsumer.h
 ASTContext.h
 ASTContextAllocate.h
 ASTDiagnostic.h
 ASTDumper.h
 ASTDumperUtils.h
 ASTFwd.h
 ASTImportError.h
 ASTImporter.h
 ASTImporterLookupTable.h
 ASTImporterSharedState.h
 ASTLambda.h
 ASTMutationListener.h
 ASTNodeTraverser.h
 ASTStructuralEquivalence.h
 ASTTypeTraits.h
 ASTUnresolvedSet.h
 ASTVector.h
 AbstractBasicReader.h
 AbstractBasicReader.inc
 AbstractBasicWriter.h
 AbstractBasicWriter.inc
 AbstractTypeReader.h
 AbstractTypeReader.inc
 AbstractTypeWriter.h
 AbstractTypeWriter.inc
 Attr.h
 AttrImpl.inc
 AttrIterator.h
 AttrNodeTraverse.inc
 AttrTextNodeDump.inc
 AttrVisitor.h
 AttrVisitor.inc
 Attrs.inc
 Availability.h
 BaseSubobject.h
 BuiltinTypes.def
 CXXInheritance.h
 CXXRecordDeclDefinitionBits.def
 CanonicalType.h
 CharUnits.h
 Comment.h
 CommentBriefParser.h
 CommentCommandInfo.inc
 CommentCommandList.inc
 CommentCommandTraits.h
 CommentDiagnostic.h
 CommentHTMLNamedCharacterReferences.inc
 CommentHTMLTags.inc
 CommentHTMLTagsProperties.inc
 CommentLexer.h
 CommentNodes.inc
 CommentParser.h
 CommentSema.h
 CommentVisitor.h
 ComparisonCategories.h
 ComputeDependence.h
 CurrentSourceLocExprScope.h
 DataCollection.h
 Decl.h
 DeclAccessPair.h
 DeclBase.h
 DeclCXX.h
 DeclContextInternals.h
 DeclFriend.h
 DeclGroup.h
 DeclLookups.h
 DeclNodes.inc
 DeclObjC.h
 DeclObjCCommon.h
 DeclOpenMP.h
 DeclTemplate.h
 DeclVisitor.h
 DeclarationName.h
 DependenceFlags.h
 DependentDiagnostic.h
 EvaluatedExprVisitor.h
 Expr.h
 ExprCXX.h
 ExprConcepts.h
 ExprObjC.h
 ExprOpenMP.h
 ExternalASTMerger.h
 ExternalASTSource.h
 FormatString.h
 GlobalDecl.h
 IgnoreExpr.h
 JSONNodeDumper.h
 LambdaCapture.h
 LexicallyOrderedRecursiveASTVisitor.h
 LocInfoType.h
 Mangle.h
 MangleNumberingContext.h
 NSAPI.h
 NestedNameSpecifier.h
 NonTrivialTypeVisitor.h
 ODRHash.h
 OSLog.h
 OpenMPClause.h
 OperationKinds.def
 OperationKinds.h
 OptionalDiagnostic.h
 ParentMap.h
 ParentMapContext.h
 PrettyDeclStackTrace.h
 PrettyPrinter.h
 QualTypeNames.h
 Randstruct.h
 RawCommentList.h
 RecordLayout.h
 RecursiveASTVisitor.h
 Redeclarable.h
 SelectorLocationsKind.h
 Stmt.h
 StmtCXX.h
 StmtDataCollectors.inc
 StmtGraphTraits.h
 StmtIterator.h
 StmtNodes.inc
 StmtObjC.h
 StmtOpenMP.h
 StmtVisitor.h
 TemplateArgumentVisitor.h
 TemplateBase.h
 TemplateName.h
 TextNodeDumper.h
 Type.h
 TypeLoc.h
 TypeLocNodes.def
 TypeLocVisitor.h
 TypeNodes.inc
 TypeOrdering.h
 TypeVisitor.h
 UnresolvedSet.h
 VTTBuilder.h
 VTableBuilder.h
include/clang/ASTMatchers/
 ASTMatchFinder.h
 ASTMatchers.h
 ASTMatchersInternal.h
 ASTMatchersMacros.h
 GtestMatchers.h
include/clang/ASTMatchers/Dynamic/
 Diagnostics.h
 Parser.h
 Registry.h
 VariantValue.h
include/clang/Analysis/
 AnalysisDeclContext.h
 AnalysisDiagnostic.h
 AnyCall.h
 BodyFarm.h
 CFG.h
 CFGStmtMap.h
 CallGraph.h
 CloneDetection.h
 CodeInjector.h
 ConstructionContext.h
 IssueHash.h
 MacroExpansionContext.h
 PathDiagnostic.h
 ProgramPoint.h
 RetainSummaryManager.h
 SelectorExtras.h
include/clang/Analysis/Analyses/
 CFGReachabilityAnalysis.h
 CalledOnceCheck.h
 Consumed.h
 Dominators.h
 ExprMutationAnalyzer.h
 LiveVariables.h
 PostOrderCFGView.h
 ReachableCode.h
 ThreadSafety.h
 ThreadSafetyCommon.h
 ThreadSafetyLogical.h
 ThreadSafetyOps.def
 ThreadSafetyTIL.h
 ThreadSafetyTraverse.h
 ThreadSafetyUtil.h
 UninitializedValues.h
include/clang/Analysis/DomainSpecific/
 CocoaConventions.h
 ObjCNoReturn.h
include/clang/Analysis/FlowSensitive/
 ControlFlowContext.h
 DataflowAnalysis.h
 DataflowAnalysisContext.h
 DataflowEnvironment.h
 DataflowLattice.h
 DataflowValues.h
 DataflowWorklist.h
 DebugSupport.h
 MapLattice.h
 MatchSwitch.h
 NoopAnalysis.h
 NoopLattice.h
 Solver.h
 StorageLocation.h
 Transfer.h
 TypeErasedDataflowAnalysis.h
 Value.h
 WatchedLiteralsSolver.h
include/clang/Analysis/FlowSensitive/Models/
 ChromiumCheckModel.h
 UncheckedOptionalAccessModel.h
include/clang/Analysis/Support/BumpVector.h
include/clang/Basic/
 AArch64SVEACLETypes.def
 ABI.h
 AddressSpaces.h
 AlignedAllocation.h
 AllDiagnostics.h
 AttrHasAttributeImpl.inc
 AttrKinds.h
 AttrList.inc
 AttrSubMatchRulesList.inc
 AttrSubjectMatchRules.h
 AttributeCommonInfo.h
 Attributes.h
 BitmaskEnum.h
 Builtins.def
 Builtins.h
 BuiltinsAArch64.def
 BuiltinsAArch64NeonSVEBridge.def
 BuiltinsAArch64NeonSVEBridge_cg.def
 BuiltinsAMDGPU.def
 BuiltinsARM.def
 BuiltinsBPF.def
 BuiltinsHexagon.def
 BuiltinsHexagonDep.def
 BuiltinsHexagonMapCustomDep.def
 BuiltinsMips.def
 BuiltinsNEON.def
 BuiltinsNVPTX.def
 BuiltinsPPC.def
 BuiltinsRISCV.def
 BuiltinsRISCVVector.def
 BuiltinsSVE.def
 BuiltinsSystemZ.def
 BuiltinsVE.def
 BuiltinsVEVL.gen.def
 BuiltinsWebAssembly.def
 BuiltinsX86.def
 BuiltinsX86_64.def
 BuiltinsXCore.def
 CLWarnings.h
 CapturedStmt.h
 CharInfo.h
 CodeGenOptions.def
 CodeGenOptions.h
 CommentOptions.h
 Cuda.h
 DarwinSDKInfo.h
 DebugInfoOptions.h
 Diagnostic.h
 DiagnosticAST.h
 DiagnosticASTKinds.inc
 DiagnosticAnalysis.h
 DiagnosticAnalysisKinds.inc
 DiagnosticCategories.h
 DiagnosticComment.h
 DiagnosticCommentKinds.inc
 DiagnosticCommonKinds.inc
 DiagnosticCrossTU.h
 DiagnosticCrossTUKinds.inc
 DiagnosticDriver.h
 DiagnosticDriverKinds.inc
 DiagnosticError.h
 DiagnosticFrontend.h
 DiagnosticFrontendKinds.inc
 DiagnosticGroups.inc
 DiagnosticIDs.h
 DiagnosticIndexName.inc
 DiagnosticLex.h
 DiagnosticLexKinds.inc
 DiagnosticOptions.def
 DiagnosticOptions.h
 DiagnosticParse.h
 DiagnosticParseKinds.inc
 DiagnosticRefactoring.h
 DiagnosticRefactoringKinds.inc
 DiagnosticSema.h
 DiagnosticSemaKinds.inc
 DiagnosticSerialization.h
 DiagnosticSerializationKinds.inc
 DirectoryEntry.h
 ExceptionSpecificationType.h
 ExpressionTraits.h
 FPOptions.def
 Features.def
 FileEntry.h
 FileManager.h
 FileSystemOptions.h
 FileSystemStatCache.h
 IdentifierTable.h
 JsonSupport.h
 LLVM.h
 Lambda.h
 LangOptions.def
 LangOptions.h
 LangStandard.h
 LangStandards.def
 Linkage.h
 MSP430Target.def
 MacroBuilder.h
 MakeSupport.h
 Module.h
 NoSanitizeList.h
 ObjCRuntime.h
 OpenCLExtensionTypes.def
 OpenCLExtensions.def
 OpenCLImageTypes.def
 OpenCLOptions.h
 OpenMPKinds.def
 OpenMPKinds.h
 OperatorKinds.def
 OperatorKinds.h
 OperatorPrecedence.h
 PPCTypes.def
 PartialDiagnostic.h
 PlistSupport.h
 PragmaKinds.h
 PrettyStackTrace.h
 ProfileList.h
 RISCVVTypes.def
 SanitizerSpecialCaseList.h
 Sanitizers.def
 Sanitizers.h
 Sarif.h
 SourceLocation.h
 SourceManager.h
 SourceManagerInternals.h
 Specifiers.h
 Stack.h
 SyncScope.h
 TargetBuiltins.h
 TargetCXXABI.def
 TargetCXXABI.h
 TargetID.h
 TargetInfo.h
 TargetOptions.h
 TemplateKinds.h
 Thunk.h
 TokenKinds.def
 TokenKinds.h
 TypeTraits.h
 Version.h
 Version.inc
 Visibility.h
 XRayInstr.h
 XRayLists.h
 arm_cde_builtin_aliases.inc
 arm_cde_builtin_cg.inc
 arm_cde_builtin_sema.inc
 arm_cde_builtins.inc
 arm_fp16.inc
 arm_mve_builtin_aliases.inc
 arm_mve_builtin_cg.inc
 arm_mve_builtin_sema.inc
 arm_mve_builtins.inc
 arm_neon.inc
 arm_sve_builtin_cg.inc
 arm_sve_builtins.inc
 arm_sve_sema_rangechecks.inc
 arm_sve_typeflags.inc
 riscv_vector_builtin_cg.inc
 riscv_vector_builtin_sema.inc
 riscv_vector_builtins.inc
include/clang/CodeGen/
 BackendUtil.h
 CGFunctionInfo.h
 CodeGenABITypes.h
 CodeGenAction.h
 ConstantInitBuilder.h
 ConstantInitFuture.h
 ModuleBuilder.h
 ObjectFilePCHContainerOperations.h
 SwiftCallingConv.h
include/clang/Config/config.h
include/clang/CrossTU/
 CrossTUDiagnostic.h
 CrossTranslationUnit.h
include/clang/DirectoryWatcher/DirectoryWatcher.h
include/clang/Driver/
 Action.h
 Compilation.h
 Distro.h
 Driver.h
 DriverDiagnostic.h
 InputInfo.h
 Job.h
 Multilib.h
 OptionUtils.h
 Options.h
 Options.inc
 Phases.h
 SanitizerArgs.h
 Tool.h
 ToolChain.h
 Types.def
 Types.h
 Util.h
 XRayArgs.h
include/clang/Edit/
 Commit.h
 EditedSource.h
 EditsReceiver.h
 FileOffset.h
 Rewriters.h
include/clang/ExtractAPI/
 API.h
 AvailabilityInfo.h
 DeclarationFragments.h
 FrontendActions.h
include/clang/ExtractAPI/Serialization/
 SerializerBase.h
 SymbolGraphSerializer.h
include/clang/Format/Format.h
include/clang/Frontend/
 ASTConsumers.h
 ASTUnit.h
 ChainedDiagnosticConsumer.h
 CommandLineSourceLoc.h
 CompilerInstance.h
 CompilerInvocation.h
 DependencyOutputOptions.h
 DiagnosticRenderer.h
 FrontendAction.h
 FrontendActions.h
 FrontendDiagnostic.h
 FrontendOptions.h
 FrontendPluginRegistry.h
 LayoutOverrideSource.h
 LogDiagnosticPrinter.h
 MigratorOptions.h
 MultiplexConsumer.h
 PCHContainerOperations.h
 PrecompiledPreamble.h
 PreprocessorOutputOptions.h
 SerializedDiagnosticPrinter.h
 SerializedDiagnosticReader.h
 SerializedDiagnostics.h
 TextDiagnostic.h
 TextDiagnosticBuffer.h
 TextDiagnosticPrinter.h
 Utils.h
 VerifyDiagnosticConsumer.h
include/clang/FrontendTool/Utils.h
include/clang/Index/
 CommentToXML.h
 DeclOccurrence.h
 IndexDataConsumer.h
 IndexSymbol.h
 IndexingAction.h
 IndexingOptions.h
 USRGeneration.h
include/clang/IndexSerialization/SerializablePathCollection.h
include/clang/Interpreter/
 Interpreter.h
 PartialTranslationUnit.h
include/clang/Lex/
 CodeCompletionHandler.h
 DependencyDirectivesScanner.h
 DirectoryLookup.h
 ExternalPreprocessorSource.h
 HeaderMap.h
 HeaderMapTypes.h
 HeaderSearch.h
 HeaderSearchOptions.h
 LexDiagnostic.h
 Lexer.h
 LiteralSupport.h
 MacroArgs.h
 MacroInfo.h
 ModuleLoader.h
 ModuleMap.h
 MultipleIncludeOpt.h
 PPCallbacks.h
 PPConditionalDirectiveRecord.h
 Pragma.h
 PreprocessingRecord.h
 Preprocessor.h
 PreprocessorLexer.h
 PreprocessorOptions.h
 ScratchBuffer.h
 Token.h
 TokenConcatenation.h
 TokenLexer.h
 VariadicMacroSupport.h
include/clang/Parse/
 AttrParserStringSwitches.inc
 AttrSubMatchRulesParserStringSwitches.inc
 LoopHint.h
 ParseAST.h
 ParseDiagnostic.h
 Parser.h
 RAIIObjectsForParser.h
include/clang/Rewrite/Core/
 DeltaTree.h
 HTMLRewrite.h
 RewriteBuffer.h
 RewriteRope.h
 Rewriter.h
 TokenRewriter.h
include/clang/Rewrite/Frontend/
 ASTConsumers.h
 FixItRewriter.h
 FrontendActions.h
 Rewriters.h
include/clang/Sema/
 AnalysisBasedWarnings.h
 AttrParsedAttrImpl.inc
 AttrParsedAttrKinds.inc
 AttrParsedAttrList.inc
 AttrSpellingListIndex.inc
 AttrTemplateInstantiate.inc
 CXXFieldCollector.h
 CleanupInfo.h
 CodeCompleteConsumer.h
 CodeCompleteOptions.h
 DeclSpec.h
 DelayedDiagnostic.h
 Designator.h
 ExternalSemaSource.h
 HLSLExternalSemaSource.h
 IdentifierResolver.h
 Initialization.h
 Lookup.h
 MultiplexExternalSemaSource.h
 ObjCMethodList.h
 Overload.h
 Ownership.h
 ParsedAttr.h
 ParsedTemplate.h
 RISCVIntrinsicManager.h
 Scope.h
 ScopeInfo.h
 Sema.h
 SemaConcept.h
 SemaConsumer.h
 SemaDiagnostic.h
 SemaFixItUtils.h
 SemaInternal.h
 SemaLambda.h
 Template.h
 TemplateDeduction.h
 TemplateInstCallback.h
 TypoCorrection.h
 Weak.h
include/clang/Serialization/
 ASTBitCodes.h
 ASTDeserializationListener.h
 ASTReader.h
 ASTRecordReader.h
 ASTRecordWriter.h
 ASTWriter.h
 AttrPCHRead.inc
 AttrPCHWrite.inc
 ContinuousRangeMap.h
 GlobalModuleIndex.h
 InMemoryModuleCache.h
 ModuleFile.h
 ModuleFileExtension.h
 ModuleManager.h
 PCHContainerOperations.h
 SerializationDiagnostic.h
 SourceLocationEncoding.h
 TypeBitCodes.def
include/clang/StaticAnalyzer/Checkers/
 BuiltinCheckerRegistration.h
 Checkers.inc
 LocalCheckers.h
 MPIFunctionClassifier.h
 SValExplainer.h
 Taint.h
include/clang/StaticAnalyzer/Core/
 Analyses.def
 AnalyzerOptions.def
 AnalyzerOptions.h
 Checker.h
 CheckerManager.h
 CheckerRegistryData.h
 PathDiagnosticConsumers.h
include/clang/StaticAnalyzer/Core/BugReporter/
 BugReporter.h
 BugReporterVisitors.h
 BugType.h
 CommonBugCategories.h
include/clang/StaticAnalyzer/Core/PathSensitive/
 APSIntType.h
 AnalysisManager.h
 BasicValueFactory.h
 BlockCounter.h
 CallDescription.h
 CallEvent.h
 CheckerContext.h
 CheckerHelpers.h
 ConstraintManager.h
 CoreEngine.h
 DynamicCastInfo.h
 DynamicExtent.h
 DynamicType.h
 DynamicTypeInfo.h
 Environment.h
 ExplodedGraph.h
 ExprEngine.h
 FunctionSummary.h
 LoopUnrolling.h
 LoopWidening.h
 MemRegion.h
 ProgramState.h
 ProgramStateTrait.h
 ProgramState_Fwd.h
 RangedConstraintManager.h
 Regions.def
 SMTConstraintManager.h
 SMTConv.h
 SValBuilder.h
 SValVisitor.h
 SVals.def
 SVals.h
 SimpleConstraintManager.h
 Store.h
 StoreRef.h
 SummaryManager.h
 SymExpr.h
 SymbolManager.h
 Symbols.def
 WorkList.h
include/clang/StaticAnalyzer/Frontend/
 AnalysisConsumer.h
 AnalyzerHelpFlags.h
 CheckerRegistry.h
 FrontendActions.h
 ModelConsumer.h
include/clang/Support/RISCVVIntrinsicUtils.h
include/clang/Testing/
 CommandLineArgs.h
 TestAST.h
 TestClangConfig.h
include/clang/Tooling/
 AllTUsExecution.h
 ArgumentsAdjusters.h
 CommonOptionsParser.h
 CompilationDatabase.h
 CompilationDatabasePluginRegistry.h
 DiagnosticsYaml.h
 Execution.h
 FileMatchTrie.h
 FixIt.h
 JSONCompilationDatabase.h
 NodeIntrospection.h
 NodeIntrospection.inc
 Refactoring.h
 RefactoringCallbacks.h
 ReplacementsYaml.h
 StandaloneExecution.h
 ToolExecutorPluginRegistry.h
 Tooling.h
include/clang/Tooling/ASTDiff/
 ASTDiff.h
 ASTDiffInternal.h
include/clang/Tooling/Core/
 Diagnostic.h
 Replacement.h
include/clang/Tooling/DependencyScanning/
 DependencyScanningFilesystem.h
 DependencyScanningService.h
 DependencyScanningTool.h
 DependencyScanningWorker.h
 ModuleDepCollector.h
include/clang/Tooling/Inclusions/
 HeaderIncludes.h
 IncludeStyle.h
 StandardLibrary.h
include/clang/Tooling/Refactoring/
 ASTSelection.h
 AtomicChange.h
 Lookup.h
 RecursiveSymbolVisitor.h
 RefactoringAction.h
 RefactoringActionRule.h
 RefactoringActionRuleRequirements.h
 RefactoringActionRules.h
 RefactoringActionRulesInternal.h
 RefactoringDiagnostic.h
 RefactoringOption.h
 RefactoringOptionVisitor.h
 RefactoringOptions.h
 RefactoringResultConsumer.h
 RefactoringRuleContext.h
include/clang/Tooling/Refactoring/Extract/
 Extract.h
 SourceExtraction.h
include/clang/Tooling/Refactoring/Rename/
 RenamingAction.h
 SymbolName.h
 SymbolOccurrences.h
 USRFinder.h
 USRFindingAction.h
 USRLocFinder.h
include/clang/Tooling/Syntax/
 BuildTree.h
 Mutations.h
 NodeClasses.inc
 Nodes.h
 Nodes.inc
 TokenBufferTokenManager.h
 TokenManager.h
 Tokens.h
 Tree.h
include/clang/Tooling/Transformer/
 MatchConsumer.h
 Parsing.h
 RangeSelector.h
 RewriteRule.h
 SourceCode.h
 SourceCodeBuilders.h
 Stencil.h
 Transformer.h
lib/
 libclangAPINotes.a
 libclangARCMigrate.a
 libclangAST.a
 libclangASTMatchers.a
 libclangAnalysis.a
 libclangAnalysisFlowSensitive.a
 libclangAnalysisFlowSensitiveModels.a
 libclangBasic.a
 libclangCodeGen.a
 libclangCrossTU.a
 libclangDependencyScanning.a
 libclangDirectoryWatcher.a
 libclangDriver.a
 libclangDynamicASTMatchers.a
 libclangEdit.a
 libclangExtractAPI.a
 libclangFormat.a
 libclangFrontend.a
 libclangFrontendTool.a
 libclangHandleCXX.a
 libclangHandleLLVM.a
 libclangIncludeCleaner.a
 libclangIndex.a
 libclangIndexSerialization.a
 libclangInterpreter.a
 libclangLex.a
 libclangParse.a
 libclangRewrite.a
 libclangRewriteFrontend.a
 libclangSema.a
 libclangSerialization.a
 libclangStaticAnalyzerCheckers.a
 libclangStaticAnalyzerCore.a
 libclangStaticAnalyzerFrontend.a
 libclangSupport.a
 libclangTooling.a
 libclangToolingASTDiff.a
 libclangToolingCore.a
 libclangToolingInclusions.a
 libclangToolingRefactoring.a
 libclangToolingSyntax.a
 libclangTransformer.a
lib/clang/%%LLVM_RELEASE%%/include/
 __clang_cuda_builtin_vars.h
 __clang_cuda_cmath.h
 __clang_cuda_complex_builtins.h
 __clang_cuda_device_functions.h
 __clang_cuda_intrinsics.h
 __clang_cuda_libdevice_declares.h
 __clang_cuda_math.h
 __clang_cuda_math_forward_declares.h
 __clang_cuda_runtime_wrapper.h
 __clang_cuda_texture_intrinsics.h
 __clang_hip_cmath.h
 __clang_hip_libdevice_declares.h
 __clang_hip_math.h
 __clang_hip_runtime_wrapper.h
 __stddef_max_align_t.h
 __wmmintrin_aes.h
 __wmmintrin_pclmul.h
 adxintrin.h
 altivec.h
 ammintrin.h
 amxintrin.h
 arm64intr.h
 arm_acle.h
 arm_bf16.h
 arm_cde.h
 arm_cmse.h
 arm_fp16.h
 arm_mve.h
 arm_neon.h
 arm_sve.h
 armintr.h
 avx2intrin.h
 avx512bf16intrin.h
 avx512bitalgintrin.h
 avx512bwintrin.h
 avx512cdintrin.h
 avx512dqintrin.h
 avx512erintrin.h
 avx512fintrin.h
 avx512fp16intrin.h
 avx512ifmaintrin.h
 avx512ifmavlintrin.h
 avx512pfintrin.h
 avx512vbmi2intrin.h
 avx512vbmiintrin.h
 avx512vbmivlintrin.h
 avx512vlbf16intrin.h
 avx512vlbitalgintrin.h
 avx512vlbwintrin.h
 avx512vlcdintrin.h
 avx512vldqintrin.h
 avx512vlfp16intrin.h
 avx512vlintrin.h
 avx512vlvbmi2intrin.h
 avx512vlvnniintrin.h
 avx512vlvp2intersectintrin.h
 avx512vnniintrin.h
 avx512vp2intersectintrin.h
 avx512vpopcntdqintrin.h
 avx512vpopcntdqvlintrin.h
 avxintrin.h
 avxvnniintrin.h
 bmi2intrin.h
 bmiintrin.h
 builtins.h
 cet.h
 cetintrin.h
 cldemoteintrin.h
 clflushoptintrin.h
 clwbintrin.h
 clzerointrin.h
 cpuid.h
 crc32intrin.h
 emmintrin.h
 enqcmdintrin.h
 f16cintrin.h
 float.h
 fma4intrin.h
 fmaintrin.h
 fxsrintrin.h
 gfniintrin.h
 hexagon_circ_brev_intrinsics.h
 hexagon_protos.h
 hexagon_types.h
 hlsl.h
 hlsl_basic_types.h
 hlsl_intrinsics.h
 hresetintrin.h
 htmintrin.h
 htmxlintrin.h
 hvx_hexagon_protos.h
 ia32intrin.h
 immintrin.h
 intrin.h
 inttypes.h
 invpcidintrin.h
 iso646.h
 keylockerintrin.h
 lwpintrin.h
 lzcntintrin.h
 mm3dnow.h
 mm_malloc.h
 mmintrin.h
 module.modulemap
 movdirintrin.h
 msa.h
 mwaitxintrin.h
 nmmintrin.h
 opencl-c-base.h
 opencl-c.h
 pconfigintrin.h
 pkuintrin.h
 pmmintrin.h
 popcntintrin.h
 prfchwintrin.h
 ptwriteintrin.h
 rdpruintrin.h
 rdseedintrin.h
 riscv_vector.h
 rtmintrin.h
 s390intrin.h
 serializeintrin.h
 sgxintrin.h
 shaintrin.h
 smmintrin.h
 tbmintrin.h
 tgmath.h
 tmmintrin.h
 tsxldtrkintrin.h
 uintrintrin.h
 unwind.h
 vadefs.h
 vaesintrin.h
 vecintrin.h
 velintrin.h
 velintrin_approx.h
 velintrin_gen.h
 vpclmulqdqintrin.h
 waitpkgintrin.h
 wasm_simd128.h
 wbnoinvdintrin.h
 wmmintrin.h
 x86gprintrin.h
 x86intrin.h
 xmmintrin.h
 xopintrin.h
 xsavecintrin.h
 xsaveintrin.h
 xsaveoptintrin.h
 xsavesintrin.h
 xtestintrin.h
lib/clang/%%LLVM_RELEASE%%/include/cuda_wrappers/
 algorithm
 complex
 new
lib/clang/%%LLVM_RELEASE%%/include/openmp_wrappers/
 __clang_openmp_device_functions.h
 cmath
 complex
 complex.h
 complex_cmath.h
 math.h
 new
lib/clang/%%LLVM_RELEASE%%/include/ppc_wrappers/
 bmi2intrin.h
 bmiintrin.h
 emmintrin.h
 immintrin.h
 mm_malloc.h
 mmintrin.h
 pmmintrin.h
 smmintrin.h
 tmmintrin.h
 x86gprintrin.h
 x86intrin.h
 xmmintrin.h
lib/cmake/clang/
 AddClang.cmake
 ClangConfig.cmake
 ClangTargets-%%CMAKE_BUILD_TYPE%%.cmake
 ClangTargets.cmake
libexec/
 analyze-c++
 analyze-cc
 c++-analyzer
 ccc-analyzer
 intercept-c++
 intercept-cc
share/clang/
 bash-autocomplete.sh
 clang-format-bbedit.applescript
 clang-format-diff.py
 clang-format-sublime.py
 clang-format.el
 clang-format.py
 clang-rename.el
 clang-rename.py
share/man/man1/scan-build.1.gz
share/scan-build/
 scanview.css
 sorttable.js
share/scan-view/
 Reporter.py
 ScanView.py
 bugcatcher.ico
 startfile.py


[FILE:11587:manifests/plist.extra]
bin/
 analyze-build
 clang-apply-replacements
 clang-change-namespace
 clang-doc
 clang-include-fixer
 clang-linker-wrapper
 clang-move
 clang-nvlink-wrapper
 clang-offload-packager
 clang-pseudo
 clang-query
 clang-reorder-fields
 clang-repl
 clang-tidy
 find-all-symbols
 intercept-build
 modularize
 pp-trace
 run-clang-tidy
 scan-build-py
include/clang-tidy/
 ClangTidy.h
 ClangTidyCheck.h
 ClangTidyDiagnosticConsumer.h
 ClangTidyForceLinker.h
 ClangTidyModule.h
 ClangTidyModuleRegistry.h
 ClangTidyOptions.h
 ClangTidyProfiling.h
 ExpandModularHeadersPPCallbacks.h
 GlobList.h
 NoLintDirectiveHandler.h
include/clang-tidy/abseil/
 AbseilMatcher.h
 CleanupCtadCheck.h
 DurationAdditionCheck.h
 DurationComparisonCheck.h
 DurationConversionCastCheck.h
 DurationDivisionCheck.h
 DurationFactoryFloatCheck.h
 DurationFactoryScaleCheck.h
 DurationRewriter.h
 DurationSubtractionCheck.h
 DurationUnnecessaryConversionCheck.h
 FasterStrsplitDelimiterCheck.h
 NoInternalDependenciesCheck.h
 NoNamespaceCheck.h
 RedundantStrcatCallsCheck.h
 StrCatAppendCheck.h
 StringFindStartswithCheck.h
 StringFindStrContainsCheck.h
 TimeComparisonCheck.h
 TimeSubtractionCheck.h
 UpgradeDurationConversionsCheck.h
include/clang-tidy/altera/
 IdDependentBackwardBranchCheck.h
 KernelNameRestrictionCheck.h
 SingleWorkItemBarrierCheck.h
 StructPackAlignCheck.h
 UnrollLoopsCheck.h
include/clang-tidy/android/
 CloexecAccept4Check.h
 CloexecAcceptCheck.h
 CloexecCheck.h
 CloexecCreatCheck.h
 CloexecDupCheck.h
 CloexecEpollCreate1Check.h
 CloexecEpollCreateCheck.h
 CloexecFopenCheck.h
 CloexecInotifyInit1Check.h
 CloexecInotifyInitCheck.h
 CloexecMemfdCreateCheck.h
 CloexecOpenCheck.h
 CloexecPipe2Check.h
 CloexecPipeCheck.h
 CloexecSocketCheck.h
 ComparisonInTempFailureRetryCheck.h
include/clang-tidy/boost/UseToStringCheck.h
include/clang-tidy/bugprone/
 ArgumentCommentCheck.h
 AssertSideEffectCheck.h
 AssignmentInIfConditionCheck.h
 BadSignalToKillThreadCheck.h
 BoolPointerImplicitConversionCheck.h
 BranchCloneCheck.h
 CopyConstructorInitCheck.h
 DanglingHandleCheck.h
 DynamicStaticInitializersCheck.h
 EasilySwappableParametersCheck.h
 ExceptionEscapeCheck.h
 FoldInitTypeCheck.h
 ForwardDeclarationNamespaceCheck.h
 ForwardingReferenceOverloadCheck.h
 ImplicitWideningOfMultiplicationResultCheck.h
 InaccurateEraseCheck.h
 IncorrectRoundingsCheck.h
 InfiniteLoopCheck.h
 IntegerDivisionCheck.h
 LambdaFunctionNameCheck.h
 MacroParenthesesCheck.h
 MacroRepeatedSideEffectsCheck.h
 MisplacedOperatorInStrlenInAllocCheck.h
 MisplacedPointerArithmeticInAllocCheck.h
 MisplacedWideningCastCheck.h
 MoveForwardingReferenceCheck.h
 MultipleStatementMacroCheck.h
 NoEscapeCheck.h
 NotNullTerminatedResultCheck.h
 ParentVirtualCallCheck.h
 PosixReturnCheck.h
 RedundantBranchConditionCheck.h
 ReservedIdentifierCheck.h
 SharedPtrArrayMismatchCheck.h
 SignalHandlerCheck.h
 SignedCharMisuseCheck.h
 SizeofContainerCheck.h
 SizeofExpressionCheck.h
 SmartPtrArrayMismatchCheck.h
 SpuriouslyWakeUpFunctionsCheck.h
 StringConstructorCheck.h
 StringIntegerAssignmentCheck.h
 StringLiteralWithEmbeddedNulCheck.h
 StringviewNullptrCheck.h
 SuspiciousEnumUsageCheck.h
 SuspiciousIncludeCheck.h
 SuspiciousMemoryComparisonCheck.h
 SuspiciousMemsetUsageCheck.h
 SuspiciousMissingCommaCheck.h
 SuspiciousSemicolonCheck.h
 SuspiciousStringCompareCheck.h
 SwappedArgumentsCheck.h
 TerminatingContinueCheck.h
 ThrowKeywordMissingCheck.h
 TooSmallLoopVariableCheck.h
 UncheckedOptionalAccessCheck.h
 UndefinedMemoryManipulationCheck.h
 UndelegatedConstructorCheck.h
 UnhandledExceptionAtNewCheck.h
 UnhandledSelfAssignmentCheck.h
 UnusedRaiiCheck.h
 UnusedReturnValueCheck.h
 UseAfterMoveCheck.h
 VirtualNearMissCheck.h
include/clang-tidy/cert/
 CommandProcessorCheck.h
 DefaultOperatorNewAlignmentCheck.h
 DontModifyStdNamespaceCheck.h
 FloatLoopCounter.h
 LimitedRandomnessCheck.h
 MutatingCopyCheck.h
 NonTrivialTypesLibcMemoryCallsCheck.h
 PostfixOperatorCheck.h
 ProperlySeededRandomGeneratorCheck.h
 SetLongJmpCheck.h
 StaticObjectExceptionCheck.h
 StrToNumCheck.h
 ThrownExceptionTypeCheck.h
 VariadicFunctionDefCheck.h
include/clang-tidy/concurrency/
 MtUnsafeCheck.h
 ThreadCanceltypeAsynchronousCheck.h
include/clang-tidy/cppcoreguidelines/
 AvoidGotoCheck.h
 AvoidNonConstGlobalVariablesCheck.h
 InitVariablesCheck.h
 InterfacesGlobalInitCheck.h
 MacroUsageCheck.h
 NarrowingConversionsCheck.h
 NoMallocCheck.h
 OwningMemoryCheck.h
 PreferMemberInitializerCheck.h
 ProBoundsArrayToPointerDecayCheck.h
 ProBoundsConstantArrayIndexCheck.h
 ProBoundsPointerArithmeticCheck.h
 ProTypeConstCastCheck.h
 ProTypeCstyleCastCheck.h
 ProTypeMemberInitCheck.h
 ProTypeReinterpretCastCheck.h
 ProTypeStaticCastDowncastCheck.h
 ProTypeUnionAccessCheck.h
 ProTypeVarargCheck.h
 SlicingCheck.h
 SpecialMemberFunctionsCheck.h
 VirtualClassDestructorCheck.h
include/clang-tidy/darwin/
 AvoidSpinlockCheck.h
 DispatchOnceNonstaticCheck.h
include/clang-tidy/fuchsia/
 DefaultArgumentsCallsCheck.h
 DefaultArgumentsDeclarationsCheck.h
 MultipleInheritanceCheck.h
 OverloadedOperatorCheck.h
 StaticallyConstructedObjectsCheck.h
 TrailingReturnCheck.h
 VirtualInheritanceCheck.h
include/clang-tidy/google/
 AvoidCStyleCastsCheck.h
 AvoidNSObjectNewCheck.h
 AvoidThrowingObjCExceptionCheck.h
 AvoidUnderscoreInGoogletestNameCheck.h
 DefaultArgumentsCheck.h
 ExplicitConstructorCheck.h
 ExplicitMakePairCheck.h
 FunctionNamingCheck.h
 GlobalNamesInHeadersCheck.h
 GlobalVariableDeclarationCheck.h
 IntegerTypesCheck.h
 OverloadedUnaryAndCheck.h
 TodoCommentCheck.h
 UnnamedNamespaceInHeaderCheck.h
 UpgradeGoogletestCaseCheck.h
 UsingNamespaceDirectiveCheck.h
include/clang-tidy/hicpp/
 ExceptionBaseclassCheck.h
 MultiwayPathsCoveredCheck.h
 NoAssemblerCheck.h
 SignedBitwiseCheck.h
include/clang-tidy/linuxkernel/MustCheckErrsCheck.h
include/clang-tidy/llvm/
 HeaderGuardCheck.h
 IncludeOrderCheck.h
 PreferIsaOrDynCastInConditionalsCheck.h
 PreferRegisterOverUnsignedCheck.h
 TwineLocalCheck.h
include/clang-tidy/llvmlibc/
 CalleeNamespaceCheck.h
 ImplementationInNamespaceCheck.h
 RestrictSystemLibcHeadersCheck.h
include/clang-tidy/misc/
 ConfusableIdentifierCheck.h
 ConstCorrectnessCheck.h
 DefinitionsInHeadersCheck.h
 MisleadingBidirectional.h
 MisleadingIdentifier.h
 MisplacedConstCheck.h
 NewDeleteOverloadsCheck.h
 NoRecursionCheck.h
 NonCopyableObjects.h
 NonPrivateMemberVariablesInClassesCheck.h
 RedundantExpressionCheck.h
 StaticAssertCheck.h
 ThrowByValueCatchByReferenceCheck.h
 UnconventionalAssignOperatorCheck.h
 UniqueptrResetReleaseCheck.h
 UnusedAliasDeclsCheck.h
 UnusedParametersCheck.h
 UnusedUsingDeclsCheck.h
include/clang-tidy/modernize/
 AvoidBindCheck.h
 AvoidCArraysCheck.h
 ConcatNestedNamespacesCheck.h
 DeprecatedHeadersCheck.h
 DeprecatedIosBaseAliasesCheck.h
 IntegralLiteralExpressionMatcher.h
 LoopConvertCheck.h
 LoopConvertUtils.h
 MacroToEnumCheck.h
 MakeSharedCheck.h
 MakeSmartPtrCheck.h
 MakeUniqueCheck.h
 PassByValueCheck.h
 RawStringLiteralCheck.h
 RedundantVoidArgCheck.h
 ReplaceAutoPtrCheck.h
 ReplaceDisallowCopyAndAssignMacroCheck.h
 ReplaceRandomShuffleCheck.h
 ReturnBracedInitListCheck.h
 ShrinkToFitCheck.h
 UnaryStaticAssertCheck.h
 UseAutoCheck.h
 UseBoolLiteralsCheck.h
 UseDefaultMemberInitCheck.h
 UseEmplaceCheck.h
 UseEqualsDefaultCheck.h
 UseEqualsDeleteCheck.h
 UseNodiscardCheck.h
 UseNoexceptCheck.h
 UseNullptrCheck.h
 UseOverrideCheck.h
 UseTrailingReturnTypeCheck.h
 UseTransparentFunctorsCheck.h
 UseUncaughtExceptionsCheck.h
 UseUsingCheck.h
include/clang-tidy/mpi/
 BufferDerefCheck.h
 TypeMismatchCheck.h
include/clang-tidy/objc/
 AssertEquals.h
 AvoidNSErrorInitCheck.h
 DeallocInCategoryCheck.h
 ForbiddenSubclassingCheck.h
 MissingHashCheck.h
 NSInvocationArgumentLifetimeCheck.h
 PropertyDeclarationCheck.h
 SuperSelfCheck.h
include/clang-tidy/openmp/
 ExceptionEscapeCheck.h
 UseDefaultNoneCheck.h
include/clang-tidy/performance/
 FasterStringFindCheck.h
 ForRangeCopyCheck.h
 ImplicitConversionInLoopCheck.h
 InefficientAlgorithmCheck.h
 InefficientStringConcatenationCheck.h
 InefficientVectorOperationCheck.h
 MoveConstArgCheck.h
 MoveConstructorInitCheck.h
 NoAutomaticMoveCheck.h
 NoIntToPtrCheck.h
 NoexceptMoveConstructorCheck.h
 TriviallyDestructibleCheck.h
 TypePromotionInMathFnCheck.h
 UnnecessaryCopyInitialization.h
 UnnecessaryValueParamCheck.h
include/clang-tidy/portability/
 RestrictSystemIncludesCheck.h
 SIMDIntrinsicsCheck.h
 StdAllocatorConstCheck.h
include/clang-tidy/readability/
 AvoidConstParamsInDecls.h
 BracesAroundStatementsCheck.h
 ConstReturnTypeCheck.h
 ContainerContainsCheck.h
 ContainerDataPointerCheck.h
 ContainerSizeEmptyCheck.h
 ConvertMemberFunctionsToStatic.h
 DeleteNullPointerCheck.h
 DuplicateIncludeCheck.h
 ElseAfterReturnCheck.h
 FunctionCognitiveComplexityCheck.h
 FunctionSizeCheck.h
 IdentifierLengthCheck.h
 IdentifierNamingCheck.h
 ImplicitBoolConversionCheck.h
 InconsistentDeclarationParameterNameCheck.h
 IsolateDeclarationCheck.h
 MagicNumbersCheck.h
 MakeMemberFunctionConstCheck.h
 MisleadingIndentationCheck.h
 MisplacedArrayIndexCheck.h
 NamedParameterCheck.h
 NamespaceCommentCheck.h
 NonConstParameterCheck.h
 QualifiedAutoCheck.h
 RedundantAccessSpecifiersCheck.h
 RedundantControlFlowCheck.h
 RedundantDeclarationCheck.h
 RedundantFunctionPtrDereferenceCheck.h
 RedundantMemberInitCheck.h
 RedundantPreprocessorCheck.h
 RedundantSmartptrGetCheck.h
 RedundantStringCStrCheck.h
 RedundantStringInitCheck.h
 SimplifyBooleanExprCheck.h
 SimplifySubscriptExprCheck.h
 StaticAccessedThroughInstanceCheck.h
 StaticDefinitionInAnonymousNamespaceCheck.h
 StringCompareCheck.h
 SuspiciousCallArgumentCheck.h
 UniqueptrDeleteReleaseCheck.h
 UppercaseLiteralSuffixCheck.h
 UseAnyOfAllOfCheck.h
include/clang-tidy/tool/ClangTidyMain.h
include/clang-tidy/utils/
 ASTUtils.h
 Aliasing.h
 DeclRefExprUtils.h
 ExceptionAnalyzer.h
 ExprSequence.h
 FileExtensionsUtils.h
 FixItHintUtils.h
 HeaderGuard.h
 IncludeInserter.h
 IncludeSorter.h
 LexerUtils.h
 Matchers.h
 NamespaceAliaser.h
 OptionsUtils.h
 RenamerClangTidyCheck.h
 TransformerClangTidyCheck.h
 TypeTraits.h
 UsingInserter.h
include/clang-tidy/zircon/TemporaryObjectsCheck.h
lib/
 libclangApplyReplacements.a
 libclangChangeNamespace.a
 libclangDoc.a
 libclangIncludeFixer.a
 libclangIncludeFixerPlugin.a
 libclangMove.a
 libclangPseudo.a
 libclangPseudoCLI.a
 libclangPseudoCXX.a
 libclangPseudoGrammar.a
 libclangQuery.a
 libclangReorderFields.a
 libclangTidy.a
 libclangTidyAbseilModule.a
 libclangTidyAlteraModule.a
 libclangTidyAndroidModule.a
 libclangTidyBoostModule.a
 libclangTidyBugproneModule.a
 libclangTidyCERTModule.a
 libclangTidyConcurrencyModule.a
 libclangTidyCppCoreGuidelinesModule.a
 libclangTidyDarwinModule.a
 libclangTidyFuchsiaModule.a
 libclangTidyGoogleModule.a
 libclangTidyHICPPModule.a
 libclangTidyLLVMLibcModule.a
 libclangTidyLLVMModule.a
 libclangTidyLinuxKernelModule.a
 libclangTidyMPIModule.a
 libclangTidyMain.a
 libclangTidyMiscModule.a
 libclangTidyModernizeModule.a
 libclangTidyObjCModule.a
 libclangTidyOpenMPModule.a
 libclangTidyPerformanceModule.a
 libclangTidyPlugin.a
 libclangTidyPortabilityModule.a
 libclangTidyReadabilityModule.a
 libclangTidyUtils.a
 libclangTidyZirconModule.a
 libfindAllSymbols.a
lib/libear/
 __init__.py
 config.h.in
 ear.c
lib/libscanbuild/
 __init__.py
 analyze.py
 arguments.py
 clang.py
 compilation.py
 intercept.py
 report.py
 shell.py
lib/libscanbuild/resources/
 scanview.css
 selectable.js
 sorttable.js
share/clang/
 clang-doc-default-stylesheet.css
 clang-include-fixer.el
 clang-include-fixer.py
 clang-tidy-diff.py
 index.js
 run-find-all-symbols.py


[FILE:125:manifests/plist.dynlibs]
lib/
 libclang-cpp.so
 libclang-cpp.so.%%LLVM_MAJOR%%
 libclang.so
 libclang.so.%%LLVM_MAJOR%%
 libclang.so.%%LLVM_RELEASE%%


[FILE:2844:patches/patch-lib_Driver_ToolChains_DragonFly.cpp]
--- lib/Driver/ToolChains/DragonFly.cpp.orig	2022-10-18 06:29:45 UTC
+++ lib/Driver/ToolChains/DragonFly.cpp
@@ -71,7 +71,7 @@ void dragonfly::Linker::ConstructJob(Com
       CmdArgs.push_back("-Bshareable");
     else if (!Args.hasArg(options::OPT_r)) {
       CmdArgs.push_back("-dynamic-linker");
-      CmdArgs.push_back("/usr/libexec/ld-elf.so.2");
+      CmdArgs.push_back("/libexec/ld-elf.so.2");
     }
     CmdArgs.push_back("--hash-style=gnu");
     CmdArgs.push_back("--enable-new-dtags");
@@ -115,19 +115,29 @@ void dragonfly::Linker::ConstructJob(Com
           Args.MakeArgString(getToolChain().GetFilePath("crtbegin.o")));
   }
 
+  if (D.isUsingLTO()) {
+    assert(!Inputs.empty() && "Must have at least one input.");
+    addLTOOptions(getToolChain(), Args, CmdArgs, Output, Inputs[0],
+                  D.getLTOMode() == LTOK_Thin);
+  }
+
   Args.AddAllArgs(CmdArgs,
                   {options::OPT_L, options::OPT_T_Group, options::OPT_e});
 
   AddLinkerInputs(getToolChain(), Inputs, Args, CmdArgs, JA);
 
+  CmdArgs.push_back("-L@RAVEN_GCC@");
+  CmdArgs.push_back("-L@LOCALBASE@/lib");
+
+  if (!Args.hasArg(options::OPT_static)) {
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@RAVEN_GCC@");
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@LOCALBASE@/lib");
+  }
+
   if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs,
                    options::OPT_r)) {
-    CmdArgs.push_back("-L/usr/lib/gcc80");
-
-    if (!Args.hasArg(options::OPT_static)) {
-      CmdArgs.push_back("-rpath");
-      CmdArgs.push_back("/usr/lib/gcc80");
-    }
 
     if (D.CCCIsCXX()) {
       if (getToolChain().ShouldLinkCXXStdlib(Args))
@@ -147,16 +157,7 @@ void dragonfly::Linker::ConstructJob(Com
         CmdArgs.push_back("-lgcc");
         CmdArgs.push_back("-lgcc_eh");
     } else {
-      if (Args.hasArg(options::OPT_shared_libgcc)) {
-          CmdArgs.push_back("-lgcc_pic");
-          if (!Args.hasArg(options::OPT_shared))
-            CmdArgs.push_back("-lgcc");
-      } else {
-          CmdArgs.push_back("-lgcc");
-          CmdArgs.push_back("--as-needed");
-          CmdArgs.push_back("-lgcc_pic");
-          CmdArgs.push_back("--no-as-needed");
-      }
+      CmdArgs.push_back("-lgcc_s");
     }
   }
 
@@ -192,7 +193,8 @@ DragonFly::DragonFly(const Driver &D, co
 
   getFilePaths().push_back(getDriver().Dir + "/../lib");
   getFilePaths().push_back("/usr/lib");
-  getFilePaths().push_back("/usr/lib/gcc80");
+  getFilePaths().push_back("@RAVEN_GCC@");
+  getFilePaths().push_back("@RAVEN_GCC_TARGET@");
 }
 
 Tool *DragonFly::buildAssembler() const {
@@ -202,3 +204,5 @@ Tool *DragonFly::buildAssembler() const
 Tool *DragonFly::buildLinker() const {
   return new tools::dragonfly::Linker(*this);
 }
+
+bool DragonFly::HasNativeLLVMSupport() const { return true; }


[FILE:389:patches/patch-lib_Driver_ToolChains_DragonFly.h]
--- lib/Driver/ToolChains/DragonFly.h.orig	2022-10-18 06:29:45 UTC
+++ lib/Driver/ToolChains/DragonFly.h
@@ -52,6 +52,7 @@ class LLVM_LIBRARY_VISIBILITY DragonFly
 public:
   DragonFly(const Driver &D, const llvm::Triple &Triple,
             const llvm::opt::ArgList &Args);
+  bool HasNativeLLVMSupport() const override;
 
   bool IsMathErrnoDefault() const override { return false; }
 


[FILE:1343:patches/patch-lib_Driver_ToolChains_FreeBSD.cpp]
--- lib/Driver/ToolChains/FreeBSD.cpp.orig	2022-10-18 06:29:45 UTC
+++ lib/Driver/ToolChains/FreeBSD.cpp
@@ -296,6 +296,16 @@ void freebsd::Linker::ConstructJob(Compi
   addLinkerCompressDebugSectionsOption(ToolChain, Args, CmdArgs);
   AddLinkerInputs(ToolChain, Inputs, Args, CmdArgs, JA);
 
+  CmdArgs.push_back("-L@RAVEN_GCC@");
+  CmdArgs.push_back("-L@LOCALBASE@/lib");
+
+  if (!Args.hasArg(options::OPT_static)) {
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@RAVEN_GCC@");
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@LOCALBASE@/lib");
+  }
+
   unsigned Major = ToolChain.getTriple().getOSMajorVersion();
   bool Profiling = Args.hasArg(options::OPT_pg) && Major != 0 && Major < 14;
   if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs,
@@ -393,12 +403,11 @@ FreeBSD::FreeBSD(const Driver &D, const
     getFilePaths().push_back(concat(getDriver().SysRoot, "/usr/lib32"));
   else
     getFilePaths().push_back(concat(getDriver().SysRoot, "/usr/lib"));
+    getFilePaths().push_back("@RAVEN_GCC@");
+    getFilePaths().push_back("@RAVEN_GCC_TARGET@");
 }
 
 ToolChain::CXXStdlibType FreeBSD::GetDefaultCXXStdlibType() const {
-  unsigned Major = getTriple().getOSMajorVersion();
-  if (Major >= 10 || Major == 0)
-    return ToolChain::CST_Libcxx;
   return ToolChain::CST_Libstdcxx;
 }
 


[FILE:697:patches/patch-lib_Driver_ToolChains_Gnu.cpp]
--- lib/Driver/ToolChains/Gnu.cpp.orig	2022-10-18 06:29:45 UTC
+++ lib/Driver/ToolChains/Gnu.cpp
@@ -474,6 +474,9 @@ void tools::gnutools::Linker::ConstructJ
   if (IsStatic) {
     CmdArgs.push_back("-static");
   } else {
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@RAVEN_GCC@");
+
     if (Args.hasArg(options::OPT_rdynamic))
       CmdArgs.push_back("-export-dynamic");
 
@@ -604,6 +607,8 @@ void tools::gnutools::Linker::ConstructJ
 
   if (!Args.hasArg(options::OPT_nostdlib, options::OPT_r)) {
     if (!Args.hasArg(options::OPT_nodefaultlibs)) {
+      CmdArgs.push_back("-L@RAVEN_GCC@");
+
       if (IsStatic || IsStaticPIE)
         CmdArgs.push_back("--start-group");
 


[FILE:597:patches/patch-lib_Frontend_InitPreprocessor.cpp]
--- lib/Frontend/InitPreprocessor.cpp.orig	2022-10-18 06:29:45 UTC
+++ lib/Frontend/InitPreprocessor.cpp
@@ -752,7 +752,8 @@ static void InitializePredefinedMacros(c
     Builder.defineMacro("__GNUC__", Twine(GNUCMajor));
     Builder.defineMacro("__GNUC_MINOR__", Twine(GNUCMinor));
     Builder.defineMacro("__GNUC_PATCHLEVEL__", Twine(GNUCPatch));
-    Builder.defineMacro("__GXX_ABI_VERSION", "1002");
+    // match ABI of Ravenports GCC compiler
+    Builder.defineMacro("__GXX_ABI_VERSION", "1013");
 
     if (LangOpts.CPlusPlus) {
       Builder.defineMacro("__GNUG__", Twine(GNUCMajor));


[FILE:601:patches/patch-lib_Interpreter_IncrementalParser.cpp]
--- lib/Interpreter/IncrementalParser.cpp.orig	2022-10-18 06:29:45 UTC
+++ lib/Interpreter/IncrementalParser.cpp
@@ -53,7 +53,11 @@ public:
           switch (CI.getFrontendOpts().ProgramAction) {
           default:
             Err = llvm::createStringError(
+#if defined __DragonFly__ || defined __NetBSD__
+                std::errc::operation_not_supported,
+#else
                 std::errc::state_not_recoverable,
+#endif
                 "Driver initialization failed. "
                 "Incremental mode for action %d is not supported",
                 CI.getFrontendOpts().ProgramAction);


[FILE:1127:patches/patch-lib_Lex_InitHeaderSearch.cpp]
--- lib/Lex/InitHeaderSearch.cpp.orig	2022-10-18 06:29:45 UTC
+++ lib/Lex/InitHeaderSearch.cpp
@@ -234,7 +234,6 @@ void InitHeaderSearch::AddDefaultCInclud
   if (HSOpts.UseStandardSystemIncludes) {
     switch (os) {
     case llvm::Triple::CloudABI:
-    case llvm::Triple::FreeBSD:
     case llvm::Triple::NetBSD:
     case llvm::Triple::OpenBSD:
     case llvm::Triple::NaCl:
@@ -413,8 +412,15 @@ void InitHeaderSearch::AddDefaultCPlusPl
       break;
     }
     break;
+  case llvm::Triple::FreeBSD:
+    AddPath("@RAVEN_GXX_HEADERS_DIR@", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@/backward", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@/" + triple.getTriple(), CXXSystem, false);
+    break;
   case llvm::Triple::DragonFly:
-    AddPath("/usr/include/c++/5.0", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@/backward", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@/" + triple.getTriple(), CXXSystem, false);
     break;
   case llvm::Triple::Minix:
     AddGnuCPlusPlusIncludePaths("/usr/gnu/include/c++/4.4.3",

