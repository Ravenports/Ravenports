# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		clang
VERSION=		9.0.0
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	C language family frontend for LLVM 9.0
HOMEPAGE=		http://llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.0/
			http://llvm.org/releases/9.0.0/
DISTFILE[1]=		cfe-9.0.0.src.tar.xz:main
DISTFILE[2]=		clang-tools-extra-9.0.0.src.tar.xz:main
DF_INDEX=		1 2
SPKGS[standard]=	complete
			compiler
			extra

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BROKEN[sunos]=		stock sun linker runs out of memory (2G limit?)

BUILDRUN_DEPENDS=	llvm:single:standard

USES=			cmake ninja ncurses zlib execinfo shebangfix
			python:build c++:compiler,extra
GNOME_COMPONENTS=	libxml2

DISTNAME=		cfe-9.0.0.src

LICENSE=		CUSTOM1:compiler
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
SHEBANG_FILES=		utils/hmaptool/hmaptool
			tools/scan-view/bin/scan-view
			tools/clang-format/git-clang-format
			tools/clang-format/clang-format-diff.py
			tools/extra/clang-tidy/tool/clang-tidy-diff.py
			tools/extra/clang-tidy/tool/run-clang-tidy.py
			tools/extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py

PLIST_SUB=		LLVM_RELEASE="9.0.0"
			LLVM_MAJOR="9"

CMAKE_ARGS=		-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"
			-DLLVM_PARALLEL_LINK_JOBS=1
			-DLLVM_PARALLEL_COMPILE_JOBS={{MAKE_JOBS_NUMBER}}
			-DLLVM_INCLUDE_TESTS:BOOL=OFF
			-DLLVM_BUILD_32_BITS:BOOL=OFF
			-DGCC_INSTALL_PREFIX={{LOCALBASE}}/toolchain/gcc8
VAR_OPSYS[freebsd]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
VAR_OPSYS[linux]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold
VAR_OPSYS[dragonfly]=	CMAKE_ARGS=-DLLVM_USE_LINKER=gold

post-patch:
	${REINPLACE_CMD} -e 's,/usr/local/,${LOCALBASE}/,' \
		${WRKSRC}/lib/Driver/ToolChains/CommonArgs.cpp
	${REINPLACE_CMD} \
		-e 's|@LOCALBASE@|${LOCALBASE}|' \
		-e 's|@RAVEN_GCC@|${LOCALBASE}/toolchain/gcc8/${ASLIB}|' \
		-e 's|@RAVEN_GCC_TARGET@|${LOCALBASE}/toolchain/gcc8/${ASLIB}/gcc/${CONFIGURE_TARGET}/8.3.0|' \
		-e 's|@RAVEN_GXX_HEADERS_DIR@|${LOCALBASE}/toolchain/gcc8/include/c++/8.3.0|' \
		${WRKSRC}/lib/Driver/ToolChains/DragonFly.cpp \
		${WRKSRC}/lib/Driver/ToolChains/FreeBSD.cpp \
		${WRKSRC}/lib/Driver/ToolChains/Gnu.cpp \
		${WRKSRC}/lib/Frontend/InitHeaderSearch.cpp

post-install:
	${INSTALL_PROGRAM} ${WRKDIR}/.build/bin/clang-tblgen \
		${STAGEDIR}${PREFIX}/bin/
.for F in c-index-test clang-9 clang-check clang-format \
	clang-extdef-mapping clang-import-test clang-offload-bundler \
	clang-refactor clang-rename clang-apply-replacements \
	clang-change-namespace clang-include-fixer clang-query \
	clang-reorder-fields clang-tidy clangd find-all-symbols \
	modularize diagtool
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/${F}
.endfor
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libclang.${LIBEXT}

post-extract:
	${MV} ${WRKDIR}/clang-tools-extra-9.0.0.src \
		${WRKSRC}/tools/extra

[FILE:842:descriptions/desc.compiler]
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies. Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them. The name "LLVM" itself is not an
acronym; it is the full name of the project.

This package contains Clang is an "LLVM native" C/C++/Objective-C
compiler, which aims to deliver amazingly fast compiles (e.g. about 3x
faster than GCC when compiling Objective-C code in a debug
configuration), extremely useful error and warning messages and to
provide a platform for building great source level tools. The Clang
Static Analyzer is a tool that automatically finds bugs in your code,
and is a great example of the sort of tool that can be built using
the Clang frontend as a library to parse C/C++ code.


[FILE:558:descriptions/desc.extra]
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies. Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them. The name "LLVM" itself is not an
acronym; it is the full name of the project.

This package holds tools that are developed as part of the LLVM compiler
infrastructure project and the Clang frontend.  These tools are kept in a
separate "extra" repository to allow lighter weight checkouts of the core
Clang codebase.


[FILE:212:distinfo]
7ba81eef7c22ca5da688fdf9d88c20934d2d6b40bfe150ffd338900890aa4610     13533024 cfe-9.0.0.src.tar.xz
ea1c86ce352992d7b6f6649bc622f6a2707b9f8b7153e9f9181a35c76aa3ac10      2183436 clang-tools-extra-9.0.0.src.tar.xz


[FILE:15539:manifests/plist.compiler]
%%ONLY-LINUX%%lib/clang/%%LLVM_RELEASE%%/include/
 limits.h
 stdalign.h
 stdarg.h
 stdatomic.h
 stdbool.h
 stddef.h
 stdint.h
 stdnoreturn.h
 varargs.h
bin/
 c-index-test
 clang
 clang++
 clang-%%LLVM_MAJOR%%
 clang-check
 clang-cl
 clang-cpp
 clang-extdef-mapping
 clang-format
 clang-import-test
 clang-offload-bundler
 clang-refactor
 clang-rename
 clang-scan-deps
 clang-tblgen
 diagtool
 git-clang-format
 hmaptool
 scan-build
 scan-view
include/clang-c/
 BuildSystem.h
 CXCompilationDatabase.h
 CXErrorCode.h
 CXString.h
 Documentation.h
 Index.h
 Platform.h
include/clang/ARCMigrate/
 ARCMT.h
 ARCMTActions.h
 FileRemapper.h
include/clang/AST/
 APValue.h
 AST.h
 ASTConsumer.h
 ASTContext.h
 ASTContextAllocate.h
 ASTDiagnostic.h
 ASTDumper.h
 ASTDumperUtils.h
 ASTFwd.h
 ASTImporter.h
 ASTImporterLookupTable.h
 ASTImporterSharedState.h
 ASTLambda.h
 ASTMutationListener.h
 ASTNodeTraverser.h
 ASTStructuralEquivalence.h
 ASTTypeTraits.h
 ASTUnresolvedSet.h
 ASTVector.h
 Attr.h
 AttrImpl.inc
 AttrIterator.h
 AttrNodeTraverse.inc
 AttrTextNodeDump.inc
 AttrVisitor.h
 AttrVisitor.inc
 Attrs.inc
 Availability.h
 BaseSubobject.h
 BuiltinTypes.def
 CXXInheritance.h
 CanonicalType.h
 CharUnits.h
 Comment.h
 CommentBriefParser.h
 CommentCommandInfo.inc
 CommentCommandList.inc
 CommentCommandTraits.h
 CommentDiagnostic.h
 CommentHTMLNamedCharacterReferences.inc
 CommentHTMLTags.inc
 CommentHTMLTagsProperties.inc
 CommentLexer.h
 CommentNodes.inc
 CommentParser.h
 CommentSema.h
 CommentVisitor.h
 ComparisonCategories.h
 CurrentSourceLocExprScope.h
 DataCollection.h
 Decl.h
 DeclAccessPair.h
 DeclBase.h
 DeclCXX.h
 DeclContextInternals.h
 DeclFriend.h
 DeclGroup.h
 DeclLookups.h
 DeclNodes.inc
 DeclObjC.h
 DeclOpenMP.h
 DeclTemplate.h
 DeclVisitor.h
 DeclarationName.h
 DependentDiagnostic.h
 EvaluatedExprVisitor.h
 Expr.h
 ExprCXX.h
 ExprObjC.h
 ExprOpenMP.h
 ExternalASTMerger.h
 ExternalASTSource.h
 FormatString.h
 GlobalDecl.h
 JSONNodeDumper.h
 LambdaCapture.h
 LexicallyOrderedRecursiveASTVisitor.h
 LocInfoType.h
 Mangle.h
 MangleNumberingContext.h
 NSAPI.h
 NestedNameSpecifier.h
 NonTrivialTypeVisitor.h
 ODRHash.h
 OSLog.h
 OpenMPClause.h
 OperationKinds.def
 OperationKinds.h
 ParentMap.h
 PrettyDeclStackTrace.h
 PrettyPrinter.h
 QualTypeNames.h
 RawCommentList.h
 RecordLayout.h
 RecursiveASTVisitor.h
 Redeclarable.h
 SelectorLocationsKind.h
 Stmt.h
 StmtCXX.h
 StmtDataCollectors.inc
 StmtGraphTraits.h
 StmtIterator.h
 StmtNodes.inc
 StmtObjC.h
 StmtOpenMP.h
 StmtVisitor.h
 TemplateArgumentVisitor.h
 TemplateBase.h
 TemplateName.h
 TextNodeDumper.h
 Type.h
 TypeLoc.h
 TypeLocNodes.def
 TypeLocVisitor.h
 TypeNodes.def
 TypeOrdering.h
 TypeVisitor.h
 UnresolvedSet.h
 VTTBuilder.h
 VTableBuilder.h
include/clang/ASTMatchers/
 ASTMatchFinder.h
 ASTMatchers.h
 ASTMatchersInternal.h
 ASTMatchersMacros.h
include/clang/ASTMatchers/Dynamic/
 Diagnostics.h
 Parser.h
 Registry.h
 VariantValue.h
include/clang/Analysis/
 AnalysisDeclContext.h
 AnalysisDiagnostic.h
 AnyCall.h
 BodyFarm.h
 CFG.h
 CFGStmtMap.h
 CallGraph.h
 CloneDetection.h
 CodeInjector.h
 ConstructionContext.h
 ProgramPoint.h
 RetainSummaryManager.h
 SelectorExtras.h
include/clang/Analysis/Analyses/
 CFGReachabilityAnalysis.h
 Consumed.h
 Dominators.h
 ExprMutationAnalyzer.h
 LiveVariables.h
 PostOrderCFGView.h
 ReachableCode.h
 ThreadSafety.h
 ThreadSafetyCommon.h
 ThreadSafetyLogical.h
 ThreadSafetyOps.def
 ThreadSafetyTIL.h
 ThreadSafetyTraverse.h
 ThreadSafetyUtil.h
 UninitializedValues.h
include/clang/Analysis/DomainSpecific/
 CocoaConventions.h
 ObjCNoReturn.h
include/clang/Analysis/FlowSensitive/DataflowValues.h
include/clang/Analysis/Support/BumpVector.h
include/clang/Basic/
 ABI.h
 AddressSpaces.h
 AlignedAllocation.h
 AllDiagnostics.h
 AttrHasAttributeImpl.inc
 AttrKinds.h
 AttrList.inc
 AttrSubMatchRulesList.inc
 AttrSubjectMatchRules.h
 Attributes.h
 BitmaskEnum.h
 Builtins.def
 Builtins.h
 BuiltinsAArch64.def
 BuiltinsAMDGPU.def
 BuiltinsARM.def
 BuiltinsHexagon.def
 BuiltinsLe64.def
 BuiltinsMips.def
 BuiltinsNEON.def
 BuiltinsNVPTX.def
 BuiltinsPPC.def
 BuiltinsSystemZ.def
 BuiltinsWebAssembly.def
 BuiltinsX86.def
 BuiltinsX86_64.def
 BuiltinsXCore.def
 CapturedStmt.h
 CharInfo.h
 CodeGenOptions.def
 CodeGenOptions.h
 CommentOptions.h
 Cuda.h
 DebugInfoOptions.h
 Diagnostic.h
 DiagnosticAST.h
 DiagnosticASTKinds.inc
 DiagnosticAnalysis.h
 DiagnosticAnalysisKinds.inc
 DiagnosticCategories.h
 DiagnosticComment.h
 DiagnosticCommentKinds.inc
 DiagnosticCommonKinds.inc
 DiagnosticCrossTU.h
 DiagnosticCrossTUKinds.inc
 DiagnosticDriver.h
 DiagnosticDriverKinds.inc
 DiagnosticError.h
 DiagnosticFrontend.h
 DiagnosticFrontendKinds.inc
 DiagnosticGroups.inc
 DiagnosticIDs.h
 DiagnosticIndexName.inc
 DiagnosticLex.h
 DiagnosticLexKinds.inc
 DiagnosticOptions.def
 DiagnosticOptions.h
 DiagnosticParse.h
 DiagnosticParseKinds.inc
 DiagnosticRefactoring.h
 DiagnosticRefactoringKinds.inc
 DiagnosticSema.h
 DiagnosticSemaKinds.inc
 DiagnosticSerialization.h
 DiagnosticSerializationKinds.inc
 ExceptionSpecificationType.h
 ExpressionTraits.h
 Features.def
 FileManager.h
 FileSystemOptions.h
 FileSystemStatCache.h
 FixedPoint.h
 IdentifierTable.h
 JsonSupport.h
 LLVM.h
 Lambda.h
 LangOptions.def
 LangOptions.h
 Linkage.h
 MSP430Target.def
 MacroBuilder.h
 Module.h
 ObjCRuntime.h
 OpenCLExtensionTypes.def
 OpenCLExtensions.def
 OpenCLImageTypes.def
 OpenCLOptions.h
 OpenMPKinds.def
 OpenMPKinds.h
 OperatorKinds.def
 OperatorKinds.h
 OperatorPrecedence.h
 PartialDiagnostic.h
 PlistSupport.h
 PragmaKinds.h
 PrettyStackTrace.h
 SanitizerBlacklist.h
 SanitizerSpecialCaseList.h
 Sanitizers.def
 Sanitizers.h
 SourceLocation.h
 SourceManager.h
 SourceManagerInternals.h
 Specifiers.h
 Stack.h
 SyncScope.h
 TargetBuiltins.h
 TargetCXXABI.h
 TargetInfo.h
 TargetOptions.h
 TemplateKinds.h
 TokenKinds.def
 TokenKinds.h
 TypeTraits.h
 Version.h
 Version.inc
 Visibility.h
 X86Target.def
 XRayInstr.h
 XRayLists.h
 arm_fp16.inc
 arm_neon.inc
include/clang/CodeGen/
 BackendUtil.h
 CGFunctionInfo.h
 CodeGenABITypes.h
 CodeGenAction.h
 ConstantInitBuilder.h
 ConstantInitFuture.h
 ModuleBuilder.h
 ObjectFilePCHContainerOperations.h
 SwiftCallingConv.h
include/clang/Config/config.h
include/clang/CrossTU/
 CrossTUDiagnostic.h
 CrossTranslationUnit.h
include/clang/DirectoryWatcher/DirectoryWatcher.h
include/clang/Driver/
 Action.h
 Compilation.h
 DarwinSDKInfo.h
 Distro.h
 Driver.h
 DriverDiagnostic.h
 Job.h
 Multilib.h
 Options.h
 Options.inc
 Phases.h
 SanitizerArgs.h
 Tool.h
 ToolChain.h
 Types.def
 Types.h
 Util.h
 XRayArgs.h
include/clang/Edit/
 Commit.h
 EditedSource.h
 EditsReceiver.h
 FileOffset.h
 Rewriters.h
include/clang/Format/Format.h
include/clang/Frontend/
 ASTConsumers.h
 ASTUnit.h
 ChainedDiagnosticConsumer.h
 CommandLineSourceLoc.h
 CompilerInstance.h
 CompilerInvocation.h
 DependencyOutputOptions.h
 DiagnosticRenderer.h
 FrontendAction.h
 FrontendActions.h
 FrontendDiagnostic.h
 FrontendOptions.h
 FrontendPluginRegistry.h
 LangStandard.h
 LangStandards.def
 LayoutOverrideSource.h
 LogDiagnosticPrinter.h
 MigratorOptions.h
 MultiplexConsumer.h
 PCHContainerOperations.h
 PrecompiledPreamble.h
 PreprocessorOutputOptions.h
 SerializedDiagnosticPrinter.h
 SerializedDiagnosticReader.h
 SerializedDiagnostics.h
 TextDiagnostic.h
 TextDiagnosticBuffer.h
 TextDiagnosticPrinter.h
 Utils.h
 VerifyDiagnosticConsumer.h
include/clang/FrontendTool/Utils.h
include/clang/Index/
 CodegenNameGenerator.h
 CommentToXML.h
 DeclOccurrence.h
 IndexDataConsumer.h
 IndexSymbol.h
 IndexingAction.h
 USRGeneration.h
include/clang/Lex/
 CodeCompletionHandler.h
 DependencyDirectivesSourceMinimizer.h
 DirectoryLookup.h
 ExternalPreprocessorSource.h
 HeaderMap.h
 HeaderMapTypes.h
 HeaderSearch.h
 HeaderSearchOptions.h
 LexDiagnostic.h
 Lexer.h
 LiteralSupport.h
 MacroArgs.h
 MacroInfo.h
 ModuleLoader.h
 ModuleMap.h
 MultipleIncludeOpt.h
 PPCallbacks.h
 PPConditionalDirectiveRecord.h
 Pragma.h
 PreprocessingRecord.h
 Preprocessor.h
 PreprocessorLexer.h
 PreprocessorOptions.h
 ScratchBuffer.h
 Token.h
 TokenConcatenation.h
 TokenLexer.h
 VariadicMacroSupport.h
include/clang/Parse/
 AttrParserStringSwitches.inc
 AttrSubMatchRulesParserStringSwitches.inc
 LoopHint.h
 ParseAST.h
 ParseDiagnostic.h
 Parser.h
 RAIIObjectsForParser.h
include/clang/Rewrite/Core/
 DeltaTree.h
 HTMLRewrite.h
 RewriteBuffer.h
 RewriteRope.h
 Rewriter.h
 TokenRewriter.h
include/clang/Rewrite/Frontend/
 ASTConsumers.h
 FixItRewriter.h
 FrontendActions.h
 Rewriters.h
include/clang/Sema/
 AnalysisBasedWarnings.h
 AttrParsedAttrImpl.inc
 AttrParsedAttrKinds.inc
 AttrParsedAttrList.inc
 AttrSpellingListIndex.inc
 AttrTemplateInstantiate.inc
 CXXFieldCollector.h
 CleanupInfo.h
 CodeCompleteConsumer.h
 CodeCompleteOptions.h
 DeclSpec.h
 DelayedDiagnostic.h
 Designator.h
 ExternalSemaSource.h
 IdentifierResolver.h
 Initialization.h
 Lookup.h
 MultiplexExternalSemaSource.h
 ObjCMethodList.h
 Overload.h
 Ownership.h
 ParsedAttr.h
 ParsedTemplate.h
 Scope.h
 ScopeInfo.h
 Sema.h
 SemaConsumer.h
 SemaDiagnostic.h
 SemaFixItUtils.h
 SemaInternal.h
 SemaLambda.h
 Template.h
 TemplateDeduction.h
 TemplateInstCallback.h
 TypoCorrection.h
 Weak.h
include/clang/Serialization/
 ASTBitCodes.h
 ASTDeserializationListener.h
 ASTReader.h
 ASTWriter.h
 AttrPCHRead.inc
 AttrPCHWrite.inc
 ContinuousRangeMap.h
 GlobalModuleIndex.h
 InMemoryModuleCache.h
 Module.h
 ModuleFileExtension.h
 ModuleManager.h
 PCHContainerOperations.h
 SerializationDiagnostic.h
include/clang/StaticAnalyzer/Checkers/
 BuiltinCheckerRegistration.h
 Checkers.inc
 LocalCheckers.h
 MPIFunctionClassifier.h
 SValExplainer.h
include/clang/StaticAnalyzer/Core/
 Analyses.def
 AnalyzerOptions.def
 AnalyzerOptions.h
 Checker.h
 CheckerManager.h
 IssueHash.h
 PathDiagnosticConsumers.h
include/clang/StaticAnalyzer/Core/BugReporter/
 BugReporter.h
 BugReporterVisitors.h
 BugType.h
 CommonBugCategories.h
 PathDiagnostic.h
include/clang/StaticAnalyzer/Core/PathSensitive/
 APSIntType.h
 AnalysisManager.h
 BasicValueFactory.h
 BlockCounter.h
 CallEvent.h
 CheckerContext.h
 CheckerHelpers.h
 ConstraintManager.h
 CoreEngine.h
 DynamicTypeInfo.h
 DynamicTypeMap.h
 Environment.h
 ExplodedGraph.h
 ExprEngine.h
 FunctionSummary.h
 LoopUnrolling.h
 LoopWidening.h
 MemRegion.h
 ProgramState.h
 ProgramStateTrait.h
 ProgramState_Fwd.h
 RangedConstraintManager.h
 Regions.def
 SMTConstraintManager.h
 SMTConv.h
 SValBuilder.h
 SValVisitor.h
 SVals.def
 SVals.h
 SimpleConstraintManager.h
 Store.h
 StoreRef.h
 SubEngine.h
 SummaryManager.h
 SymExpr.h
 SymbolManager.h
 Symbols.def
 WorkList.h
include/clang/StaticAnalyzer/Frontend/
 AnalysisConsumer.h
 CheckerRegistration.h
 CheckerRegistry.h
 FrontendActions.h
 ModelConsumer.h
include/clang/Tooling/
 AllTUsExecution.h
 ArgumentsAdjusters.h
 CommonOptionsParser.h
 CompilationDatabase.h
 CompilationDatabasePluginRegistry.h
 DiagnosticsYaml.h
 Execution.h
 FileMatchTrie.h
 FixIt.h
 JSONCompilationDatabase.h
 Refactoring.h
 RefactoringCallbacks.h
 ReplacementsYaml.h
 StandaloneExecution.h
 ToolExecutorPluginRegistry.h
 Tooling.h
include/clang/Tooling/ASTDiff/
 ASTDiff.h
 ASTDiffInternal.h
include/clang/Tooling/Core/
 Diagnostic.h
 Lookup.h
 Replacement.h
include/clang/Tooling/DependencyScanning/DependencyScanningWorker.h
include/clang/Tooling/Inclusions/
 HeaderIncludes.h
 IncludeStyle.h
include/clang/Tooling/Refactoring/
 ASTSelection.h
 AtomicChange.h
 RangeSelector.h
 RecursiveSymbolVisitor.h
 RefactoringAction.h
 RefactoringActionRule.h
 RefactoringActionRuleRequirements.h
 RefactoringActionRules.h
 RefactoringActionRulesInternal.h
 RefactoringDiagnostic.h
 RefactoringOption.h
 RefactoringOptionVisitor.h
 RefactoringOptions.h
 RefactoringResultConsumer.h
 RefactoringRuleContext.h
 SourceCode.h
 Stencil.h
 Transformer.h
include/clang/Tooling/Refactoring/Extract/Extract.h
include/clang/Tooling/Refactoring/Rename/
 RenamingAction.h
 SymbolName.h
 SymbolOccurrences.h
 USRFinder.h
 USRFindingAction.h
 USRLocFinder.h
include/clang/Tooling/Syntax/
 BuildTree.h
 Nodes.h
 Tokens.h
 Tree.h
lib/
 libclang-cpp.so
 libclang-cpp.so.%%LLVM_MAJOR%%
 libclang.so
 libclang.so.%%LLVM_MAJOR%%
 libclangARCMigrate.a
 libclangAST.a
 libclangASTMatchers.a
 libclangAnalysis.a
 libclangBasic.a
 libclangCodeGen.a
 libclangCrossTU.a
 libclangDriver.a
 libclangDynamicASTMatchers.a
 libclangEdit.a
 libclangFormat.a
 libclangFrontend.a
 libclangFrontendTool.a
 libclangHandleCXX.a
 libclangHandleLLVM.a
 libclangIndex.a
 libclangLex.a
 libclangParse.a
 libclangRewrite.a
 libclangRewriteFrontend.a
 libclangSema.a
 libclangSerialization.a
 libclangStaticAnalyzerCheckers.a
 libclangStaticAnalyzerCore.a
 libclangStaticAnalyzerFrontend.a
 libclangTooling.a
 libclangToolingASTDiff.a
 libclangToolingCore.a
 libclangToolingInclusions.a
lib/clang/%%LLVM_RELEASE%%/include/
 __clang_cuda_builtin_vars.h
 __clang_cuda_cmath.h
 __clang_cuda_complex_builtins.h
 __clang_cuda_device_functions.h
 __clang_cuda_intrinsics.h
 __clang_cuda_libdevice_declares.h
 __clang_cuda_math_forward_declares.h
 __clang_cuda_runtime_wrapper.h
 __stddef_max_align_t.h
 __wmmintrin_aes.h
 __wmmintrin_pclmul.h
 adxintrin.h
 altivec.h
 ammintrin.h
 arm64intr.h
 arm_acle.h
 arm_fp16.h
 arm_neon.h
 armintr.h
 avx2intrin.h
 avx512bf16intrin.h
 avx512bitalgintrin.h
 avx512bwintrin.h
 avx512cdintrin.h
 avx512dqintrin.h
 avx512erintrin.h
 avx512fintrin.h
 avx512ifmaintrin.h
 avx512ifmavlintrin.h
 avx512pfintrin.h
 avx512vbmi2intrin.h
 avx512vbmiintrin.h
 avx512vbmivlintrin.h
 avx512vlbf16intrin.h
 avx512vlbitalgintrin.h
 avx512vlbwintrin.h
 avx512vlcdintrin.h
 avx512vldqintrin.h
 avx512vlintrin.h
 avx512vlvbmi2intrin.h
 avx512vlvnniintrin.h
 avx512vlvp2intersectintrin.h
 avx512vnniintrin.h
 avx512vp2intersectintrin.h
 avx512vpopcntdqintrin.h
 avx512vpopcntdqvlintrin.h
 avxintrin.h
 bmi2intrin.h
 bmiintrin.h
 cetintrin.h
 cldemoteintrin.h
 clflushoptintrin.h
 clwbintrin.h
 clzerointrin.h
 cpuid.h
 emmintrin.h
 enqcmdintrin.h
 f16cintrin.h
 float.h
 fma4intrin.h
 fmaintrin.h
 fxsrintrin.h
 gfniintrin.h
 htmintrin.h
 htmxlintrin.h
 ia32intrin.h
 immintrin.h
 intrin.h
 inttypes.h
 invpcidintrin.h
 iso646.h
 lwpintrin.h
 lzcntintrin.h
 mm3dnow.h
 mm_malloc.h
 mmintrin.h
 module.modulemap
 movdirintrin.h
 msa.h
 mwaitxintrin.h
 nmmintrin.h
 opencl-c-base.h
 opencl-c.h
 pconfigintrin.h
 pkuintrin.h
 pmmintrin.h
 popcntintrin.h
 prfchwintrin.h
 ptwriteintrin.h
 rdseedintrin.h
 rtmintrin.h
 s390intrin.h
 sgxintrin.h
 shaintrin.h
 smmintrin.h
 tbmintrin.h
 tgmath.h
 tmmintrin.h
 unwind.h
 vadefs.h
 vaesintrin.h
 vecintrin.h
 vpclmulqdqintrin.h
 waitpkgintrin.h
 wbnoinvdintrin.h
 wmmintrin.h
 x86intrin.h
 xmmintrin.h
 xopintrin.h
 xsavecintrin.h
 xsaveintrin.h
 xsaveoptintrin.h
 xsavesintrin.h
 xtestintrin.h
lib/clang/%%LLVM_RELEASE%%/include/cuda_wrappers/
 algorithm
 complex
 new
lib/clang/%%LLVM_RELEASE%%/include/openmp_wrappers/
 __clang_openmp_math.h
 __clang_openmp_math_declares.h
 cmath
 math.h
lib/clang/%%LLVM_RELEASE%%/include/ppc_wrappers/
 emmintrin.h
 mm_malloc.h
 mmintrin.h
 xmmintrin.h
lib/cmake/clang/
 ClangConfig.cmake
 ClangTargets-%%CMAKE_BUILD_TYPE%%.cmake
 ClangTargets.cmake
libexec/
 c++-analyzer
 ccc-analyzer
share/clang/
 bash-autocomplete.sh
 clang-format-bbedit.applescript
 clang-format-diff.py
 clang-format-sublime.py
 clang-format.el
 clang-format.py
 clang-rename.el
 clang-rename.py
share/man/man1/scan-build.1.gz
share/scan-build/
 scanview.css
 sorttable.js
share/scan-view/
 FileRadar.scpt
 GetRadarVersion.scpt
 Reporter.py
 ScanView.py
 bugcatcher.ico
 startfile.py


[FILE:1381:manifests/plist.extra]
bin/
 clang-apply-replacements
 clang-change-namespace
 clang-doc
 clang-include-fixer
 clang-query
 clang-reorder-fields
 clang-tidy
 clangd
 find-all-symbols
 modularize
lib/
 CheckerDependencyHandlingAnalyzerPlugin.so
 CheckerOptionHandlingAnalyzerPlugin.so
 SampleAnalyzerPlugin.so
 libclangApplyReplacements.a
 libclangChangeNamespace.a
 libclangDaemon.a
 libclangDaemonTweaks.a
 libclangDependencyScanning.a
 libclangDirectoryWatcher.a
 libclangDoc.a
 libclangIncludeFixer.a
 libclangIncludeFixerPlugin.a
 libclangMove.a
 libclangQuery.a
 libclangReorderFields.a
 libclangTidy.a
 libclangTidyAbseilModule.a
 libclangTidyAndroidModule.a
 libclangTidyBoostModule.a
 libclangTidyBugproneModule.a
 libclangTidyCERTModule.a
 libclangTidyCppCoreGuidelinesModule.a
 libclangTidyFuchsiaModule.a
 libclangTidyGoogleModule.a
 libclangTidyHICPPModule.a
 libclangTidyLLVMModule.a
 libclangTidyMPIModule.a
 libclangTidyMiscModule.a
 libclangTidyModernizeModule.a
 libclangTidyObjCModule.a
 libclangTidyOpenMPModule.a
 libclangTidyPerformanceModule.a
 libclangTidyPlugin.a
 libclangTidyPortabilityModule.a
 libclangTidyReadabilityModule.a
 libclangTidyUtils.a
 libclangTidyZirconModule.a
 libclangToolingRefactoring.a
 libclangToolingSyntax.a
 libfindAllSymbols.a
share/clang/
 clang-include-fixer.el
 clang-include-fixer.py
 clang-tidy-diff.py
 run-clang-tidy.py
 run-find-all-symbols.py


[FILE:746:patches/patch-lib_Driver_ToolChains_CommonArgs.cpp]
--- lib/Driver/ToolChains/CommonArgs.cpp.orig	2019-07-14 07:16:13 UTC
+++ lib/Driver/ToolChains/CommonArgs.cpp
@@ -509,16 +509,16 @@ bool tools::addOpenMPRuntime(ArgStringLi
 
   switch (TC.getDriver().getOpenMPRuntime(Args)) {
   case Driver::OMPRT_OMP:
-    CmdArgs.push_back("-lomp");
+    CmdArgs.push_back("/usr/local/llvm50/lib/libomp.so");
     break;
   case Driver::OMPRT_GOMP:
-    CmdArgs.push_back("-lgomp");
+    CmdArgs.push_back("/usr/local/llvm50/lib/libgomp.so");
 
     if (GompNeedsRT)
       CmdArgs.push_back("-lrt");
     break;
   case Driver::OMPRT_IOMP5:
-    CmdArgs.push_back("-liomp5");
+    CmdArgs.push_back("/usr/local/llvm50/lib/libiomp5.so");
     break;
   case Driver::OMPRT_Unknown:
     // Already diagnosed.


[FILE:2846:patches/patch-lib_Driver_ToolChains_DragonFly.cpp]
--- lib/Driver/ToolChains/DragonFly.cpp.orig	2019-01-19 08:50:56 UTC
+++ lib/Driver/ToolChains/DragonFly.cpp
@@ -69,7 +69,7 @@ void dragonfly::Linker::ConstructJob(Com
       CmdArgs.push_back("-Bshareable");
     else {
       CmdArgs.push_back("-dynamic-linker");
-      CmdArgs.push_back("/usr/libexec/ld-elf.so.2");
+      CmdArgs.push_back("/libexec/ld-elf.so.2");
     }
     CmdArgs.push_back("--hash-style=gnu");
     CmdArgs.push_back("--enable-new-dtags");
@@ -112,18 +112,28 @@ void dragonfly::Linker::ConstructJob(Com
           Args.MakeArgString(getToolChain().GetFilePath("crtbegin.o")));
   }
 
+  if (D.isUsingLTO()) {
+    assert(!Inputs.empty() && "Must have at least one input.");
+    AddGoldPlugin(getToolChain(), Args, CmdArgs, Output, Inputs[0],
+                  D.getLTOMode() == LTOK_Thin);
+  }
+
   Args.AddAllArgs(CmdArgs,
                   {options::OPT_L, options::OPT_T_Group, options::OPT_e});
 
   AddLinkerInputs(getToolChain(), Inputs, Args, CmdArgs, JA);
 
-  if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs)) {
-    CmdArgs.push_back("-L/usr/lib/gcc50");
+  CmdArgs.push_back("-L@RAVEN_GCC@");
+  CmdArgs.push_back("-L@LOCALBASE@/lib");
 
-    if (!Args.hasArg(options::OPT_static)) {
-      CmdArgs.push_back("-rpath");
-      CmdArgs.push_back("/usr/lib/gcc50");
-    }
+  if (!Args.hasArg(options::OPT_static)) {
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@RAVEN_GCC@");
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@LOCALBASE@/lib");
+  }
+
+  if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs)) {
 
     if (D.CCCIsCXX()) {
       if (getToolChain().ShouldLinkCXXStdlib(Args))
@@ -143,16 +153,7 @@ void dragonfly::Linker::ConstructJob(Com
         CmdArgs.push_back("-lgcc");
         CmdArgs.push_back("-lgcc_eh");
     } else {
-      if (Args.hasArg(options::OPT_shared_libgcc)) {
-          CmdArgs.push_back("-lgcc_pic");
-          if (!Args.hasArg(options::OPT_shared))
-            CmdArgs.push_back("-lgcc");
-      } else {
-          CmdArgs.push_back("-lgcc");
-          CmdArgs.push_back("--as-needed");
-          CmdArgs.push_back("-lgcc_pic");
-          CmdArgs.push_back("--no-as-needed");
-      }
+      CmdArgs.push_back("-lgcc_s");
     }
   }
 
@@ -185,7 +186,8 @@ DragonFly::DragonFly(const Driver &D, co
 
   getFilePaths().push_back(getDriver().Dir + "/../lib");
   getFilePaths().push_back("/usr/lib");
-  getFilePaths().push_back("/usr/lib/gcc50");
+  getFilePaths().push_back("@RAVEN_GCC@");
+  getFilePaths().push_back("@RAVEN_GCC_TARGET@");
 }
 
 Tool *DragonFly::buildAssembler() const {
@@ -195,3 +197,5 @@ Tool *DragonFly::buildAssembler() const
 Tool *DragonFly::buildLinker() const {
   return new tools::dragonfly::Linker(*this);
 }
+
+bool DragonFly::HasNativeLLVMSupport() const { return true; }


[FILE:389:patches/patch-lib_Driver_ToolChains_DragonFly.h]
--- lib/Driver/ToolChains/DragonFly.h.orig	2019-01-19 08:50:56 UTC
+++ lib/Driver/ToolChains/DragonFly.h
@@ -52,6 +52,7 @@ class LLVM_LIBRARY_VISIBILITY DragonFly
 public:
   DragonFly(const Driver &D, const llvm::Triple &Triple,
             const llvm::opt::ArgList &Args);
+  bool HasNativeLLVMSupport() const override;
 
   bool IsMathErrnoDefault() const override { return false; }
 


[FILE:1223:patches/patch-lib_Driver_ToolChains_FreeBSD.cpp]
--- lib/Driver/ToolChains/FreeBSD.cpp.orig	2019-04-12 14:14:58 UTC
+++ lib/Driver/ToolChains/FreeBSD.cpp
@@ -261,6 +261,16 @@ void freebsd::Linker::ConstructJob(Compi
   bool NeedsXRayDeps = addXRayRuntime(ToolChain, Args, CmdArgs);
   AddLinkerInputs(ToolChain, Inputs, Args, CmdArgs, JA);
 
+  CmdArgs.push_back("-L@RAVEN_GCC@");
+  CmdArgs.push_back("-L@LOCALBASE@/lib");
+
+  if (!Args.hasArg(options::OPT_static)) {
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@RAVEN_GCC@");
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@LOCALBASE@/lib");
+  }
+
   if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs)) {
     addOpenMPRuntime(CmdArgs, ToolChain, Args);
     if (D.CCCIsCXX()) {
@@ -348,11 +358,11 @@ FreeBSD::FreeBSD(const Driver &D, const
     getFilePaths().push_back(getDriver().SysRoot + "/usr/lib32");
   else
     getFilePaths().push_back(getDriver().SysRoot + "/usr/lib");
+    getFilePaths().push_back("@RAVEN_GCC@");
+    getFilePaths().push_back("@RAVEN_GCC_TARGET@");
 }
 
 ToolChain::CXXStdlibType FreeBSD::GetDefaultCXXStdlibType() const {
-  if (getTriple().getOSMajorVersion() >= 10)
-    return ToolChain::CST_Libcxx;
   return ToolChain::CST_Libstdcxx;
 }
 


[FILE:642:patches/patch-lib_Driver_ToolChains_Gnu.cpp]
--- lib/Driver/ToolChains/Gnu.cpp.orig	2019-07-08 15:07:12 UTC
+++ lib/Driver/ToolChains/Gnu.cpp
@@ -442,6 +442,9 @@ void tools::gnutools::Linker::ConstructJ
   }
 
   if (!IsStatic) {
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@RAVEN_GCC@");
+
     if (Args.hasArg(options::OPT_rdynamic))
       CmdArgs.push_back("-export-dynamic");
 
@@ -543,6 +546,8 @@ void tools::gnutools::Linker::ConstructJ
 
   if (!Args.hasArg(options::OPT_nostdlib)) {
     if (!Args.hasArg(options::OPT_nodefaultlibs)) {
+      CmdArgs.push_back("-L@RAVEN_GCC@");
+
       if (IsStatic || IsStaticPIE)
         CmdArgs.push_back("--start-group");
 


[FILE:1137:patches/patch-lib_Frontend_InitHeaderSearch.cpp]
--- lib/Frontend/InitHeaderSearch.cpp.orig	2019-06-13 09:42:43 UTC
+++ lib/Frontend/InitHeaderSearch.cpp
@@ -217,7 +217,6 @@ void InitHeaderSearch::AddDefaultCInclud
   if (HSOpts.UseStandardSystemIncludes) {
     switch (os) {
     case llvm::Triple::CloudABI:
-    case llvm::Triple::FreeBSD:
     case llvm::Triple::NetBSD:
     case llvm::Triple::OpenBSD:
     case llvm::Triple::NaCl:
@@ -391,8 +390,15 @@ void InitHeaderSearch::AddDefaultCPlusPl
       break;
     }
     break;
+  case llvm::Triple::FreeBSD:
+    AddPath("@RAVEN_GXX_HEADERS_DIR@", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@/backward", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@/" + triple.getTriple(), CXXSystem, false);
+    break;
   case llvm::Triple::DragonFly:
-    AddPath("/usr/include/c++/5.0", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@/backward", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@/" + triple.getTriple(), CXXSystem, false);
     break;
   case llvm::Triple::Minix:
     AddGnuCPlusPlusIncludePaths("/usr/gnu/include/c++/4.4.3",


[FILE:531:patches/patch-lib_Frontend_InitPreprocessor.cpp]
--- lib/Frontend/InitPreprocessor.cpp.orig	2019-08-14 12:56:18 UTC
+++ lib/Frontend/InitPreprocessor.cpp
@@ -576,7 +576,8 @@ static void InitializePredefinedMacros(c
     Builder.defineMacro("__GNUC_MINOR__", "2");
     Builder.defineMacro("__GNUC_PATCHLEVEL__", "1");
     Builder.defineMacro("__GNUC__", "4");
-    Builder.defineMacro("__GXX_ABI_VERSION", "1002");
+    // match ABI of Ravenports GCC compiler
+    Builder.defineMacro("__GXX_ABI_VERSION", "1013");
   }
 
   // Define macros for the C11 / C++11 memory orderings


[FILE:462:patches/patch-lib_Lex_HeaderMap.cpp]
--- lib/Lex/HeaderMap.cpp.orig	2019-01-19 08:50:56 UTC
+++ lib/Lex/HeaderMap.cpp
@@ -23,6 +23,19 @@
 #include "llvm/Support/Debug.h"
 #include <cstring>
 #include <memory>
+
+#ifdef __sun__
+static size_t
+strnlen(const char *s, size_t maxlen)
+{
+	size_t len;
+	for (len = 0; len < maxlen; len++, s++) {
+		if (!*s) break;
+	}
+	return (len);
+}
+#endif
+
 using namespace clang;
 
 /// HashHMapKey - This is the 'well known' hash function required by the file


[FILE:569:dragonfly/patch-lib_Headers_CMakeLists.txt]
--- lib/Headers/CMakeLists.txt.orig	2019-06-19 12:48:22 UTC
+++ lib/Headers/CMakeLists.txt
@@ -65,7 +65,6 @@ set(files
   inttypes.h
   invpcidintrin.h
   iso646.h
-  limits.h
   lwpintrin.h
   lzcntintrin.h
   mm3dnow.h
@@ -90,21 +89,13 @@ set(files
   s390intrin.h
   shaintrin.h
   smmintrin.h
-  stdalign.h
-  stdarg.h
-  stdatomic.h
-  stdbool.h
-  stddef.h
   __stddef_max_align_t.h
-  stdint.h
-  stdnoreturn.h
   tbmintrin.h
   tgmath.h
   tmmintrin.h
   unwind.h
   vadefs.h
   vaesintrin.h
-  varargs.h
   vecintrin.h
   vpclmulqdqintrin.h
   waitpkgintrin.h


[FILE:569:freebsd/patch-lib_Headers_CMakeLists.txt]
--- lib/Headers/CMakeLists.txt.orig	2019-06-19 12:48:22 UTC
+++ lib/Headers/CMakeLists.txt
@@ -65,7 +65,6 @@ set(files
   inttypes.h
   invpcidintrin.h
   iso646.h
-  limits.h
   lwpintrin.h
   lzcntintrin.h
   mm3dnow.h
@@ -90,21 +89,13 @@ set(files
   s390intrin.h
   shaintrin.h
   smmintrin.h
-  stdalign.h
-  stdarg.h
-  stdatomic.h
-  stdbool.h
-  stddef.h
   __stddef_max_align_t.h
-  stdint.h
-  stdnoreturn.h
   tbmintrin.h
   tgmath.h
   tmmintrin.h
   unwind.h
   vadefs.h
   vaesintrin.h
-  varargs.h
   vecintrin.h
   vpclmulqdqintrin.h
   waitpkgintrin.h

