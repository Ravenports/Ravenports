# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-yapf
VERSION=		0.43.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Formatter for Python code (3.12)
SDESC[v13]=		Formatter for Python code (3.13)
HOMEPAGE=		none
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/37/81/6acd6601f61e31cfb8729d3da6d5df966f80f374b78eff83760714487338
DISTFILE[1]=		yapf-0.43.0-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		yapf-0.43.0.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-platformdirs:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-platformdirs:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:3226:descriptions/desc.single]
# YAPF

<p align="center">
[image]
[image]
[image]
[image]
</p>

## Introduction

YAPF is a Python formatter based on [`clang-format`]
(developed by Daniel Jasper). In essence, the algorithm takes the code and
calculates the best formatting that conforms to the configured style. It
takes
away a lot of the drudgery of maintaining your code.

The ultimate goal is that the code YAPF produces is as good as the code
that a
programmer would write if they were following the style guide.

> **Note**
> YAPF is not an official Google product (experimental or otherwise), it is
> just code that happens to be owned by Google.

## Installation

To install YAPF from PyPI:

```bash
$ pip install yapf
```

YAPF is still considered in "beta" stage, and the released version may
change
often; therefore, the best way to keep up-to-date with the latest
development
is to clone this repository or install directly from github:

```bash
$ pip install git+https://github.com/google/yapf.git
```

Note that if you intend to use YAPF as a command-line tool rather than as a
library, installation is not necessary. YAPF supports being run as a
directory
by the Python interpreter. If you cloned/unzipped YAPF into `DIR`, it's
possible to run:

```bash
$ PYTHONPATH=DIR python DIR/yapf [options] ...
```

## Using YAPF within your favorite editor
YAPF is supported by multiple editors via community extensions or plugins.
See [Editor Support] for more info.

## Required Python versions

YAPF supports Python 3.7+.

## Usage

```console
usage: yapf [-h] [-v] [-d | -i | -q] [-r | -l START-END] [-e PATTERN]
            [--style STYLE] [--style-help] [--no-local-style] [-p] [-m]
[-vv]
            [files ...]

Formatter for Python code.

positional arguments:
  files                 reads from stdin when no files are specified.

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program's version number and exit
  -d, --diff            print the diff for the fixed source
  -i, --in-place        make changes to files in place
  -q, --quiet           output nothing and set return value
  -r, --recursive       run recursively over directories
  -l START-END, --lines START-END
                        range of lines to reformat, one-based
  -e PATTERN, --exclude PATTERN
                        patterns for files to exclude from formatting
  --style STYLE         specify formatting style: either a style name (for
                        example "pep8" or "google"), or the name of a file
                        with style settings. The default is pep8 unless a
                        .style.yapf or setup.cfg or pyproject.toml file
                        located in the same directory as the source or one
of
                        its parent directories (for stdin, the current
                        directory is used).
  --style-help          show style settings and exit; this output can be
saved
                        to .style.yapf to make your settings permanent
  --no-local-style      don't search for local style definition
  -p, --parallel        run YAPF in parallel when formatting multiple
files.
  -m, --print-modified  print out file names of modified files


[FILE:118:distinfo]
224faffbc39c428cb095818cf6ef5511fdab6f7430a10783fdfb292ccf2852ca       256158 python-src/yapf-0.43.0-py3-none-any.whl

