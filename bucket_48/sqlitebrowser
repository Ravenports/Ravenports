# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		sqlitebrowser
VERSION=		3.13.0
KEYWORDS=		databases
VARIANTS=		std
SDESC[std]=		Visual tool to manage SQLite databases
HOMEPAGE=		https://sqlitebrowser.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/sqlitebrowser:sqlitebrowser:v3.13.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		qt5-qttools:set:std
			qscintilla:dev:qt5
BUILDRUN_DEPENDS=	qscintilla:primary:qt5

USES=			cmake sqlite desktop-utils:single gnome-icons:single

LICENSE=		MPL:single GPLv3+:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		MPL:stock
			GPLv3+:stock
LICENSE_AWK=		TERMS:"^----"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		dual

FPC_EQUIVALENT=		databases/sqlitebrowser

CMAKE_ARGS=		-DFORCE_INTERNAL_ANTLR:BOOL=ON
			-DQT_INCLUDE_DIR:PATH="{{PREFIX}}/include/qt5"
			-DQT_LIBRARY_DIR:PATH="{{PREFIX}}/lib/qt5"
			-DCMAKE_PREFIX_PATH:PATH="{{PREFIX}}/lib/qt5/cmake/"

post-patch:
	${REINPLACE_CMD} -e 's|%%DATADIR%%|${PREFIX}/share/${NAMEBASE}|' \
		${WRKSRC}/src/PreferencesDialog.cpp \
		${WRKSRC}/src/Application.cpp

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/sqlitebrowser

[FILE:911:descriptions/desc.single]
DB Browser for SQLite is a high quality, visual, open source tool to create,
design, and edit database files compatible with SQLite.

It is for users and developers wanting to create databases, search, and edit
data. It uses a familiar spreadsheet-like interface, and you don't need to
learn complicated SQL commands.

Controls and wizards are available for users to:
 * Create and compact database files
 * Create, define, modify and delete tables
 * Create, define and delete indexes
 * Browse, edit, add and delete records
 * Search records
 * Import and export records as text
 * Import and export tables from/to CSV files
 * Import and export databases from/to SQL dump files
 * Issue SQL queries and inspect the results
 * Examine a log of all SQL commands issued by the application

This program is not a visual shell for the sqlite command line tool. It
does not require familiarity with SQL commands.



[FILE:120:distinfo]
fc56ac51ca28dd0e2d065775c037955b795e97ddc9f6666de4f62fa11425382c      4901507 sqlitebrowser-sqlitebrowser-3.13.0.tar.gz


[FILE:211:manifests/plist.single]
bin/sqlitebrowser
share/applications/sqlitebrowser.desktop
share/icons/hicolor/256x256/apps/sqlitebrowser.png
share/icons/hicolor/scalable/apps/sqlitebrowser.svg
share/metainfo/sqlitebrowser.desktop.appdata.xml


[FILE:537:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2024-06-29 06:33:40 UTC
+++ CMakeLists.txt
@@ -136,7 +136,7 @@ endif()
 find_package(Qt5 REQUIRED COMPONENTS Concurrent Gui LinguistTools Network PrintSupport Test Widgets Xml)
 
 if(NOT FORCE_INTERNAL_QSCINTILLA)
-    find_package(QScintilla 2.8.10)
+    find_package(QScintilla)
 endif()
 if(NOT FORCE_INTERNAL_QCUSTOMPLOT)
     find_package(QCustomPlot)
@@ -517,7 +517,7 @@ if((NOT WIN32 AND NOT APPLE) OR MINGW)
     )
 endif()
 
-if(UNIX)
+if(LINUX)
     target_link_libraries(${PROJECT_NAME} dl)
 endif()
 


[FILE:659:patches/patch-src_Application.cpp]
--- src/Application.cpp.orig	2024-06-29 06:33:40 UTC
+++ src/Application.cpp
@@ -117,8 +117,8 @@ Application::Application(int& argc, char
 
     // First of all try to load the application translation file.
     m_translatorApp = new QTranslator(this);
-    ok = m_translatorApp->load("sqlb_" + name,
-                               QCoreApplication::applicationDirPath() + "/translations");
+    QString trans_dir = "%%DATADIR%%/translations";
+    ok = m_translatorApp->load("sqlb_" + name, trans_dir);
     // If failed then try to load .qm file from resources
     if (ok == false) {
         ok = m_translatorApp->load("sqlb_" + name, ":/translations");


[FILE:441:patches/patch-src_PreferencesDialog.cpp]
--- src/PreferencesDialog.cpp.orig	2024-06-29 06:33:40 UTC
+++ src/PreferencesDialog.cpp
@@ -505,8 +505,7 @@ void PreferencesDialog::createBuiltinExt
 
 void PreferencesDialog::fillLanguageBox()
 {
-    QDir translationsDir(QCoreApplication::applicationDirPath() + "/translations",
-                         "sqlb_*.qm");
+    QDir translationsDir("%%DATADIR%%/translations", "sqlb_*.qm");
 
     QLocale systemLocale = QLocale::system();
 

