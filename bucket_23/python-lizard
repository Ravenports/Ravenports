# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-lizard
VERSION=		1.17.31
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Cyclomatic Complexity Analyzer (3.12)
SDESC[v13]=		Cyclomatic Complexity Analyzer (3.13)
HOMEPAGE=		http://www.lizard.ws
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/b6/25/f3b7a347aae3c1f36ef86b5dfc3f05af8ec44e096725f675280c83073b57
DISTFILE[1]=		lizard-1.17.31-py2.py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		lizard-1.17.31.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-Pygments:single:v12
					python-pathspec:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-Pygments:single:v13
					python-pathspec:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:2172:descriptions/desc.single]
|Web Site| Lizard
=================

|

Lizard is an extensible Cyclomatic Complexity Analyzer for many programming
languages
including C/C++ (doesn't require all the header files or Java imports). It
also does
copy-paste detection (code clone detection/code duplicate detection) and
many other forms of static
code analysis.

A list of supported languages:

-  C/C++ (works with C++14)
-  Java
-  C# (C Sharp)
-  JavaScript (With ES6 and JSX)
-  TypeScript (With TSX)
-  VueJS
-  Objective-C
-  Swift
-  Python
-  Ruby
-  TTCN-3
-  PHP
-  Scala
-  GDScript
-  Golang
-  Lua
-  Rust
-  Fortran
-  Kotlin
-  Solidity
-  Erlang
-  Zig
-  Perl

By default lizard will search for any source code that it knows and mix
all the results together. This might not be what you want. You can use
the "-l" option to select language(s).

It counts

-  the nloc (lines of code without comments),
-  CCN (cyclomatic complexity number),
-  token count of functions.
-  parameter count of functions.

You can set limitation for CCN (-C), the number of parameters (-a).
Functions that exceed these limitations will generate warnings. The exit
code of lizard will be none-Zero if there are warnings.

This tool actually calculates how complex the code 'looks' rather than
how complex the code really 'is'. People will need this tool because it's
often very hard to get all the included folders and files right when
they are complicated. But we don't really need that kind of accuracy for
cyclomatic complexity.

It requires python3.8 or above (early versions are not verified).

Installation
------------

lizard.py can be used as a stand alone Python script, most
functionalities are there. You can always use it without any
installation. To acquire all the functionalities of lizard, you will
need a proper install.

::

   python lizard.py

If you want a proper install:

::

   [sudo] pip install lizard

Or if you've got the source:

::

   [sudo] python setup.py install --prefix=/path/to/installation/directory/

Usage
-----

::

   lizard [options] [PATH or FILE] [PATH] ...

Run for the code under current folder (recursively):

::

   lizard

Exclude anything in the tests folder:


[FILE:125:distinfo]
e2a87b0a6be04c2db41a0708fc81ac7ef50694c92360233b7b81088a9695076f        82126 python-src/lizard-1.17.31-py2.py3-none-any.whl

