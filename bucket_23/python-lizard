# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-lizard
VERSION=		1.17.13
KEYWORDS=		python
VARIANTS=		v11 v12
SDESC[v11]=		Cyclomatic Complexity Analyzer (3.11)
SDESC[v12]=		Cyclomatic Complexity Analyzer (3.12)
HOMEPAGE=		http://www.lizard.ws
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/b8/37/8eff5380bd28768529a64391c9ca1f475e7f7308a0b4226f94dda3971fbc
DISTFILE[1]=		lizard-1.17.13-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v11]=		single
SPKGS[v12]=		single

OPTIONS_AVAILABLE=	PY311 PY312
OPTIONS_STANDARD=	none
VOPTS[v11]=		PY311=ON PY312=OFF
VOPTS[v12]=		PY311=OFF PY312=ON

DISTNAME=		lizard-1.17.13.dist-info

GENERATED=		yes

[PY311].RUN_DEPENDS_ON=			python-Pygments:single:v11
[PY311].USES_ON=			python:v11,wheel

[PY312].RUN_DEPENDS_ON=			python-Pygments:single:v12
[PY312].USES_ON=			python:v12,wheel

[FILE:2142:descriptions/desc.single]
|Web Site| Lizard
=================

|

Lizard is an extensible Cyclomatic Complexity Analyzer for many programming
languages
including C/C++ (doesn't require all the header files or Java imports). It
also does
copy-paste detection (code clone detection/code duplicate detection) and
many other forms of static
code analysis.

A list of supported languages:

-  C/C++ (works with C++14)
-  Java
-  C# (C Sharp)
-  JavaScript (With ES6 and JSX)
-  TypeScript
-  Objective-C
-  Swift
-  Python
-  Ruby
-  TTCN-3
-  PHP
-  Scala
-  GDScript
-  Golang
-  Lua
-  Rust
-  Fortran
-  Kotlin
-  Solidity
-  Erlang

By default lizard will search for any source code that it knows and mix
all the results together. This might not be what you want. You can use
the "-l" option to select language(s).

It counts

-  the nloc (lines of code without comments),
-  CCN (cyclomatic complexity number),
-  token count of functions.
-  parameter count of functions.

You can set limitation for CCN (-C), the number of parameters (-a).
Functions that exceed these limitations will generate warnings. The exit
code of lizard will be none-Zero if there are warnings.

This tool actually calculates how complex the code 'looks' rather than
how complex the code really 'is'. People will need this tool because it's
often very hard to get all the included folders and files right when
they are complicated. But we don't really need that kind of accuracy for
cyclomatic complexity.

It requires python3.8 or above (early versions are not verified).

Installation
------------

lizard.py can be used as a stand alone Python script, most
functionalities are there. You can always use it without any
installation. To acquire all the functionalities of lizard, you will
need a proper install.

::

   python lizard.py

If you want a proper install:

::

   [sudo] pip install lizard

Or if you've got the source:

::

   [sudo] python setup.py install --prefix=/path/to/installation/directory/

Usage
-----

::

   lizard [options] [PATH or FILE] [PATH] ...

Run for the code under current folder (recursively):

::

   lizard

Exclude anything in the tests folder:

::



[FILE:114:distinfo]
06e933e05a5eb0c6eebcc4c10127539c12613d0a4d11ba24ba1bf534b285556f        68415 lizard-1.17.13-py2.py3-none-any.whl

