# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libdrm
VERSION=		2.4.106
KEYWORDS=		graphics x11
VARIANTS=		standard
SDESC[standard]=	Direct Rendering Module services kernel interface
HOMEPAGE=		https://dri.freedesktop.org
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://dri.freedesktop.org/libdrm/
DISTFILE[1]=		libdrm-2.4.106.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	ARM X86
OPTIONS_STANDARD=	ARM X86
OPT_ON[aarch64]=	ARM
OPT_ON[x86_64]=		X86
OPT_ON[i386]=		X86

BUILD_DEPENDS=		libpthread-stubs:single:standard
			libxslt:single:standard
			libxml2:single:standard
			python-docutils:single:python_default

USES=			gmake pkgconfig solaris-funcs meson
XORG_COMPONENTS=	pciaccess

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKDIR}}/LICENSE_MIT
LICENSE_AWK=		MIT:"_XF86DRM_H_"
LICENSE_SOURCE=		MIT:{{WRKSRC}}/xf86drm.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		graphics/libdrm
MESON_ARGS=		-Dman-pages=true
			-Dinstall-test-programs=true
			-Dcairo-test=false
SOL_FUNCTIONS=		getline:amdgpu/amdgpu_asic_id.c
			asprintf:tests/modetest/modetest.c
			strndup:tests/modetest/modetest.c

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes

VAR_OPSYS[sunos]=	LDFLAGS=-lrt

[X86].DESCRIPTION=			DRM Drivers for amd64 and i386 architectures

[ARM].DESCRIPTION=			DRM Drivers for AARCH64 architecture

[FILE:70:descriptions/desc.single]
Userspace interface to kernel DRM (Direct Rendering Module) services.


[FILE:100:distinfo]
92d8ac54429b171e087e61c2894dc5399fe6a549b1fbba09fa6a3cb9d4e57bd4       418176 libdrm-2.4.106.tar.xz


[FILE:2154:manifests/plist.single]
%%ARM-ON%%include/freedreno/
 freedreno_drmif.h
 freedreno_ringbuffer.h
%%ARM-ON%%include/libdrm/
 vc4_packet.h
 vc4_qpu_defines.h
%%ARM-ON%%lib/
 libdrm_freedreno.so
 libdrm_freedreno.so.1
 libdrm_freedreno.so.1.0.0
%%ARM-ON%%lib/pkgconfig/
 libdrm_freedreno.pc
 libdrm_vc4.pc
%%ONLY-DRAGONFLY%%bin/kmstest
%%ONLY-DRAGONFLY%%include/libkms/libkms.h
%%ONLY-DRAGONFLY%%lib/
 libkms.so
 libkms.so.1
 libkms.so.1.0.0
%%ONLY-DRAGONFLY%%lib/pkgconfig/libkms.pc
%%ONLY-FREEBSD%%bin/kmstest
%%ONLY-FREEBSD%%include/libkms/libkms.h
%%ONLY-FREEBSD%%lib/
 libkms.so
 libkms.so.1
 libkms.so.1.0.0
%%ONLY-FREEBSD%%lib/pkgconfig/libkms.pc
%%ONLY-LINUX%%bin/kmstest
%%ONLY-LINUX%%include/libkms/libkms.h
%%ONLY-LINUX%%lib/
 libkms.so
 libkms.so.1
 libkms.so.1.0.0
%%ONLY-LINUX%%lib/pkgconfig/libkms.pc
%%X86-ON%%include/libdrm/
 amdgpu.h
 amdgpu_drm.h
 intel_aub.h
 intel_bufmgr.h
 intel_debug.h
 r600_pci_ids.h
 radeon_bo.h
 radeon_bo_gem.h
 radeon_bo_int.h
 radeon_cs.h
 radeon_cs_gem.h
 radeon_cs_int.h
 radeon_surface.h
%%X86-ON%%include/libdrm/nouveau/nouveau.h
%%X86-ON%%include/libdrm/nouveau/nvif/
 cl0080.h
 cl9097.h
 class.h
 if0002.h
 if0003.h
 ioctl.h
 unpack.h
%%X86-ON%%lib/
 libdrm_amdgpu.so
 libdrm_amdgpu.so.1
 libdrm_amdgpu.so.1.0.0
 libdrm_intel.so
 libdrm_intel.so.1
 libdrm_intel.so.1.0.0
 libdrm_nouveau.so
 libdrm_nouveau.so.2
 libdrm_nouveau.so.2.0.0
 libdrm_radeon.so
 libdrm_radeon.so.1
 libdrm_radeon.so.1.0.1
%%X86-ON%%lib/pkgconfig/
 libdrm_amdgpu.pc
 libdrm_intel.pc
 libdrm_nouveau.pc
 libdrm_radeon.pc
%%X86-ON%%share/libdrm/amdgpu.ids
bin/
 drmdevice
 kms-steal-crtc
 kms-universal-planes
 modeprint
 modetest
 proptest
 vbltest
include/
 libsync.h
 xf86drm.h
 xf86drmMode.h
include/libdrm/
 drm.h
 drm_fourcc.h
 drm_mode.h
 drm_sarea.h
 i915_drm.h
 mach64_drm.h
 mga_drm.h
 msm_drm.h
 nouveau_drm.h
 qxl_drm.h
 r128_drm.h
 radeon_drm.h
 savage_drm.h
 sis_drm.h
 tegra_drm.h
 vc4_drm.h
 via_drm.h
 virtgpu_drm.h
 vmwgfx_drm.h
lib/
 libdrm.so
 libdrm.so.2
 libdrm.so.2.4.0
lib/pkgconfig/libdrm.pc
share/man/man3/
 drmAvailable.3.gz
 drmHandleEvent.3.gz
 drmModeGetResources.3.gz
share/man/man7/
 drm-kms.7.gz
 drm-memory.7.gz
 drm.7.gz


[FILE:834:patches/patch-amdgpu_amdgpu__device.c]
--- amdgpu/amdgpu_device.c.orig	2021-04-07 14:09:24 UTC
+++ amdgpu/amdgpu_device.c
@@ -177,7 +177,12 @@ drm_public int amdgpu_device_initialize(
 			return r;
 		}
 		if ((flag_auth) && (!flag_authexist)) {
+#ifdef F_DUPFD_CLOEXEC
 			dev->flink_fd = fcntl(fd, F_DUPFD_CLOEXEC, 0);
+#else
+			dev->flink_fd = fcntl(fd, F_DUPFD, 0);
+			fcntl(dev->flink_fd, F_SETFD, FD_CLOEXEC);
+#endif
 		}
 		*major_version = dev->major_version;
 		*minor_version = dev->minor_version;
@@ -211,7 +216,12 @@ drm_public int amdgpu_device_initialize(
 		goto cleanup;
 	}
 
+#ifdef F_DUPFD_CLOEXEC
 	dev->fd = fcntl(fd, F_DUPFD_CLOEXEC, 0);
+#else
+	dev->fd = fcntl(fd, F_DUPFD, 0);
+	fcntl(dev->fd, F_SETFD, FD_CLOEXEC);
+#endif
 	dev->flink_fd = dev->fd;
 	dev->major_version = version->version_major;
 	dev->minor_version = version->version_minor;


[FILE:283:patches/patch-include_drm_drm.h]
--- include/drm/drm.h.orig	2021-04-07 14:09:24 UTC
+++ include/drm/drm.h
@@ -699,7 +699,11 @@ struct drm_set_client_cap {
 };
 
 #define DRM_RDWR O_RDWR
+#ifdef __sun__
+#define DRM_CLOEXEC 0
+#else
 #define DRM_CLOEXEC O_CLOEXEC
+#endif
 struct drm_prime_handle {
 	__u32 handle;
 


[FILE:691:patches/patch-intel_intel__bufmgr__gem.c]
--- intel/intel_bufmgr_gem.c.orig	2021-04-07 14:09:24 UTC
+++ intel/intel_bufmgr_gem.c
@@ -1005,6 +1005,27 @@ drm_intel_gem_bo_alloc_userptr(drm_intel
 	return &bo_gem->bo;
 }
 
+#ifdef __sun__
+#define posix_memalign	illumos_memalign
+static int
+posix_memalign(void **memptr, size_t alignment, size_t size)
+{
+	void *ptr = NULL;
+	int error = 0;
+
+	if (alignment == 0 ||
+	    (alignment & (sizeof (void *) - 1)) != 0 ||
+	    (alignment & (alignment - 1)) != 0)
+		error = EINVAL;
+	else if (size != 0 &&
+	    (ptr = memalign(alignment, size)) == NULL)
+		error = ENOMEM;
+
+	*memptr = ptr;
+	return (error);
+}
+#endif
+
 static bool
 has_userptr(drm_intel_bufmgr_gem *bufmgr_gem)
 {


[FILE:379:patches/patch-intel_test__decode.c]
--- intel/test_decode.c.orig	2021-04-07 14:09:24 UTC
+++ intel/test_decode.c
@@ -28,7 +28,13 @@
 #include <fcntl.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#ifdef __sun__
+#define errx(exitcode, format, args...) \
+	{ fprintf(stderr, format "\n", ## args); \
+	  exit(exitcode); }
+#else
 #include <err.h>
+#endif
 
 #include "libdrm_macros.h"
 #include "intel_bufmgr.h"


[FILE:852:patches/patch-libkms_vmwgfx.c]
# the defintion of ERESTART is behind a check for _KERNEL, but
# defining that causes errno to not be defined. fortunately, there's
# an alternative switch. unfortunately, those differ by platform and
# _WANT_KERNEL_ERRNO is too recent to be part of any release, so just
# define ERESTART if we still don't have it after including errno.h 
#
--- libkms/vmwgfx.c.orig	2021-04-07 14:09:24 UTC
+++ libkms/vmwgfx.c
@@ -26,10 +26,18 @@
  **************************************************************************/
 
 
+#if defined (__FreeBSD__) || defined (__FreeBSD_kernel__)
+#define _WANT_KERNEL_ERRNO
+#elif defined(__DragonFly__)
+#define _KERNEL_STRUCTURES
+#endif
 #include <errno.h>
 #include <stdlib.h>
 #include <string.h>
 #include "internal.h"
+#ifndef ERESTART
+#define ERESTART (-1)
+#endif
 
 #include "xf86drm.h"
 #include "libdrm_macros.h"


[FILE:521:patches/patch-libsync.h]
define ETIME as ETIMEOUT same as done in mesa

--- libsync.h.orig	2021-04-07 14:09:24 UTC
+++ libsync.h
@@ -35,6 +35,9 @@
 #include <sys/ioctl.h>
 #include <sys/poll.h>
 #include <unistd.h>
+#ifndef ETIME
+#define ETIME ETIMEDOUT
+#endif
 
 #if defined(__cplusplus)
 extern "C" {
@@ -53,6 +56,9 @@ struct sync_merge_data {
 	uint32_t	flags;
 	uint32_t	pad;
 };
+#ifdef __sun__
+#include <sys/ioccom.h>
+#endif
 #define SYNC_IOC_MAGIC		'>'
 #define SYNC_IOC_MERGE		_IOWR(SYNC_IOC_MAGIC, 3, struct sync_merge_data)
 #endif


[FILE:267:patches/patch-tests_drmdevice.c]
--- tests/drmdevice.c.orig	2021-04-07 14:09:24 UTC
+++ tests/drmdevice.c
@@ -31,6 +31,9 @@
 #include <unistd.h>
 #include <xf86drm.h>
 
+#ifndef O_CLOEXEC
+#define O_CLOEXEC 0
+#endif
 
 static void
 print_device_info(drmDevicePtr device, int i, bool print_revision)


[FILE:364:patches/patch-tests_nouveau_threaded.c]
--- tests/nouveau/threaded.c.orig	2021-04-07 14:09:24 UTC
+++ tests/nouveau/threaded.c
@@ -36,7 +36,7 @@ static int failed;
 
 static int import_fd;
 
-#if defined(__GLIBC__) || defined(__FreeBSD__)
+#if defined(__GLIBC__) || defined(__FreeBSD__) || defined(__DragonFly__)
 int ioctl(int fd, unsigned long request, ...)
 #else
 int ioctl(int fd, int request, ...)


[FILE:1570:patches/patch-xf86drm.c]
--- xf86drm.c.orig	2021-04-07 14:09:24 UTC
+++ xf86drm.c
@@ -62,7 +62,17 @@
 #endif
 #include <math.h>
 
-#if defined(__FreeBSD__)
+#ifndef O_CLOEXEC
+#define O_CLOEXEC 0
+#endif
+
+#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__DragonFly__)
+#define FREEDFLY 1
+#else
+#define FREEDFLY 0
+#endif
+
+#if FREEDFLY
 #include <sys/param.h>
 #include <sys/pciio.h>
 #endif
@@ -540,7 +550,7 @@ static int drmGetMinorBase(int type)
 
 static int drmGetMinorType(int major, int minor)
 {
-#ifdef __FreeBSD__
+#if FREEDFLY
     char name[SPECNAMELEN];
     int id;
 
@@ -2796,7 +2806,7 @@ drm_public int drmIsMaster(int fd)
 
 drm_public char *drmGetDeviceNameFromFd(int fd)
 {
-#ifdef __FreeBSD__
+#if FREEDFLY
     struct stat sbuf;
     int maj, min;
     int nodetype;
@@ -2843,7 +2853,7 @@ static bool drmNodeIsDRM(int maj, int mi
     snprintf(path, sizeof(path), "/sys/dev/char/%d:%d/device/drm",
              maj, min);
     return stat(path, &sbuf) == 0;
-#elif defined(__FreeBSD__)
+#elif FREEDFLY
     char name[SPECNAMELEN];
 
     if (!devname_r(makedev(maj, min), S_IFCHR, name, sizeof(name)))
@@ -2956,7 +2966,7 @@ static char *drmGetMinorNameForFD(int fd
 
     closedir(sysdir);
     return NULL;
-#elif defined(__FreeBSD__)
+#elif FREEDFLY
     struct stat sbuf;
     char dname[SPECNAMELEN];
     const char *mname;
@@ -3167,7 +3177,7 @@ get_pci_path(int maj, int min, char *pci
 }
 #endif
 
-#ifdef __FreeBSD__
+#if FREEDFLY
 static int get_sysctl_pci_bus_info(int maj, int min, drmPciBusInfoPtr info)
 {
     char dname[SPECNAMELEN];


[FILE:397:patches/patch-xf86drm.h]
--- xf86drm.h.orig	2021-04-07 14:09:24 UTC
+++ xf86drm.h
@@ -59,6 +59,9 @@ extern "C" {
 #else /* One of the *BSDs */
 
 #include <sys/ioccom.h>
+#ifdef __sun__
+#define _IOC(inout,group,num,len)	(inout | ((len & IOCPARM_MASK) << 16) | ((group) << 8) | (num))
+#endif
 #define DRM_IOCTL_NR(n)         ((n) & 0xff)
 #define DRM_IOC_VOID            IOC_VOID
 #define DRM_IOC_READ            IOC_OUT


[FILE:802:patches/patch-xf86drmMode.c]
From e41ca0a00f88ef8f8d1999417f198db033172f8d Mon Sep 17 00:00:00 2001
From: Emmanuel Vadot <manu@FreeBSD.org>
Date: Thu, 4 Jun 2020 11:05:27 +0200
Subject: [PATCH] xf86Mode: Always include sys/types.h

On FreeBSD when building with GCC this include is needed for sysctl.h
On Clang based build it is included via header polution and I'm sure
that it is also the case on Linux.

Signed-off-by: Emmanuel Vadot <manu@FreeBSD.org>
---
 xf86drmMode.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/xf86drmMode.c b/xf86drmMode.c
index 5af27c4a..6121fe89 100644
--- xf86drmMode.c.orig	2021-04-07 14:09:24 UTC
+++ xf86drmMode.c
@@ -36,6 +36,7 @@
 #include <limits.h>
 #include <stdint.h>
 #include <stdlib.h>
+#include <sys/types.h>
 #include <sys/ioctl.h>
 #if HAVE_SYS_SYSCTL_H
 #include <sys/sysctl.h>

