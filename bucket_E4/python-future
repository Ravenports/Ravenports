# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-future
VERSION=		0.18.2
KEYWORDS=		python
VARIANTS=		py38 py39
SDESC[py38]=		Compatibility layer for python 2 apps (PY38)
SDESC[py39]=		Compatibility layer for python 2 apps (PY39)
HOMEPAGE=		https://python-future.org
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/f/future
DISTFILE[1]=		future-0.18.2.tar.gz:main
DF_INDEX=		1
SPKGS[py38]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY38 PY39
OPTIONS_STANDARD=	none
VOPTS[py38]=		PY38=ON PY39=OFF
VOPTS[py39]=		PY38=OFF PY39=ON

DISTNAME=		future-0.18.2

GENERATED=		yes

[PY38].USES_ON=				python:py38

[PY39].USES_ON=				python:py39

[FILE:2590:descriptions/desc.single]
future: Easy, safe support for Python 2/3 compatibility
=======================================================

future is the missing compatibility layer between Python 2 and Python
3. It allows you to use a single, clean Python 3.x-compatible codebase to
support both Python 2 and Python 3 with minimal overhead.

It is designed to be used as follows::

    from __future__ import (absolute_import, division,
                            print_function, unicode_literals)
    from builtins import (
             bytes, dict, int, list, object, range, str,
             ascii, chr, hex, input, next, oct, open,
             pow, round, super,
             filter, map, zip)

followed by predominantly standard, idiomatic Python 3 code that then runs
similarly on Python 2.6/2.7 and Python 3.3+.

The imports have no effect on Python 3. On Python 2, they shadow the
corresponding builtins, which normally have different semantics on Python 3
versus 2, to provide their Python 3 semantics.

Standard library reorganization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

future supports the standard library reorganization (PEP 3108) through the
following Py3 interfaces:

    >>> # Top-level packages with Py3 names provided on Py2:
    >>> import html.parser
    >>> import queue
    >>> import tkinter.dialog
    >>> import xmlrpc.client
    >>> # etc.

    >>> # Aliases provided for extensions to existing Py2 module names:
    >>> from future.standard_library import install_aliases
    >>> install_aliases()

    >>> from collections import Counter, OrderedDict   # backported to
Py2.6
    >>> from collections import UserDict, UserList, UserString
    >>> import urllib.request
    >>> from itertools import filterfalse, zip_longest
    >>> from subprocess import getoutput, getstatusoutput

Automatic conversion
--------------------

An included script called [futurize
] aids in converting
code (from either Python 2 or Python 3) to code compatible with both
platforms. It is similar to ``python-modernize but goes further in
providing Python 3 compatibility through the use of the backported types
and builtin functions in future``.

Documentation
-------------

See: http://python-future.org

Credits
-------

:Author:  Ed Schofield, Jordan M. Adler, et al
:Sponsor: Python Charmers Pty Ltd, Australia, and Python Charmers Pte
          Ltd, Singapore. http://pythoncharmers.com
:Others:  See docs/credits.rst or http://python-future.org/credits.html

Licensing
---------
Copyright 2013-2019 Python Charmers Pty Ltd, Australia.
The software is distributed under an MIT licence. See LICENSE.txt.


[FILE:99:distinfo]
b1bead90b70cf6ec3f0710ae53a525360fa360d306a86583adc6bf83a4db537d       829220 future-0.18.2.tar.gz

