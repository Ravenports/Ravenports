# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-future
VERSION=		1.0.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Compatibility layer for python 2 apps (3.12)
SDESC[v13]=		Compatibility layer for python 2 apps (3.13)
HOMEPAGE=		https://python-future.org
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/da/71/ae30dadffc90b9006d77af76b393cb9dfbfc9629f339fc1574a1c52e6806
DISTFILE[1]=		future-1.0.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

USES=			cpe

DISTNAME=		future-1.0.0.dist-info

CPE_PRODUCT=		python-future
CPE_TARGET_SW=		python
CPE_VENDOR=		pythoncharmers
GENERATED=		yes

[PY312].USES_ON=			python:v12,wheel

[PY313].USES_ON=			python:v13,wheel

[FILE:2517:descriptions/desc.single]

future: Easy, safe support for Python 2/3 compatibility
=======================================================

future is the missing compatibility layer between Python 2 and Python
3. It allows you to use a single, clean Python 3.x-compatible codebase to
support both Python 2 and Python 3 with minimal overhead.

It is designed to be used as follows::

    from __future__ import (absolute_import, division,
                            print_function, unicode_literals)
    from builtins import (
             bytes, dict, int, list, object, range, str,
             ascii, chr, hex, input, next, oct, open,
             pow, round, super,
             filter, map, zip)

followed by predominantly standard, idiomatic Python 3 code that then runs
similarly on Python 2.6/2.7 and Python 3.3+.

The imports have no effect on Python 3. On Python 2, they shadow the
corresponding builtins, which normally have different semantics on Python 3
versus 2, to provide their Python 3 semantics.

Standard library reorganization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

future supports the standard library reorganization (PEP 3108) through the
following Py3 interfaces:

    >>> # Top-level packages with Py3 names provided on Py2:
    >>> import html.parser
    >>> import queue
    >>> import tkinter.dialog
    >>> import xmlrpc.client
    >>> # etc.

    >>> # Aliases provided for extensions to existing Py2 module names:
    >>> from future.standard_library import install_aliases
    >>> install_aliases()

    >>> from collections import Counter, OrderedDict   # backported to
Py2.6
    >>> from collections import UserDict, UserList, UserString
    >>> import urllib.request
    >>> from itertools import filterfalse, zip_longest
    >>> from subprocess import getoutput, getstatusoutput

Automatic conversion
--------------------

An included script called [futurize
] aids in converting
code (from either Python 2 or Python 3) to code compatible with both
platforms. It is similar to ``python-modernize but goes further in
providing Python 3 compatibility through the use of the backported types
and builtin functions in future``.

Documentation
-------------

See: https://python-future.org

Credits
-------

:Author:  Ed Schofield, Jordan M. Adler, et al
:Sponsor: Python Charmers: https://pythoncharmers.com
:Others:  See docs/credits.rst or https://python-future.org/credits.html

Licensing
---------
Copyright 2013-2024 Python Charmers, Australia.
The software is distributed under an MIT licence. See LICENSE.txt.


[FILE:108:distinfo]
929292d34f5872e70396626ef385ec22355a1fae8ad29e1a734c3e43f9fbc216       491326 future-1.0.0-py3-none-any.whl

