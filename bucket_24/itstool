# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		itstool
VERSION=		2.0.7
REVISION=		2
KEYWORDS=		textproc
VARIANTS=		std
SDESC[std]=		ITS-based XML translation tool
HOMEPAGE=		https://itstool.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://files.itstool.org/itstool/
DISTFILE[1]=		itstool-2.0.7.tar.bz2:main
DF_INDEX=		1
SPKGS[std]=		single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	python-libxml2:single:python_default

USES=			python:sutools

FPC_EQUIVALENT=		textproc/itstool

MUST_CONFIGURE=		gnu

post-install:
	# don't allow !python shebang
	${SED} -i'' -e 's|#!python|#!${PYTHON_CMD}|' ${STAGEDIR}${PREFIX}/bin/itstool

pre-configure:
	${REINPLACE_CMD} \
		-e 's|/usr/local|${LOCALBASE}|g' \
		${WRKSRC}/itstool.in
	${REINPLACE_CMD} -e 's|python -|${PYTHON_CMD} -|' \
		${WRKSRC}/configure

[FILE:1007:descriptions/desc.single]
ITS Tool allows you to translate your XML documents with PO files, using
rules from the W3C Internationalization Tag Set (ITS) to determine what to
translate and how to separate it into PO file messages.

PO files are the standard translation format for GNU and other Unix-like
systems. They present translatable information as discrete messages,
allowing each message to be translated independently. In contrast to
whole-page translation, translating with a message-based format like PO
means you can easily track changes to the source document down to the
paragraph. When new strings are added or existing strings are modified,
you only need to update the corresponding messages.

ITS Tool is designed to make XML documents translatable through PO files
by applying standard ITS rules, as well as extension rules specific to ITS
Tool. ITS also provides an industry standard way for authors to override
translation information in their documents, such as whether a particular
element should be translated.


[FILE:100:distinfo]
6b9a7cd29a12bb95598f5750e8763cee78836a1a207f85b74d8b3275b27e87ca       104648 itstool-2.0.7.tar.bz2


[FILE:118:manifests/plist.single]
@comment rest is autoplist'd
share/itstool/its/
 docbook.its
 docbook5.its
 its.its
 mallard.its
 ttml.its
 xhtml.its


[FILE:2744:patches/patch-itstool.in]
see: https://github.com/itstool/itstool/pull/51

fixes regular expression errors when itstool is being used.

--- itstool.in.orig	2021-05-25 15:43:33 UTC
+++ itstool.in
@@ -220,7 +220,7 @@ class Message (object):
         if not isinstance(text, ustr_type):
             text = ustr(text, 'utf-8')
         self._message[-1] += text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
-        if re.sub('\s+', ' ', text).strip() != '':
+        if re.sub(r'\s+', ' ', text).strip() != '':
             self._empty = False
 
     def add_entity_ref (self, name):
@@ -318,7 +318,7 @@ class Message (object):
                 message += '<_:%s-%i/>' % (msg.name, placeholder)
                 placeholder += 1
         if not self._preserve:
-            message = re.sub('\s+', ' ', message).strip()
+            message = re.sub(r'\s+', ' ', message).strip()
         return message
 
     def get_preserve_space (self):
@@ -456,9 +456,9 @@ class LocNote (object):
             if self._preserve_space:
                 return self.locnote
             else:
-                return re.sub('\s+', ' ', self.locnote).strip()
+                return re.sub(r'\s+', ' ', self.locnote).strip()
         elif self.locnoteref is not None:
-            return '(itstool) link: ' + re.sub('\s+', ' ', self.locnoteref).strip()
+            return '(itstool) link: ' + re.sub(r'\s+', ' ', self.locnoteref).strip()
         return ''
 
 
@@ -889,7 +889,7 @@ class Document (object):
         trans = translations.ugettext('_\x04translator-credits')
         if trans is None or trans == 'translator-credits':
             return
-        regex = re.compile('(.*) \<(.*)\>, (.*)')
+        regex = re.compile(r'(.*) \<(.*)\>, (.*)')
         for credit in trans.split('\n'):
             match = regex.match(credit)
             if not match:
@@ -924,7 +924,7 @@ class Document (object):
             prevnode = None
             if node.prev is not None and node.prev.type == 'text':
                 prevtext = node.prev.content
-                if re.sub('\s+', '', prevtext) == '':
+                if re.sub(r'\s+', '', prevtext) == '':
                     prevnode = node.prev
             for lang in sorted(list(translations.keys()), reverse=True):
                 locale = self.get_its_locale_filter(node)
@@ -1468,7 +1468,7 @@ def match_locale(extrange, locale):
         localei += 1
     return True
 
-_locale_pattern = re.compile('([a-zA-Z0-9-]+)(_[A-Za-z0-9]+)?(@[A-Za-z0-9]+)?(\.[A-Za-z0-9]+)?')
+_locale_pattern = re.compile(r'([a-zA-Z0-9-]+)(_[A-Za-z0-9]+)?(@[A-Za-z0-9]+)?(\.[A-Za-z0-9]+)?')
 def convert_locale (locale):
     # Automatically convert POSIX-style locales to BCP47
     match = _locale_pattern.match(locale)

