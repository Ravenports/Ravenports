# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pymemcache
VERSION=		4.0.0
KEYWORDS=		python
VARIANTS=		v13 v12
SDESC[v12]=		Pure Python memcached client (3.12)
SDESC[v13]=		Pure Python memcached client (3.13)
HOMEPAGE=		https://github.com/pinterest/pymemcache
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/41/ba/2f7b22d8135b51c4fefb041461f8431e1908778e6539ff5af6eeaaee367a
DISTFILE[1]=		pymemcache-4.0.0-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY313 PY312
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY313=OFF PY312=ON
VOPTS[v13]=		PY313=ON PY312=OFF

DISTNAME=		pymemcache-4.0.0.dist-info

GENERATED=		yes

[PY312].USES_ON=			python:v12,wheel

[PY313].USES_ON=			python:v13,wheel

[FILE:2746:descriptions/desc.single]
pymemcache
==========

        :alt: Master Documentation Status

A comprehensive, fast, pure-Python memcached client.

pymemcache supports the following features:

* Complete implementation of the memcached text protocol.
* Connections using UNIX sockets, or TCP over IPv4 or IPv6.
* Configurable timeouts for socket connect and send/recv calls.
* Access to the "noreply" flag, which can significantly increase the speed
of writes.
* Flexible, modular and simple approach to serialization and
deserialization.
* The (optional) ability to treat network and memcached errors as cache
misses.

Installing pymemcache
=====================

Install from pip:

.. code-block:: bash

  pip install pymemcache

For development, clone from github and run the tests:

.. code-block:: bash

    git clone https://github.com/pinterest/pymemcache.git
    cd pymemcache

Run the tests (make sure you have a local memcached server running):

.. code-block:: bash

    tox

Usage
=====

See the documentation here: https://pymemcache.readthedocs.io/en/latest/

Django
------

Since version 3.2, Django has included a pymemcache-based cache backend.
See [its documentation 
].

On older Django versions, you can use
`django-pymemcache
<https://github.com/django-pymemcache/django-pymemcache>`_.

Comparison with Other Libraries
===============================

pylibmc
-------

The pylibmc library is a wrapper around libmemcached, implemented in C. It
is
fast, implements consistent hashing, the full memcached protocol and
timeouts.
It does not provide access to the "noreply" flag. It also isn't pure
Python,
so using it with libraries like gevent is out of the question, and its
dependency on libmemcached poses challenges (e.g., it must be built against
the same version of libmemcached that it will use at runtime).

python-memcached
----------------

The python-memcached library implements the entire memcached text protocol,
has
a single timeout for all socket calls and has a flexible approach to
serialization and deserialization. It is also written entirely in Python,
so
it works well with libraries like gevent. However, it is tied to using
thread
locals, doesn't implement "noreply", can't treat errors as cache misses and
is
slower than both pylibmc and pymemcache. It is also tied to a specific
method
for handling clusters of memcached servers.

memcache_client
---------------

The team at mixpanel put together a pure Python memcached client as well.
It
has more fine grained support for socket timeouts, only connects to a
single
host. However, it doesn't support most of the memcached API (just get, set,
delete and stats), doesn't support "noreply", has no serialization or
deserialization support and can't treat errors as cache misses.



[FILE:116:distinfo]
f507bc20e0dc8d562f8df9d872107a278df049fa496805c1431b926f3ddd0eab        60772 pymemcache-4.0.0-py2.py3-none-any.whl

