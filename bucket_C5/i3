# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		i3
VERSION=		4.19.2
KEYWORDS=		x11_wm
VARIANTS=		standard
SDESC[standard]=	Improved dynamic tiling window manager
HOMEPAGE=		https://i3wm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://i3wm.org/downloads/
DISTFILE[1]=		i3-4.19.2.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		bash:primary:standard
BUILDRUN_DEPENDS=	startup-notification:single:standard
			yajl:single:standard
			cairo:single:standard
			pango:primary:standard
			libxkbcommon:single:standard
			libev:single:standard
RUN_DEPENDS=		perl-IPC-Run:single:perl_default
			perl-Try-Tiny:single:perl_default
			perl-AnyEvent-I3:single:perl_default

USES=			meson perl
XORG_COMPONENTS=	xcb xcb-util xcb-util-cursor xcb-util-keysyms
			xcb-util-wm xcb-util-xrm

FPC_EQUIVALENT=		x11-wm/i3

INSTALL_TARGET=		install-strip

VAR_OPSYS[linux]=	CFLAGS=-DHAVE_strndup=1

post-install:
	${INSTALL_DATA} ${WRKSRC}/man/*.1 ${STAGEDIR}${MANPREFIX}/man/man1/

[FILE:257:descriptions/desc.primary]
i3 is a tiling window manager, completely written from scratch. The target
platforms are GNU/Linux and BSD operating systems, the code is Free and
Open Source Software (FOSS) under the BSD license. i3 is primarily targeted
at advanced users and developers.


[FILE:95:distinfo]
8a6ee177689dcf22964d20b6093014ee4fa0419345d3fd515d5512d9980bb279      1277396 i3-4.19.2.tar.xz


[FILE:613:manifests/plist.primary]
bin/
 i3
 i3-config-wizard
 i3-dmenu-desktop
 i3-dump-log
 i3-input
 i3-migrate-config-to-v4
 i3-msg
 i3-nagbar
 i3-save-tree
 i3-sensible-editor
 i3-sensible-pager
 i3-sensible-terminal
 i3-with-shmlog
 i3bar
etc/i3/
 config
 config.keycodes
include/i3/ipc.h
share/applications/i3.desktop
share/man/man1/
 i3-config-wizard.1.gz
 i3-dmenu-desktop.1.gz
 i3-dump-log.1.gz
 i3-input.1.gz
 i3-migrate-config-to-v4.1.gz
 i3-msg.1.gz
 i3-nagbar.1.gz
 i3-save-tree.1.gz
 i3-sensible-editor.1.gz
 i3-sensible-pager.1.gz
 i3-sensible-terminal.1.gz
 i3.1.gz
 i3bar.1.gz
share/xsessions/
 i3-with-shmlog.desktop
 i3.desktop


[FILE:517:manifests/plist.docs]
share/doc/i3/
 tree-shot2.png
 keyboard-layer1.png
 snapping.png
 tree-shot1.png
 modes.png
 tree-shot4.png
 bigpicture.png
 i3-sync-working.png
 tree-layout1.png
 testsuite.html
 layout-saving.html
 two_terminals.png
 refcard_style.css
 i3-sync.png
 wsbar.png
 layout-saving-1.png
 two_columns.png
 logo-30.png
 wsbar.html
 hacking-howto.html
 userguide.html
 tree-shot3.png
 debugging.html
 single_terminal.png
 tree-layout2.png
 i3bar-protocol.html
 multi-monitor.html
 keyboard-layer2.png
 ipc.html
 refcard.html


[FILE:729:patches/patch-libi3_get__exe__path.c]
--- libi3/get_exe_path.c.orig	2021-02-27 09:37:58 UTC
+++ libi3/get_exe_path.c
@@ -25,11 +25,12 @@ char *get_exe_path(const char *argv0) {
     char *destpath = smalloc(destpath_size);
     char *tmp = smalloc(tmp_size);
 
-#if defined(__linux__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
+#if defined(__linux__) || defined(__DragonFly__) \
+ || defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
 /* Linux and Debian/kFreeBSD provide /proc/self/exe */
 #if defined(__linux__) || defined(__FreeBSD_kernel__)
     const char *exepath = "/proc/self/exe";
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
     const char *exepath = "/proc/curproc/file";
 #endif
     ssize_t linksize;


[FILE:830:patches/patch-src_log.c]
--- src/log.c.orig	2021-02-27 09:37:58 UTC
+++ src/log.c
@@ -125,7 +125,7 @@ void open_logbuffer(void) {
      * At the moment (2011-12-10), no testcase leads to an i3 log
      * of more than ~ 600 KiB. */
     logbuffer_size = min(physical_mem_bytes * 0.01, shmlog_size);
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD__) || defined(__DragonFly__)
     sasprintf(&shmlogname, "/tmp/i3-log-%d", getpid());
 #else
     sasprintf(&shmlogname, "/i3-log-%d", getpid());
@@ -136,7 +136,7 @@ void open_logbuffer(void) {
         return;
     }
 
-#if defined(__OpenBSD__) || defined(__APPLE__)
+#if defined(__OpenBSD__) || defined(__APPLE__) || defined(__DragonFly__)
     if (ftruncate(logbuffer_shm, logbuffer_size) == -1) {
         fprintf(stderr, "Could not ftruncate SHM segment for the i3 log: %s\n", strerror(errno));
 #else

