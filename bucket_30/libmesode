# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libmesode
VERSION=		0.9.3
KEYWORDS=		net net_im
VARIANTS=		standard
SDESC[standard]=	Lightweight XMPP library
HOMEPAGE=		https://github.com/boothj5/libmesode
CONTACT=		Leonid_Bobrov[mazocomp@disroot.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/boothj5:libmesode:0.9.3
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		expat:static:standard
BUILDRUN_DEPENDS=	expat:shared:standard

USES=			autoreconf libtool pkgconfig ssl

LICENSE=		MIT:single GPLv3+:single
LICENSE_TERMS=		single:{{WRKSRC}}/LICENSE.txt
LICENSE_FILE=		MIT:{{WRKSRC}}/MIT-LICENSE.txt
			GPLv3+:{{WRKSRC}}/GPL-LICENSE.txt
LICENSE_SCHEME=		dual

FPC_EQUIVALENT=		net-im/libmesode

INVALID_RPATH=		yes
MUST_CONFIGURE=		gnu

INSTALL_TARGET=		install-strip
SOVERSION=		0.0.0

[FILE:301:descriptions/desc.single]
libmesode is a fork of libstrophe for use in Profanity.

From http://strophe.im/libstrophe/:
libstrophe is a minimal XMPP library written in C. It has almost no
external dependencies, only an XML parsing library (expat or libxml
are both supported). It is designed for both POSIX and Windows
systems.


[FILE:109:distinfo]
746e0646a9176a303a07ec8ed7c443a38416acc743ed19eeddf6a89d97209ffd       149584 boothj5-libmesode-0.9.3.tar.gz


[FILE:130:manifests/plist.single]
include/mesode.h
lib/
 libmesode.a
 libmesode.so
 libmesode.so.%%SOMAJOR%%
 libmesode.so.%%SOVERSION%%
lib/pkgconfig/libmesode.pc


[FILE:974:patches/patch-configure.ac]
--- configure.ac.orig	2018-09-18 18:30:27 UTC
+++ configure.ac
@@ -18,19 +18,19 @@ AS_CASE([$host_os],
                    [PLATFORM="nix"])
 
 PKG_CHECK_MODULES([expat], [expat >= 2.0.0],
-                  [PC_REQUIRES+=(expat)],
+                  [PC_REQUIRES="expat ${PC_REQUIRES}"],
                   [AC_CHECK_HEADER([expat.h],
                                    [
                                     expat_LIBS="-lexpat"
-                                    PC_LIBS+=($expat_LIBS)
+                                    PC_LIBS+=${expat_LIBS}
                                    ],
                                    [AC_MSG_ERROR([expat not found; expat required.])]
                                   )
                   ])
 with_parser=expat
 PARSER_NAME=expat
-PARSER_CFLAGS=$expat_CFLAGS
-PARSER_LIBS=$expat_LIBS
+PARSER_CFLAGS=${expat_CFLAGS}
+PARSER_LIBS=${expat_LIBS}
 
 AC_ARG_ENABLE([tls],
     [AS_HELP_STRING([--disable-tls], [disable TLS support])])


[FILE:1694:patches/patch-src_tls_openssl.c]
diff --git src/tls_openssl.c src/tls_openssl.c
index 83e52f9..20badd7 100644
--- src/tls_openssl.c.orig	2018-09-18 18:30:27 UTC
+++ src/tls_openssl.c
@@ -47,7 +47,7 @@ static void _tls_log_error(xmpp_ctx_t *c
 
 void tls_initialize(void)
 {
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     SSL_library_init();
     SSL_load_error_strings();
 #else
@@ -62,14 +62,14 @@ void tls_shutdown(void)
      * openssl after libstrophe finalization. Maybe better leak some fixed
      * memory rather than cause random crashes of the main program.
      */
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     ERR_free_strings();
     EVP_cleanup();
     CRYPTO_cleanup_all_ex_data();
-#if OPENSSL_VERSION_NUMBER >= 0x10002000L
+#if OPENSSL_VERSION_NUMBER >= 0x10002000L && !defined(LIBRESSL_VERSION_NUMBER)
     SSL_COMP_free_compression_methods();
 #endif
-#if OPENSSL_VERSION_NUMBER < 0x10000000L
+#if OPENSSL_VERSION_NUMBER < 0x10000000L || defined(LIBRESSL_VERSION_NUMBER)
     ERR_remove_state(0);
 #else
     ERR_remove_thread_state(NULL);
@@ -330,7 +330,7 @@ tls_t *tls_new(xmpp_conn_t *conn)
         /* Trust server's certificate when user sets the flag explicitly. */
         mode = conn->tls_trust ? SSL_VERIFY_NONE : SSL_VERIFY_PEER;
         SSL_set_verify(tls->ssl, mode, 0);
-#if OPENSSL_VERSION_NUMBER >= 0x10002000L
+#if OPENSSL_VERSION_NUMBER >= 0x10002000L || !defined(LIBRESSL_VERSION_NUMBER)
         /* Hostname verification is supported in OpenSSL 1.0.2 and newer. */
         X509_VERIFY_PARAM *param = SSL_get0_param(tls->ssl);
 

