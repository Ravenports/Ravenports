# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-qrcode
VERSION=		7.3.1
KEYWORDS=		python
VARIANTS=		py310 py311
SDESC[py310]=		QR Code image generator (3.10)
SDESC[py311]=		QR Code image generator (3.11)
HOMEPAGE=		https://github.com/lincolnloop/python-qrcode
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/q/qrcode
DISTFILE[1]=		qrcode-7.3.1.tar.gz:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py311]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[py311]=		PY310=OFF PY311=ON

DISTNAME=		qrcode-7.3.1

GENERATED=		yes

[PY310].USES_ON=			python:py310,sutools

[PY311].USES_ON=			python:py311,sutools

[FILE:2647:descriptions/desc.single]
=============================
Pure python QR Code generator
=============================

Generate QR codes.

For a standard install (which will include pillow_ for generating images),
run::

    pip install qrcode[pil]

.. _pillow: https://pypi.python.org/pypi/Pillow

What is a QR Code?
==================

A Quick Response code is a two-dimensional pictographic code used for its
fast
readability and comparatively large storage capacity. The code consists of
black modules arranged in a square pattern on a white background. The
information encoded can be made up of any kind of data (e.g., binary,
alphanumeric, or Kanji symbols)

Usage
=====

From the command line, use the installed qr script::

    qr "Some text" > test.png

Or in Python, use the make shortcut function:

.. code:: python

    import qrcode
    img = qrcode.make('Some data here')
    type(img)  # qrcode.image.pil.PilImage
    img.save("some_file.png")

Advanced Usage
--------------

For more control, use the QRCode class. For example:

.. code:: python

    import qrcode
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data('Some data')
    qr.make(fit=True)

    img = qr.make_image(fill_color="black", back_color="white")

The version parameter is an integer from 1 to 40 that controls the size of
the QR Code (the smallest, version 1, is a 21x21 matrix).
Set to None and use the fit parameter when making the code to determine
this automatically.

fill_color and back_color can change the background and the painting
color of the QR, when using the default image factory. Both parameters
accept
RGB color tuples.

.. code:: python

    img = qr.make_image(back_color=(255, 195, 235), fill_color=(55, 95,
35))

The error_correction parameter controls the error correction used for the
QR Code. The following four constants are made available on the qrcode
package:

ERROR_CORRECT_L
    About 7% or less errors can be corrected.
ERROR_CORRECT_M (default)
    About 15% or less errors can be corrected.
ERROR_CORRECT_Q
    About 25% or less errors can be corrected.
ERROR_CORRECT_H.
    About 30% or less errors can be corrected.

The box_size parameter controls how many pixels each "box" of the QR code
is.

The border parameter controls how many boxes thick the border should be
(the default is 4, which is the minimum according to the specs).

Other image factories
=====================

You can encode as SVG, or use a new pure Python image processor to encode
to
PNG images.

The Python examples below use the make shortcut. The same image_factory


[FILE:98:distinfo]
375a6ff240ca9bd41adc070428b5dfc1dcfbb0f2507f1ac848f6cded38956578        43495 qrcode-7.3.1.tar.gz

