# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-qrcode
VERSION=		7.4.2
KEYWORDS=		python
VARIANTS=		v11 v12
SDESC[v11]=		QR Code image generator (3.11)
SDESC[v12]=		QR Code image generator (3.12)
HOMEPAGE=		https://github.com/lincolnloop/python-qrcode
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/24/79/aaf0c1c7214f2632badb2771d770b1500d3d7cbdf2590ae62e721ec50584
DISTFILE[1]=		qrcode-7.4.2-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v11]=		single
SPKGS[v12]=		single

OPTIONS_AVAILABLE=	PY311 PY312
OPTIONS_STANDARD=	none
VOPTS[v11]=		PY311=ON PY312=OFF
VOPTS[v12]=		PY311=OFF PY312=ON

DISTNAME=		qrcode-7.4.2.dist-info

GENERATED=		yes

[PY311].RUN_DEPENDS_ON=			python-typing-extensions:single:v11
					python-pypng:single:v11
[PY311].USES_ON=			python:v11,wheel

[PY312].RUN_DEPENDS_ON=			python-typing-extensions:single:v12
					python-pypng:single:v12
[PY312].USES_ON=			python:v12,wheel

[FILE:2750:descriptions/desc.single]
=============================
Pure python QR Code generator
=============================

Generate QR codes.

A standard install uses pypng_ to generate PNG files and can also render QR
codes directly to the console. A standard install is just::

    pip install qrcode

For more image functionality, install qrcode with the pil dependency so
that pillow_ is installed and can be used for generating images::

    pip install "qrcode[pil]"

.. _pypng: https://pypi.python.org/pypi/pypng
.. _pillow: https://pypi.python.org/pypi/Pillow

What is a QR Code?
==================

A Quick Response code is a two-dimensional pictographic code used for its
fast
readability and comparatively large storage capacity. The code consists of
black modules arranged in a square pattern on a white background. The
information encoded can be made up of any kind of data (e.g., binary,
alphanumeric, or Kanji symbols)

Usage
=====

From the command line, use the installed qr script::

    qr "Some text" > test.png

Or in Python, use the make shortcut function:

.. code:: python

    import qrcode
    img = qrcode.make('Some data here')
    type(img)  # qrcode.image.pil.PilImage
    img.save("some_file.png")

Advanced Usage
--------------

For more control, use the QRCode class. For example:

.. code:: python

    import qrcode
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data('Some data')
    qr.make(fit=True)

    img = qr.make_image(fill_color="black", back_color="white")

The version parameter is an integer from 1 to 40 that controls the size of
the QR Code (the smallest, version 1, is a 21x21 matrix).
Set to None and use the fit parameter when making the code to determine
this automatically.

fill_color and back_color can change the background and the painting
color of the QR, when using the default image factory. Both parameters
accept
RGB color tuples.

.. code:: python

    img = qr.make_image(back_color=(255, 195, 235), fill_color=(55, 95,
35))

The error_correction parameter controls the error correction used for the
QR Code. The following four constants are made available on the qrcode
package:

ERROR_CORRECT_L
    About 7% or less errors can be corrected.
ERROR_CORRECT_M (default)
    About 15% or less errors can be corrected.
ERROR_CORRECT_Q
    About 25% or less errors can be corrected.
ERROR_CORRECT_H.
    About 30% or less errors can be corrected.

The box_size parameter controls how many pixels each "box" of the QR code
is.

The border parameter controls how many boxes thick the border should be
(the default is 4, which is the minimum according to the specs).

Other image factories
=====================


[FILE:108:distinfo]
581dca7a029bcb2deef5d01068e39093e80ef00b4a61098a2182eac59d01643a        46197 qrcode-7.4.2-py3-none-any.whl

