# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-ttp-templates
VERSION=		0.3.2
KEYWORDS=		python
VARIANTS=		py310 py311
SDESC[py310]=		Template Text Parser Templates collections (3.10)
SDESC[py311]=		Template Text Parser Templates collections (3.11)
HOMEPAGE=		https://github.com/dmulyalin/ttp_templates
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/94/6d/151bf9d86912737c7da336cbf57e9ae91a8cccd4751b69d3efbeb8262f37
DISTFILE[1]=		ttp_templates-0.3.2-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py311]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[py311]=		PY310=OFF PY311=ON

DISTNAME=		ttp_templates-0.3.2.dist-info

GENERATED=		yes

[PY310].RUN_DEPENDS_ON=			python-ttp:single:py310
[PY310].USES_ON=			python:py310,wheel

[PY311].RUN_DEPENDS_ON=			python-ttp:single:py311
[PY311].USES_ON=			python:py311,wheel

[FILE:2330:descriptions/desc.single]
[Downloads]
[PyPI versions]

# Template Text Parser Templates

This repository contains a collection of [TTP] templates.

If you solved a problem using TTP and feel that your work can be useful to
other people, feel 
free to raise an issue or submit pull request to include your template(s)
in this repository.
Refer to [Contribute Guide] for details.

Documentation: [https://dmulyalin.github.io/ttp_templates/]

Repository: [https://github.com/dmulyalin/ttp_templates]

TTP: [https://ttp.readthedocs.io/]

## Installation

From PyPi:

`pip install ttp-templates`

or latest from GitHub master branch (need Git installed on the system):

`pip install git+https://github.com/dmulyalin/ttp_templates.git`
 
## Sample usage

This example demonstrates how to parse `Test Platform` output for `show run
| sec interface` command using
`platform/test_platform_show_run_pipe_sec_interface.txt` template.
<details><summary>Code</summary>

```python
from ttp_templates import parse_output
import pprint

data = """
interface GigabitEthernet1/3.251
 description Customer #32148
 encapsulation dot1q 251
 ip address 172.16.33.10 255.255.255.128
 shutdown
!
interface GigabitEthernet1/3.251
 description Customer #32148
 encapsulation dot1q 251
 ip address 172.16.33.10 255.255.255.128
 shutdown
"""

result = parse_output(
    data=data,
    platform="Test Platform",
    command="show run | sec interface"
)

pprint.pprint(result)

# prints:
# [[[{'description': 'Customer #32148',
#     'disabled': True,
#     'dot1q': '251',
#     'interface': 'GigabitEthernet1/3.251',
#     'ip': '172.16.33.10',
#     'mask': '255.255.255.128'},
#    {'description': 'Customer #32148',
#     'disabled': True,
#     'dot1q': '251',
#     'interface': 'GigabitEthernet1/3.251',
#     'ip': '172.16.33.10',
#     'mask': '255.255.255.128'}]]]
```
</details>

Sample code to parse `Cisco IOS` output in a structure compatible with
`ietf-interfaces` YANG module.
<details><summary>Code</summary>

```python
from ttp_templates import get_template
from ttp import ttp
import pprint

data1 = """
interface GigabitEthernet1/3.251
 description Customer #32148
 encapsulation dot1q 251
 ip address 172.16.33.10 255.255.255.128
 shutdown
!
interface GigabitEthernet1/4
 description vCPEs access control
 ip address 172.16.33.10 255.255.255.128
!
"""
data2 = """


[FILE:115:distinfo]
75c6b721f49eb4a4ed31088052eac940fc7e934dcae614c477e24e65c355450b        71185 ttp_templates-0.3.2-py3-none-any.whl

