# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pwdlib
VERSION=		0.2.1
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Modern password hashing for Python (3.12)
SDESC[v13]=		Modern password hashing for Python (3.13)
HOMEPAGE=		https://github.com/frankie567/pwdlib
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/01/f3/0dae5078a486f0fdf4d4a1121e103bc42694a9da9bea7b0f2c63f29cfbd3
DISTFILE[1]=		pwdlib-0.2.1-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		pwdlib-0.2.1.dist-info

GENERATED=		yes

[PY312].USES_ON=			python:v12,wheel

[PY313].USES_ON=			python:v13,wheel

[FILE:1953:descriptions/desc.single]
# pwdlib

<p align="center">
    <em>Modern password hashing for Python</em>
</p>

[build]
[codecov]
[PyPI version]
[Downloads]

<p align="center">

<picture>
  <source media="(prefers-color-scheme: dark)"
srcset="https://polar.sh/embed/subscribe.svg?org=frankie567&darkmode=1">
  [image]
</picture>

</p>

---

**Documentation**: https://frankie567.github.io/pwdlib/

**Source Code**: https://github.com/frankie567/pwdlib

---

## Quickstart

```sh
pip install 'pwdlib[argon2]'
`

`py
from pwdlib import PasswordHash

password_hash = PasswordHash.recommended()
hash = password_hash.hash("herminetincture")
password_hash.verify("herminetincture", hash)  # True
```

## Why `pwdlib`?

For years, the de-facto standard to hash passwords was [`passlib`].
Unfortunately, it has not been very active recently and its [maintenance
status is under question]. Starting Python 3.13, `passlib` won't work
anymore.

That's why I decided to start `pwdlib`, a password hash helper for the
modern Python era. However, it's **not designed to be a complete
replacement** for `passlib`, which supports numerous [hashing algorithms
and features].

**✅ Goals**

- [x] Provide an easy-to-use wrapper to hash and verify passwords
- [x] Support modern and secure algorithms like Argon2 or Bcrypt

**❌ Non-goals**

- [] Support legacy hashing algorithms like MD5
- [] Implement algorithms directly — we should only rely on existing and
battle-tested implementations

## Development

### Setup environment

We use [Hatch] to manage the development environment and production build.
Ensure it's installed on your system.

### Run unit tests

You can run all the tests with:

`bash
hatch run test
`

### Format the code

Execute the following command to apply linting and check typing:

`bash
hatch run lint
`

### Publish a new version

You can bump the version, create a commit and associated tag with one
command:

`bash
hatch version patch
`

`bash
hatch version minor


[FILE:119:distinfo]
1823dc6f22eae472b540e889ecf57fd424051d6a4023ec0bcf7f0de2d9d7ef8c         8082 python-src/pwdlib-0.2.1-py3-none-any.whl

