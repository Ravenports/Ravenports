# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		compiler-rt
VERSION=		13.0.0
KEYWORDS=		lang devel
VARIANTS=		standard
SDESC[standard]=	Compiler runtime libraries for clang
HOMEPAGE=		https://compiler-rt.llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/
DISTFILE[1]=		compiler-rt-13.0.0.src.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	llvm:single:standard

USES=			cmake ninja python:build c++:single

DISTNAME=		compiler-rt-13.0.0.src

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

PLIST_SUB=		OPSYSLC={{OPSYS:tl}}

[FILE:209:descriptions/desc.single]
The compiler-rt project consists of:

builtins 
sanitizer runtimes
- AddressSanitizer
- ThreadSanitizer
- UndefinedBehaviorSanitizer
- MemorySanitizer
- LeakSanitizer
- DataFlowSanitizer
profile
BlocksRuntime


[FILE:108:distinfo]
4c3602d76c7868a96b30c36165c4b7643e2a20173fced7e071b4baeb2d74db3f      2287616 compiler-rt-13.0.0.src.tar.xz


[FILE:1879:manifests/plist.single]
%%ONLY-FREEBSD%%lib/freebsd/
 libclang_rt.asan-preinit-x86_64.a
 libclang_rt.asan-x86_64.a
 libclang_rt.asan-x86_64.a.syms
 libclang_rt.asan-x86_64.so
 libclang_rt.asan_cxx-x86_64.a
 libclang_rt.asan_cxx-x86_64.a.syms
 libclang_rt.cfi-x86_64.a
 libclang_rt.cfi_diag-x86_64.a
 libclang_rt.dd-x86_64.a
 libclang_rt.dyndd-x86_64.so
 libclang_rt.fuzzer-x86_64.a
 libclang_rt.fuzzer_interceptors-x86_64.a
 libclang_rt.fuzzer_no_main-x86_64.a
 libclang_rt.msan-x86_64.a
 libclang_rt.msan-x86_64.a.syms
 libclang_rt.msan_cxx-x86_64.a
 libclang_rt.msan_cxx-x86_64.a.syms
 libclang_rt.profile-x86_64.a
 libclang_rt.safestack-x86_64.a
 libclang_rt.stats-x86_64.a
 libclang_rt.stats_client-x86_64.a
 libclang_rt.tsan-x86_64.a
 libclang_rt.tsan-x86_64.a.syms
 libclang_rt.tsan_cxx-x86_64.a
 libclang_rt.tsan_cxx-x86_64.a.syms
 libclang_rt.ubsan_minimal-x86_64.a
 libclang_rt.ubsan_minimal-x86_64.a.syms
 libclang_rt.ubsan_minimal-x86_64.so
 libclang_rt.ubsan_standalone-x86_64.a
 libclang_rt.ubsan_standalone-x86_64.a.syms
 libclang_rt.ubsan_standalone-x86_64.so
 libclang_rt.ubsan_standalone_cxx-x86_64.a
 libclang_rt.ubsan_standalone_cxx-x86_64.a.syms
 libclang_rt.xray-basic-x86_64.a
 libclang_rt.xray-fdr-x86_64.a
 libclang_rt.xray-profiling-x86_64.a
 libclang_rt.xray-x86_64.a
%%ONLY-FREEBSD%%share/
 asan_ignorelist.txt
 cfi_ignorelist.txt
 msan_ignorelist.txt
include/fuzzer/FuzzedDataProvider.h
include/profile/InstrProfData.inc
include/sanitizer/
 allocator_interface.h
 asan_interface.h
 common_interface_defs.h
 coverage_interface.h
 dfsan_interface.h
 hwasan_interface.h
 linux_syscall_hooks.h
 lsan_interface.h
 msan_interface.h
 netbsd_syscall_hooks.h
 scudo_interface.h
 tsan_interface.h
 tsan_interface_atomic.h
 ubsan_interface.h
include/xray/
 xray_interface.h
 xray_log_interface.h
 xray_records.h
lib/%%OPSYSLC%%/
 libclang_rt.builtins-x86_64.a
 libclang_rt.orc-x86_64.a


[FILE:406:patches/patch-lib_fuzzer_FuzzerSHA1.cpp]
--- lib/fuzzer/FuzzerSHA1.cpp.orig	2021-09-24 16:18:10 UTC
+++ lib/fuzzer/FuzzerSHA1.cpp
@@ -40,7 +40,11 @@ namespace {  // Added for LibFuzzer
 # define SHA_BIG_ENDIAN
 # endif
 #else // ! defined __LITTLE_ENDIAN__
+# if LIBFUZZER_FREEBSD
+# include <sys/endian.h>
+# else
 # include <endian.h> // machine/endian.h
+# endif
 # if __BYTE_ORDER__ ==  __ORDER_BIG_ENDIAN__
 #  define SHA_BIG_ENDIAN
 # endif


[FILE:319:patches/patch-lib_sanitizer__common_sanitizer__platform__limits__freebsd.cpp]
--- lib/sanitizer_common/sanitizer_platform_limits_freebsd.cpp.orig	2021-09-24 16:18:10 UTC
+++ lib/sanitizer_common/sanitizer_platform_limits_freebsd.cpp
@@ -71,7 +71,6 @@
 #include <stddef.h>
 #include <stdio.h>
 #include <stringlist.h>
-#include <term.h>
 #include <termios.h>
 #include <time.h>
 #include <utime.h>

