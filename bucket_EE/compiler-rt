# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		compiler-rt
VERSION=		19.1.7
KEYWORDS=		lang devel
VARIANTS=		std
SDESC[std]=		Compiler runtime libraries for clang
HOMEPAGE=		https://compiler-rt.llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.7/
DISTFILE[1]=		compiler-rt-19.1.7.src.tar.xz:main
DISTFILE[2]=		cmake-19.1.7.src.tar.xz:main
DF_INDEX=		1 2
SPKGS[std]=		single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BROKEN[freebsd]=	Needs sha224.h header
BROKEN[netbsd]=		missing headers from system root

BUILD_DEPENDS=		llvm:dev:std
			llvm:tools:std
			libxml2:dev:std
BUILDRUN_DEPENDS=	llvm:primary:std
B_DEPS[freebsd]=	libmd:dev:std
B_DEPS[netbsd]=		libmd:dev:std
BR_DEPS[freebsd]=	libmd:primary:std
BR_DEPS[netbsd]=	libmd:primary:std

USES=			cpe cmake ninja zlib:build ncurses:build
			python:build c++:single

DISTNAME=		compiler-rt-19.1.7.src

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CPE_PRODUCT=		llvm
CPE_VENDOR=		llvm

PLIST_SUB=		OPSYSLC={{OPSYS:tl}}

post-install:
	${FIND} ${STAGEDIR}${PREFIX}/lib/ -name "libclang_*.so" -exec ${STRIP_CMD} {} \;

post-extract:
	${MKDIR} ${WRKDIR}/cmake/Modules
	${CP} ${WRKDIR}/cmake-19.1.7.src/Modules/* ${WRKDIR}/cmake/Modules/

[FILE:209:descriptions/desc.single]
The compiler-rt project consists of:

builtins 
sanitizer runtimes
- AddressSanitizer
- ThreadSanitizer
- UndefinedBehaviorSanitizer
- MemorySanitizer
- LeakSanitizer
- DataFlowSanitizer
profile
BlocksRuntime


[FILE:210:distinfo]
c12b6e764202c615c1a3af9a13d477846878757ae0e29e5f8979215a6958fffc      2530008 compiler-rt-19.1.7.src.tar.xz
11c5a28f90053b0c43d0dec3d0ad579347fc277199c005206b963c19aae514e3         9300 cmake-19.1.7.src.tar.xz


[FILE:4452:manifests/plist.single]
%%ONLY-FREEBSD%%lib/freebsd/
 libclang_rt.asan-preinit-x86_64.a
 libclang_rt.asan-x86_64.a
 libclang_rt.asan-x86_64.a.syms
 libclang_rt.asan-x86_64.so
 libclang_rt.asan_cxx-x86_64.a
 libclang_rt.asan_cxx-x86_64.a.syms
 libclang_rt.cfi-x86_64.a
 libclang_rt.cfi_diag-x86_64.a
 libclang_rt.dd-x86_64.a
 libclang_rt.dyndd-x86_64.so
 libclang_rt.fuzzer-x86_64.a
 libclang_rt.fuzzer_interceptors-x86_64.a
 libclang_rt.fuzzer_no_main-x86_64.a
 libclang_rt.msan-x86_64.a
 libclang_rt.msan-x86_64.a.syms
 libclang_rt.msan_cxx-x86_64.a
 libclang_rt.msan_cxx-x86_64.a.syms
 libclang_rt.profile-x86_64.a
 libclang_rt.safestack-x86_64.a
 libclang_rt.stats-x86_64.a
 libclang_rt.stats_client-x86_64.a
 libclang_rt.tsan-x86_64.a
 libclang_rt.tsan-x86_64.a.syms
 libclang_rt.tsan_cxx-x86_64.a
 libclang_rt.tsan_cxx-x86_64.a.syms
 libclang_rt.ubsan_minimal-x86_64.a
 libclang_rt.ubsan_minimal-x86_64.a.syms
 libclang_rt.ubsan_minimal-x86_64.so
 libclang_rt.ubsan_standalone-x86_64.a
 libclang_rt.ubsan_standalone-x86_64.a.syms
 libclang_rt.ubsan_standalone-x86_64.so
 libclang_rt.ubsan_standalone_cxx-x86_64.a
 libclang_rt.ubsan_standalone_cxx-x86_64.a.syms
 libclang_rt.xray-basic-x86_64.a
 libclang_rt.xray-fdr-x86_64.a
 libclang_rt.xray-profiling-x86_64.a
 libclang_rt.xray-x86_64.a
%%ONLY-FREEBSD%%share/
 asan_ignorelist.txt
 cfi_ignorelist.txt
 msan_ignorelist.txt
%%ONLY-LINUX%%bin/hwasan_symbolize
%%ONLY-LINUX%%lib/linux/
 clang_rt.crtbegin-x86_64.o
 clang_rt.crtend-x86_64.o
 libclang_rt.asan-preinit-x86_64.a
 libclang_rt.asan-x86_64.a
 libclang_rt.asan-x86_64.a.syms
 libclang_rt.asan-x86_64.so
 libclang_rt.asan_cxx-x86_64.a
 libclang_rt.asan_cxx-x86_64.a.syms
 libclang_rt.asan_static-x86_64.a
 libclang_rt.cfi-x86_64.a
 libclang_rt.cfi_diag-x86_64.a
 libclang_rt.ctx_profile-x86_64.a
 libclang_rt.dd-x86_64.a
 libclang_rt.dfsan-x86_64.a
 libclang_rt.dfsan-x86_64.a.syms
 libclang_rt.dyndd-x86_64.so
 libclang_rt.fuzzer-x86_64.a
 libclang_rt.fuzzer_interceptors-x86_64.a
 libclang_rt.fuzzer_no_main-x86_64.a
 libclang_rt.gwp_asan-x86_64.a
 libclang_rt.hwasan-preinit-x86_64.a
 libclang_rt.hwasan-x86_64.a
 libclang_rt.hwasan-x86_64.a.syms
 libclang_rt.hwasan-x86_64.so
 libclang_rt.hwasan_aliases-x86_64.a
 libclang_rt.hwasan_aliases-x86_64.a.syms
 libclang_rt.hwasan_aliases-x86_64.so
 libclang_rt.hwasan_aliases_cxx-x86_64.a
 libclang_rt.hwasan_aliases_cxx-x86_64.a.syms
 libclang_rt.hwasan_cxx-x86_64.a
 libclang_rt.hwasan_cxx-x86_64.a.syms
 libclang_rt.lsan-x86_64.a
 libclang_rt.memprof-preinit-x86_64.a
 libclang_rt.memprof-x86_64.a
 libclang_rt.memprof-x86_64.a.syms
 libclang_rt.memprof-x86_64.so
 libclang_rt.memprof_cxx-x86_64.a
 libclang_rt.memprof_cxx-x86_64.a.syms
 libclang_rt.msan-x86_64.a
 libclang_rt.msan-x86_64.a.syms
 libclang_rt.msan_cxx-x86_64.a
 libclang_rt.msan_cxx-x86_64.a.syms
 libclang_rt.nsan-x86_64.a
 libclang_rt.nsan-x86_64.so
 libclang_rt.profile-x86_64.a
 libclang_rt.rtsan-x86_64.a
 libclang_rt.safestack-x86_64.a
 libclang_rt.scudo_standalone-x86_64.a
 libclang_rt.scudo_standalone-x86_64.so
 libclang_rt.scudo_standalone_cxx-x86_64.a
 libclang_rt.stats-x86_64.a
 libclang_rt.stats_client-x86_64.a
 libclang_rt.tsan-x86_64.a
 libclang_rt.tsan-x86_64.a.syms
 libclang_rt.tsan-x86_64.so
 libclang_rt.tsan_cxx-x86_64.a
 libclang_rt.tsan_cxx-x86_64.a.syms
 libclang_rt.ubsan_minimal-x86_64.a
 libclang_rt.ubsan_minimal-x86_64.a.syms
 libclang_rt.ubsan_minimal-x86_64.so
 libclang_rt.ubsan_standalone-x86_64.a
 libclang_rt.ubsan_standalone-x86_64.a.syms
 libclang_rt.ubsan_standalone-x86_64.so
 libclang_rt.ubsan_standalone_cxx-x86_64.a
 libclang_rt.ubsan_standalone_cxx-x86_64.a.syms
 libclang_rt.xray-basic-x86_64.a
 libclang_rt.xray-fdr-x86_64.a
 libclang_rt.xray-profiling-x86_64.a
 libclang_rt.xray-x86_64.a
%%ONLY-LINUX%%share/
 asan_ignorelist.txt
 cfi_ignorelist.txt
 dfsan_abilist.txt
 hwasan_ignorelist.txt
 msan_ignorelist.txt
include/fuzzer/FuzzedDataProvider.h
include/orc/c_api.h
include/profile/
 InstrProfData.inc
 instr_prof_interface.h
include/sanitizer/
 allocator_interface.h
 asan_interface.h
 common_interface_defs.h
 coverage_interface.h
 dfsan_interface.h
 hwasan_interface.h
 linux_syscall_hooks.h
 lsan_interface.h
 memprof_interface.h
 msan_interface.h
 netbsd_syscall_hooks.h
 scudo_interface.h
 tsan_interface.h
 tsan_interface_atomic.h
 ubsan_interface.h
include/xray/
 xray_interface.h
 xray_log_interface.h
 xray_records.h
lib/%%OPSYSLC%%/
 libclang_rt.builtins-x86_64.a
 liborc_rt-x86_64.a


[FILE:600:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2024-10-29 10:09:39 UTC
+++ CMakeLists.txt
@@ -200,16 +200,8 @@ macro(handle_default_cxx_lib var)
     set(${var}_LIBNAME "${CMAKE_MATCH_1}")
     set(${var}_SYSTEM 1)
   elseif (${var} STREQUAL "default")
-    if (APPLE OR CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
-      set(${var}_LIBNAME "libc++")
-      set(${var}_SYSTEM 1)
-    elseif (FUCHSIA)
-      set(${var}_LIBNAME "libc++")
-      set(${var}_INTREE 1)
-    else()
       set(${var}_LIBNAME "libstdc++")
       set(${var}_SYSTEM 1)
-    endif()
   else()
     set(${var}_LIBNAME "${${var}}")
     set(${var}_SYSTEM 1)


[FILE:406:patches/patch-lib_fuzzer_FuzzerSHA1.cpp]
--- lib/fuzzer/FuzzerSHA1.cpp.orig	2024-10-29 10:09:39 UTC
+++ lib/fuzzer/FuzzerSHA1.cpp
@@ -40,7 +40,11 @@ namespace {  // Added for LibFuzzer
 # define SHA_BIG_ENDIAN
 # endif
 #else // ! defined __LITTLE_ENDIAN__
+# if LIBFUZZER_FREEBSD
+# include <sys/endian.h>
+# else
 # include <endian.h> // machine/endian.h
+# endif
 # if __BYTE_ORDER__ ==  __ORDER_BIG_ENDIAN__
 #  define SHA_BIG_ENDIAN
 # endif


[FILE:320:patches/patch-lib_sanitizer__common_sanitizer__platform__limits__freebsd.cpp]
--- lib/sanitizer_common/sanitizer_platform_limits_freebsd.cpp.orig	2024-10-29 10:09:39 UTC
+++ lib/sanitizer_common/sanitizer_platform_limits_freebsd.cpp
@@ -77,7 +77,6 @@
 #include <sha512.h>
 #include <stdio.h>
 #include <stringlist.h>
-#include <term.h>
 #include <termios.h>
 #include <time.h>
 #include <ttyent.h>


[FILE:877:patches/patch-lib_sanitizer__common_sanitizer__platform__limits__netbsd.cpp]
--- lib/sanitizer_common/sanitizer_platform_limits_netbsd.cpp.orig	2024-10-29 10:09:39 UTC
+++ lib/sanitizer_common/sanitizer_platform_limits_netbsd.cpp
@@ -47,7 +47,6 @@
 #include <sys/ioctl_compat.h>
 #include <sys/joystick.h>
 #include <sys/ksyms.h>
-#include <sys/lua.h>
 #include <sys/midiio.h>
 #include <sys/mtio.h>
 #include <sys/power.h>
@@ -493,12 +492,7 @@ struct urio_command {
 #include <semaphore.h>
 #include <signal.h>
 #include <stddef.h>
-#include <md2.h>
-#include <md4.h>
-#include <md5.h>
-#include <rmd160.h>
 #include <soundcard.h>
-#include <term.h>
 #include <termios.h>
 #include <time.h>
 #include <ttyent.h>
@@ -514,9 +508,6 @@ struct urio_command {
 #include <fstab.h>
 #include <stringlist.h>
 
-#if defined(__x86_64__)
-#include <nvmm.h>
-#endif
 // clang-format on
 
 // Include these after system headers to avoid name clashes and ambiguities.

