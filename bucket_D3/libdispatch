# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libdispatch
VERSION=		5.8
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Apple's Grand Central Dispatch library
HOMEPAGE=		none
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/apple:swift-corelibs-libdispatch:swift-5.8-RELEASE
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			dev
			man

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		linux

USES=			cmake clang c++:primary

LICENSE=		APACHE20:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/dispatch/dispatch.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/libdispatch

CFLAGS=			-D_GNU_SOURCE
CXXFLAGS=		-D_GNU_SOURCE

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/*.so

[FILE:427:descriptions/desc.primary]
Grand Central Dispatch (GCD or libdispatch) provides comprehensive support
for concurrent code execution on multicore hardware.

libdispatch is currently available on Darwin and Linux platforms. This
project aims to make a modern version of libdispatch available on all
other Swift platforms. To do this, we will implement as much of the
portable subset of the API as possible, using the existing open source C
implementation.


[FILE:136:distinfo]
391d2bcaea22c4aa980400c3a29b3d9991641aa62253b693c0b79c302eafd5a0       594259 apple-swift-corelibs-libdispatch-swift-5.8-RELEASE.tar.gz


[FILE:42:manifests/plist.primary]
lib/
 libBlocksRuntime.so
 libdispatch.so


[FILE:224:manifests/plist.dev]
include/Block.h
include/dispatch/
 base.h
 block.h
 data.h
 dispatch.h
 group.h
 introspection.h
 io.h
 object.h
 once.h
 queue.h
 semaphore.h
 source.h
 time.h
include/os/
 generic_unix_base.h
 generic_win_base.h
 object.h


[FILE:387:manifests/plist.man]
share/man/man3/
 dispatch.3.gz
 dispatch_after.3.gz
 dispatch_api.3.gz
 dispatch_apply.3.gz
 dispatch_async.3.gz
 dispatch_data_create.3.gz
 dispatch_group_create.3.gz
 dispatch_io_create.3.gz
 dispatch_io_read.3.gz
 dispatch_object.3.gz
 dispatch_once.3.gz
 dispatch_queue_create.3.gz
 dispatch_read.3.gz
 dispatch_semaphore_create.3.gz
 dispatch_source_create.3.gz
 dispatch_time.3.gz


[FILE:474:patches/patch-avoid-libkqueue]
Patch-Source: https://github.com/archlinux/svntogit-community/blob/packages/libdispatch/trunk/avoid-libkqueue.patch

--- tests/dispatch_test.c.orig	2022-10-01 15:48:05 UTC
+++ tests/dispatch_test.c
@@ -30,7 +30,7 @@
 #include <stdio.h>
 #if defined(__unix__) || (defined(__APPLE__) && defined(__MACH__))
 #include <unistd.h>
-#if __has_include(<sys/event.h>)
+#if __has_include(<sys/event.h>) && !defined(__linux__)
 #define HAS_SYS_EVENT_H 1
 #include <sys/event.h>
 #else


[FILE:643:patches/patch-remove-werror]
Patch-Source: https://github.com/archlinux/svntogit-community/blob/packages/libdispatch/trunk/remove-werror.patch

--- cmake/modules/DispatchCompilerWarnings.cmake.orig	2022-10-01 15:48:05 UTC
+++ cmake/modules/DispatchCompilerWarnings.cmake
@@ -2,7 +2,6 @@
 if("${CMAKE_C_SIMULATE_ID}" STREQUAL "MSVC")
   # TODO: someone needs to provide the msvc equivalent warning flags
 else()
-  add_compile_options($<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:-Werror>)
   add_compile_options($<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:-Wall>)
   add_compile_options($<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:-Wextra>)
 

