# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-netbox-acls
VERSION=		1.2.0
KEYWORDS=		python
VARIANTS=		py310 py311
SDESC[py310]=		NetBox plugin for Access List management (3.10)
SDESC[py311]=		NetBox plugin for Access List management (3.11)
HOMEPAGE=		https://github.com/ryanmerolle/netbox-acls
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/48/6f/301a0beea7bac7473aea2281ad09dd0464484e45d5c1589590a000c2daca
DISTFILE[1]=		netbox_acls-1.2.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py311]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[py311]=		PY310=OFF PY311=ON

DISTNAME=		netbox_acls-1.2.0.dist-info

GENERATED=		yes

[PY310].USES_ON=			python:py310,wheel

[PY311].USES_ON=			python:py311,wheel

[FILE:2499:descriptions/desc.single]
# NetBox Access Lists Plugin

A [Netbox] plugin for Access List management.

## Features

This plugin provides the following models:

- Access Lists
- Access List to Interface Assignment
- Access List Rules (abstract model bassis for other rules)
- Access List Standard Rules
- Access List Extended Rules

## Origin

Based on the NetBox plugin tutorial by [jeremystretch]:

- [demo repository]
- [tutorial]

All credit should go to Jeremy. Thanks, Jeremy!

This project just looks to build on top of this framework and model
presented.

## Contributing

This project is currently maintained jointly by:

- [Abhimanyu Saharan]
- [Ryan Merolle]

See the [CONTRIBUTING] for more information.

## Compatibility

Each Plugin Version listed below has been tested with its corresponding
NetBox Version.

| NetBox Version | Plugin Version |
|:--------------:|:--------------:|
|      3.2       |     1.0.1      |
|      3.3       |     1.1.0      |
|      3.4       |     1.2.0      |

## Installing

For adding to a NetBox Docker setup see
[the general instructions for using netbox-docker with plugins].

You can install with pip:

```bash
pip install netbox-acls
```

or by adding to your `local_requirements.txt` or `plugin_requirements.txt`
(netbox-docker):

```bash
netbox-acls
```

Enable the plugin in `/opt/netbox/netbox/netbox/configuration.py`,
 or if you use netbox-docker, your `/configuration/plugins.py` file :

```python
PLUGINS = [
    'netbox_acls'
]

PLUGINS_CONFIG = {
    "netbox_acls": {},
}
```

## Developing

### VSCode + Docker + Dev Containers

To develop this plugin further one can use the included .devcontainer
configuration. This configuration creates a docker container which includes
a fully working netbox installation. Currently it should work when using
WSL 2. For this to work make sure you have Docker Desktop installed and the
WSL 2 integrations activated.

1. In the WSL terminal, enter `code` to run Visual studio code.
2. Install the devcontainer extension "ms-vscode-remote.remote-containers"
3. Press Ctrl+Shift+P and use the "Dev Container: Clone Repository in
Container Volume" function to clone this repository. This will take a while
depending on your computer
4. If you'd like the netbox instance to be prepopulated with example data
from [netbox-initializers] run `make  initializers`
5. Start the netbox instance using `make all`

Your netbox instance will be served under 0.0.0.0:8000, so it should now be
available under localhost:8000.

## Screenshots


[FILE:113:distinfo]
3757808a44851a89ee3db2c380b70b83c1d053c8906fe23921b9474bd9a40ef2        37511 netbox_acls-1.2.0-py3-none-any.whl

