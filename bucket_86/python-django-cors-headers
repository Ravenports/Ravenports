# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-django-cors-headers
VERSION=		3.13.0
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Django handler for CORS server headers (3.10)
SDESC[py39]=		Django handler for CORS server headers (3.9)
HOMEPAGE=		https://github.com/adamchainz/django-cors-headers
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/db/e2/912cdc408f7ddc07967e94c3d785389c36fbfdcb48755393fbf65a02aabf
DISTFILE[1]=		django_cors_headers-3.13.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		django_cors_headers-3.13.0.dist-info

GENERATED=		yes

[PY39].RUN_DEPENDS_ON=			python-Django:single:py39
[PY39].USES_ON=				python:py39,wheel

[PY310].RUN_DEPENDS_ON=			python-Django:single:py310
[PY310].USES_ON=			python:py310,wheel

[FILE:2545:descriptions/desc.single]
===================
django-cors-headers
===================

   :alt: pre-commit

A Django App that adds Cross-Origin Resource Sharing (CORS) headers to
responses. This allows in-browser requests to your Django application from
other origins.

About CORS
----------

Adding CORS headers allows your resources to be accessed on other domains.
It's
important you understand the implications before adding the headers, since
you
could be unintentionally opening up your site's private data to others.

Some good resources to read on the subject are:

* Julia Evans' [introductory comic] and
  [educational quiz].
* Jake Archibaldâ€™s [How to win at CORS]
* The [MDN Article]
* The [HTML5 Rocks Tutorial]
* The [Wikipedia Page]

Requirements
------------

Python 3.7 to 3.11 supported.

Django 3.2 to 4.1 supported.

----

**Want to work smarter and faster?**
Check out my book [Boost Your Django DX] which covers many ways to improve
your development experience.

----

Setup
-----

Install from **pip**:

.. code-block:: sh

    python -m pip install django-cors-headers

and then add it to your installed apps:

.. code-block:: python

    INSTALLED_APPS = [
        ...,
        "corsheaders",
        ...,
   ]

Make sure you add the trailing comma or you might get a ModuleNotFoundError
(see [this blog
post]).

You will also need to add a middleware class to listen in on responses:

.. code-block:: python

    MIDDLEWARE = [
        ...,
        "corsheaders.middleware.CorsMiddleware",
        "django.middleware.common.CommonMiddleware",
        ...,
   ]

CorsMiddleware should be placed as high as possible, especially before any
middleware that can generate responses such as Django's CommonMiddleware or
Whitenoise's WhiteNoiseMiddleware. If it is not before, it will not be able
to add the CORS headers to these responses.

Also if you are using CORS_REPLACE_HTTPS_REFERER it should be placed before
Django's CsrfViewMiddleware (see more below).

About
-----

**django-cors-headers** was created in January 2013 by Otto Yiu. It went
unmaintained from August 2015 and was forked in January 2016 to the package
`django-cors-middleware
<https://github.com/zestedesavoir/django-cors-middleware>`_
by Laville Augustin at Zeste de Savoir.
In September 2016, Adam Johnson, Ed Morley, and others gained maintenance
responsibility for **django-cors-headers**
([Issue 110])
from Otto Yiu.
Basically all of the changes in the forked **django-cors-middleware** were
merged back, or re-implemented in a different way, so it should be possible
to


[FILE:122:distinfo]
37e42883b5f1f2295df6b4bba96eb2417a14a03270cb24b2a07f021cd4487cf4        13115 django_cors_headers-3.13.0-py3-none-any.whl

