# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-django-cors-headers
VERSION=		3.5.0
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Django handler for CORS server headers (PY37)
SDESC[py38]=		Django handler for CORS server headers (PY38)
HOMEPAGE=		https://github.com/adamchainz/django-cors-headers
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/51/99/41898d5eddb68bc5545c08f5315e00d6036cc6f1aba5fd824042dd1b04ea
DISTFILE[1]=		django_cors_headers-3.5.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		django_cors_headers-3.5.0.dist-info

GENERATED=		yes

[PY37].BUILD_DEPENDS_ON=		python-pip:single:py37
[PY37].RUN_DEPENDS_ON=			python-Django:single:py37
[PY37].USES_ON=				python:py37,wheel

[PY38].BUILD_DEPENDS_ON=		python-pip:single:py38
[PY38].RUN_DEPENDS_ON=			python-Django:single:py38
[PY38].USES_ON=				python:py38,wheel

[FILE:2586:descriptions/desc.single]
django-cors-headers
===================

A Django App that adds Cross-Origin Resource Sharing (CORS) headers to
responses. This allows in-browser requests to your Django application from
other origins.

About CORS
----------

Adding CORS headers allows your resources to be accessed on other domains.
It's
important you understand the implications before adding the headers, since
you
could be unintentionally opening up your site's private data to others.

Some good resources to read on the subject are:

* Julia Evans' [introductory comic]
* The [Wikipedia Page]
* The [MDN Article]
* The [HTML5 Rocks Tutorial]

Requirements
------------

Python 3.5 to 3.8 supported.

Django 2.2 to 3.0 supported.

----

**Are your tests slow?**
Check out my book [Speed Up Your Django Tests] which covers loads of best
practices so you can write faster, more accurate tests.

----

Setup
-----

Install from **pip**:

.. code-block:: sh

    python -m pip install django-cors-headers

and then add it to your installed apps:

.. code-block:: python

    INSTALLED_APPS = [
        ...
        'corsheaders',
        ...
   ]

Make sure you add the trailing comma or you might get a ModuleNotFoundError
(see [this blog
post]).

You will also need to add a middleware class to listen in on responses:

.. code-block:: python

    MIDDLEWARE = [
        ...
        'corsheaders.middleware.CorsMiddleware',
        'django.middleware.common.CommonMiddleware',
        ...
   ]

CorsMiddleware should be placed as high as possible, especially before any
middleware that can generate responses such as Django's CommonMiddleware or
Whitenoise's WhiteNoiseMiddleware. If it is not before, it will not be able
to add the CORS headers to these responses.

Also if you are using CORS_REPLACE_HTTPS_REFERER it should be placed before
Django's CsrfViewMiddleware (see more below).

About
-----

**django-cors-headers** was created in January 2013 by Otto Yiu. It went
unmaintained from August 2015 and was forked in January 2016 to the package
`django-cors-middleware
<https://github.com/zestedesavoir/django-cors-middleware>`_
by Laville Augustin at Zeste de Savoir.
In September 2016, Adam Johnson, Ed Morley, and others gained maintenance
responsibility for **django-cors-headers**
([Issue 110])
from Otto Yiu.
Basically all of the changes in the forked **django-cors-middleware** were
merged back, or re-implemented in a different way, so it should be possible
to
switch back. If there's a feature that hasn't been merged, please open an
issue
about it.

**django-cors-headers** has had `40+ contributors


[FILE:121:distinfo]
9322255c296d5f75089571f29e520c83ff9693df17aa3cf9f6a4bea7c6740169        11904 django_cors_headers-3.5.0-py3-none-any.whl

