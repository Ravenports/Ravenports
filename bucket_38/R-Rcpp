# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		R-Rcpp
VERSION=		1.0.8
KEYWORDS=		cran
VARIANTS=		standard
SDESC[standard]=	Seamless R and C++ Integration
HOMEPAGE=		http://www.rcpp.org
CONTACT=		CRAN_Automaton[cran@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		CRAN/src/contrib
DISTFILE[1]=		Rcpp_1.0.8.tar.gz:main
DIST_SUBDIR=		CRAN
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cran gmake

DISTNAME=		Rcpp

GENERATED=		yes

INSTALL_REQ_TOOLCHAIN=	yes

post-patch:
	${REINPLACE_CMD} -i'' -e "s|#!/bin/bash|#!${LOCALBASE}/bin/bash|" \
		${WRKSRC}/inst/examples/ConvolveBenchmarks/buildAndRun.sh \
		${WRKSRC}/inst/examples/ConvolveBenchmarks/overhead.sh
	${REINPLACE_CMD} -i'' -e "s|#!/usr/bin/r|#!${LOCALBASE}/bin/R|" \
		${WRKSRC}/inst/examples/*/*.r \
		${WRKSRC}/inst/examples/*/*.R

[FILE:974:descriptions/desc.single]
Rcpp: Seamless R and C++ Integration

The 'Rcpp' package provides R functions as well as C++ classes which offer
a seamless integration of R and C++. Many R data types and objects can be
mapped back and forth to C++ equivalents which facilitates both writing of
new code as well as easier integration of third-party libraries.
Documentation about 'Rcpp' is provided by several vignettes included in
this package, via the 'Rcpp Gallery' site at &lt;<a
href="https://gallery.rcpp.org">https://gallery.rcpp.org</a>&gt;, the paper
by Eddelbuettel and Francois (2011, &lt;<a
href="https://doi.org/10.18637%2Fjss.v040.i08">doi:10.18637/jss.v040.i08</a>&gt;),
the book by Eddelbuettel (2013, &lt;<a
href="https://doi.org/10.1007%2F978-1-4614-6868-4">doi:10.1007/978-1-4614-6868-4</a>&gt;)
and the paper by Eddelbuettel and Balamuta (2018, &lt;<a
href="https://doi.org/10.1080%2F00031305.2017.1375990">doi:10.1080/00031305.2017.1375990</a>&gt;);
see 'citation("Rcpp")' for details.


[FILE:101:distinfo]
879f9296bc045ac4ed464578723bd37fcabbbdaa30aaaf070cf953e329f678ee      3036631 CRAN/Rcpp_1.0.8.tar.gz


[FILE:1269:patches/patch-inst_include_Rcpp_Benchmark_Timer.h]
--- inst/include/Rcpp/Benchmark/Timer.h.orig	2018-04-25 13:15:17 UTC
+++ inst/include/Rcpp/Benchmark/Timer.h
@@ -34,7 +34,7 @@
     #include <windows.h>
 #elif defined(__APPLE__)
     #include <mach/mach_time.h>
-#elif defined(linux) || defined(__linux) || defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__GLIBC__) || defined(__GNU__) || defined(__CYGWIN__)
+#elif defined(linux) || defined(__linux) || defined(__DragonFly__)|| defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__GLIBC__) || defined(__GNU__) || defined(__CYGWIN__)
     #include <time.h>
 #elif defined(sun) || defined(__sun) || defined(_AIX)
     #include <sys/time.h>
@@ -70,7 +70,7 @@ namespace Rcpp{
         return time * (info.numer / info.denom);
     }
 
-#elif defined(linux) || defined(__linux) || defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__GLIBC__) || defined(__GNU__) || defined(__CYGWIN__)
+#elif defined(linux) || defined(__linux) || defined(__DragonFly__) || defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__GLIBC__) || defined(__GNU__) || defined(__CYGWIN__)
 
     static const nanotime_t nanoseconds_in_second = static_cast<nanotime_t>(1000000000.0);
 


[FILE:347:patches/patch-inst_include_Rcpp_exceptions__impl.h]
--- inst/include/Rcpp/exceptions_impl.h.orig	2020-03-22 12:40:50 UTC
+++ inst/include/Rcpp/exceptions_impl.h
@@ -25,6 +25,7 @@
 #ifndef RCPP_DEMANGLER_ENABLED
 # if defined(_WIN32)     || \
     defined(__FreeBSD__) || \
+    defined(__DragonFly__) || \
     defined(__NetBSD__)  || \
     defined(__OpenBSD__) || \
     defined(__CYGWIN__)  || \

