# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		xorg-cf-files
VERSION=		1.0.8
REVISION=		1
KEYWORDS=		x11
VARIANTS=		std
SDESC[std]=		X.org cf files for use with imake builds
HOMEPAGE=		https://www.x.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		XORG/individual/util/
DISTFILE[1]=		xorg-cf-files-1.0.8.tar.xz:main
DF_INDEX=		1
SPKGS[std]=		single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

FPC_EQUIVALENT=		x11/xorg-cf-files

MUST_CONFIGURE=		gnu

post-patch:
	${MV} ${WRKSRC}/NetBSD.cf ${WRKSRC}/NetBSD.cf.original
	${CP} ${WRKSRC}/DragonFly.cf ${WRKSRC}/NetBSD.cf

pre-configure-midnightbsd:
	${CP} ${FILESDIR}/MidnightBSD.cf ${WRKSRC}/FreeBSD.cf

pre-configure:
	${REINPLACE_CMD} 's|\(define ExtraXaw[^ ]*\) [$$].*|\1 /**/|' \
			${WRKSRC}/X11.tmpl
	# Tweak NetBSD some more
	${REINPLACE_CMD} -e '/osreldate.h/d' \
		-e 's/__DragonFly_version/DefaultOSTeenyVersion/' \
		${WRKSRC}/NetBSD.cf

[FILE:48:descriptions/desc.single]
X.org cf files for use with imake based builds.


[FILE:105:distinfo]
7408955defcfab0f44d1bedd4ec0c20db61914917ad17bfc1f1c9bf56acc17b9       290280 xorg-cf-files-1.0.8.tar.xz


[FILE:1425:manifests/plist.single]
lib/X11/config/
 Amoeba.cf
 DGUX.cf
 DragonFly.cf
 FreeBSD.cf
 Imake.cf
 Imake.rules
 Imake.tmpl
 Library.tmpl
 Mips.cf
 Motif.rules
 Motif.tmpl
 NetBSD.cf
 Oki.cf
 OpenBSD.cf
 OpenBSDLib.rules
 OpenBSDLib.tmpl
 QNX4.cf
 QNX4.rules
 Server.tmpl
 ServerLib.tmpl
 Threads.tmpl
 Win32.cf
 Win32.rules
 WinLib.tmpl
 X11.rules
 X11.tmpl
 apollo.cf
 bsd.cf
 bsdLib.rules
 bsdLib.tmpl
 bsdi.cf
 bsdiLib.rules
 bsdiLib.tmpl
 cde.rules
 cde.tmpl
 convex.cf
 cray.cf
 cross.def
 cross.rules
 cygwin.cf
 cygwin.rules
 cygwin.tmpl
 darwin.cf
 darwinLib.rules
 darwinLib.tmpl
 date.def
 dmx.cf
 fujitsu.cf
 generic.cf
 gnu.cf
 gnuLib.rules
 gnuLib.tmpl
 host.def
 hp.cf
 hpLib.rules
 hpLib.tmpl
 ibm.cf
 ibmLib.rules
 ibmLib.tmpl
 isc.cf
 linux.cf
 lnxLib.rules
 lnxLib.tmpl
 lnxdoc.rules
 lnxdoc.tmpl
 luna.cf
 lynx.cf
 macII.cf
 mach.cf
 mingw.cf
 mingw.rules
 mingw.tmpl
 minix.cf
 moto.cf
 ncr.cf
 nec.cf
 necLib.rules
 necLib.tmpl
 noop.rules
 nto.cf
 nto.rules
 oldlib.rules
 os2.cf
 os2.rules
 os2Lib.rules
 os2Lib.tmpl
 osf1.cf
 osfLib.rules
 osfLib.tmpl
 pegasus.cf
 sco.cf
 sco5.cf
 scoLib.rules
 sequent.cf
 sequentLib.rules
 sgi.cf
 sgiLib.rules
 sgiLib.tmpl
 site.def
 sony.cf
 sun.cf
 sunLib.rules
 sunLib.tmpl
 sv3Lib.rules
 sv3Lib.tmpl
 sv4Lib.rules
 sv4Lib.tmpl
 svr3.cf
 svr4.cf
 ultrix.cf
 usl.cf
 version.def
 x386.cf
 xf86.rules
 xf86.tmpl
 xf86site.def
 xfree86.cf
 xorg.cf
 xorg.tmpl
 xorgsite.def
 xorgversion.def


[FILE:1636:patches/patch-DragonFly.cf]
--- DragonFly.cf.orig	2023-02-22 02:28:43 UTC
+++ DragonFly.cf
@@ -56,6 +56,7 @@ XCOMM operating system:  OSName (OSMajor
 #define BuildXaw6                NO /*depreciated*/
 #define BuildXaw7                NO /*depreciated*/
 #define BuildXaw                 YES /*needed*/
+#define BuildHtmlManPages        NO
 #ifndef BuildPDFdocs
 #define BuildPDFdocs NO
 #endif
@@ -101,7 +102,9 @@ XCOMM operating system:  OSName (OSMajor
 #ifndef CplusplusCmd
 # define CplusplusCmd            c++
 #endif
+#ifndef CppCmd
 #define CppCmd                   /usr/bin/cpp
+#endif
 #define PreProcessCmd            CppCmd
 #define StandardCppOptions       -traditional
 #define StandardCppDefines       /**/
@@ -116,10 +119,6 @@ XCOMM operating system:  OSName (OSMajor
 # endif
 # define DefaultCCOptions -ansi NoSystemWarn -Dasm=__asm GccWarningOptions
 #endif
-#ifndef ExtraLibraries
-/* support for multi-byte locales is in libxpg4 rather than libc */
-#define ExtraLibraries          -lxpg4
-#endif
 #define HasSetUserContext       YES
 #define HasGetpeereid           YES
 #define HasMTRRSupport          YES
@@ -176,7 +175,7 @@ XCOMM operating system:  OSName (OSMajor
 
 #ifndef LibraryRpathLoadFlags
 # if UseRpath
-#  define LibraryRpathLoadFlags  -rpath $(USRLIBDIRPATH)
+#  define LibraryRpathLoadFlags  -Wl,-rpath $(USRLIBDIRPATH)
 # else
 #  define LibraryRpathLoadFlags  /**/
 # endif
@@ -291,6 +290,10 @@ XCOMM operating system:  OSName (OSMajor
 # define SystemManDirectory    /usr/share/man
 #endif
 
+#ifndef UseConfDirForAppDefaults
+#define UseConfDirForAppDefaults	NO
+#endif
+
 #define InstKmemFlags    -g kmem -m 2755
 
 /*


[FILE:2178:patches/patch-FreeBSD.cf]
--- FreeBSD.cf.orig	2023-02-22 02:28:43 UTC
+++ FreeBSD.cf
@@ -78,6 +78,7 @@ XCOMM operating system:  OSName (OSMajor
 #define HasIssetugid		YES
 #define HasPoll			YES
 #endif
+#define BuildHtmlManPages	NO
 
 #if OSMajorVersion >= 4
 #define HasGetIfAddrs		YES
@@ -117,14 +118,8 @@ XCOMM operating system:  OSName (OSMajor
 # if (OSRelVersion < 500043)
 #  define NeedUIThrStubs	YES
 # endif
-# if (OSRelVersion >= 502102)
-#  define ThreadsLibraries	-lpthread
-# elif (OSRelVersion >= 500016)
-#  define ThreadsLibraries	-lc_r
-# else
-#  define ThreadsLibraries	-pthread
-# endif
-# define SystemMTDefines	-D_THREAD_SAFE
+# define ThreadsLibraries	-lpthread
+# define SystemMTDefines	
 #endif
 
 /* This fixes linking C programs against libGLU on FreeBSD 3.x */
@@ -181,7 +176,9 @@ XCOMM operating system:  OSName (OSMajor
 #ifndef CplusplusCmd
 #define CplusplusCmd		c++
 #endif
+#ifndef CppCmd
 #define CppCmd			/usr/bin/cpp
+#endif
 #define PreProcessCmd		CppCmd
 #define StandardCppOptions	-traditional
 #define StandardCppDefines	/**/
@@ -341,7 +338,7 @@ XCOMM operating system:  OSName (OSMajor
 #ifndef LibraryRpathLoadFlags
 # if UseRpath
 #  if UseElfFormat
-#   define LibraryRpathLoadFlags	-rpath $(USRLIBDIRPATH)
+#   define LibraryRpathLoadFlags	-Wl,-rpath $(USRLIBDIRPATH)
 #  else
 #   define LibraryRpathLoadFlags	-R $(USRLIBDIRPATH)
 #  endif
@@ -473,14 +470,14 @@ XCOMM operating system:  OSName (OSMajor
 /* The GCC strength-reduce bug is fixed for FreeBSD 2.1.5 and later */
 #ifndef DefaultGcc2i386Opt
 #if OSMajorVersion > 2 || (OSMajorVersion == 2 && OSMinorVersion > 1) || (OSMajorVersion == 2 && OSMinorVersion == 1 && OSTeenyVersion >= 5)
-#define DefaultGcc2i386Opt -O2 GccAliasingArgs
+#define DefaultGcc2i386Opt
 #endif
 #endif
 
 #ifdef i386Architecture
 # define OptimizedCDebugFlags DefaultGcc2i386Opt
 #else
-# define OptimizedCDebugFlags -O
+# define OptimizedCDebugFlags
 #endif
 
 #ifndef PreIncDir
@@ -501,6 +498,10 @@ XCOMM operating system:  OSName (OSMajor
 #define SystemManDirectory	/usr/share/man
 #endif
 
+#ifndef UseConfDirForAppDefaults
+#define UseConfDirForAppDefaults	NO
+#endif
+
 #define InstKmemFlags	-g kmem -m 2755
 
 /*


[FILE:1361:patches/patch-Imake.rules]
--- Imake.rules.orig	2023-02-22 02:28:43 UTC
+++ Imake.rules
@@ -1475,7 +1475,7 @@ AllTarget(dest.suffix.html)						@@\
 dest.suffix.html: file.$(MANNEWSUFFIX) RmanCmdDependency		@@\
 	RemoveFiles(dest.suffix.html dest.suffix-html)			@@\
 	RunProgram(RMAN,$(RMANOPTIONS) < file.$(MANNEWSUFFIX) \		@@\
-	  > dest.suffix-html) && $(MV) dest.suffix-html $@		@@\
+	  > dest.suffix-html) && $(MV) dest.suffix-html dest.suffix.html	@@\
 									@@\
 install.man:: dest.suffix.html						@@\
 	MakeDir($(DESTDIR)$(DOCHTMLDIR))				@@\
@@ -1732,7 +1732,7 @@ install::								@@\
 	MakeDir(Concat($(DESTDIR),npath/mdir))				@@\
 	@MakeFlagsToShellFlags(i,set +e); \				@@\
 	if [ -d Concat($(DESTDIR),opath/cdir) ]; then \			@@\
-	  RELPATH=`echo opath/cdir | \					@@\
+	  RELPATH=`cd opath/cdir; pwd | \				@@\
 		sed -e 's:^/::' -e 's:[^/.][^/]*:..:'g -e 's:/\.$$::'`; \ @@\
 	  cd Concat($(DESTDIR),opath/cdir); \				@@\
 	  if [ -d rdir -a ! -h rdir ]; then \				@@\
@@ -1779,7 +1779,7 @@ install::								@@\
 	MakeDir(Concat($(DESTDIR),npath))				@@\
 	@MakeFlagsToShellFlags(i,set +e); \				@@\
 	if [ -d Concat($(DESTDIR),opath) ]; then \			@@\
-	  RELPATH=`echo opath | \					@@\
+	  RELPATH=`cd opath; pwd | \					@@\
 		sed -e 's:^.::' -e 's:[^/.][^/]*:..:'g`; \		@@\
 	  cd Concat($(DESTDIR),opath); \				@@\
 	  if [ -f lfile -a ! -h lfile ]; then \				@@\


[FILE:2173:patches/patch-Imake.tmpl]
--- Imake.tmpl.orig	2023-02-22 02:28:43 UTC
+++ Imake.tmpl
@@ -890,7 +890,7 @@ TCLIBDIR = TclLibDir
 #endif
 #ifndef ManDirectoryRoot
 #ifdef ProjectRoot
-#define ManDirectoryRoot Concat(ProjectRoot,/man)
+#define ManDirectoryRoot Concat(ProjectRoot,/share/man)
 #else
 #define ManDirectoryRoot SystemManDirectory
 #endif
@@ -1078,11 +1078,7 @@ TCLIBDIR = TclLibDir
 #define ArCmdBase ar
 #endif
 #ifndef ArCmd
-#if HasLargeTmp || SystemV4 || HasGnuAr
 #define ArCmd ArCmdBase cq
-#else
-#define ArCmd ArCmdBase clq
-#endif
 #endif
 #ifndef ArAddCmd
 #if HasLargeTmp || SystemV4
@@ -1205,16 +1201,8 @@ TCLIBDIR = TclLibDir
 #define PreProcessCmd CcCmd -E
 #endif
 #ifndef InstallCmd		/* hack should be in project */
-#if SystemV || SystemV4
-#ifdef UseInstalled		/* assume BINDIR in path */
-#define InstallCmd bsdinst
-#else
-#define InstallCmd $(SHELL) $(CONFIGSRC)/util/bsdinst.sh
-#endif
-#else
 #define InstallCmd install
 #endif
-#endif
 #ifndef InstallFlags
 #define InstallFlags -c
 #endif
@@ -1823,7 +1811,7 @@ CXXEXTRA_INCLUDES = CplusplusExtraInclud
        CXXOPTIONS = CplusplusOptions
       CXXINCLUDES = $(INCLUDES) $(TOP_INCLUDES) $(CXXEXTRA_INCLUDES)
        CXXDEFINES = $(CXXINCLUDES) $(CXXSTD_DEFINES) $(THREADS_CXXDEFINES) $(DEFINES) $(CXXEXTRA_DEFINES)
-         CXXFLAGS = $(CXXDEBUGFLAGS) $(CXXOPTIONS) $(THREADS_CXXFLAGS) $(CXXDEFINES)
+         CXXFLAGS += $(CXXDEBUGFLAGS) $(CXXOPTIONS) $(THREADS_CXXFLAGS) $(CXXDEFINES)
 #endif
          COMPRESS = CompressCmd
           GZIPCMD = GzipCmd
@@ -2073,7 +2061,7 @@ MODLDCOMBINEFLAGS = ModuleLdCombineFlags
  */
       ALLINCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES) $(INSTALLED_INCLUDES) $(STD_INCLUDES)
        ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(PROTO_DEFINES) $(THREADS_DEFINES) $(MODULE_DEFINES) $(DEFINES) $(EXTRA_DEFINES)
-           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(THREADS_CFLAGS) $(MODULE_CFLAGS) $(ALLDEFINES)
+           CFLAGS += $(CDEBUGFLAGS) $(CCOPTIONS) $(THREADS_CFLAGS) $(MODULE_CFLAGS) $(ALLDEFINES)
         LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES) $(DEPEND_DEFINES)
          LDPRELIB = LdPreLib $(INSTALLED_LIBS)
         LDPOSTLIB = LdPostLib


[FILE:569:patches/patch-Library.tmpl]
--- Library.tmpl.orig	2023-02-22 02:28:43 UTC
+++ Library.tmpl
@@ -114,7 +114,7 @@ SHLIBGLOBALSFLAGS = ShlibGlobalsFlags
 STD_DEFINES = LibraryDefines $(PROJECT_DEFINES)
 CDEBUGFLAGS = LibraryCDebugFlags
 CLIBDEBUGFLAGS = LibraryDebugOpt
-     CFLAGS = $(CDEBUGFLAGS) $(CLIBDEBUGFLAGS) $(CCOPTIONS) $(THREADS_CFLAGS) $(ALLDEFINES)
+     CFLAGS += $(CDEBUGFLAGS) $(CLIBDEBUGFLAGS) $(CCOPTIONS) $(THREADS_CFLAGS) $(ALLDEFINES)
 # if defined(LargePICTable) && LargePICTable && defined(LargePositionIndependentCFlags)
    PICFLAGS = LargePositionIndependentCFlags
 # endif


[FILE:1206:patches/patch-linux.cf]
--- linux.cf.orig	2023-02-22 02:28:43 UTC
+++ linux.cf
@@ -44,6 +44,9 @@ XCOMM platform:  $XFree86: xc/config/cf/
 # define OSTeenyVersion		DefaultOSTeenyVersion
 #endif
 
+#undef	UseRpath
+#define UseRpath YES
+
 #ifndef LinuxDistribution
 # define LinuxDistribution	DefaultLinuxDistribution
 /*
@@ -587,6 +590,9 @@ InstallNamedTargetNoClobber(install,file
 
 #define MkdirHierCmd		mkdir -p
 
+#undef	HaveLib64
+#define HaveLib64	NO
+
 #ifndef HaveLib64
 # if defined (AMD64Architecture) || defined (s390xArchitecture) || defined (Ppc64Architecture) || defined (AArch64Architecture) || defined (RV64Architecture)
 #  define HaveLib64	YES
@@ -1076,19 +1082,19 @@ InstallNamedTargetNoClobber(install,file
 
 /* Some of these man page defaults are overridden in the above OS sections */
 #ifndef ManSuffix
-# define ManSuffix	1x
+# define ManSuffix	1
 #endif
 #ifndef ManDir
 # define ManDir		$(MANSOURCEPATH)1
 #endif
 #ifndef LibManSuffix
-# define LibManSuffix	3x
+# define LibManSuffix	3
 #endif
 #ifndef LibmanDir
 # define LibmanDir	$(MANSOURCEPATH)3
 #endif
 #ifndef FileManSuffix
-# define FileManSuffix	5x
+# define FileManSuffix	5
 #endif
 #ifndef FileManDir
 # define FileManDir	$(MANSOURCEPATH)5


[FILE:992:patches/patch-lnxLib.rules]
--- lnxLib.rules.orig	2023-02-22 02:28:43 UTC
+++ lnxLib.rules
@@ -78,7 +78,7 @@ XCOMM $XFree86: xc/config/cf/lnxLib.rule
 #define LibraryRpathLoadFlags RpathLoadFlags
 #endif
 # ifndef SharedLibraryLoadFlags
-#  define SharedLibraryLoadFlags -shared
+#  define SharedLibraryLoadFlags -shared LibraryRpathLoadFlags
 # endif
 # ifndef PositionIndependentCFlags
 #  define PositionIndependentCFlags -fPIC
@@ -87,14 +87,8 @@ XCOMM $XFree86: xc/config/cf/lnxLib.rule
 #  define PositionIndependentCplusplusFlags -fPIC
 # endif
 # ifndef ExtraLoadFlags
-#  if LinuxBinUtilsMajorVersion >= 26
-#   ifdef UseInstalled
-#    if LinuxBinUtilsMajorVersion < 27
-#     define ExtraLoadFlags RpathLoadFlags -Wl,-rpath-link,$(USRLIBDIRPATH)
-#    endif
-#   else
-#    define ExtraLoadFlags RpathLoadFlags -Wl,-rpath-link,$(BUILDLIBDIR)
-#   endif
+#  ifdef UseInstalled
+#   define ExtraLoadFlags RpathLoadFlags -Wl,-rpath-link,$(BUILDLIBDIR)
 #  else
 #   define ExtraLoadFlags RpathLoadFlags
 #  endif


[FILE:870:patches/patch-sun.cf]
--- sun.cf.orig	2023-02-22 02:28:43 UTC
+++ sun.cf
@@ -515,7 +515,7 @@ XCOMM SunPro C++ CplusplusCompilerMajorV
 # define InstKmemFlags	-g sys -m 2711
 # define ShLibIncludeFile <sunLib.tmpl>
 # define LinkerRuntimeLibraryPathFlag(path) Concat(-R,path)
-# define RpathLoadFlags LinkerRuntimeLibraryPathFlag($(USRLIBDIRPATH))
+# define RpathLoadFlags -Wl,-rpath,$(USRLIBDIRPATH)
 /*
  * Set flags for position independent code before including sv4Lib.rules
  * if the compiler in use doesn't use standard SVR4 flags
@@ -879,7 +879,7 @@ MAPFILES_FOR_PROGS = Mapfile_BssAlign Ma
 #  define DriverManSuffix	7	/* use just one tab or cpp will die */
 # endif
 # ifndef AdminManSuffix
-#  define AdminManSuffix	1m	/* use just one tab or cpp will die */
+#  define AdminManSuffix	1	/* use just one tab or cpp will die */
 # endif
 #else
 /* Bell Labs / BSD man page sections */


[FILE:436:patches/patch-sv4Lib.rules]
--- sv4Lib.rules.orig	2023-02-22 02:28:43 UTC
+++ sv4Lib.rules
@@ -31,7 +31,10 @@ XCOMM $XFree86: xc/config/cf/sv4Lib.rule
 # define SharedLibraryLoadFlags -G -z text
 #endif
 #ifndef RpathLoadFlags
-#define RpathLoadFlags /**/
+#define RpathLoadFlags -Wl,-rpath,$(USRLIBDIRPATH)
+#endif
+#ifndef ExtraLoadFlags
+#define ExtraLoadFlags RpathLoadFlags
 #endif
 #ifndef LibraryRpathLoadFlags
 #define LibraryRpathLoadFlags RpathLoadFlags


[FILE:1283:patches/patch-svr4.cf]
--- svr4.cf.orig	2023-02-22 02:28:43 UTC
+++ svr4.cf
@@ -64,13 +64,13 @@ XCOMM $XFree86: xc/config/cf/svr4.cf,v 3
  * Here are the default paths to use to pick up tools for building.
  */
 #ifndef ArCmdBase
-#define	ArCmdBase	/usr/ccs/bin/ar
+#define	ArCmdBase	ar
 #endif
 #ifndef AsCmd
-#define	AsCmd	/usr/ccs/bin/as
+#define	AsCmd	as
 #endif
 #ifndef CppCmd
-#define	CppCmd	/usr/ccs/lib/cpp
+#define	CppCmd	cpp
 #endif
 #ifndef RawCppCmd
 #if !defined(SunArchitecture)
@@ -78,16 +78,16 @@ XCOMM $XFree86: xc/config/cf/svr4.cf,v 3
 #endif
 #endif
 #ifndef LdCmd
-#define	LdCmd	/usr/ccs/bin/ld
+#define	LdCmd	ld
 #endif
 #ifndef LexCmd
-#define	LexCmd	/usr/ccs/bin/lex
+#define	LexCmd	lex
 #endif
 #ifndef MakeCmd
-#define	MakeCmd	/usr/ccs/bin/make
+#define	MakeCmd	make
 #endif
 #ifndef YaccCmd
-#define	YaccCmd	/usr/ccs/bin/yacc
+#define	YaccCmd	yacc
 #endif
 #ifndef MkdirHierCmd
 #define MkdirHierCmd mkdir -p
@@ -232,11 +232,11 @@ XCOMM $XFree86: xc/config/cf/svr4.cf,v 3
 #endif
 
 #ifndef ManSuffix
-#define ManSuffix               1x
+#define ManSuffix               1
 #define ManDir			$(MANSOURCEPATH)1
 #endif
 #ifndef LibManSuffix
-#define LibManSuffix            3x
+#define LibManSuffix            3
 #define LibmanDir		$(MANSOURCEPATH)3
 #endif
 #ifndef FileManSuffix


[FILE:11849:files/MidnightBSD.cf]
XCOMM platform:  $Xorg: FreeBSD.cf,v 1.3 2000/08/17 19:41:45 cpqbld Exp $
XCOMM platform:  $XFree86: xc/config/cf/FreeBSD.cf,v 3.147 2004/01/28 01:46:21 dawes Exp $

#ifndef UseElfFormat
#define UseElfFormat		DefaultToElfFormat
#endif

#if UseElfFormat
#define OSBinaryFormat		[ELF]
#else
#define OSBinaryFormat		[a.out]
#endif

#ifndef OSName
#define OSName			DefaultOSName OSBinaryFormat
#endif
#ifndef OSVendor
#define OSVendor		/**/
#endif
#ifndef OSMajorVersion
#define OSMajorVersion		DefaultOSMajorVersion
#endif
#ifndef OSMinorVersion
#define OSMinorVersion		DefaultOSMinorVersion
#endif
#ifndef OSTeenyVersion
#define OSTeenyVersion		DefaultOSTeenyVersion
#endif

#ifndef OSRelVersion
/* Include this to get finer-grained information about the OS version */
#include "/usr/include/osreldate.h"
#define OSRelVersion __MidnightBSD_version
#endif

XCOMM operating system:  OSName (OSMajorVersion./**/OSMinorVersion./**/OSTeenyVersion) (OSRelVersion)


#define HasCplusplus		YES
#define GccUsesGas		YES
#define UseGas			YES
#define GnuCpp			YES
#define HasNdbm			YES
#define HasPutenv		YES
#define HasSnprintf		YES
#define HasStrlcat		YES
#define HasBasename		YES
#define HasBSD44Sockets 	YES
#define HasDlopen		YES
#define HasSetProcTitle		YES
#ifndef HasLibCrypt
# define HasLibCrypt		YES
#endif
#ifndef HasShm
# define HasShm			YES
#endif
#define HasWChar32		YES
#define HasUsableFileMmap	YES
#define HasNCurses		YES
#define HasVarRun		YES
#define HasVarDb		YES
#ifndef BuildPDFdocs
# define BuildPDFdocs NO
#endif
#define HasIssetugid		YES
#define HasPoll			YES

#define HasGetIfAddrs		YES

#define IPv6SocketsAlsoIPv4	NO
#define InstallXloadSetGID	NO

#define HasWeakSymbols		UseElfFormat

/*
 * Multi-thread safe libs
 */
# define HasPosixThreads	YES
# define ThreadedX		YES
# define HasThreadSafeAPI	YES
# define MTSafeAPIDefines	-DXUSE_MTSAFE_API
# define ThreadsLibraries	-lpthread
# define SystemMTDefines	-D_THREAD_SAFE

#define AvoidNullMakeCommand	YES
#define StripInstalledPrograms	YES
#define CompressAllFonts	YES
#define Malloc0ReturnsNull	YES
#define NeedConstPrototypes	YES
#define NeedFunctionPrototypes	YES
#define NeedNestedPrototypes	YES
#define NeedVarargsPrototypes	YES
#define NeedWidePrototypes	NO

#define HasPlugin		YES
#define VendorHasX11R6_3libXext	YES	/* XC or XFree86 >= 3.3.1 */

#define MkdirHierCmd		mkdir -p

#ifndef LexCmd
#define LexCmd			flex -l
#endif
#ifndef HasFlex
#define HasFlex			YES
#endif
#ifndef HasGnuAr
#define HasGnuAr		YES
#endif

#ifndef HasMktemp
#define HasMktemp		YES
#endif

#ifndef CcCmd
#define CcCmd			cc
#endif
#ifndef CplusplusCmd
#define CplusplusCmd		c++
#endif
#define CppCmd			/usr/bin/cpp
#define PreProcessCmd		CppCmd
#define StandardCppOptions	-traditional
#define StandardCppDefines	/**/
#ifndef DefaultCCOptions
#if defined(UseInstalled)
#define DefaultCCOptions	/**/
#else
#if defined(HasGcc3) && HasGcc3
#define NoSystemWarn		-Wno-system-headers
#else
#define NoSystemWarn
#endif
#define DefaultCCOptions	-ansi -pedantic NoSystemWarn -Dasm=__asm \
	GccWarningOptions
#endif
#endif
#ifndef ExtraLibraries
#define ExtraLibraries		/**/
#endif
#ifndef UseGnuMalloc
#define UseGnuMalloc		NO
#endif
/* 2.2.2 and later has setusercontext() */
#define HasSetUserContext	YES
#define HasGetpeereid		YES

/* 3.3(?) and later has support for setting MTRRs */
#ifndef HasMTRRSupport
#define HasMTRRSupport		YES
#endif

/*
 * Drivers that don't need AGP can work with 4.0, but we don't have a
 * mechanism for specifying a subset of drivers in the OS.cf files yet.
 */
#ifndef BuildXF86DRI
#define BuildXF86DRI		YES
#endif

/*
 * 4.1/i386 and 5.0/i386,alpha,ia64,amd64 have the AGP driver.
 */
#ifndef HasAgpGart
#if defined(i386Architecture)
#define HasAgpGart		YES
#endif
#endif

/*
 * SSE and 3DNow will be autodetected, so binutils is the only
 * requirement for enabling this.
 */
#if defined(AMD64Architecture) || defined(i386Architecture)
# define HasX86Support          YES
# define HasMMXSupport		YES
# define Has3DNowSupport	YES
# define HasSSESupport		YES
#else
# define HasX86Support	        NO
# define HasMMXSupport		NO
# define Has3DNowSupport	NO
# define HasSSESupport		NO
#endif

/*
 * This doesn't work the way it does on every other system. On FreeBSD it's
 * only a "hint, not a demand", whatever that means. Note that this is not
 * what it says in the ld and ld.so man pages, which are rather vague on the
 * matter.
 *
 * But we do know that if a) you do what the X Project team does and set your
 * ProjectRoot to something like "/X11", and b) you have other X libraries,
 * e.g. in /usr/X11R6/lib, and you have added /usr/X11R6/lib to your
 * ld.so.cache with ldconfig, then any programs linked with this "hint" will
 * find that ld.so ignores the "hint" at runtime and loads the libraries in
 * the ld.so.cache, i.e.the wrong ones, instead! Empirically we find that
 * the run-path is only used as a last resort to find the libraries, after
 * the LD_LIBRARY_PATH and ld.so.cache.
 *
 * N. B. to FreeBSD users who are not familiar with the semantics of the run-
 * path on other systems. The run-path is akin to a per-program ld.so.cache.
 * If a program is linked with a run-path, that run-path should take
 * precedence over _everything_ else! In my opinion ldconfig and the
 * ld.so.cache should be deprecated immediately now that FreeBSD has run-
 * paths. Any program that needs libraries that are outside the "well known"
 * locations should be linked with a run-path.
 *
 * All of which begs the question: If this option doesn't work in any useful
 * way, why did they (FreeBSD) bother to add it? It would be nice if FreeBSD
 * would fix ld.so so that run-paths are truly useful.
 *
 * Using run-paths is added with the intent that vendors who ship X for
 * FreeBSD should use it too. Once everyone uses it then there will be no
 * reason for FreeBSD to assume that it knows where X libraries are installed
 * and they can remove it from the list of directories they add to ld.so.cache
 * in their /etc/rc file.
 */

#ifndef UseRpath
# define UseRpath		YES
#endif

# ifndef RpathLoadFlags
#  if UseRpath
#   if UseElfFormat
#    define RpathLoadFlags	-Wl,-rpath,$(USRLIBDIRPATH)
#   else
#    define RpathLoadFlags	-Wl,-R,$(USRLIBDIRPATH)
#   endif
#  else
#   define RpathLoadFlags	/**/
#  endif
# endif

# ifndef ExtraLoadFlags
#  if UseElfFormat && !defined(UseInstalled)
#   define ExtraLoadFlags	RpathLoadFlags -Wl,-rpath-link,$(BUILDLIBDIR)
#  else
#   define ExtraLoadFlags	RpathLoadFlags
#  endif
# endif

#ifndef LibraryRpathLoadFlags
# if UseRpath
#  if UseElfFormat
#   define LibraryRpathLoadFlags	-rpath $(USRLIBDIRPATH)
#  else
#   define LibraryRpathLoadFlags	-R $(USRLIBDIRPATH)
#  endif
# else
#  define LibraryRpathLoadFlags		/**/
# endif
#endif

#ifndef SharedLibraryLoadFlags
# if UseElfFormat
#  define SharedLibraryLoadFlags	-shared LibraryRpathLoadFlags
# else
#  define SharedLibraryLoadFlags	-Bshareable LibraryRpathLoadFlags
# endif
#endif

#ifndef GnuMallocLibrary
#define GnuMallocLibrary	-lgnumalloc
#endif

#ifndef HasZlib
#define HasZlib		YES
#endif

#ifndef HasPam
#define HasPam		YES
#endif

/* There are two options for building.  One is to assume that the system has
 * many of the dependencies provided by the ports tree.  The other is to just
 * build everything from this tree.
 */

#ifndef HasStandardPorts
#define HasStandardPorts	YES
#endif

#ifndef LocalBase
#define LocalBase		/raven
#endif
#ifndef X11Base
#define X11Base			/usr/X11R6
#endif

#if HasStandardPorts

#ifndef HasExpat
# define HasExpat		YES
# define ExpatDir		LocalBase
#endif

#ifndef HasFreetype2
# define HasFreetype2		YES
# define Freetype2Dir		LocalBase
#endif

#ifndef HasFontconfig
# define HasFontconfig		YES
# define FontconfigDir		X11Base
#endif

#ifndef HasLibpng
# define HasLibpng		YES
# define LibpngDir		LocalBase
#endif

#endif /* HasStandardPorts */

#undef  InstallCmd
#define InstallCmd		/usr/bin/install

#if UseElfFormat
# define AsmElfDefines		-D__ELF__
#else
# define AsmElfDefines /**/
#endif

#if GccUsesGas
# define GccGasOption		-DGCCUSESGAS
# define AsmDefines		-DUSE_GAS AsmElfDefines
#else
# define GccGasOption /**/
# define AsmDefines		AsmElfDefines
#endif

#ifdef i386Architecture
#define ServerExtraDefines GccGasOption XFree86ServerDefines
#endif
#if defined(AlphaArchitecture) || defined(Sparc64Architecture) || \
	defined(ia64Architecture) || defined(AMD64Architecture)
#define ServerExtraDefines GccGasOption XFree86ServerDefines -D_XSERVER64
#endif
#ifdef Sparc64Architecture
#define AsVISOption		-Av9a
#define AsOutputArchSize	64
#endif

#ifdef PpcArchitecture
#define XF86INT10_BUILD		X86INT10_STUB
#endif

#define StandardDefines	-DCSRG_BASED

#define ServerOSDefines		XFree86ServerOSDefines -DDDXTIME
#define XawI18nDefines		-DUSE_XWCHAR_STRING
#define HasMakefileSafeInclude	YES
#define IncludeMakefile(file) @@# dependencies are in .depend
#define DependFileName		.depend
#ifndef DoLoadableServer
#define DoLoadableServer	YES
#ifndef ForceNormalLib
#define ForceNormalLib		YES
#endif
#define HasMkstemp		YES
#else
#define ServerOSDefines		XFree86ServerOSDefines -DDDXTIME -DXNO_SYSCONF
#define XawI18nDefines		-DUSE_XWCHAR_STRING -DUSE_XMBTOWC
#endif

#ifndef DefaultGcc2i386Opt
#define DefaultGcc2i386Opt -O2 GccAliasingArgs
#endif

#ifdef i386Architecture
# define OptimizedCDebugFlags DefaultGcc2i386Opt
#else
# define OptimizedCDebugFlags -O
#endif

#ifndef PreIncDir
# define PreIncDir	/usr/include
#endif

#define HasGroff	YES
#define NroffCmd	env GROFF_NO_SGR=y groff -Tascii
#define SetTtyGroup	YES

#ifndef ExtraFilesToClean
# define ExtraFilesToClean *.core
#endif

#define DefaultUserPath		/bin:/usr/bin:/sbin:/usr/sbin:$(BINDIR):/usr/gnu/bin:/usr/local/bin
#define DefaultSystemPath	/bin:/usr/bin:/sbin:/usr/sbin:$(BINDIR)
#ifndef SystemManDirectory
#define SystemManDirectory	/usr/share/man
#endif

#ifndef UseConfDirForAppDefaults
#define UseConfDirForAppDefaults	NO
#endif

#define InstKmemFlags	-g kmem -m 2755

/*
 * Compress manual pages
 */
#ifndef CompressManPages
# define CompressManPages	YES
#endif

#define HasBsdMake	YES

#ifndef StaticLibrary
#define StaticLibrary(libpath,libname) -Wl,-Bstatic Concat(-L,libpath) Concat(-l,libname) -Wl,-Bdynamic
#endif

#if UseElfFormat
#define DlLibrary		-rdynamic
#else
#define DlLibrary		/**/
#endif

#ifdef AlphaArchitecture
#define IoLibrary		-lio
#else
#define IoLibrary		/**/
#endif

#define ServerExtraSysLibs	IoLibrary

#ifndef PamLibraries
#define PamLibraries		-lpam DlLibrary
#endif

#ifndef SharedLibXdmGreet
# define SharedLibXdmGreet		NO
#endif

/*
 * On FreeBSD, the run-time loader will use the built-in "rpath" before
 * LD_LIBRARY_PATH.  This means that utilities like mkfontdir will load
 * installed libraries (if they exist) in preference to the ones in the
 * build tree, even though LD_LIBRARY_PATH points to the build tree.
 * This can result in the build failing.  One way to avoid this is to
 * pre-load the libraries from the build tree.
 *
 * There should be a better way than this hack...
 */
#if UseElfFormat
#ifndef PreloadFontSetup
#define PreloadFontSetup	LD_PRELOAD="`(cd $(XENVLIBDIR); echo $(XFONTPRELOADPATTERN))`"
#endif
#ifndef PreloadFreetypeSetup
#define PreloadFreetypeSetup	LD_PRELOAD="`(cd $(XENVLIBDIR); echo $(FT2PRELOADPATTERN))`"
#endif
#ifndef PreloadXFTSetup
#define PreloadXFTSetup		LD_PRELOAD="`(cd $(XENVLIBDIR); echo $(FT2PRELOADPATTERN) $(XFTPRELOADPATTERN) $(XRENDERPRELOADPATTERN) $(FCPRELOADPATTERN))`"
#endif
#endif

#ifndef HasCookieMaker
#define HasCookieMaker		YES
#define MkCookieCmd \
	'dd if=/dev/urandom bs=16 count=1 2>/dev/null | hexdump -e \\"%08x\\"'
#endif

/*
 * A hack to work around an optimization problem with gcc 2.95.2 - 2.95.4
 */
#if (GccMajorVersion == 2 && GccMinorVersion == 95)
#define GccOptBug295
#endif

#include <bsdLib.rules>

#include <xorg.cf>

