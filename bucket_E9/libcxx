# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libcxx
VERSION=		15.0.5
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	LLVM C++ standard library
HOMEPAGE=		https://libcxx.llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.5/
DISTFILE[1]=		libcxx-15.0.5.src.tar.xz:main
DISTFILE[2]=		libcxxabi-15.0.5.src.tar.xz:main
DISTFILE[3]=		cmake-15.0.5.src.tar.xz:main
DF_INDEX=		1 2 3
SPKGS[standard]=	complete
			primary
			abi
			experimental

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BROKEN[all]=		GCC ICE: /construction/libcxx/llvm/projects/libcxxabi/src/cxa_demangle.cpp:410:1: internal compiler error: Segmentation fault

BUILD_DEPENDS=		python-Sphinx:single:python_default
			llvm:single:standard
BUILDRUN_DEPENDS=	llvm-libunwind:single:standard

USES=			cmake cclibs:primary python:build

DISTNAME=		llvm

LICENSE=		CUSTOM1:primary CUSTOM2:abi
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
			CUSTOM2:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/projects/libcxx/LICENSE.TXT
			CUSTOM2:{{WRKSRC}}/projects/libcxxabi/LICENSE.TXT
LICENSE_SCHEME=		multi

CMAKE_BUILD_TYPE=	Release

CXXFLAGS=		-Wno-attributes
			-Wno-deprecated-declarations
			-Wno-empty-body
			-Wno-shadow
CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"
			-DLLVM_ENABLE_SPHINX=ON
			-DLIBCXX_CXX_ABI_LIBRARY_PATH={{WRKDIR}}/.build/lib
			-DLIBCXX_INCLUDE_BENCHMARKS:BOOL=OFF
			-DPython3_EXECUTABLE={{PYTHON_CMD}}

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libc++.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libc++abi.so

pre-configure:
	# ${REINPLACE_CMD} -e '/add_dependencies(cxx_static unwind)/d' \
		${WRKSRC}/projects/libcxx/src/CMakeLists.txt

post-extract:
	${MKDIR} ${WRKSRC}/projects
	${MV} ${WRKDIR}/libcxx-15.0.5.src \
		${WRKSRC}/projects/libcxx
	${MV} ${WRKDIR}/libcxxabi-15.0.5.src \
		${WRKSRC}/projects/libcxxabi
	${SED} -e 's|%%VERSION%%|15.0.5|' ${FILESDIR}/CMakeLists.txt \
		> ${WRKSRC}/CMakeLists.txt
	# install more cmake functions
	${CP} ${WRKDIR}/cmake-15.0.5.src/Modules/* \
		${WRKSRC}/projects/libcxx/cmake/Modules/
	${CP} ${WRKDIR}/cmake-15.0.5.src/Modules/* \
		${WRKSRC}/projects/libcxxabi/cmake/Modules/

[FILE:382:descriptions/desc.primary]
libc++ is a new implementation of the C++ standard library, targeting
C++11, c++14, and c++17.

Features and Goals
 * Correctness as defined by the C++11 standard.
 * Fast execution.
 * Minimal memory use.
 * Fast compile times.
 * ABI compatibility with gcc's libstdc++ for some low-level features
   such as exception objects, rtti and memory allocation.
 * Extensive unit tests.


[FILE:284:descriptions/desc.abi]
libc++abi is a new implementation of low level support for a standard
C++ library.

Features and Goals
 * Correctness as defined by the C++11 standard.
 * Provide a portable sublayer to ease the porting of libc++
 * On Mac OS X, be ABI compatible with the existing low-level support.


[FILE:43:descriptions/desc.experimental]
LLVM project's libc++experimental library.


[FILE:311:distinfo]
d9bfce483dc5d14261659f32f7d46706335fd71184c4342952872a3f4ab9c599      3331412 libcxx-15.0.5.src.tar.xz
2030701a3ebcd27413b908d7cc87ede361d6ef6c1d4cece30d5a0a7e2e4862d2       568696 libcxxabi-15.0.5.src.tar.xz
61a9757f2fb7dd4c992522732531eb58b2bb031a2ca68848ff1cfda1fc07b7b3         6976 cmake-15.0.5.src.tar.xz


[FILE:8582:manifests/plist.primary]
include/c++/v1/
 __availability
 __bit_reference
 __bits
 __bsd_locale_defaults.h
 __bsd_locale_fallbacks.h
 __config
 __config_site
 __debug
 __errc
 __functional_base
 __hash_table
 __libcpp_version
 __locale
 __mbstate_t.h
 __mutex_base
 __node_handle
 __nullptr
 __split_buffer
 __std_stream
 __string
 __threading_support
 __tree
 __tuple
 __undef_macros
 algorithm
 any
 array
 atomic
 barrier
 bit
 bitset
 cassert
 ccomplex
 cctype
 cerrno
 cfenv
 cfloat
 charconv
 chrono
 cinttypes
 ciso646
 climits
 clocale
 cmath
 codecvt
 compare
 complex
 complex.h
 concepts
 condition_variable
 coroutine
 csetjmp
 csignal
 cstdarg
 cstdbool
 cstddef
 cstdint
 cstdio
 cstdlib
 cstring
 ctgmath
 ctime
 ctype.h
 cwchar
 cwctype
 deque
 errno.h
 exception
 execution
 fenv.h
 filesystem
 float.h
 format
 forward_list
 fstream
 functional
 future
 initializer_list
 inttypes.h
 iomanip
 ios
 iosfwd
 iostream
 istream
 iterator
 latch
 limits
 limits.h
 list
 locale
 locale.h
 map
 math.h
 memory
 module.modulemap
 mutex
 new
 numbers
 numeric
 optional
 ostream
 queue
 random
 ranges
 ratio
 regex
 scoped_allocator
 semaphore
 set
 setjmp.h
 shared_mutex
 span
 sstream
 stack
 stdbool.h
 stddef.h
 stdexcept
 stdint.h
 stdio.h
 stdlib.h
 streambuf
 string
 string.h
 string_view
 strstream
 system_error
 tgmath.h
 thread
 tuple
 type_traits
 typeindex
 typeinfo
 unordered_map
 unordered_set
 utility
 valarray
 variant
 vector
 version
 wchar.h
 wctype.h
include/c++/v1/__algorithm/
 adjacent_find.h
 all_of.h
 any_of.h
 binary_search.h
 clamp.h
 comp.h
 comp_ref_type.h
 copy.h
 copy_backward.h
 copy_if.h
 copy_n.h
 count.h
 count_if.h
 equal.h
 equal_range.h
 fill.h
 fill_n.h
 find.h
 find_end.h
 find_first_of.h
 find_if.h
 find_if_not.h
 for_each.h
 for_each_n.h
 generate.h
 generate_n.h
 half_positive.h
 in_in_out_result.h
 in_in_result.h
 in_out_result.h
 includes.h
 inplace_merge.h
 is_heap.h
 is_heap_until.h
 is_partitioned.h
 is_permutation.h
 is_sorted.h
 is_sorted_until.h
 iter_swap.h
 lexicographical_compare.h
 lower_bound.h
 make_heap.h
 max.h
 max_element.h
 merge.h
 min.h
 min_element.h
 minmax.h
 minmax_element.h
 mismatch.h
 move.h
 move_backward.h
 next_permutation.h
 none_of.h
 nth_element.h
 partial_sort.h
 partial_sort_copy.h
 partition.h
 partition_copy.h
 partition_point.h
 pop_heap.h
 prev_permutation.h
 push_heap.h
 remove.h
 remove_copy.h
 remove_copy_if.h
 remove_if.h
 replace.h
 replace_copy.h
 replace_copy_if.h
 replace_if.h
 reverse.h
 reverse_copy.h
 rotate.h
 rotate_copy.h
 sample.h
 search.h
 search_n.h
 set_difference.h
 set_intersection.h
 set_symmetric_difference.h
 set_union.h
 shift_left.h
 shift_right.h
 shuffle.h
 sift_down.h
 sort.h
 sort_heap.h
 stable_partition.h
 stable_sort.h
 swap_ranges.h
 transform.h
 unique.h
 unique_copy.h
 unwrap_iter.h
 upper_bound.h
include/c++/v1/__bit/
 bit_cast.h
 byteswap.h
include/c++/v1/__charconv/
 chars_format.h
 from_chars_result.h
 to_chars_result.h
include/c++/v1/__chrono/
 calendar.h
 convert_to_timespec.h
 duration.h
 file_clock.h
 high_resolution_clock.h
 steady_clock.h
 system_clock.h
 time_point.h
include/c++/v1/__compare/
 common_comparison_category.h
 compare_partial_order_fallback.h
 compare_strong_order_fallback.h
 compare_three_way.h
 compare_three_way_result.h
 compare_weak_order_fallback.h
 is_eq.h
 ordering.h
 partial_order.h
 strong_order.h
 synth_three_way.h
 three_way_comparable.h
 weak_order.h
include/c++/v1/__concepts/
 arithmetic.h
 assignable.h
 boolean_testable.h
 class_or_enum.h
 common_reference_with.h
 common_with.h
 constructible.h
 convertible_to.h
 copyable.h
 derived_from.h
 destructible.h
 different_from.h
 equality_comparable.h
 invocable.h
 movable.h
 predicate.h
 regular.h
 relation.h
 same_as.h
 semiregular.h
 swappable.h
 totally_ordered.h
include/c++/v1/__coroutine/
 coroutine_handle.h
 coroutine_traits.h
 noop_coroutine_handle.h
 trivial_awaitables.h
include/c++/v1/__filesystem/
 copy_options.h
 directory_entry.h
 directory_iterator.h
 directory_options.h
 file_status.h
 file_time_type.h
 file_type.h
 filesystem_error.h
 operations.h
 path.h
 path_iterator.h
 perm_options.h
 perms.h
 recursive_directory_iterator.h
 space_info.h
 u8path.h
include/c++/v1/__format/
 format_arg.h
 format_args.h
 format_context.h
 format_error.h
 format_fwd.h
 format_parse_context.h
 format_string.h
 format_to_n_result.h
 formatter.h
 formatter_bool.h
 formatter_char.h
 formatter_floating_point.h
 formatter_integer.h
 formatter_integral.h
 formatter_pointer.h
 formatter_string.h
 parser_std_format_spec.h
include/c++/v1/__functional/
 binary_function.h
 binary_negate.h
 bind.h
 bind_back.h
 bind_front.h
 binder1st.h
 binder2nd.h
 compose.h
 default_searcher.h
 function.h
 hash.h
 identity.h
 invoke.h
 is_transparent.h
 mem_fn.h
 mem_fun_ref.h
 not_fn.h
 operations.h
 perfect_forward.h
 pointer_to_binary_function.h
 pointer_to_unary_function.h
 ranges_operations.h
 reference_wrapper.h
 unary_function.h
 unary_negate.h
 unwrap_ref.h
 weak_result_type.h
include/c++/v1/__iterator/
 access.h
 advance.h
 back_insert_iterator.h
 common_iterator.h
 concepts.h
 counted_iterator.h
 data.h
 default_sentinel.h
 distance.h
 empty.h
 erase_if_container.h
 front_insert_iterator.h
 incrementable_traits.h
 indirectly_comparable.h
 insert_iterator.h
 istream_iterator.h
 istreambuf_iterator.h
 iter_move.h
 iter_swap.h
 iterator.h
 iterator_traits.h
 move_iterator.h
 next.h
 ostream_iterator.h
 ostreambuf_iterator.h
 prev.h
 projected.h
 readable_traits.h
 reverse_access.h
 reverse_iterator.h
 size.h
 unreachable_sentinel.h
 wrap_iter.h
include/c++/v1/__memory/
 addressof.h
 allocation_guard.h
 allocator.h
 allocator_arg_t.h
 allocator_traits.h
 auto_ptr.h
 compressed_pair.h
 concepts.h
 construct_at.h
 pointer_traits.h
 ranges_construct_at.h
 ranges_uninitialized_algorithms.h
 raw_storage_iterator.h
 shared_ptr.h
 temporary_buffer.h
 uninitialized_algorithms.h
 unique_ptr.h
 uses_allocator.h
 voidify.h
include/c++/v1/__numeric/
 accumulate.h
 adjacent_difference.h
 exclusive_scan.h
 gcd_lcm.h
 inclusive_scan.h
 inner_product.h
 iota.h
 midpoint.h
 partial_sum.h
 reduce.h
 transform_exclusive_scan.h
 transform_inclusive_scan.h
 transform_reduce.h
include/c++/v1/__random/
 bernoulli_distribution.h
 binomial_distribution.h
 cauchy_distribution.h
 chi_squared_distribution.h
 clamp_to_integral.h
 default_random_engine.h
 discard_block_engine.h
 discrete_distribution.h
 exponential_distribution.h
 extreme_value_distribution.h
 fisher_f_distribution.h
 gamma_distribution.h
 generate_canonical.h
 geometric_distribution.h
 independent_bits_engine.h
 is_seed_sequence.h
 knuth_b.h
 linear_congruential_engine.h
 log2.h
 lognormal_distribution.h
 mersenne_twister_engine.h
 negative_binomial_distribution.h
 normal_distribution.h
 piecewise_constant_distribution.h
 piecewise_linear_distribution.h
 poisson_distribution.h
 random_device.h
 ranlux.h
 seed_seq.h
 shuffle_order_engine.h
 student_t_distribution.h
 subtract_with_carry_engine.h
 uniform_int_distribution.h
 uniform_random_bit_generator.h
 uniform_real_distribution.h
 weibull_distribution.h
include/c++/v1/__ranges/
 access.h
 all.h
 common_view.h
 concepts.h
 copyable_box.h
 counted.h
 dangling.h
 data.h
 drop_view.h
 empty.h
 empty_view.h
 enable_borrowed_range.h
 enable_view.h
 iota_view.h
 join_view.h
 non_propagating_cache.h
 owning_view.h
 range_adaptor.h
 ref_view.h
 reverse_view.h
 single_view.h
 size.h
 subrange.h
 take_view.h
 transform_view.h
 view_interface.h
 views.h
include/c++/v1/__support/android/locale_bionic.h
include/c++/v1/__support/fuchsia/xlocale.h
include/c++/v1/__support/ibm/
 gettod_zos.h
 limits.h
 locale_mgmt_zos.h
 nanosleep.h
 support.h
 xlocale.h
include/c++/v1/__support/musl/xlocale.h
include/c++/v1/__support/newlib/xlocale.h
include/c++/v1/__support/openbsd/xlocale.h
include/c++/v1/__support/solaris/
 floatingpoint.h
 wchar.h
 xlocale.h
include/c++/v1/__support/win32/
 limits_msvc_win32.h
 locale_win32.h
include/c++/v1/__support/xlocale/
 __nop_locale_mgmt.h
 __posix_l_fallback.h
 __strtonum_fallback.h
include/c++/v1/__thread/
 poll_with_backoff.h
 timed_backoff_policy.h
include/c++/v1/__utility/
 as_const.h
 auto_cast.h
 cmp.h
 declval.h
 exchange.h
 forward.h
 in_place.h
 integer_sequence.h
 move.h
 pair.h
 piecewise_construct.h
 priority_tag.h
 rel_ops.h
 swap.h
 to_underlying.h
 transaction.h
include/c++/v1/__variant/monostate.h
include/c++/v1/ext/
 __hash
 hash_map
 hash_set
lib/
 libc++.a
 libc++.so
 libc++.so.1
 libc++.so.1.0
 libc++abi.a
 libc++abi.so
 libc++abi.so.1
 libc++abi.so.1.0


[FILE:45:manifests/plist.abi]
include/c++/v1/
 __cxxabi_config.h
 cxxabi.h


[FILE:282:manifests/plist.experimental]
include/c++/v1/experimental/
 __config
 __memory
 algorithm
 coroutine
 deque
 filesystem
 forward_list
 functional
 iterator
 list
 map
 memory_resource
 propagate_const
 regex
 set
 simd
 string
 type_traits
 unordered_map
 unordered_set
 utility
 vector
lib/libc++experimental.a


[FILE:475:patches/patch-projects_libcxx_CMakeLists.txt]
--- projects/libcxx/CMakeLists.txt.orig	2022-10-04 09:29:17 UTC
+++ projects/libcxx/CMakeLists.txt
@@ -210,8 +210,6 @@ option(LIBCXX_ENABLE_BACKWARDS_COMPATIBI
 # ABI Library options ---------------------------------------------------------
 if (LIBCXX_TARGETING_MSVC)
   set(LIBCXX_DEFAULT_ABI_LIBRARY "vcruntime")
-elseif (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
-  set(LIBCXX_DEFAULT_ABI_LIBRARY "libcxxrt")
 else()
   set(LIBCXX_DEFAULT_ABI_LIBRARY "libcxxabi")
 endif()


[FILE:2598:patches/patch-projects_libcxx_include_____config]
--- projects/libcxx/include/__config.orig	2022-10-04 09:29:17 UTC
+++ projects/libcxx/include/__config
@@ -12,6 +12,10 @@
 
 #include <__config_site>
 
+#if defined(__FreeBSD__) || defined(__DragonFly__)
+#define __FreeDragon__
+#endif
+
 #if defined(_MSC_VER) && !defined(__clang__)
 #  if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
 #    define _LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
@@ -150,7 +154,7 @@
 #    endif
 // Feature macros for disabling pre ABI v1 features. All of these options
 // are deprecated.
-#    if defined(__FreeBSD__)
+#    if defined(__FreeDragon__)
 #      define _LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR
 #    endif
 #  endif
@@ -290,7 +294,7 @@ If there are users of this configuration
 #    endif // __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 #  endif   // __BYTE_ORDER__
 
-#  ifdef __FreeBSD__
+#  ifdef __FreeDragon__
 #    include <sys/endian.h>
 #    include <osreldate.h>
 #    if _BYTE_ORDER == _LITTLE_ENDIAN
@@ -298,7 +302,7 @@ If there are users of this configuration
 #    else // _BYTE_ORDER == _LITTLE_ENDIAN
 #      define _LIBCPP_BIG_ENDIAN
 #    endif // _BYTE_ORDER == _LITTLE_ENDIAN
-#  endif   // __FreeBSD__
+#  endif   // __FreeDragon__
 
 #  if defined(__NetBSD__) || defined(__OpenBSD__)
 #    include <sys/endian.h>
@@ -752,11 +756,11 @@ _LIBCPP_BEGIN_NAMESPACE_STD _LIBCPP_END_
 #    define _LIBCPP_HAS_NO_ALIGNED_ALLOCATION
 #  endif
 
-#  if defined(__APPLE__) || defined(__FreeBSD__)
+#  if defined(__APPLE__) || defined(__FreeDragon__)
 #    define _LIBCPP_HAS_DEFAULTRUNELOCALE
 #  endif
 
-#  if defined(__APPLE__) || defined(__FreeBSD__) || defined(__sun__)
+#  if defined(__APPLE__) || defined(__FreeDragon__) || defined(__sun__)
 #    define _LIBCPP_WCTYPE_IS_MASK
 #  endif
 
@@ -901,7 +905,7 @@ _LIBCPP_BEGIN_NAMESPACE_STD _LIBCPP_END_
       !defined(_LIBCPP_HAS_THREAD_API_WIN32) &&                                                                        \
       !defined(_LIBCPP_HAS_THREAD_API_EXTERNAL)
 
-#    if defined(__FreeBSD__) ||                                                                                        \
+#    if defined(__FreeDragon__) ||                                                                                        \
         defined(__wasi__) ||                                                                                           \
         defined(__NetBSD__) ||                                                                                         \
         defined(__OpenBSD__) ||                                                                                        \


[FILE:1077:patches/patch-projects_libcxx_include_____locale]
--- projects/libcxx/include/__locale.orig	2022-10-04 09:29:17 UTC
+++ projects/libcxx/include/__locale
@@ -33,7 +33,7 @@
 # include <__support/newlib/xlocale.h>
 #elif defined(__OpenBSD__)
 # include <__support/openbsd/xlocale.h>
-#elif (defined(__APPLE__) || defined(__FreeBSD__))
+#elif (defined(__APPLE__) || defined(__FreeDragon__))
 # include <xlocale.h>
 #elif defined(__Fuchsia__)
 # include <__support/fuchsia/xlocale.h>
@@ -453,10 +453,10 @@ public:
     static const mask __regex_word = 0x4000; // 0x8000 and 0x0100 and 0x00ff are used
 # define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_PRINT
 # define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_ALPHA
-#elif defined(__APPLE__) || defined(__FreeBSD__) || defined(__EMSCRIPTEN__) || defined(__NetBSD__)
+#elif defined(__APPLE__) || defined(__FreeDragon__) || defined(__EMSCRIPTEN__) || defined(__NetBSD__)
 # ifdef __APPLE__
     typedef __uint32_t mask;
-# elif defined(__FreeBSD__)
+# elif defined(__FreeDragon__)
     typedef unsigned long mask;
 # elif defined(__EMSCRIPTEN__) || defined(__NetBSD__)
     typedef unsigned short mask;


[FILE:376:patches/patch-projects_libcxx_include_locale]
--- projects/libcxx/include/locale.orig	2022-10-04 09:29:17 UTC
+++ projects/libcxx/include/locale
@@ -239,7 +239,7 @@ _LIBCPP_PUSH_MACROS
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeDragon__)
 #  define _LIBCPP_GET_C_LOCALE 0
 #elif defined(__NetBSD__)
 #  define _LIBCPP_GET_C_LOCALE LC_C_LOCALE


[FILE:450:patches/patch-projects_libcxx_src_locale.cpp]
--- projects/libcxx/src/locale.cpp.orig	2022-10-04 09:29:17 UTC
+++ projects/libcxx/src/locale.cpp
@@ -1190,7 +1190,7 @@ ctype<char>::classic_table() noexcept
 const ctype<char>::mask*
 ctype<char>::classic_table() noexcept
 {
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__DragonFly__)
     return _DefaultRuneLocale.__runetype;
 #elif defined(__NetBSD__)
     return _C_ctype_tab_ + 1;


[FILE:680:patches/patch-projects_libcxxabi_src_CMakeLists.txt]
--- projects/libcxxabi/src/CMakeLists.txt.orig	2022-10-04 09:29:17 UTC
+++ projects/libcxxabi/src/CMakeLists.txt
@@ -165,7 +165,7 @@ if (LIBCXXABI_USE_LLVM_UNWINDER)
     target_link_libraries(cxxabi_shared_objects PUBLIC unwind_shared_objects) # propagate usage requirements
     target_sources(cxxabi_shared_objects PUBLIC $<TARGET_OBJECTS:unwind_shared_objects>)
   else()
-    target_link_libraries(cxxabi_shared_objects PUBLIC unwind_shared)
+    target_link_libraries(cxxabi_shared_objects PUBLIC unwind)
   endif()
 endif()
 target_link_libraries(cxxabi_shared_objects PRIVATE cxx-headers ${LIBCXXABI_BUILTINS_LIBRARY} ${LIBCXXABI_SHARED_LIBRARIES} ${LIBCXXABI_LIBRARIES})


[FILE:476:files/CMakeLists.txt]
cmake_minimum_required(VERSION 3.4.3)
set(LLVM_MAIN_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(PACKAGE_VERSION "%%VERSION%%")
set(LIBCXX_CXX_ABI "libcxxabi")
set(PRJDIR "${LLVM_MAIN_SRC_DIR}/projects")
set(LLVM_EXTERNAL_LIBCXX_SOURCE_DIR "${PRJDIR}/libcxx")
set(LIBCXXABI_LIBCXX_PATH "${PRJDIR}/libcxx")
set(LIBCXX_CXX_ABI_INCLUDE_PATHS "${PRJDIR}/libcxxabi/include")
set(LIBCXXABI_USE_LLVM_UNWINDER TRUE)

add_subdirectory(projects/libcxx)
add_subdirectory(projects/libcxxabi)

