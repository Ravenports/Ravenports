# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libcxx
VERSION=		13.0.1
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	LLVM C++ standard library
HOMEPAGE=		https://libcxx.llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1/
			http://llvm.org/releases/13.0.1/
DISTFILE[1]=		libcxx-13.0.1.src.tar.xz:main
DISTFILE[2]=		libcxxabi-13.0.1.src.tar.xz:main
DF_INDEX=		1 2
SPKGS[standard]=	complete
			primary
			abi
			experimental

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		python-Sphinx:single:python_default
			llvm:single:standard
BUILDRUN_DEPENDS=	llvm-libunwind:single:standard

USES=			cmake cclibs:primary python:build

DISTNAME=		llvm

LICENSE=		CUSTOM1:primary CUSTOM2:abi
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
			CUSTOM2:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/projects/libcxx/LICENSE.TXT
			CUSTOM2:{{WRKSRC}}/projects/libcxxabi/LICENSE.TXT
LICENSE_SCHEME=		multi

CMAKE_BUILD_TYPE=	Release

CXXFLAGS=		-Wno-attributes
			-Wno-deprecated-declarations
			-Wno-empty-body
			-Wno-shadow
CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"
			-DLLVM_ENABLE_SPHINX=ON
			-DLIBCXX_CXX_ABI_LIBRARY_PATH={{WRKDIR}}/.build/lib

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libc++.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libc++abi.so

post-extract:
	${MKDIR} ${WRKSRC}/projects
	${MV} ${WRKDIR}/libcxx-13.0.1.src \
		${WRKSRC}/projects/libcxx
	${MV} ${WRKDIR}/libcxxabi-13.0.1.src \
		${WRKSRC}/projects/libcxxabi
	${SED} -e 's|%%VERSION%%|13.0.1|' ${FILESDIR}/CMakeLists.txt \
		> ${WRKSRC}/CMakeLists.txt

[FILE:382:descriptions/desc.primary]
libc++ is a new implementation of the C++ standard library, targeting
C++11, c++14, and c++17.

Features and Goals
 * Correctness as defined by the C++11 standard.
 * Fast execution.
 * Minimal memory use.
 * Fast compile times.
 * ABI compatibility with gcc's libstdc++ for some low-level features
   such as exception objects, rtti and memory allocation.
 * Extensive unit tests.


[FILE:284:descriptions/desc.abi]
libc++abi is a new implementation of low level support for a standard
C++ library.

Features and Goals
 * Correctness as defined by the C++11 standard.
 * Provide a portable sublayer to ease the porting of libc++
 * On Mac OS X, be ABI compatible with the existing low-level support.


[FILE:43:descriptions/desc.experimental]
LLVM project's libc++experimental library.


[FILE:209:distinfo]
2f446acc00bb7cfb4e866c2fa46d1b6dbf4e7d2ab62e3c3d84e56f7b9e28110f      2085992 libcxx-13.0.1.src.tar.xz
db5fa6093c786051e8b1c85527240924eceb6c95eeff0a2bbc57be8422b3cef1       554912 libcxxabi-13.0.1.src.tar.xz


[FILE:5459:manifests/plist.primary]
include/c++/v1/
 __availability
 __bit_reference
 __bits
 __bsd_locale_defaults.h
 __bsd_locale_fallbacks.h
 __config
 __config_site
 __debug
 __errc
 __function_like.h
 __functional_base
 __hash_table
 __libcpp_version
 __locale
 __mutex_base
 __node_handle
 __nullptr
 __split_buffer
 __std_stream
 __string
 __threading_support
 __tree
 __tuple
 __undef_macros
 algorithm
 any
 array
 atomic
 barrier
 bit
 bitset
 cassert
 ccomplex
 cctype
 cerrno
 cfenv
 cfloat
 charconv
 chrono
 cinttypes
 ciso646
 climits
 clocale
 cmath
 codecvt
 compare
 complex
 complex.h
 concepts
 condition_variable
 csetjmp
 csignal
 cstdarg
 cstdbool
 cstddef
 cstdint
 cstdio
 cstdlib
 cstring
 ctgmath
 ctime
 ctype.h
 cwchar
 cwctype
 deque
 errno.h
 exception
 execution
 fenv.h
 filesystem
 float.h
 format
 forward_list
 fstream
 functional
 future
 initializer_list
 inttypes.h
 iomanip
 ios
 iosfwd
 iostream
 istream
 iterator
 latch
 limits
 limits.h
 list
 locale
 locale.h
 map
 math.h
 memory
 module.modulemap
 mutex
 new
 numbers
 numeric
 optional
 ostream
 queue
 random
 ranges
 ratio
 regex
 scoped_allocator
 semaphore
 set
 setjmp.h
 shared_mutex
 span
 sstream
 stack
 stdbool.h
 stddef.h
 stdexcept
 stdint.h
 stdio.h
 stdlib.h
 streambuf
 string
 string.h
 string_view
 strstream
 system_error
 tgmath.h
 thread
 tuple
 type_traits
 typeindex
 typeinfo
 unordered_map
 unordered_set
 utility
 valarray
 variant
 vector
 version
 wchar.h
 wctype.h
include/c++/v1/__algorithm/
 adjacent_find.h
 all_of.h
 any_of.h
 binary_search.h
 clamp.h
 comp.h
 comp_ref_type.h
 copy.h
 copy_backward.h
 copy_if.h
 copy_n.h
 count.h
 count_if.h
 equal.h
 equal_range.h
 fill.h
 fill_n.h
 find.h
 find_end.h
 find_first_of.h
 find_if.h
 find_if_not.h
 for_each.h
 for_each_n.h
 generate.h
 generate_n.h
 half_positive.h
 includes.h
 inplace_merge.h
 is_heap.h
 is_heap_until.h
 is_partitioned.h
 is_permutation.h
 is_sorted.h
 is_sorted_until.h
 iter_swap.h
 lexicographical_compare.h
 lower_bound.h
 make_heap.h
 max.h
 max_element.h
 merge.h
 min.h
 min_element.h
 minmax.h
 minmax_element.h
 mismatch.h
 move.h
 move_backward.h
 next_permutation.h
 none_of.h
 nth_element.h
 partial_sort.h
 partial_sort_copy.h
 partition.h
 partition_copy.h
 partition_point.h
 pop_heap.h
 prev_permutation.h
 push_heap.h
 remove.h
 remove_copy.h
 remove_copy_if.h
 remove_if.h
 replace.h
 replace_copy.h
 replace_copy_if.h
 replace_if.h
 reverse.h
 reverse_copy.h
 rotate.h
 rotate_copy.h
 sample.h
 search.h
 search_n.h
 set_difference.h
 set_intersection.h
 set_symmetric_difference.h
 set_union.h
 shift_left.h
 shift_right.h
 shuffle.h
 sift_down.h
 sort.h
 sort_heap.h
 stable_partition.h
 stable_sort.h
 swap_ranges.h
 transform.h
 unique.h
 unique_copy.h
 unwrap_iter.h
 upper_bound.h
include/c++/v1/__format/
 format_error.h
 format_parse_context.h
include/c++/v1/__functional/
 binary_function.h
 binary_negate.h
 bind.h
 bind_front.h
 binder1st.h
 binder2nd.h
 default_searcher.h
 function.h
 hash.h
 identity.h
 invoke.h
 is_transparent.h
 mem_fn.h
 mem_fun_ref.h
 not_fn.h
 operations.h
 perfect_forward.h
 pointer_to_binary_function.h
 pointer_to_unary_function.h
 ranges_operations.h
 reference_wrapper.h
 unary_function.h
 unary_negate.h
 unwrap_ref.h
 weak_result_type.h
include/c++/v1/__iterator/
 access.h
 advance.h
 back_insert_iterator.h
 common_iterator.h
 concepts.h
 counted_iterator.h
 data.h
 default_sentinel.h
 distance.h
 empty.h
 erase_if_container.h
 front_insert_iterator.h
 incrementable_traits.h
 insert_iterator.h
 istream_iterator.h
 istreambuf_iterator.h
 iter_move.h
 iter_swap.h
 iterator.h
 iterator_traits.h
 move_iterator.h
 next.h
 ostream_iterator.h
 ostreambuf_iterator.h
 prev.h
 projected.h
 readable_traits.h
 reverse_access.h
 reverse_iterator.h
 size.h
 wrap_iter.h
include/c++/v1/__memory/
 addressof.h
 allocation_guard.h
 allocator.h
 allocator_arg_t.h
 allocator_traits.h
 auto_ptr.h
 compressed_pair.h
 construct_at.h
 pointer_safety.h
 pointer_traits.h
 raw_storage_iterator.h
 shared_ptr.h
 temporary_buffer.h
 uninitialized_algorithms.h
 unique_ptr.h
 uses_allocator.h
include/c++/v1/__random/uniform_int_distribution.h
include/c++/v1/__ranges/
 access.h
 all.h
 common_view.h
 concepts.h
 copyable_box.h
 dangling.h
 data.h
 drop_view.h
 empty.h
 empty_view.h
 enable_borrowed_range.h
 enable_view.h
 non_propagating_cache.h
 ref_view.h
 size.h
 subrange.h
 transform_view.h
 view_interface.h
include/c++/v1/__support/android/locale_bionic.h
include/c++/v1/__support/fuchsia/xlocale.h
include/c++/v1/__support/ibm/
 gettod_zos.h
 limits.h
 locale_mgmt_aix.h
 locale_mgmt_zos.h
 nanosleep.h
 support.h
 xlocale.h
include/c++/v1/__support/musl/xlocale.h
include/c++/v1/__support/newlib/xlocale.h
include/c++/v1/__support/nuttx/xlocale.h
include/c++/v1/__support/openbsd/xlocale.h
include/c++/v1/__support/solaris/
 floatingpoint.h
 wchar.h
 xlocale.h
include/c++/v1/__support/win32/
 limits_msvc_win32.h
 locale_win32.h
include/c++/v1/__support/xlocale/
 __nop_locale_mgmt.h
 __posix_l_fallback.h
 __strtonum_fallback.h
include/c++/v1/__utility/
 __decay_copy.h
 as_const.h
 cmp.h
 declval.h
 exchange.h
 forward.h
 in_place.h
 integer_sequence.h
 move.h
 pair.h
 piecewise_construct.h
 rel_ops.h
 swap.h
 to_underlying.h
include/c++/v1/__variant/monostate.h
include/c++/v1/ext/
 __hash
 hash_map
 hash_set
lib/
 libc++.a
 libc++.so
 libc++.so.1
 libc++.so.1.0
 libc++abi.a
 libc++abi.so
 libc++abi.so.1
 libc++abi.so.1.0


[FILE:45:manifests/plist.abi]
include/c++/v1/
 __cxxabi_config.h
 cxxabi.h


[FILE:282:manifests/plist.experimental]
include/c++/v1/experimental/
 __config
 __memory
 algorithm
 coroutine
 deque
 filesystem
 forward_list
 functional
 iterator
 list
 map
 memory_resource
 propagate_const
 regex
 set
 simd
 string
 type_traits
 unordered_map
 unordered_set
 utility
 vector
lib/libc++experimental.a


[FILE:511:patches/patch-projects_libcxx_CMakeLists.txt]
--- projects/libcxx/CMakeLists.txt.orig	2022-01-20 21:31:59 UTC
+++ projects/libcxx/CMakeLists.txt
@@ -204,8 +204,6 @@ if (LIBCXX_CXX_ABI STREQUAL "default")
   if (LIBCXX_TARGETING_MSVC)
     # FIXME: Figure out how to configure the ABI library on Windows.
     set(LIBCXX_CXX_ABI_LIBNAME "vcruntime")
-  elseif (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
-    set(LIBCXX_CXX_ABI_LIBNAME "libcxxrt")
   elseif (NOT LIBCXX_STANDALONE_BUILD OR HAVE_LIBCXXABI)
     set(LIBCXX_CXX_ABI_LIBNAME "libcxxabi")
   else()


[FILE:3122:patches/patch-projects_libcxx_include_____config]
--- projects/libcxx/include/__config.orig	2022-01-20 21:31:59 UTC
+++ projects/libcxx/include/__config
@@ -12,6 +12,10 @@
 
 #include <__config_site>
 
+#if defined(__FreeBSD__) || defined(__DragonFly__)
+#define __FreeDragon__
+#endif
+
 #if defined(_MSC_VER) && !defined(__clang__)
 #  if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
 #    define _LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
@@ -127,7 +131,7 @@
 #  endif
 // Feature macros for disabling pre ABI v1 features. All of these options
 // are deprecated.
-#  if defined(__FreeBSD__)
+#  if defined(__FreeDragon__)
 #    define _LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR
 #  endif
 #endif
@@ -257,7 +261,7 @@
 #  endif // __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 #endif // __BYTE_ORDER__
 
-#ifdef __FreeBSD__
+#ifdef __FreeDragon__
 #  include <sys/endian.h>
 #  include <osreldate.h>
 #  if _BYTE_ORDER == _LITTLE_ENDIAN
@@ -268,7 +272,7 @@
 #  ifndef __LONG_LONG_SUPPORTED
 #    define _LIBCPP_HAS_NO_LONG_LONG
 #  endif  // __LONG_LONG_SUPPORTED
-#endif // __FreeBSD__
+#endif // __FreeDragon__
 
 #if defined(__NetBSD__) || defined(__OpenBSD__)
 #  include <sys/endian.h>
@@ -365,13 +369,16 @@
 # define _LIBCPP_HAS_ALIGNED_ALLOC
 #else
 #if (defined(__ISO_C_VISIBLE) && (__ISO_C_VISIBLE >= 2011)) || __cplusplus >= 201103L
-#  if defined(__FreeBSD__)
+#  if defined(__FreeDragon__)
 #    define _LIBCPP_HAS_ALIGNED_ALLOC
 #    define _LIBCPP_HAS_QUICK_EXIT
 #    if __FreeBSD_version >= 1300064 || \
        (__FreeBSD_version >= 1201504 && __FreeBSD_version < 1300000)
 #      define _LIBCPP_HAS_TIMESPEC_GET
 #    endif
+#    if defined(__DragonFly__)
+#      define _LIBCPP_HAS_TIMESPEC_GET
+#    endif
 #  elif defined(__BIONIC__)
 #    if __ANDROID_API__ >= 21
 #      define _LIBCPP_HAS_QUICK_EXIT
@@ -939,12 +946,12 @@ typedef unsigned int   char32_t;
 #   define _LIBCPP_EXTERN_TEMPLATE_EVEN_IN_DEBUG_MODE(...) extern template __VA_ARGS__;
 #endif
 
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined(_LIBCPP_MSVCRT_LIKE) || \
+#if defined(__APPLE__) || defined(__FreeDragon__) || defined(_LIBCPP_MSVCRT_LIKE) || \
     defined(__sun__) || defined(__NetBSD__) || defined(__CloudABI__)
 #define _LIBCPP_LOCALE__L_EXTENSIONS 1
 #endif
 
-#ifdef __FreeBSD__
+#ifdef __FreeDragon__
 #define _DECLARE_C99_LDBL_MATH 1
 #endif
 
@@ -972,11 +979,11 @@ typedef unsigned int   char32_t;
 #  define _LIBCPP_HAS_NO_ALIGNED_ALLOCATION
 #endif
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeDragon__)
 #define _LIBCPP_HAS_DEFAULTRUNELOCALE
 #endif
 
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__sun__)
+#if defined(__APPLE__) || defined(__FreeDragon__) || defined(__sun__)
 #define _LIBCPP_WCTYPE_IS_MASK
 #endif
 
@@ -1136,7 +1143,7 @@ extern "C" _LIBCPP_FUNC_VIS void __sanit
     !defined(_LIBCPP_HAS_THREAD_API_PTHREAD) && \
     !defined(_LIBCPP_HAS_THREAD_API_WIN32) && \
     !defined(_LIBCPP_HAS_THREAD_API_EXTERNAL)
-#  if defined(__FreeBSD__) || \
+#  if defined(__FreeDragon__) || \
       defined(__wasi__) || \
       defined(__NetBSD__) || \
       defined(__OpenBSD__) || \


[FILE:1053:patches/patch-projects_libcxx_include_____locale]
--- projects/libcxx/include/__locale.orig	2022-01-20 21:31:59 UTC
+++ projects/libcxx/include/__locale
@@ -35,7 +35,7 @@
 # include <__support/newlib/xlocale.h>
 #elif defined(__OpenBSD__)
 # include <__support/openbsd/xlocale.h>
-#elif (defined(__APPLE__)      || defined(__FreeBSD__) \
+#elif (defined(__APPLE__)      || defined(__FreeDragon__) \
     || defined(__EMSCRIPTEN__) || defined(__IBMCPP__))
 # include <xlocale.h>
 #elif defined(__Fuchsia__)
@@ -450,10 +450,10 @@ public:
     static const mask blank  = _BLANK;
     static const mask __regex_word = 0x80;
 # define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_PRINT
-#elif defined(__APPLE__) || defined(__FreeBSD__) || defined(__EMSCRIPTEN__) || defined(__NetBSD__)
+#elif defined(__APPLE__) || defined(__FreeDragon__) || defined(__EMSCRIPTEN__) || defined(__NetBSD__)
 # ifdef __APPLE__
     typedef __uint32_t mask;
-# elif defined(__FreeBSD__)
+# elif defined(__FreeDragon__)
     typedef unsigned long mask;
 # elif defined(__EMSCRIPTEN__) || defined(__NetBSD__)
     typedef unsigned short mask;


[FILE:401:patches/patch-projects_libcxx_include_locale]
--- projects/libcxx/include/locale.orig	2022-01-20 21:31:59 UTC
+++ projects/libcxx/include/locale
@@ -228,7 +228,7 @@ _LIBCPP_PUSH_MACROS
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeDragon__)
 #  define _LIBCPP_GET_C_LOCALE 0
 #elif defined(__CloudABI__) || defined(__NetBSD__)
 #  define _LIBCPP_GET_C_LOCALE LC_C_LOCALE


[FILE:450:patches/patch-projects_libcxx_src_locale.cpp]
--- projects/libcxx/src/locale.cpp.orig	2022-01-20 21:31:59 UTC
+++ projects/libcxx/src/locale.cpp
@@ -1133,7 +1133,7 @@ ctype<char>::classic_table() noexcept
 const ctype<char>::mask*
 ctype<char>::classic_table() noexcept
 {
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__DragonFly__)
     return _DefaultRuneLocale.__runetype;
 #elif defined(__NetBSD__)
     return _C_ctype_tab_ + 1;


[FILE:409:patches/patch-projects_libcxx_utils_google-benchmark_src_internal__macros.h]
--- projects/libcxx/utils/google-benchmark/src/internal_macros.h.orig	2022-01-20 21:31:59 UTC
+++ projects/libcxx/utils/google-benchmark/src/internal_macros.h
@@ -56,7 +56,7 @@
       #define BENCHMARK_OS_IOS 1
     #endif
   #endif
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
   #define BENCHMARK_OS_FREEBSD 1
 #elif defined(__NetBSD__)
   #define BENCHMARK_OS_NETBSD 1


[FILE:476:files/CMakeLists.txt]
cmake_minimum_required(VERSION 3.4.3)
set(LLVM_MAIN_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(PACKAGE_VERSION "%%VERSION%%")
set(LIBCXX_CXX_ABI "libcxxabi")
set(PRJDIR "${LLVM_MAIN_SRC_DIR}/projects")
set(LLVM_EXTERNAL_LIBCXX_SOURCE_DIR "${PRJDIR}/libcxx")
set(LIBCXXABI_LIBCXX_PATH "${PRJDIR}/libcxx")
set(LIBCXX_CXX_ABI_INCLUDE_PATHS "${PRJDIR}/libcxxabi/include")
set(LIBCXXABI_USE_LLVM_UNWINDER TRUE)

add_subdirectory(projects/libcxx)
add_subdirectory(projects/libcxxabi)

