# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libcxx
VERSION=		7.0.1
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	LLVM C++ standard library
HOMEPAGE=		https://libcxx.llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://llvm.org/releases/7.0.1/
DISTFILE[1]=		libcxx-7.0.1.src.tar.xz:main
DISTFILE[2]=		libcxxabi-7.0.1.src.tar.xz:main
DF_INDEX=		1 2
SPKGS[standard]=	complete
			primary
			abi
			experimental

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		python-Sphinx:single:python_default
			llvm:single:standard
BUILDRUN_DEPENDS=	llvm-libunwind:single:standard

USES=			cmake cclibs:primary

DISTNAME=		llvm

LICENSE=		CUSTOM1:primary CUSTOM2:abi
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
			CUSTOM2:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/projects/libcxx/LICENSE.TXT
			CUSTOM2:{{WRKSRC}}/projects/libcxxabi/LICENSE.TXT
LICENSE_SCHEME=		multi

CMAKE_BUILD_TYPE=	Release

CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"
			-DLLVM_ENABLE_SPHINX=ON
			-DLIBCXX_CXX_ABI_LIBRARY_PATH={{WRKDIR}}/.build/lib

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libc++.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libc++abi.so

post-extract:
	${MKDIR} ${WRKSRC}/projects
	${MV} ${WRKDIR}/libcxx-7.0.1.src \
		${WRKSRC}/projects/libcxx
	${MV} ${WRKDIR}/libcxxabi-7.0.1.src \
		${WRKSRC}/projects/libcxxabi
	${SED} -e 's|%%VERSION%%|7.0.1|' ${FILESDIR}/CMakeLists.txt \
		> ${WRKSRC}/CMakeLists.txt

[FILE:382:descriptions/desc.primary]
libc++ is a new implementation of the C++ standard library, targeting
C++11, c++14, and c++17.

Features and Goals
 * Correctness as defined by the C++11 standard.
 * Fast execution.
 * Minimal memory use.
 * Fast compile times.
 * ABI compatibility with gcc's libstdc++ for some low-level features
   such as exception objects, rtti and memory allocation.
 * Extensive unit tests.


[FILE:284:descriptions/desc.abi]
libc++abi is a new implementation of low level support for a standard
C++ library.

Features and Goals
 * Correctness as defined by the C++11 standard.
 * Provide a portable sublayer to ease the porting of libc++
 * On Mac OS X, be ABI compatible with the existing low-level support.


[FILE:43:descriptions/desc.experimental]
LLVM project's libc++experimental library.


[FILE:207:distinfo]
020002618b319dc2a8ba1f2cba88b8cc6a209005ed8ad29f9de0c562c6ebb9f1      1638188 libcxx-7.0.1.src.tar.xz
8168903a157ca7ab8423d3b974eaa497230b1564ceb57260be2bd14412e8ded8       535096 libcxxabi-7.0.1.src.tar.xz


[FILE:2020:manifests/plist.primary]
include/c++/v1/
 __bit_reference
 __bsd_locale_defaults.h
 __bsd_locale_fallbacks.h
 __config
 __debug
 __errc
 __functional_03
 __functional_base
 __functional_base_03
 __hash_table
 __libcpp_version
 __locale
 __mutex_base
 __node_handle
 __nullptr
 __split_buffer
 __sso_allocator
 __std_stream
 __string
 __threading_support
 __tree
 __tuple
 __undef_macros
 algorithm
 any
 array
 atomic
 bitset
 cassert
 ccomplex
 cctype
 cerrno
 cfenv
 cfloat
 charconv
 chrono
 cinttypes
 ciso646
 climits
 clocale
 cmath
 codecvt
 compare
 complex
 complex.h
 condition_variable
 csetjmp
 csignal
 cstdarg
 cstdbool
 cstddef
 cstdint
 cstdio
 cstdlib
 cstring
 ctgmath
 ctime
 ctype.h
 cwchar
 cwctype
 deque
 errno.h
 exception
 filesystem
 float.h
 forward_list
 fstream
 functional
 future
 initializer_list
 inttypes.h
 iomanip
 ios
 iosfwd
 iostream
 istream
 iterator
 limits
 limits.h
 list
 locale
 locale.h
 map
 math.h
 memory
 module.modulemap
 mutex
 new
 numeric
 optional
 ostream
 queue
 random
 ratio
 regex
 scoped_allocator
 set
 setjmp.h
 shared_mutex
 span
 sstream
 stack
 stdbool.h
 stddef.h
 stdexcept
 stdint.h
 stdio.h
 stdlib.h
 streambuf
 string
 string.h
 string_view
 strstream
 system_error
 tgmath.h
 thread
 tuple
 type_traits
 typeindex
 typeinfo
 unordered_map
 unordered_set
 utility
 valarray
 variant
 vector
 version
 wchar.h
 wctype.h
include/c++/v1/ext/
 __hash
 hash_map
 hash_set
include/c++/v1/support/android/locale_bionic.h
include/c++/v1/support/fuchsia/xlocale.h
include/c++/v1/support/ibm/
 limits.h
 locale_mgmt_aix.h
 support.h
 xlocale.h
include/c++/v1/support/musl/xlocale.h
include/c++/v1/support/newlib/xlocale.h
include/c++/v1/support/solaris/
 floatingpoint.h
 wchar.h
 xlocale.h
include/c++/v1/support/win32/
 limits_msvc_win32.h
 locale_win32.h
include/c++/v1/support/xlocale/
 __nop_locale_mgmt.h
 __posix_l_fallback.h
 __strtonum_fallback.h
 xlocale.h
lib/
 libc++.a
 libc++.so
 libc++.so.1
 libc++.so.1.0
 libc++abi.a
 libc++abi.so
 libc++abi.so.1
 libc++abi.so.1.0


[FILE:45:manifests/plist.abi]
include/c++/v1/
 __cxxabi_config.h
 cxxabi.h


[FILE:379:manifests/plist.experimental]
include/c++/v1/experimental/
 __config
 __memory
 algorithm
 any
 chrono
 coroutine
 deque
 dynarray
 filesystem
 forward_list
 functional
 iterator
 list
 map
 memory_resource
 numeric
 optional
 propagate_const
 ratio
 regex
 set
 simd
 string
 string_view
 system_error
 tuple
 type_traits
 unordered_map
 unordered_set
 utility
 vector
lib/
 libc++experimental.a
 libc++fs.a


[FILE:2794:patches/patch-projects_libcxx_include_____config]
--- projects/libcxx/include/__config.orig	2018-08-17 07:22:08 UTC
+++ projects/libcxx/include/__config
@@ -11,6 +11,10 @@
 #ifndef _LIBCPP_CONFIG
 #define _LIBCPP_CONFIG
 
+#if defined(__FreeBSD__) || defined(__DragonFly__)
+#define __FreeDragon__
+#endif
+
 #if defined(_MSC_VER) && !defined(__clang__)
 #  if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
 #    define _LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
@@ -110,7 +114,7 @@
 #  endif
 // Feature macros for disabling pre ABI v1 features. All of these options
 // are deprecated.
-#  if defined(__FreeBSD__)
+#  if defined(__FreeDragon__)
 #    define _LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR
 #  endif
 #endif
@@ -231,7 +235,7 @@
 #  endif // __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 #endif // __BYTE_ORDER__
 
-#ifdef __FreeBSD__
+#ifdef __FreeDragon__
 #  include <sys/endian.h>
 #  if _BYTE_ORDER == _LITTLE_ENDIAN
 #    define _LIBCPP_LITTLE_ENDIAN
@@ -241,7 +245,7 @@
 #  ifndef __LONG_LONG_SUPPORTED
 #    define _LIBCPP_HAS_NO_LONG_LONG
 #  endif  // __LONG_LONG_SUPPORTED
-#endif  // __FreeBSD__
+#endif  // __FreeDragon__
 
 #ifdef __NetBSD__
 #  include <sys/endian.h>
@@ -329,7 +333,7 @@
 #endif
 
 #if __ISO_C_VISIBLE >= 2011 || __cplusplus >= 201103L
-#  if defined(__FreeBSD__)
+#  if defined(__FreeDragon__)
 #    define _LIBCPP_HAS_QUICK_EXIT
 #    define _LIBCPP_HAS_C11_FEATURES
 #  elif defined(__Fuchsia__)
@@ -972,7 +976,7 @@ template <unsigned> struct __static_asse
 #define _LIBCPP_NONUNIQUE_RTTI_BIT (1ULL << 63)
 #endif
 
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined(_LIBCPP_MSVCRT_LIKE) || \
+#if defined(__APPLE__) || defined(__FreeDragon__) || defined(_LIBCPP_MSVCRT_LIKE) || \
     defined(__sun__) || defined(__NetBSD__) || defined(__CloudABI__)
 #define _LIBCPP_LOCALE__L_EXTENSIONS 1
 #endif
@@ -984,7 +988,7 @@ template <unsigned> struct __static_asse
 #  endif
 #endif
 
-#ifdef __FreeBSD__
+#ifdef __FreeDragon__
 #define _DECLARE_C99_LDBL_MATH 1
 #endif
 
@@ -1012,11 +1016,11 @@ template <unsigned> struct __static_asse
 #  define _LIBCPP_HAS_NO_ALIGNED_ALLOCATION
 #endif
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeDragon__)
 #define _LIBCPP_HAS_DEFAULTRUNELOCALE
 #endif
 
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__sun__)
+#if defined(__APPLE__) || defined(__FreeDragon__) || defined(__sun__)
 #define _LIBCPP_WCTYPE_IS_MASK
 #endif
 
@@ -1106,7 +1110,7 @@ _LIBCPP_FUNC_VIS extern "C" void __sanit
     !defined(_LIBCPP_HAS_THREAD_API_PTHREAD) && \
     !defined(_LIBCPP_HAS_THREAD_API_WIN32) && \
     !defined(_LIBCPP_HAS_THREAD_API_EXTERNAL)
-#  if defined(__FreeBSD__) || \
+#  if defined(__FreeDragon__) || \
       defined(__Fuchsia__) || \
       defined(__NetBSD__) || \
       defined(__linux__) || \


[FILE:1047:patches/patch-projects_libcxx_include_____locale]
--- projects/libcxx/include/__locale.orig	2018-07-11 23:14:33 UTC
+++ projects/libcxx/include/__locale
@@ -30,7 +30,7 @@
 # include <support/solaris/xlocale.h>
 #elif defined(_NEWLIB_VERSION)
 # include <support/newlib/xlocale.h>
-#elif (defined(__APPLE__)      || defined(__FreeBSD__) \
+#elif (defined(__APPLE__)      || defined(__FreeDragon__) \
     || defined(__EMSCRIPTEN__) || defined(__IBMCPP__))
 # include <xlocale.h>
 #elif defined(__Fuchsia__)
@@ -402,10 +402,10 @@ public:
     static const mask xdigit = _HEX;
     static const mask blank  = _BLANK;
 # define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_PRINT
-#elif defined(__APPLE__) || defined(__FreeBSD__) || defined(__EMSCRIPTEN__) || defined(__NetBSD__)
+#elif defined(__APPLE__) || defined(__FreeDragon__) || defined(__EMSCRIPTEN__) || defined(__NetBSD__)
 # ifdef __APPLE__
     typedef __uint32_t mask;
-# elif defined(__FreeBSD__)
+# elif defined(__FreeDragon__)
     typedef unsigned long mask;
 # elif defined(__EMSCRIPTEN__) || defined(__NetBSD__)
     typedef unsigned short mask;


[FILE:401:patches/patch-projects_libcxx_include_locale]
--- projects/libcxx/include/locale.orig	2018-07-11 23:14:33 UTC
+++ projects/libcxx/include/locale
@@ -217,7 +217,7 @@ _LIBCPP_PUSH_MACROS
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeDragon__)
 #  define _LIBCPP_GET_C_LOCALE 0
 #elif defined(__CloudABI__) || defined(__NetBSD__)
 #  define _LIBCPP_GET_C_LOCALE LC_C_LOCALE


[FILE:454:patches/patch-projects_libcxx_src_locale.cpp]
--- projects/libcxx/src/locale.cpp.orig	2018-04-04 04:00:14 UTC
+++ projects/libcxx/src/locale.cpp
@@ -1120,7 +1120,7 @@ ctype<char>::classic_table()  _NOEXCEPT
 const ctype<char>::mask*
 ctype<char>::classic_table()  _NOEXCEPT
 {
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__DragonFly__)
     return _DefaultRuneLocale.__runetype;
 #elif defined(__NetBSD__)
     return _C_ctype_tab_ + 1;


[FILE:409:patches/patch-projects_libcxx_utils_google-benchmark_src_internal__macros.h]
--- projects/libcxx/utils/google-benchmark/src/internal_macros.h.orig	2018-07-10 04:02:00 UTC
+++ projects/libcxx/utils/google-benchmark/src/internal_macros.h
@@ -52,7 +52,7 @@
       #define BENCHMARK_OS_IOS 1
     #endif
   #endif
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
   #define BENCHMARK_OS_FREEBSD 1
 #elif defined(__NetBSD__)
   #define BENCHMARK_OS_NETBSD 1


[FILE:476:files/CMakeLists.txt]
cmake_minimum_required(VERSION 3.4.3)
set(LLVM_MAIN_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(PACKAGE_VERSION "%%VERSION%%")
set(LIBCXX_CXX_ABI "libcxxabi")
set(PRJDIR "${LLVM_MAIN_SRC_DIR}/projects")
set(LLVM_EXTERNAL_LIBCXX_SOURCE_DIR "${PRJDIR}/libcxx")
set(LIBCXXABI_LIBCXX_PATH "${PRJDIR}/libcxx")
set(LIBCXX_CXX_ABI_INCLUDE_PATHS "${PRJDIR}/libcxxabi/include")
set(LIBCXXABI_USE_LLVM_UNWINDER TRUE)

add_subdirectory(projects/libcxx)
add_subdirectory(projects/libcxxabi)

