# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-cattrs
VERSION=		1.1.2
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Composable complex class support for attrs (PY37)
SDESC[py38]=		Composable complex class support for attrs (PY38)
HOMEPAGE=		https://github.com/Tinche/cattrs
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/de/6c/7e372e2826df2dc798bf49c6ddfc60e3218456bef82df1a29b387bf607ba
DISTFILE[1]=		cattrs-1.1.2-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		cattrs-1.1.2.dist-info

GENERATED=		yes

[PY37].BUILD_DEPENDS_ON=		python-pip:single:py37
[PY37].RUN_DEPENDS_ON=			python-attrs:single:py37
[PY37].USES_ON=				python:py37,wheel

[PY38].BUILD_DEPENDS_ON=		python-pip:single:py38
[PY38].RUN_DEPENDS_ON=			python-attrs:single:py38
[PY38].USES_ON=				python:py38,wheel

[FILE:2904:descriptions/desc.single]
======
cattrs
======

        :alt: Documentation Status

        :alt: Supported Python versions

----

cattrs is an open source Python library for structuring and unstructuring
data. cattrs works best with attrs classes and the usual Python
collections, but other kinds of classes are supported by manually
registering
converters.

Python has a rich set of powerful, easy to use, built-in data types like
dictionaries, lists and tuples. These data types are also the lingua franca
of most data serialization libraries, for formats like json, msgpack, yaml
or
toml.

Data types like this, and mappings like dict s in particular, represent
unstructured data. Your data is, in all likelihood, structured: not all
combinations of field names are values are valid inputs to your programs.
In
Python, structured data is better represented with classes and
enumerations.
attrs is an excellent library for declaratively describing the structure of
your data, and validating it.

When you're handed unstructured data (by your network, file system,
database...),
cattrs helps to convert this data into structured data. When you have to
convert your structured data into data types other libraries can handle,
cattrs turns your classes and enumerations into dictionaries, integers and
strings.

Here's a simple taste. The list containing a float, an int and a string
gets converted into a tuple of three ints.

.. code-block:: pycon

    >>> import cattr
    >>> from typing import Tuple
    >>>
    >>> cattr.structure([1.0, 2, "3"], Tuple[int, int, int])
    (1, 2, 3)

cattrs works well with attrs classes out of the box.

.. code-block:: pycon

    >>> import attr, cattr
    >>>
    >>> @attr.s(slots=True, frozen=True)  # It works with normal classes
too.
    ... class C:
    ...     a = attr.ib()
    ...     b = attr.ib()
    ...
    >>> instance = C(1, 'a')
    >>> cattr.unstructure(instance)
    {'a': 1, 'b': 'a'}
    >>> cattr.structure({'a': 1, 'b': 'a'}, C)
    C(a=1, b='a')

Here's a much more complex example, involving attrs classes with type
metadata.

.. code-block:: pycon

    >>> from enum import unique, Enum
    >>> from typing import List, Optional, Sequence, Union
    >>> from cattr import structure, unstructure
    >>> import attr
    >>>
    >>> @unique
    ... class CatBreed(Enum):
    ...     SIAMESE = "siamese"
    ...     MAINE_COON = "maine_coon"
    ...     SACRED_BIRMAN = "birman"
    ...
    >>> @attr.s
    ... class Cat:
    ...     breed: CatBreed = attr.ib()
    ...     names: Sequence[str] = attr.ib()
    ...
    >>> @attr.s
    ... class DogMicrochip:
    ...     chip_id = attr.ib()
    ...     time_chipped: float = attr.ib()
    ...
    >>> @attr.s
    ... class Dog:
    ...     cuteness: int = attr.ib()
    ...     chip: Optional[DogMicrochip] = attr.ib()
    ...
    >>> p = unstructure([Dog(cuteness=1, chip=DogMicrochip(chip_id=1,
time_chipped=10.0)),


[FILE:108:distinfo]
967ce8f99b79f112a500fc03d02c4da669966055ea190b0c59a023af0ae33e5f        17154 cattrs-1.1.2-py3-none-any.whl

