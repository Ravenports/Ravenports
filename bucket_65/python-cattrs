# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-cattrs
VERSION=		1.8.0
KEYWORDS=		python
VARIANTS=		py38 py39
SDESC[py38]=		Composable complex class support for attrs (PY38)
SDESC[py39]=		Composable complex class support for attrs (PY39)
HOMEPAGE=		https://github.com/Tinche/cattrs
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/85/f4/56570f79c6bf44d3032c60e29c3786a00857ca4b68ba635300e7f4e5fbbc
DISTFILE[1]=		cattrs-1.8.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py38]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY38 PY39
OPTIONS_STANDARD=	none
VOPTS[py38]=		PY38=ON PY39=OFF
VOPTS[py39]=		PY38=OFF PY39=ON

DISTNAME=		cattrs-1.8.0.dist-info

GENERATED=		yes

[PY38].RUN_DEPENDS_ON=			python-attrs:single:py38
[PY38].USES_ON=				python:py38,wheel

[PY39].RUN_DEPENDS_ON=			python-attrs:single:py39
[PY39].USES_ON=				python:py39,wheel

[FILE:2937:descriptions/desc.single]
======
cattrs
======

        :alt: Documentation Status

        :alt: Supported Python versions

----

cattrs is an open source Python library for structuring and unstructuring
data. cattrs works best with attrs classes, dataclasses and the usual
Python collections, but other kinds of classes are supported by manually
registering converters.

Python has a rich set of powerful, easy to use, built-in data types like
dictionaries, lists and tuples. These data types are also the lingua franca
of most data serialization libraries, for formats like json, msgpack, yaml
or
toml.

Data types like this, and mappings like dict s in particular, represent
unstructured data. Your data is, in all likelihood, structured: not all
combinations of field names or values are valid inputs to your programs. In
Python, structured data is better represented with classes and
enumerations.
attrs is an excellent library for declaratively describing the structure of
your data, and validating it.

When you're handed unstructured data (by your network, file system,
database...),
cattrs helps to convert this data into structured data. When you have to
convert your structured data into data types other libraries can handle,
cattrs turns your classes and enumerations into dictionaries, integers and
strings.

Here's a simple taste. The list containing a float, an int and a string
gets converted into a tuple of three ints.

.. code-block:: pycon

    >>> import cattr
    >>>
    >>> cattr.structure([1.0, 2, "3"], tuple[int, int, int])
    (1, 2, 3)

cattrs works well with attrs classes out of the box.

.. code-block:: pycon

    >>> import attr, cattr
    >>>
    >>> @attr.frozen  # It works with normal classes too.
    ... class C:
    ...     a = attr.ib()
    ...     b = attr.ib()
    ...
    >>> instance = C(1, 'a')
    >>> cattr.unstructure(instance)
    {'a': 1, 'b': 'a'}
    >>> cattr.structure({'a': 1, 'b': 'a'}, C)
    C(a=1, b='a')

Here's a much more complex example, involving attrs classes with type
metadata.

.. code-block:: pycon

    >>> from enum import unique, Enum
    >>> from typing import Optional, Sequence, Union
    >>> from cattr import structure, unstructure
    >>> import attr
    >>>
    >>> @unique
    ... class CatBreed(Enum):
    ...     SIAMESE = "siamese"
    ...     MAINE_COON = "maine_coon"
    ...     SACRED_BIRMAN = "birman"
    ...
    >>> @attr.define
    ... class Cat:
    ...     breed: CatBreed
    ...     names: Sequence[str]
    ...
    >>> @attr.define
    ... class DogMicrochip:
    ...     chip_id = attr.ib()
    ...     time_chipped: float = attr.ib()
    ...
    >>> @attr.define
    ... class Dog:
    ...     cuteness: int
    ...     chip: Optional[DogMicrochip]
    ...
    >>> p = unstructure([Dog(cuteness=1, chip=DogMicrochip(chip_id=1,
time_chipped=10.0)),
    ...                  Cat(breed=CatBreed.MAINE_COON, names=('Fluffly',
'Fluffer'))])
    ...
    >>> print(p)


[FILE:108:distinfo]
901fb2040529ae8fc9d93f48a2cdf7de3e983312ffb2a164ffa4e9847f253af1        24343 cattrs-1.8.0-py3-none-any.whl

