# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-cattrs
VERSION=		1.10.0
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Composable complex class support for attrs (3.10)
SDESC[py39]=		Composable complex class support for attrs (3.9)
HOMEPAGE=		https://github.com/python-attrs/cattrs
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/b8/bb/0a4ae331fb64b0ccc6a83161d9aa462b2c38758823ac0ae48954714d5293
DISTFILE[1]=		cattrs-1.10.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		cattrs-1.10.0.dist-info

GENERATED=		yes

[PY39].RUN_DEPENDS_ON=			python-attrs:single:py39
[PY39].USES_ON=				python:py39,wheel

[PY310].RUN_DEPENDS_ON=			python-attrs:single:py310
[PY310].USES_ON=			python:py310,wheel

[FILE:2969:descriptions/desc.single]
======
cattrs
======

        :alt: Documentation Status

        :alt: Supported Python versions

----

cattrs is an open source Python library for structuring and unstructuring
data. cattrs works best with attrs classes, dataclasses and the usual
Python collections, but other kinds of classes are supported by manually
registering converters.

Python has a rich set of powerful, easy to use, built-in data types like
dictionaries, lists and tuples. These data types are also the lingua franca
of most data serialization libraries, for formats like json, msgpack, yaml
or
toml.

Data types like this, and mappings like dict s in particular, represent
unstructured data. Your data is, in all likelihood, structured: not all
combinations of field names or values are valid inputs to your programs. In
Python, structured data is better represented with classes and
enumerations.
attrs is an excellent library for declaratively describing the structure of
your data, and validating it.

When you're handed unstructured data (by your network, file system,
database...),
cattrs helps to convert this data into structured data. When you have to
convert your structured data into data types other libraries can handle,
cattrs turns your classes and enumerations into dictionaries, integers and
strings.

Here's a simple taste. The list containing a float, an int and a string
gets converted into a tuple of three ints.

.. code-block:: pycon

    >>> import cattr
    >>>
    >>> cattr.structure([1.0, 2, "3"], tuple[int, int, int])
    (1, 2, 3)

cattrs works well with attrs classes out of the box.

.. code-block:: pycon

    >>> from attr import frozen
    >>> import cattr
    >>>
    >>> @frozen  # It works with normal classes too.
    ... class C:
    ...     a: int
    ...     b: str
    ...
    >>> instance = C(1, 'a')
    >>> cattr.unstructure(instance)
    {'a': 1, 'b': 'a'}
    >>> cattr.structure({'a': 1, 'b': 'a'}, C)
    C(a=1, b='a')

Here's a much more complex example, involving attrs classes with type
metadata.

.. code-block:: pycon

    >>> from enum import unique, Enum
    >>> from typing import Optional, Sequence, Union
    >>> from cattr import structure, unstructure
    >>> from attr import define, field
    >>>
    >>> @unique
    ... class CatBreed(Enum):
    ...     SIAMESE = "siamese"
    ...     MAINE_COON = "maine_coon"
    ...     SACRED_BIRMAN = "birman"
    ...
    >>> @define
    ... class Cat:
    ...     breed: CatBreed
    ...     names: Sequence[str]
    ...
    >>> @define
    ... class DogMicrochip:
    ...     chip_id = field()  # Type annotations are optional, but
recommended
    ...     time_chipped: float = field()
    ...
    >>> @define
    ... class Dog:
    ...     cuteness: int
    ...     chip: Optional[DogMicrochip]
    ...
    >>> p = unstructure([Dog(cuteness=1, chip=DogMicrochip(chip_id=1,
time_chipped=10.0)),
    ...                  Cat(breed=CatBreed.MAINE_COON, names=('Fluffly',
'Fluffer'))])


[FILE:109:distinfo]
35dd9063244263e63bd0bd24ea61e3015b00272cead084b2c40d788b0f857c46        29697 cattrs-1.10.0-py3-none-any.whl

