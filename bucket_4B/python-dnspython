# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-dnspython
VERSION=		2.8.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		DNS toolkit for Python (3.12)
SDESC[v13]=		DNS toolkit for Python (3.13)
HOMEPAGE=		https://www.dnspython.org
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/ba/5a/18ad964b0086c6e62e2e7500f7edc89e3faa45033c71c1893d34eed2b2de
DISTFILE[1]=		dnspython-2.8.0-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		dnspython-2.8.0.dist-info

GENERATED=		yes

[PY312].USES_ON=			python:v12,wheel

[PY313].USES_ON=			python:v13,wheel

[FILE:2775:descriptions/desc.single]
# dnspython

[Build Status]
[Documentation Status]
[PyPI version]
[![License: ISC]](https://opensource.org/licenses/ISC)
[![Code style: black]](https://github.com/psf/black)

## INTRODUCTION

`dnspython` is a DNS toolkit for Python. It supports almost all record
types. It
can be used for queries, zone transfers, and dynamic updates. It supports
TSIG-authenticated messages and EDNS0.

`dnspython` provides both high- and low-level access to DNS. The high-level
classes perform queries for data of a given name, type, and class, and
return an
answer set. The low-level classes allow direct manipulation of DNS zones,
messages, names, and records.

To see a few of the ways `dnspython` can be used, look in the `examples/`
directory.

`dnspython` is a utility to work with DNS, `/etc/hosts` is thus not used.
For
simple forward DNS lookups, it's better to use `socket.getaddrinfo()` or
`socket.gethostbyname()`.

`dnspython` originated at Nominum where it was developed to facilitate the
testing of DNS software.

## ABOUT THIS RELEASE

This is of `dnspython` 2.8.0.
Please read
[What's New] for
information about the changes in this release.

## INSTALLATION

* Many distributions have dnspython packaged for you, so you should check
there
  first.
* To use a wheel downloaded from PyPi, run:

`
    pip install dnspython
`

* To install from the source code, go into the top-level of the source code
  and run:

```
    pip install --upgrade pip build
    python -m build
    pip install dist/*.whl
```

* To install the latest from the main branch, run
`pip install git+https://github.com/rthalley/dnspython.git`

`dnspython`'s default installation does not depend on any modules other
than
those in the Python standard library.  To use some features, additional
modules
must be installed.  For convenience, `pip` options are defined for the
requirements.

If you want to use DNS-over-HTTPS, run
`pip install dnspython[doh]`.

If you want to use DNSSEC functionality, run
`pip install dnspython[dnssec]`.

If you want to use internationalized domain names (IDNA)
functionality, you must run
`pip install dnspython[idna]`

If you want to use the Trio asynchronous I/O package, run
`pip install dnspython[trio]`.

If you want to use WMI on Windows to determine the active DNS settings
instead of the default registry scanning method, run
`pip install dnspython[wmi]`.

If you want to try the experimental DNS-over-QUIC code, run
`pip install dnspython[doq]`.

Note that you can install any combination of the above, e.g.:
`pip install dnspython[doh,dnssec,idna]`

### Notices

Python 2.x support ended with the release of 1.16.0.  `dnspython` supports
Python 3.10
and later.  Future support is aligned with the lifetime of the Python 3
versions.

Documentation has moved to


[FILE:122:distinfo]
01d9bbc4a2d76bf0db7c1f729812ded6d912bd318d3b1cf81d30c0f845dbf3af       331094 python-src/dnspython-2.8.0-py3-none-any.whl

