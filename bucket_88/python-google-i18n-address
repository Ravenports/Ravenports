# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-google-i18n-address
VERSION=		2.3.5
KEYWORDS=		python devel
VARIANTS=		py27 py38 py37
SDESC[py37]=		Address validation helpers for Google's i1 (PY 37)
SDESC[py38]=		Address validation helpers for Google's i1 (PY 38)
SDESC[py27]=		Address validation helpers for Google's i1 (PY 27)
HOMEPAGE=		https://github.com/mirumee/google-i18n-address
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/g/google-i18n-address
DISTFILE[1]=		google-i18n-address-2.3.5.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY27=OFF PY38=OFF PY37=ON
VOPTS[py38]=		PY27=OFF PY38=ON PY37=OFF
VOPTS[py27]=		PY27=ON PY38=OFF PY37=OFF

DISTNAME=		google-i18n-address-2.3.5

GENERATED=		yes

[PY37].BUILDRUN_DEPENDS_ON=		python-requests:single:py37
[PY37].USES_ON=				python:py37

[PY38].BUILDRUN_DEPENDS_ON=		python-requests:single:py38
[PY38].USES_ON=				python:py38

[PY27].BUILDRUN_DEPENDS_ON=		python-requests:single:py27
[PY27].USES_ON=				python:py27

[FILE:3264:descriptions/desc.single]
Google i18n address
===========================================================================
================

|codecov.io| |Circle CI| |PyPi downloads| |requires.io| |PyPi version|
|PyPi pythons| |GitHub|

This package contains a copy of `Google's i18n
address <https://chromium-i18n.appspot.com/ssl-address>`_ metadata
repository
that contains great data but comes with no uptime guarantees.

Contents of this package will allow you to programatically build address
forms that adhere to rules of a particular region or country, validate
local addresses and format them to produce a valid address label for
delivery.

The package also contains a Python interface for address validation.

Addresses validation
--------------------

The ``normalize_address`` function checks the address and either returns
its
canonical form (suitable for storage and use in addressing envelopes) or
raises an ``InvalidAddress`` exception that contains a list of errors.


Address fields
~~~~~~~~~~~~~~

Here is the list of recognized fields:

* ``country_code`` is a two-letter ISO 3166-1 country code
* ``country_area`` is a designation of a region, province or state,
  recognized values include official names, designated abbreviations,
  official translations and latin transliterations
* ``city`` is a city or town name, recognized values include official
names,
  official translations and latin transliterations
* ``city_area`` is a sublocality like a district, recognized values include
  official names, official translations and latin transliterations
* ``street_address`` is the (possibly multiline) street address
* ``postal_code`` is a postal code or zip code
* ``sorting_code`` is a sorting code
* ``name`` is a person's name
* ``company_name`` is a name of a company or organization


Errors
~~~~~~

Address validation with only country code:

.. code:: python

    >>> from i18naddress import InvalidAddress, normalize_address
    >>> try:
    ...     address = normalize_address({'country_code': 'US'})
    ... except InvalidAddress as e:
    ...     print(e.errors)
    ...
    {'city': 'required',
     'country_area': 'required',
     'postal_code': 'required',
     'street_address': 'required'}

With correct address:

.. code:: python

    >>> from i18naddress import normalize_address
    >>> address = normalize_address({
        'country_code': 'US',
        'country_area': 'California',
        'city': 'Mountain View',
        'postal_code': '94043',
        'street_address': '1600 Amphitheatre Pkwy'})
    >>> print(address)
    {'city': 'MOUNTAIN VIEW',
     'city_area': '',
     'country_area': 'CA',
     'country_code': 'US',
     'postal_code': '94043',
     'sorting_code': '',
     'street_address': '1600 Amphitheatre Pkwy'}

Postal code/zip code validation example:

.. code:: python

    >>> from i18naddress import InvalidAddress, normalize_address
    >>> try:
    ...     address = normalize_address({
    ...         'country_code': 'US',
    ...         'country_area': 'California',
    ...         'city': 'Mountain View',
    ...         'postal_code': '74043',
    ...         'street_address': '1600 Amphitheatre Pkwy'})
    ... except InvalidAddress as e:
    ...     print(e.errors)
    ...
    {'postal_code': 'invalid'}




[FILE:111:distinfo]
7c6cd436e9abcdd69ea347d2e440d718019eed55e98b7078051f902a521f6fce       724758 google-i18n-address-2.3.5.tar.gz

