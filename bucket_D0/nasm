# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		nasm
VERSION=		2.11.08
KEYWORDS=		devel lang
VARIANTS=		standard
SDESC[standard]=	General-purpose x86 and amd64 assembler
HOMEPAGE=		http://www.nasm.us/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://www.nasm.us/pub/nasm/releasebuilds/2.11.08/
DISTFILE[1]=		nasm-2.11.08.tar.xz:main
DISTFILE[2]=		nasm-2.11.08-xdoc.tar.xz:main
DF_INDEX=		1 2
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			gmake

FPC_EQUIVALENT=		devel/nasm

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		ac_cv_func_strspn=yes

MAKE_ARGS=		INSTALLROOT={{STAGEDIR}}

INSTALL_TARGET=		install install_rdf

post-install:
	@${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	(cd ${WRKSRC}/doc && ${COPYTREE_SHARE} html ${STAGEDIR}${STD_DOCDIR})
	${INSTALL_DATA} ${WRKSRC}/doc/nasmdoc.txt ${STAGEDIR}${STD_DOCDIR}

[FILE:691:descriptions/desc.primary]
The Netwide Assembler (NASM) is an x86 and amd64 (x86-64) assembler
designed for portability and modularity.  It will output flat-form binary
files, a.out (Linux and *BSD), COFF, ELF32, ELF64, Mach-O, Microsoft OMF
(OBJ), Win32, Win64, as86 (Minix/Linux bin86 v0.3), LADsoft IEEE-695,
Intel hex, Motorola S-record, and a home-grown format called RDOFF.  NASM
syntax is similar to Intel's, but is less complex.  It supports Pentium,
P6, MMX, 3DNow!, SSE, SSE2, SSE3, SSE4.1, SSE4.2, XOP/FMA4/CVT16
(rev 3.03), and x64 opcodes, among others.  It has strong support for
macro conventions.

The port also includes NDISASM, a binary file disassembler which uses the
same instruction set as NASM.


[FILE:201:distinfo]
c99467c7072211c550d147640d8a1a0aa4d636d4d8cf849f3bf4317d900a1f7f       764872 nasm-2.11.08.tar.xz
b7d4467c5955349157cf780e0fd2160bf301c31c9bc30dc4fa2b280eda966a8c       753676 nasm-2.11.08-xdoc.tar.xz


[FILE:256:manifests/plist.primary]
bin/
 ldrdf
 nasm
 ndisasm
 rdf2bin
 rdf2com
 rdf2ihx
 rdf2ith
 rdf2srec
 rdfdump
 rdflib
 rdx
share/man/man1/
 ldrdf.1.gz
 nasm.1.gz
 ndisasm.1.gz
 rdf2bin.1.gz
 rdf2com.1.gz
 rdf2ihx.1.gz
 rdf2ith.1.gz
 rdf2srec.1.gz
 rdfdump.1.gz
 rdflib.1.gz
 rdx.1.gz


[FILE:1901:patches/patch-elf64-alignment]
From 1f0cb0f2c1ba632c0fab02424928cfb756a9160c Mon Sep 17 00:00:00 2001
From: Ed Maste <emaste@freebsd.org>
Date: Thu, 16 Apr 2015 00:59:52 +0300
Subject: [PATCH] output: elf64 -- increase .symtab and .rel* alignment to 8

Discovered while working on ELF Tool Chain elfcopy (strip),
which originally crashed on an assert while processing
a nasm-generated ELF object.

The .symtab and .rela.text sections report 4 byte alignment,
but require 8.

As an aside, see https://sourceforge.net/p/elftoolchain/tickets/485/ for a
discussion of the ELF Tool Chain issue that this bug exposed.

With my WIP elfcopy change and nasm-assembled jccolss2-64.o from libjpeg-turbo:

% strip -o /dev/null --strip-debug jccolss2-64.o
strip: section .symtab alignment 4 increased to 8
strip: section .rela.text alignment 4 increased to 8

http://bugzilla.nasm.us/show_bug.cgi?id=3392307

Signed-off-by: Ed Maste <emaste@freebsd.org>
Signed-off-by: Cyrill Gorcunov <gorcunov@gmail.com>
---
 output/outelf64.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git output/outelf64.c output/outelf64.c
index 241e345..19bd845 100644
--- output/outelf64.c
+++ output/outelf64.c
@@ -1084,7 +1084,7 @@ static void elf_write(void)
 
     /* .symtab */
     elf_section_header(p - shstrtab, SHT_SYMTAB, 0, symtab, true,
-                       symtablen, sec_strtab, symtablocal, 4, 24);
+                       symtablen, sec_strtab, symtablocal, 8, 24);
     p += strlen(p) + 1;
 
     /* .strtab */
@@ -1096,7 +1096,7 @@ static void elf_write(void)
     for (i = 0; i < nsects; i++)
         if (sects[i]->head) {
             elf_section_header(p - shstrtab, SHT_RELA, 0, sects[i]->rel, true,
-                               sects[i]->rellen, sec_symtab, i + 1, 4, 24);
+                               sects[i]->rellen, sec_symtab, i + 1, 8, 24);
             p += strlen(p) + 1;
         }
 
-- 
1.7.6.6.GIT



[FILE:448:patches/patch-output_outelf32.c]
--- output/outelf32.c.orig
+++ output/outelf32.c
@@ -1702,7 +1702,7 @@
          * the source-file, the n_desc field should be set to the number
          * of remaining stabs
          */
-        WRITE_STAB(sptr, fileidx[0], 0, 0, 0, strlen(allfiles[0] + 12));
+        WRITE_STAB(sptr, fileidx[0], 0, 0, 0, stabstrlen);
 
         /* this is the stab for the main source file */
         WRITE_STAB(sptr, fileidx[mainfileindex], N_SO, 0, 0, 0);


[FILE:448:patches/patch-output_outelf64.c]
--- output/outelf64.c.orig
+++ output/outelf64.c
@@ -1772,7 +1772,7 @@
          * the source-file, the n_desc field should be set to the number
          * of remaining stabs
          */
-        WRITE_STAB(sptr, fileidx[0], 0, 0, 0, strlen(allfiles[0] + 12));
+        WRITE_STAB(sptr, fileidx[0], 0, 0, 0, stabstrlen);
 
         /* this is the stab for the main source file */
         WRITE_STAB(sptr, fileidx[mainfileindex], N_SO, 0, 0, 0);

