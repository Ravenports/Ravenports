# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		popt
VERSION=		1.16
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Command line option parsing library
HOMEPAGE=		http://rpm5.org/files/popt/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://rpm5.org/files/popt/
DISTFILE[1]=		popt-1.16.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			iconv libtool fbsd10fix

FPC_EQUIVALENT=		devel/popt

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-nls

INSTALL_TARGET=		install-strip

[FILE:447:descriptions/desc.single]
This is the popt command line option parsing library. While it is similar
to getopt(3), it contains a number of enhancements, including:

        1) popt is fully reentrant
        2) popt can parse arbitrary argv[] style arrays while
           getopt(2) makes this quite difficult
        3) popt allows users to alias command line arguments
        4) popt provides convenience functions for parsing strings
           into argv[] style arrays


[FILE:95:distinfo]
e728ed296fe9f069a0e005003c3d6b2dde3d9cad453422a10d6558616d304cc8       702769 popt-1.16.tar.gz


[FILE:122:manifests/plist.single]
include/popt.h
lib/
 libpopt.a
 libpopt.so
 libpopt.so.0
 libpopt.so.0.0.0
lib/pkgconfig/popt.pc
share/man/man3/popt.3.gz


[FILE:1151:patches/patch-Makefile.in]
--- Makefile.in.orig	2017-07-12 14:39:00 UTC
+++ Makefile.in
@@ -92,7 +92,7 @@ am__base_list = \
 am__installdirs = "$(DESTDIR)$(usrlibdir)" "$(DESTDIR)$(man3dir)" \
 	"$(DESTDIR)$(pkgconfigdir)" "$(DESTDIR)$(includedir)"
 LTLIBRARIES = $(usrlib_LTLIBRARIES)
-libpopt_la_LIBADD =
+libpopt_la_LIBADD = $(LTLIBINTL)
 am_libpopt_la_OBJECTS = popt.lo poptparse.lo poptconfig.lo popthelp.lo \
 	poptint.lo
 libpopt_la_OBJECTS = $(am_libpopt_la_OBJECTS)
@@ -349,16 +349,16 @@ AM_CPPFLAGS = -I. -I$(top_srcdir)
 noinst_HEADERS = poptint.h system.h
 test1_SOURCES = test1.c
 test1_LDFLAGS = 
-test1_LDADD = $(usrlib_LTLIBRARIES)
+test1_LDADD = $(usrlib_LTLIBRARIES) $(LTLIBICONV)
 test2_SOURCES = test2.c
 test2_LDFLAGS = 
-test2_LDADD = $(usrlib_LTLIBRARIES)
+test2_LDADD = $(usrlib_LTLIBRARIES) $(LTLIBICONV)
 #test3_SOURCES = test3.c
 #test3_LDFLAGS = 
-#test3_LDADD = $(usrlib_LTLIBRARIES)
+#test3_LDADD = $(usrlib_LTLIBRARIES) $(LTLIBICONV)
 tdict_SOURCES = tdict.c
 tdict_LDFLAGS = 
-tdict_LDADD = $(usrlib_LTLIBRARIES)
+tdict_LDADD = $(usrlib_LTLIBRARIES) $(LTLIBICONV)
 noinst_SCRIPTS = testit.sh
 TESTS_ENVIRONMENT = \
 test1="$(top_builddir)/test1"


[FILE:724:patches/patch-popt.3]
--- popt.3.orig	2009-07-25 18:52:36 UTC
+++ popt.3
@@ -24,7 +24,7 @@ popt \- Parse command line options
 .sp
 .BI "const char ** poptGetArgs(poptContext " con );
 .sp
-.BI "const char *const poptStrerror(const int " error );
+.BI "const char * poptStrerror(const int " error );
 .sp
 .BI "const char * poptBadOption(poptContext " con ", int " flags );
 .sp
@@ -498,7 +498,7 @@ Two functions are available to make it easy for applic
 good error messages.
 .HP
 .nf
-.BI "const char *const poptStrerror(const int " error ");"
+.BI "const char * poptStrerror(const int " error ");"
 .fi
 This function takes a popt error code and returns a string describing
 .RB "the error, just as with the standard " strerror() " function."


[FILE:253:patches/patch-popt.c]
--- popt.c.orig	2010-01-19 00:39:10 UTC
+++ popt.c
@@ -22,6 +22,9 @@ extern long long int strtoll(const char *nptr, /*@null
 #include <float.h>
 #endif
 #include <math.h>
+#ifdef __FreeBSD__
+#include <machine/float.h>
+#endif
 
 #include "poptint.h"
 

