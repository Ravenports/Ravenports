# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-idna
VERSION=		3.0
KEYWORDS=		python
VARIANTS=		py38 py39
SDESC[py38]=		Int. Domain Names in Applications (PY38)
SDESC[py39]=		Int. Domain Names in Applications (PY39)
HOMEPAGE=		https://github.com/kjd/idna
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/0f/6b/3a878f15ef3324754bf4780f8f047d692d9860be894ff8fb3135cef8bed8
DISTFILE[1]=		idna-3.0-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py38]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY38 PY39
OPTIONS_STANDARD=	none
VOPTS[py38]=		PY38=ON PY39=OFF
VOPTS[py39]=		PY38=OFF PY39=ON

DISTNAME=		idna-3.0.dist-info

GENERATED=		yes

[PY38].USES_ON=				python:py38,wheel

[PY39].USES_ON=				python:py39,wheel

[FILE:3166:descriptions/desc.single]
Internationalized Domain Names in Applications (IDNA)
=====================================================

Support for the Internationalised Domain Names in Applications
(IDNA) protocol as specified in [RFC 5891].
This is the latest version of the protocol and is sometimes referred to as
“IDNA 2008”.

This library also provides support for Unicode Technical Standard 46,
[Unicode IDNA Compatibility Processing].

This acts as a suitable replacement for the “encodings.idna” module
that
comes with the Python standard library, but which only supports the
old, deprecated IDNA specification ([RFC 3490]).

Basic functions are simply executed:

Installation
------------

To install this library, you can use pip:

.. code-block:: bash

    $ pip install idna

Alternatively, you can install the package using the bundled setup script:

.. code-block:: bash

    $ python setup.py install

This library works with Python 3.4 or later. Earlier versions of this
library support Python 2 - use "idna<3" in your requirements file if
you need this library for a Python 2 application.

Usage
-----

For typical usage, the encode and decode functions will take a domain
name argument and perform a conversion to A-labels or U-labels
respectively.

.. code-block:: pycon

    >>> import idna
    >>> idna.encode('ドメイン.テスト')
    b'xn--eckwd4c7c.xn--zckzah'
    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))
    ドメイン.テスト

You may use the codec encoding and decoding methods using the
``idna.codec`` module:

.. code-block:: pycon

    >>> import idna.codec
    >>> print('домена.испытание'.encode('idna'))
    b'xn--80ahd1agd.xn--80akhbyknj4f'
    >>> print(b'xn--80ahd1agd.xn--80akhbyknj4f'.decode('idna'))
    домена.испытание

Conversions can be applied at a per-label basis using the ulabel or alabel
functions if necessary:

.. code-block:: pycon

    >>> idna.alabel('测试')
    b'xn--0zwm56d'

Compatibility Mapping (UTS #46)
+++++++++++++++++++++++++++++++

As described in [RFC 5895], the IDNA
specification does not normalize input from different potential ways a user
may input a domain name. This functionality, known as a “mapping”, is 
considered by the specification to be a local user-interface issue distinct
from IDNA conversion functionality.

This library provides one such mapping, that was developed by the Unicode
Consortium. Known as [Unicode IDNA Compatibility Processing],
it provides for both a regular mapping for typical applications, as well as
a transitional mapping to help migrate from older IDNA 2003 applications.

For example, “Königsgäßchen” is not a permissible label as *LATIN
CAPITAL
LETTER K* is not allowed (nor are capital letters in general). UTS 46 will
convert this into lower case prior to applying the IDNA conversion.

.. code-block:: pycon

    >>> import idna
    >>> idna.encode('Königsgäßchen')
    ...
    idna.core.InvalidCodepoint: Codepoint U+004B at position 1 of
'Königsgäßchen' not allowed
    >>> idna.encode('Königsgäßchen', uts46=True)
    b'xn--knigsgchen-b4a3dun'
    >>> print(idna.decode('xn--knigsgchen-b4a3dun'))


[FILE:108:distinfo]
320229aadbdfc597bc28876748cc0c9d04d476e0fe6caacaaddea146365d9f63        58618 idna-3.0-py2.py3-none-any.whl

