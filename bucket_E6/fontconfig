# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		fontconfig
VERSION=		2.13.0
KEYWORDS=		x11_fonts
VARIANTS=		standard
SDESC[standard]=	XML-based font configuration API for X Windows
HOMEPAGE=		http://www.freedesktop.org/wiki/Software/fontconfig
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://www.freedesktop.org/software/fontconfig/release/
DISTFILE[1]=		fontconfig-2.13.0.tar.bz2:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	HINTING_NONE HINTING_SLIGHT HINTING_MEDIUM
			HINTING_FULL NO_BITMAPS
OPTIONS_STANDARD=	HINTING_NONE HINTING_SLIGHT HINTING_MEDIUM
			HINTING_FULL NO_BITMAPS
OPTGROUP_RADIO=		HINTING
OPTDESCR[HINTING]=	Preferred pixel hinting configuration
OPTGROUP[HINTING]=	HINTING_NONE HINTING_SLIGHT HINTING_MEDIUM
			HINTING_FULL
OPT_ON[all]=		HINTING_SLIGHT

BUILD_DEPENDS=		gperf:single:standard
BUILDRUN_DEPENDS=	freetype:primary:standard
			expat:complete:standard
			libuuid:single:standard

USES=			cpe gmake libtool pkgconfig

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

CPE_VENDOR=		fontconfig_project
FPC_EQUIVALENT=		x11-fonts/fontconfig

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--with-configdir={{PREFIX}}/etc/fonts/conf.d
			--with-templatedir={{PREFIX}}/etc/fonts/conf.avail
			--with-xmldir={{PREFIX}}/etc/fonts
			--with-expat-includes={{LOCALBASE}}/include
			--with-expat-lib={{LOCALBASE}}/lib
			--with-default-hinting={{PREFERRED_HINTING}}
			--with-default-fonts={{PREFIX}}/share/fonts
			--with-add-fonts={{LOCALBASE}}/lib/X11/fonts
			--with-cache-dir=/var/db/fontconfig
			--disable-docs
			--enable-static
CONFIGURE_ENV=		PYTHON=":"

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		1.11.1
PLIST_SUB=		PREFERRED_HINTING={{PREFERRED_HINTING}}
SUB_FILES=		pkg-install-primary

[HINTING_MEDIUM].DESCRIPTION=		Medium hinting
[HINTING_MEDIUM].MAKEFILE_ON=		PREFERRED_HINTING=medium

[NO_BITMAPS].DESCRIPTION=		Reject bitmap fonts by default

[HINTING_NONE].DESCRIPTION=		No hinting
[HINTING_NONE].MAKEFILE_ON=		PREFERRED_HINTING=none

[HINTING_SLIGHT].DESCRIPTION=		Slight hinting
[HINTING_SLIGHT].MAKEFILE_ON=		PREFERRED_HINTING=slight

[HINTING_FULL].DESCRIPTION=		Full hinting
[HINTING_FULL].MAKEFILE_ON=		PREFERRED_HINTING=full

post-install:
	@${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	${INSTALL_MAN} ${WRKSRC}/fc-*/*.1 \
		${STAGEDIR}${MANPREFIX}/man/man1
	${INSTALL_MAN} ${WRKSRC}/doc/*.5 \
		${STAGEDIR}${MANPREFIX}/man/man5
	${INSTALL_DATA} ${WRKSRC}/fonts.conf \
		${STAGEDIR}${PREFIX}/etc/fonts/fonts.conf.sample
.for doc in fontconfig-user.html fontconfig-user.pdf fontconfig-user.txt
	${INSTALL_DATA} ${WRKSRC}/doc/${doc} ${STAGEDIR}${STD_DOCDIR}/
.endfor

post-patch-NO_BITMAPS-ON:
	${SED} -i'.bitmaps.bak' -e \
		'/^CONF_LINKS =/s|$$|\${.newline}       70-no-bitmaps.conf \\|' \
		${WRKSRC}/conf.d/Makefile.in

[FILE:799:descriptions/desc.primary]
Fontconfig does the following:

 * discover new fonts when installed automatically, removing a common
   source of configuration problems.
 * perform font name substitution, so that appropriate alternative fonts
   can be selected if fonts are missing.
 * identify the set of fonts required to completely cover a language set.
 * have GUI configuration tools built as it uses an XML-based configuration
   file (though with autodiscovery, we believe this need is minimized).
 * efficiently and quickly find the fonts you need among the set of fonts
   you have installed, even if you have installed thousands of fonts,
   while minimzing memory usage.
 * be used in concert with the X Render Extension and FreeType to implement
   high quality, anti-aliased and subpixel rendered text on a display.


[FILE:104:distinfo]
91dde8492155b7f34bb95079e79be92f1df353fcc682c19be90762fd3e12eeb9      1700500 fontconfig-2.13.0.tar.bz2


[FILE:1760:manifests/plist.primary]
bin/
 fc-cache
 fc-cat
 fc-conflist
 fc-list
 fc-match
 fc-pattern
 fc-query
 fc-scan
 fc-validate
etc/fonts/conf.avail/
 10-autohint.conf
 10-hinting-full.conf
 10-hinting-medium.conf
 10-hinting-none.conf
 10-hinting-slight.conf
 10-no-sub-pixel.conf
 10-scale-bitmap-fonts.conf
 10-sub-pixel-bgr.conf
 10-sub-pixel-rgb.conf
 10-sub-pixel-vbgr.conf
 10-sub-pixel-vrgb.conf
 10-unhinted.conf
 11-lcdfilter-default.conf
 11-lcdfilter-legacy.conf
 11-lcdfilter-light.conf
 20-unhint-small-vera.conf
 25-unhint-nonlatin.conf
 30-metric-aliases.conf
 40-nonlatin.conf
 45-generic.conf
 45-latin.conf
 49-sansserif.conf
 50-user.conf
 51-local.conf
 60-generic.conf
 60-latin.conf
 65-fonts-persian.conf
 65-khmer.conf
 65-nonlatin.conf
 69-unifont.conf
%%NO_BITMAPS-ON%%etc/fonts/conf.d/70-no-bitmaps.conf
 70-no-bitmaps.conf
 70-yes-bitmaps.conf
 80-delicious.conf
 90-synthetic.conf
etc/fonts/conf.d/
 10-hinting-%%PREFERRED_HINTING%%.conf
 10-scale-bitmap-fonts.conf
 20-unhint-small-vera.conf
 30-metric-aliases.conf
 40-nonlatin.conf
 45-generic.conf
 45-latin.conf
 49-sansserif.conf
 50-user.conf
 51-local.conf
 60-generic.conf
 60-latin.conf
 65-fonts-persian.conf
 65-nonlatin.conf
 69-unifont.conf
 80-delicious.conf
 90-synthetic.conf
 README
@sample etc/fonts/fonts.conf.sample
etc/fonts/fonts.dtd
include/fontconfig/
 fcfreetype.h
 fcprivate.h
 fontconfig.h
lib/
 libfontconfig.a
 libfontconfig.so
 libfontconfig.so.%%SOMAJOR%%
 libfontconfig.so.%%SOVERSION%%
lib/pkgconfig/fontconfig.pc
share/gettext/its/
 fontconfig.its
 fontconfig.loc
share/man/man1/
 fc-cache.1.gz
 fc-cat.1.gz
 fc-conflist.1.gz
 fc-list.1.gz
 fc-match.1.gz
 fc-pattern.1.gz
 fc-query.1.gz
 fc-scan.1.gz
 fc-validate.1.gz
share/man/man5/fonts-conf.5.gz
@dir /var/db/fontconfig


[FILE:86:manifests/plist.docs]
share/doc/fontconfig/
 fontconfig-user.html
 fontconfig-user.pdf
 fontconfig-user.txt


[FILE:1263:patches/patch-Makefile.in]
--- Makefile.in.orig	2016-08-05 05:49:13 UTC
+++ Makefile.in
@@ -1027,28 +1027,6 @@ fonts.conf: fonts.conf.in Makefile
 	mv $@.tmp $@
 
 install-data-local: fonts.conf
-	$(mkinstalldirs) $(DESTDIR)$(baseconfigdir) $(DESTDIR)$(fc_cachedir)
-	if [ -f $(DESTDIR)$(baseconfigdir)/fonts.conf ]; then \
-	  echo "backing up existing $(DESTDIR)$(baseconfigdir)/fonts.conf"; \
-	  mv $(DESTDIR)$(baseconfigdir)/fonts.conf $(DESTDIR)$(baseconfigdir)/fonts.conf.bak; \
-	fi
-	if [ -f $(srcdir)/fonts.conf ]; then \
-	  echo " $(INSTALL_DATA) $(srcdir)/fonts.conf $(DESTDIR)$(baseconfigdir)/fonts.conf"; \
-	  $(INSTALL_DATA) $(srcdir)/fonts.conf $(DESTDIR)$(baseconfigdir)/fonts.conf; \
-	else if [ -f fonts.conf ]; then \
-	  echo " $(INSTALL_DATA) fonts.conf $(DESTDIR)$(baseconfigdir)/fonts.conf"; \
-	  $(INSTALL_DATA) fonts.conf $(DESTDIR)$(baseconfigdir)/fonts.conf; \
-	fi; fi
-	@(if $(RUN_FC_CACHE_TEST); then \
-	    echo "fc-cache$(EXEEXT) -s -f -v"; \
-	    fc-cache/fc-cache$(EXEEXT) -s -f -v; \
-	else \
-	    echo "***"; \
-	    echo "*** Warning: fonts.cache not built"; \
-	    echo "***"; \
-	    echo "*** Generate this file manually on host system using fc-cache"; \
-	    echo "***"; \
-	fi)
 
 uninstall-local:
 	if [ -f $(srcdir)/fonts.conf ]; then \


[FILE:183:patches/patch-configure]
--- configure.orig	2016-08-05 05:49:14 UTC
+++ configure
@@ -654,6 +654,7 @@ ax_pthread_config
 XMLDIR
 CONFIGDIR
 BASECONFIGDIR
+baseconfigdir
 TEMPLATEDIR
 FC_FONTDATE
 FC_CACHEDIR


[FILE:519:patches/patch-src__fccompat.c]
There is an undiagnosed ARMv6 core dump in this code
as discovered in FreeBSD Bug 183536 when using clang.
Removing this code from ARM builds resolves it.

https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=183536

--- src/fccompat.c.orig	2016-07-11 02:41:06 UTC
+++ src/fccompat.c
@@ -191,7 +191,7 @@ FcRandom(void)
 #else
     random_r (&fcrandbuf, &result);
 #endif
-#elif HAVE_RANDOM
+#elif HAVE_RANDOM && !defined(__arm__)
     static char statebuf[256];
     char *state;
     static FcBool initialized = FcFalse;


[FILE:883:patches/patch-src_fcatomic.h]
--- src/fcatomic.h.orig	2016-07-11 02:41:06 UTC
+++ src/fcatomic.h
@@ -96,7 +96,17 @@ typedef int fc_atomic_int_t;
 #define fc_atomic_int_add(AI, V)	__sync_fetch_and_add (&(AI), (V))
 
 #define fc_atomic_ptr_get(P)		(void *) (__sync_synchronize (), *(P))
+#if defined(__FreeBSD__) && defined(__mips_n64)
+#include <sys/types.h>
+#include <machine/atomic.h>
+#define fc_atomic_ptr_cmpexch(P,O,N)	atomic_cmpset_rel_64 ((uint64_t *)(P), (uint64_t)(O), (uint64_t)(N))
+#elif defined(__FreeBSD__) && defined(__mips)
+#include <sys/types.h>
+#include <machine/atomic.h>
+#define fc_atomic_ptr_cmpexch(P,O,N)	atomic_cmpset_rel_32 ((uint32_t *)(P), (uint32_t)(O), (uint32_t)(N))
+#else
 #define fc_atomic_ptr_cmpexch(P,O,N)	__sync_bool_compare_and_swap ((P), (O), (N))
+#endif /* defined(__FreeBSD__) && defined(__mips__) */
 
 
 #elif !defined(FC_NO_MT) && defined(HAVE_SOLARIS_ATOMIC_OPS)


[FILE:1658:patches/patch-src_fclang.c]
--- src/fclang.c.orig	2017-08-22 11:25:47 UTC
+++ src/fclang.c
@@ -183,6 +183,7 @@ FcLangNormalize (const FcChar8 *lang)
 {
     FcChar8 *result = NULL, *s, *orig;
     char *territory, *encoding, *modifier;
+    char *script;
     size_t llen, tlen = 0, mlen = 0;
 
     if (!lang || !*lang)
@@ -246,27 +247,33 @@ FcLangNormalize (const FcChar8 *lang)
 	    modifier = encoding;
 	}
     }
-    territory = strchr ((const char *) s, '_');
-    if (!territory)
-	territory = strchr ((const char *) s, '-');
+    territory = strrchr ((const char *) s, '_');
     if (territory)
     {
 	*territory = 0;
 	territory++;
 	tlen = strlen (territory);
     }
+    /* There might by a script component, e.g. sr_Cyrl_RS@UTF-8.  We can't assume all legal locale
+       names are in the form <lang>_<country code>.<encoding>.  If the script component is here,
+       skip it to define the language properly (e.g. "sr" instead of "sr_Cyrl") */
+    script = strchr ((const char *) s, '_');
+    if (script)
+    {
+        *script = 0;
+    }
     llen = strlen ((const char *) s);
     if (llen < 2 || llen > 3)
     {
-	fprintf (stderr, "Fontconfig warning: ignoring %s: not a valid language tag\n",
-		 lang);
+	fprintf (stderr, "Fontconfig warning: ignoring %s: not a valid language tag (%s)\n",
+		 s, lang);
 	goto bail0;
     }
     if (territory && (tlen < 2 || tlen > 3) &&
 	!(territory[0] == 'z' && tlen < 5))
     {
-	fprintf (stderr, "Fontconfig warning: ignoring %s: not a valid region tag\n",
-		 lang);
+	fprintf (stderr, "Fontconfig warning: ignoring %s: not a valid region tag (%s)\n",
+		 territory, lang);
 	goto bail0;
     }
     if (territory)


[FILE:202:files/pkg-install-primary.in]
#!/bin/sh

PATH=/bin:/usr/bin:/sbin:/usr/sbin:%%PREFIX%%/bin
export PATH

if [ "$2" = "POST-INSTALL" ]; then
    echo "Running fc-cache to build fontconfig cache..."
    fc-cache -f -s -v
    exit 0
fi

