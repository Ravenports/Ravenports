# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		fontconfig
VERSION=		2.15.0
REVISION=		1
KEYWORDS=		x11_fonts
VARIANTS=		std
SDESC[std]=		XML-based font configuration API for X Windows
HOMEPAGE=		http://www.freedesktop.org/wiki/Software/fontconfig
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://www.freedesktop.org/software/fontconfig/release/
DISTFILE[1]=		fontconfig-2.15.0.tar.xz:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			dev
			man
			docs

OPTIONS_AVAILABLE=	HINTING_NONE HINTING_SLIGHT HINTING_MEDIUM
			HINTING_FULL NO_BITMAPS
OPTIONS_STANDARD=	HINTING_NONE HINTING_SLIGHT HINTING_MEDIUM
			HINTING_FULL NO_BITMAPS
OPTGROUP_RADIO=		HINTING
OPTDESCR[HINTING]=	Preferred pixel hinting configuration
OPTGROUP[HINTING]=	HINTING_NONE HINTING_SLIGHT HINTING_MEDIUM
			HINTING_FULL
OPT_ON[all]=		HINTING_SLIGHT

BUILD_DEPENDS=		gperf:primary:std
EXRUN[dev]=		freetype:dev:std

USES=			cpe gmake libtool pkgconfig freetype expat
			python:build zlib:build

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

CPE_VENDOR=		fontconfig_project

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--with-configdir={{PREFIX}}/etc/fonts/conf.d
			--with-templatedir={{PREFIX}}/etc/fonts/conf.avail
			--with-xmldir={{PREFIX}}/etc/fonts
			--with-expat-includes={{LOCALBASE}}/include
			--with-expat-lib={{LOCALBASE}}/lib
			--with-default-hinting={{PREFERRED_HINTING}}
			--with-default-fonts={{PREFIX}}/share/fonts
			--with-add-fonts={{LOCALBASE}}/lib/X11/fonts
			--with-cache-dir=/var/db/fontconfig
			--enable-nls=no
			--disable-docs
			--enable-static
CONFIGURE_ENV=		PYTHON=":"

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		1.12.1
PLIST_SUB=		PREFERRED_HINTING={{PREFERRED_HINTING}}
SUB_FILES=		triggers-primary.ucl

[HINTING_MEDIUM].DESCRIPTION=		Medium hinting
[HINTING_MEDIUM].MAKEFILE_ON=		PREFERRED_HINTING=medium

[NO_BITMAPS].DESCRIPTION=		Reject bitmap fonts by default

[HINTING_NONE].DESCRIPTION=		No hinting
[HINTING_NONE].MAKEFILE_ON=		PREFERRED_HINTING=none

[HINTING_SLIGHT].DESCRIPTION=		Slight hinting
[HINTING_SLIGHT].MAKEFILE_ON=		PREFERRED_HINTING=slight

[HINTING_FULL].DESCRIPTION=		Full hinting
[HINTING_FULL].MAKEFILE_ON=		PREFERRED_HINTING=full

post-install:
	@${MKDIR} ${STAGEDIR}${STD_DOCDIR}
	${INSTALL_MAN} ${WRKSRC}/fc-*/*.1 \
		${STAGEDIR}${MANPREFIX}/man/man1
	${INSTALL_MAN} ${WRKSRC}/doc/*.5 \
		${STAGEDIR}${MANPREFIX}/man/man5
	${INSTALL_DATA} ${WRKSRC}/fonts.conf \
		${STAGEDIR}${PREFIX}/etc/fonts/fonts.conf.sample
.for doc in fontconfig-user.html fontconfig-user.pdf fontconfig-user.txt
	${INSTALL_DATA} ${WRKSRC}/doc/${doc} ${STAGEDIR}${STD_DOCDIR}/
.endfor

post-patch-NO_BITMAPS-ON:
	${SED} -i'.bitmaps.bak' -e \
		'/^CONF_LINKS =/s|$$|\${.newline}       70-no-bitmaps.conf \\|' \
		${WRKSRC}/conf.d/Makefile.in

[FILE:799:descriptions/desc.primary]
Fontconfig does the following:

 * discover new fonts when installed automatically, removing a common
   source of configuration problems.
 * perform font name substitution, so that appropriate alternative fonts
   can be selected if fonts are missing.
 * identify the set of fonts required to completely cover a language set.
 * have GUI configuration tools built as it uses an XML-based configuration
   file (though with autodiscovery, we believe this need is minimized).
 * efficiently and quickly find the fonts you need among the set of fonts
   you have installed, even if you have installed thousands of fonts,
   while minimzing memory usage.
 * be used in concert with the X Render Extension and FreeType to implement
   high quality, anti-aliased and subpixel rendered text on a display.


[FILE:103:distinfo]
63a0658d0e06e0fa886106452b58ef04f21f58202ea02a94c39de0d3335d7c0e      1447820 fontconfig-2.15.0.tar.xz


[FILE:1661:manifests/plist.primary]
@sample etc/fonts/fonts.conf.sample
%%NO_BITMAPS-ON%%etc/fonts/conf.d/70-no-bitmaps.conf
bin/
 fc-cache
 fc-cat
 fc-conflist
 fc-list
 fc-match
 fc-pattern
 fc-query
 fc-scan
 fc-validate
etc/fonts/fonts.dtd
etc/fonts/conf.avail/
 05-reset-dirs-sample.conf
 09-autohint-if-no-hinting.conf
 10-autohint.conf
 10-hinting-full.conf
 10-hinting-medium.conf
 10-hinting-none.conf
 10-hinting-slight.conf
 10-no-antialias.conf
 10-scale-bitmap-fonts.conf
 10-sub-pixel-bgr.conf
 10-sub-pixel-none.conf
 10-sub-pixel-rgb.conf
 10-sub-pixel-vbgr.conf
 10-sub-pixel-vrgb.conf
 10-unhinted.conf
 10-yes-antialias.conf
 11-lcdfilter-default.conf
 11-lcdfilter-legacy.conf
 11-lcdfilter-light.conf
 11-lcdfilter-none.conf
 20-unhint-small-vera.conf
 25-unhint-nonlatin.conf
 30-metric-aliases.conf
 35-lang-normalize.conf
 40-nonlatin.conf
 45-generic.conf
 45-latin.conf
 48-spacing.conf
 49-sansserif.conf
 50-user.conf
 51-local.conf
 60-generic.conf
 60-latin.conf
 65-fonts-persian.conf
 65-khmer.conf
 65-nonlatin.conf
 69-unifont.conf
 70-no-bitmaps.conf
 70-yes-bitmaps.conf
 80-delicious.conf
 90-synthetic.conf
etc/fonts/conf.d/
 10-hinting-%%PREFERRED_HINTING%%.conf
 10-scale-bitmap-fonts.conf
 10-sub-pixel-none.conf
 10-yes-antialias.conf
 11-lcdfilter-default.conf
 20-unhint-small-vera.conf
 30-metric-aliases.conf
 40-nonlatin.conf
 45-generic.conf
 45-latin.conf
 48-spacing.conf
 49-sansserif.conf
 50-user.conf
 51-local.conf
 60-generic.conf
 60-latin.conf
 65-fonts-persian.conf
 65-nonlatin.conf
 69-unifont.conf
 80-delicious.conf
 90-synthetic.conf
 README
lib/
 libfontconfig.so.%%SOMAJOR%%
 libfontconfig.so.%%SOVERSION%%
@dir /var/db/fontconfig


[FILE:180:manifests/plist.dev]
include/fontconfig/
 fcfreetype.h
 fcprivate.h
 fontconfig.h
lib/
 libfontconfig.a
 libfontconfig.so
lib/pkgconfig/fontconfig.pc
share/gettext/its/
 fontconfig.its
 fontconfig.loc


[FILE:156:manifests/plist.man]
share/man/man1/
 fc-cache.1
 fc-cat.1
 fc-conflist.1
 fc-list.1
 fc-match.1
 fc-pattern.1
 fc-query.1
 fc-scan.1
 fc-validate.1
share/man/man5/fonts-conf.5


[FILE:86:manifests/plist.docs]
share/doc/fontconfig/
 fontconfig-user.html
 fontconfig-user.pdf
 fontconfig-user.txt


[FILE:1263:patches/patch-Makefile.in]
--- Makefile.in.orig	2023-01-27 08:22:14 UTC
+++ Makefile.in
@@ -1084,28 +1084,6 @@ fonts.conf: fonts.conf.in Makefile
 	mv $@.tmp $@
 
 install-data-local: fonts.conf
-	$(mkinstalldirs) $(DESTDIR)$(baseconfigdir) $(DESTDIR)$(fc_cachedir)
-	if [ -f $(DESTDIR)$(baseconfigdir)/fonts.conf ]; then \
-	  echo "backing up existing $(DESTDIR)$(baseconfigdir)/fonts.conf"; \
-	  mv $(DESTDIR)$(baseconfigdir)/fonts.conf $(DESTDIR)$(baseconfigdir)/fonts.conf.bak; \
-	fi
-	if [ -f $(srcdir)/fonts.conf ]; then \
-	  echo " $(INSTALL_DATA) $(srcdir)/fonts.conf $(DESTDIR)$(baseconfigdir)/fonts.conf"; \
-	  $(INSTALL_DATA) $(srcdir)/fonts.conf $(DESTDIR)$(baseconfigdir)/fonts.conf; \
-	else if [ -f fonts.conf ]; then \
-	  echo " $(INSTALL_DATA) fonts.conf $(DESTDIR)$(baseconfigdir)/fonts.conf"; \
-	  $(INSTALL_DATA) fonts.conf $(DESTDIR)$(baseconfigdir)/fonts.conf; \
-	fi; fi
-	@(if $(RUN_FC_CACHE_TEST); then \
-	    echo "fc-cache$(EXEEXT) -s -f -v"; \
-	    fc-cache/fc-cache$(EXEEXT) -s -f -v; \
-	else \
-	    echo "***"; \
-	    echo "*** Warning: fonts.cache not built"; \
-	    echo "***"; \
-	    echo "*** Generate this file manually on host system using fc-cache"; \
-	    echo "***"; \
-	fi)
 
 uninstall-local:
 	if [ -f $(srcdir)/fonts.conf ]; then \


[FILE:183:patches/patch-configure]
--- configure.orig	2023-01-27 08:22:13 UTC
+++ configure
@@ -684,6 +684,7 @@ ax_pthread_config
 XMLDIR
 CONFIGDIR
 BASECONFIGDIR
+baseconfigdir
 TEMPLATEDIR
 FC_FONTDATE
 FC_CACHEDIR


[FILE:519:patches/patch-src__fccompat.c]
There is an undiagnosed ARMv6 core dump in this code
as discovered in FreeBSD Bug 183536 when using clang.
Removing this code from ARM builds resolves it.

https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=183536

--- src/fccompat.c.orig	2020-12-03 11:45:00 UTC
+++ src/fccompat.c
@@ -209,7 +209,7 @@ FcRandom(void)
 #else
     random_r (&fcrandbuf, &result);
 #endif
-#elif HAVE_RANDOM
+#elif HAVE_RANDOM && !defined(__arm__)
     static char statebuf[256];
     char *state;
     static FcBool initialized = FcFalse;


[FILE:587:patches/patch-src_fccfg.c]
--- src/fccfg.c.orig	2023-01-25 05:37:45 UTC
+++ src/fccfg.c
@@ -3248,9 +3248,8 @@ FcConfigFileInfoIterGet (FcConfig		*conf
     if (name)
 	*name = FcStrdup (r->name && r->name[0] ? r->name : (const FcChar8 *) "fonts.conf");
     if (description)
-	*description = FcStrdup (!r->description ? _("No description") :
-				 dgettext (r->domain ? (const char *) r->domain : GETTEXT_PACKAGE "-conf",
-					   (const char *) r->description));
+	*description = FcStrdup (!r->description ? "No description" :
+					   (const char *) r->description);
     if (enabled)
 	*enabled = r->enabled;
 


[FILE:314:patches/patch-src_fcint.h]
--- src/fcint.h.orig	2022-11-26 06:10:36 UTC
+++ src/fcint.h
@@ -128,13 +128,7 @@ extern pfnSHGetFolderPathA pSHGetFolderP
 #endif
 
 /* NLS */
-#ifdef ENABLE_NLS
-#include <libintl.h>
-#define _(x)		(dgettext(GETTEXT_PACKAGE, x))
-#else
-#define dgettext(d, s)	(s)
 #define _(x)		(x)
-#endif
 
 #define N_(x)	x
 


[FILE:1658:patches/patch-src_fclang.c]
--- src/fclang.c.orig	2020-12-03 11:45:00 UTC
+++ src/fclang.c
@@ -183,6 +183,7 @@ FcLangNormalize (const FcChar8 *lang)
 {
     FcChar8 *result = NULL, *s, *orig;
     char *territory, *encoding, *modifier;
+    char *script;
     size_t llen, tlen = 0, mlen = 0;
 
     if (!lang || !*lang)
@@ -246,27 +247,33 @@ FcLangNormalize (const FcChar8 *lang)
 	    modifier = encoding;
 	}
     }
-    territory = strchr ((const char *) s, '_');
-    if (!territory)
-	territory = strchr ((const char *) s, '-');
+    territory = strrchr ((const char *) s, '_');
     if (territory)
     {
 	*territory = 0;
 	territory++;
 	tlen = strlen (territory);
     }
+    /* There might by a script component, e.g. sr_Cyrl_RS@UTF-8.  We can't assume all legal locale
+       names are in the form <lang>_<country code>.<encoding>.  If the script component is here,
+       skip it to define the language properly (e.g. "sr" instead of "sr_Cyrl") */
+    script = strchr ((const char *) s, '_');
+    if (script)
+    {
+        *script = 0;
+    }
     llen = strlen ((const char *) s);
     if (llen < 2 || llen > 3)
     {
-	fprintf (stderr, "Fontconfig warning: ignoring %s: not a valid language tag\n",
-		 lang);
+	fprintf (stderr, "Fontconfig warning: ignoring %s: not a valid language tag (%s)\n",
+		 s, lang);
 	goto bail0;
     }
     if (territory && (tlen < 2 || tlen > 3) &&
 	!(territory[0] == 'z' && tlen < 5))
     {
-	fprintf (stderr, "Fontconfig warning: ignoring %s: not a valid region tag\n",
-		 lang);
+	fprintf (stderr, "Fontconfig warning: ignoring %s: not a valid region tag (%s)\n",
+		 territory, lang);
 	goto bail0;
     }
     if (territory)


[FILE:217:files/triggers-primary.ucl.in]
fc_cache: {
    dir_path: ["%%PREFIX%%/share/fonts", "%%PREFIX%%/etc/fonts/conf.d"]
    trigger: <<EOS
print("Triggered: Running fc-cache to build fontconfig cache.")
pkg.exec({"%%PREFIX%%/bin/fc-cache", "-s"})
EOS
}

