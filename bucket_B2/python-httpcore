# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-httpcore
VERSION=		0.17.3
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Minimal low-level HTTP client (3.10)
SDESC[v11]=		Minimal low-level HTTP client (3.11)
HOMEPAGE=		https://github.com/encode/httpcore
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/94/2c/2bde7ff8dd2064395555220cbf7cba79991172bf5315a07eb3ac7688d9f1
DISTFILE[1]=		httpcore-0.17.3-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		httpcore-0.17.3.dist-info

GENERATED=		yes

[PY310].RUN_DEPENDS_ON=			python-h11:single:py310
					python-sniffio:single:py310
					python-anyio:single:py310
					python-certifi:single:py310
[PY310].USES_ON=			python:py310,wheel

[PY311].RUN_DEPENDS_ON=			python-h11:single:v11
					python-sniffio:single:v11
					python-anyio:single:v11
					python-certifi:single:v11
[PY311].USES_ON=			python:v11,wheel

[FILE:2516:descriptions/desc.single]
# HTTP Core

[Test Suite]
[Package version]

> *Do one thing, and do it well.*

The HTTP Core package provides a minimal low-level HTTP client, which does
one thing only. Sending HTTP requests.

It does not provide any high level model abstractions over the API,
does not handle redirects, multipart uploads, building authentication
headers,
transparent HTTP caching, URL parsing, session cookie handling,
content or charset decoding, handling JSON, environment based configuration
defaults, or any of that Jazz.

Some things HTTP Core does do:

* Sending HTTP requests.
* Thread-safe / task-safe connection pooling.
* HTTP(S) proxy & SOCKS proxy support.
* Supports HTTP/1.1 and HTTP/2.
* Provides both sync and async interfaces.
* Async backend support for `asyncio` and `trio`.

## Requirements

Python 3.7+

## Installation

For HTTP/1.1 only support, install with:

```shell
$ pip install httpcore
```

For HTTP/1.1 and HTTP/2 support, install with:

```shell
$ pip install httpcore[http2]
```

For SOCKS proxy support, install with:

```shell
$ pip install httpcore[socks]
```

# Sending requests

Send an HTTP request:

```python
import httpcore

response = httpcore.request("GET", "https://www.example.com/")

print(response)
# <Response [200]>
print(response.status)
# 200
print(response.headers)
# [(b'Accept-Ranges', b'bytes'), (b'Age', b'557328'), (b'Cache-Control',
b'max-age=604800'), ...]
print(response.content)
# b'<!doctype html>\n<html>\n<head>\n<title>Example Domain</title>\n\n<meta
charset="utf-8"/>\n ...'
```

The top-level `httpcore.request()` function is provided for convenience. In
practice whenever you're working with `httpcore` you'll want to use the
connection pooling functionality that it provides.

```python
import httpcore

http = httpcore.ConnectionPool()
response = http.request("GET", "https://www.example.com/")
```

Once you're ready to get going, [head over to the documentation].

## Motivation

You *probably* don't want to be using HTTP Core directly. It might make
sense if
you're writing something like a proxy service in Python, and you just want
something at the lowest possible level, but more typically you'll want to
use
a higher level client library, such as `httpx`.

The motivation for `httpcore` is:

* To provide a reusable low-level client library, that other packages can
then build on top of.
* To provide a *really clear interface split* between the networking code
and client logic,
  so that each is easier to understand and reason about in isolation.


[FILE:111:distinfo]
c2789b767ddddfa2a5782e3199b2b7f6894540b17b16ec26b2c4d8e103510b87        74513 httpcore-0.17.3-py3-none-any.whl

