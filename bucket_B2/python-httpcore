# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-httpcore
VERSION=		1.0.6
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Minimal low-level HTTP client (3.12)
SDESC[v13]=		Minimal low-level HTTP client (3.13)
HOMEPAGE=		https://www.encode.io/httpcore/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/06/89/b161908e2f51be56568184aeb4a880fd287178d176fd1c860d2217f41106
DISTFILE[1]=		httpcore-1.0.6-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		httpcore-1.0.6.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-certifi:single:v12
					python-h11:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-certifi:single:v13
					python-h11:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:2547:descriptions/desc.single]
# HTTP Core

[Test Suite]
[Package version]

> *Do one thing, and do it well.*

The HTTP Core package provides a minimal low-level HTTP client, which does
one thing only. Sending HTTP requests.

It does not provide any high level model abstractions over the API,
does not handle redirects, multipart uploads, building authentication
headers,
transparent HTTP caching, URL parsing, session cookie handling,
content or charset decoding, handling JSON, environment based configuration
defaults, or any of that Jazz.

Some things HTTP Core does do:

* Sending HTTP requests.
* Thread-safe / task-safe connection pooling.
* HTTP(S) proxy & SOCKS proxy support.
* Supports HTTP/1.1 and HTTP/2.
* Provides both sync and async interfaces.
* Async backend support for `asyncio` and `trio`.

## Requirements

Python 3.8+

## Installation

For HTTP/1.1 only support, install with:

```shell
$ pip install httpcore
```

There are also a number of optional extras available...

```shell
$ pip install httpcore['asyncio,trio,http2,socks']
```

## Sending requests

Send an HTTP request:

```python
import httpcore

response = httpcore.request("GET", "https://www.example.com/")

print(response)
# <Response [200]>
print(response.status)
# 200
print(response.headers)
# [(b'Accept-Ranges', b'bytes'), (b'Age', b'557328'), (b'Cache-Control',
b'max-age=604800'), ...]
print(response.content)
# b'<!doctype html>\n<html>\n<head>\n<title>Example Domain</title>\n\n<meta
charset="utf-8"/>\n ...'
```

The top-level `httpcore.request()` function is provided for convenience. In
practice whenever you're working with `httpcore` you'll want to use the
connection pooling functionality that it provides.

```python
import httpcore

http = httpcore.ConnectionPool()
response = http.request("GET", "https://www.example.com/")
```

Once you're ready to get going, [head over to the documentation].

## Motivation

You *probably* don't want to be using HTTP Core directly. It might make
sense if
you're writing something like a proxy service in Python, and you just want
something at the lowest possible level, but more typically you'll want to
use
a higher level client library, such as `httpx`.

The motivation for `httpcore` is:

* To provide a reusable low-level client library, that other packages can
then build on top of.
* To provide a *really clear interface split* between the networking code
and client logic,
  so that each is easier to understand and reason about in isolation.

## Dependencies

The `httpcore` package has the following dependencies...

* `h11`


[FILE:110:distinfo]
27b59625743b85577a8c0e10e55b50b5368a4f2cfe8cc7bcfa9cf00829c2682f        78011 httpcore-1.0.6-py3-none-any.whl

