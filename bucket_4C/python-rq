# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-rq
VERSION=		2.4.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Library for procesing background jobs (3.12)
SDESC[v13]=		Library for procesing background jobs (3.13)
HOMEPAGE=		https://python-rq.org/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/34/ef/4239a17f056ad7a864d53fec920886e017cf50c1494ee8ab05d44cc46799
DISTFILE[1]=		rq-2.4.0-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		rq-2.4.0.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-click:single:v12
					python-redis:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-click:single:v13
					python-redis:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:2347:descriptions/desc.single]
RQ (_Redis Queue_) is a simple Python library for queueing jobs and
processing
them in the background with workers. It is backed by Redis or Valkey and is
designed
to have a low barrier to entry while scaling incredibly well for large
applications.
It can be integrated into your web stack easily, making it suitable for
projects
of any sizeâ€”from simple applications to high-volume enterprise systems.

RQ requires Redis >= 5 or Valkey >= 7.2.

[Build status]
[PyPI]
[Coverage]
[![Code style: Ruff]](https://github.com/astral-sh/ruff)

Full documentation can be found [here][d].

## Support RQ

If you find RQ useful, please consider supporting this project via
[Tidelift].

## Getting started

First, run a Redis server, of course:

```console
$ redis-server
```

To put jobs on queues, you don't have to do anything special, just define
your typically lengthy or blocking function:

```python
import requests

def count_words_at_url(url):
    """Just an example function that's called async."""
    resp = requests.get(url)
    return len(resp.text.split())
```

Then, create an RQ queue:

```python
from redis import Redis
from rq import Queue

queue = Queue(connection=Redis())
```

And enqueue the function call:

```python
from my_module import count_words_at_url
job = queue.enqueue(count_words_at_url, 'http://nvie.com')
```

## Scheduling Jobs

Scheduling jobs is also easy:

```python
# Schedule job to run at 9:15, October 10th
job = queue.enqueue_at(datetime(2019, 10, 10, 9, 15), say_hello)

# Schedule job to run in 10 seconds
job = queue.enqueue_in(timedelta(seconds=10), say_hello)
```

## Repeating Jobs

To execute a `Job` multiple times, use the `Repeat` class:

```python
from rq import Queue, Repeat

# Repeat job 3 times after successful execution, with 30 second intervals
queue.enqueue(my_function, repeat=Repeat(times=3, interval=30))

# Repeat job 3 times with different intervals between runs
queue.enqueue(my_function, repeat=Repeat(times=3, interval=[5, 10, 15]))
```

## Retrying Failed Jobs

Retrying failed jobs is also supported:

```python
from rq import Retry

# Retry up to 3 times, failed job will be requeued immediately
queue.enqueue(say_hello, retry=Retry(max=3))

# Retry up to 3 times, with configurable intervals between retries
queue.enqueue(say_hello, retry=Retry(max=3, interval=[10, 30, 60]))
```



[FILE:115:distinfo]
4b854d27ad0d9687b9e6f686e001a3043807694ace5340a3f9697b42c6a9c65a       106353 python-src/rq-2.4.0-py3-none-any.whl

