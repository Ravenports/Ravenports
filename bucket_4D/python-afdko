# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-afdko
VERSION=		4.0.2
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Adobe Font Development Kit for OpenType (3.12)
SDESC[v13]=		Adobe Font Development Kit for OpenType (3.13)
HOMEPAGE=		https://github.com/adobe-type-tools/afdko
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/a/afdko
DISTFILE[1]=		afdko-4.0.2.tar.gz:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

RUN_DEPENDS=		afdko:single:std

DISTNAME=		afdko-4.0.2

GENERATED=		yes

[PY312].BUILD_DEPENDS_ON=		python-setuptools-scm:single:v12
[PY312].USES_ON=			python:v12,pep517

[PY313].BUILD_DEPENDS_ON=		python-setuptools-scm:single:v13
[PY313].USES_ON=			python:v13,pep517

post-patch:
	${RM} ${WRKSRC}/CMakeLists.txt
	${RM} -r ${WRKSRC}/c/ ${WRKSRC}/cmake/

[FILE:3180:descriptions/desc.single]
![AFDKO Test Suite]

[Coverage]

[PyPI]

[![Join the chat at
https://gitter.im/adobe-type-tools/afdko]](https://gitter.im/adobe-type-tools/afdko?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

Adobe Font Development Kit for OpenType (AFDKO)
===============================================

The AFDKO is a set of tools for building OpenType font files from
PostScript and TrueType font data.

This repository contains the data files, Python scripts, and sources for
the command line programs that comprise the AFDKO. The project uses the
[Apache 2.0 Open Source license].
Please note that the AFDKO makes use of several dependencies, listed in the
requirements.txt file, which will automatically be installed if you install
AFDKO with `pip`. Most of these dependencies are BSD or MIT license, with
the exception of `tqdm`, which is [MPL 2.0].

Please refer to the
[AFDKO Overview]
for a more detailed description of what is included in the package.

Please see the
[wiki]
for additional information, such as links to reference materials and
related
projects.

ðŸ“£ Recent News
------------
**The Python port of psautohint was (re)integrated into the AFDKO
repository as "otfautohint"**

More information can be found in [docs/otfautohint_Notes.md]

Installation
------------

The AFDKO requires [Python] 3.9
or later. It should work with any Python > 3.9, but occasionally
tool-chain components and dependencies don't keep pace with major
Python releases, so there might be some lag time while they catch up.

Releases are available on the [Python Package
Index] (PyPI) and can be installed
with [pip].

Note for macOS users: we recommend that you do **not** use the system
Python. Among other reasons, some versions of macOS ship with Python 2
and the latest version of the AFDKO is only available for Python 3. You
can find instructions for using Brew to install Python 3 on macOS here:
[Installing Python 3 on Mac OS X].
Also: [pyenv] is a great tool for
installing and managing multiple Python versions on macOS.

Note for all users: we **STRONGLY** recommend the use of a Python virtual
environment ([`venv`])
and the use of `python -m pip install <package>` to install all packages
(not just AFDKO). Calling `pip install` directly can result in the
wrong `pip` being called, and the package landing in the wrong location.
The combination of using a `venv` + `python -m pip install` helps to ensure
that pip-managed packages land in the right place.

Note for Linux users (and users of other platforms that are not macOS or
Windows): When there is not a pre-built "wheel" for your platform `pip`
will attempt to build the C and C++ portions of the package from source.
This process will only succeed if both the C and C++ development tools and
libuuid are installed. See [build from source] below.

### Installing

**Option 1 (Recommended)**

- Create a virtual environment:

    ```sh
    python -m venv afdko_env
    ```

- Activate the virtual environment:

    - macOS & Linux

        ```sh
        source afdko_env/bin/activate
        ```

    - Windows

        ```sh
        afdko_env\Scripts\activate.bat
        ```

- Install [afdko]:



[FILE:108:distinfo]
e1a31e871e83dd022635b852297c433c8e9c9d9d4f0c0f634e8d55dde28ad930     17804422 python-src/afdko-4.0.2.tar.gz


[FILE:228:patches/patch-pyproject.toml]
--- pyproject.toml.orig	2024-11-06 00:31:38 UTC
+++ pyproject.toml
@@ -3,9 +3,6 @@ requires = [
 	"setuptools",
 	"wheel",
 	"setuptools_scm",
-	"scikit-build",
-	"cmake",
-	"ninja"
 ]
 build-backend = "setuptools.build_meta"
 


[FILE:1769:patches/patch-setup.py]
--- setup.py.orig	2024-11-06 00:31:38 UTC
+++ setup.py
@@ -8,30 +8,9 @@ from distutils.dep_util import newer
 from distutils.util import convert_path
 from distutils.util import get_platform
 
+from setuptools import setup
 import setuptools.command.install
 
-from skbuild import setup
-
-try:
-    from wheel.bdist_wheel import bdist_wheel
-
-    class CustomBDistWheel(bdist_wheel):
-        """Mark the wheel as python 3, yet platform-specific,
-        since it contains native C executables.
-        """
-
-        def finalize_options(self):
-            bdist_wheel.finalize_options(self)
-            self.root_is_pure = False
-
-        def get_tag(self):
-            return ('py3', 'none',) + bdist_wheel.get_tag(self)[2:]
-
-except ImportError:
-    print("afdko: setup.py requires that the Python package 'wheel' be "
-          "installed. Try the command 'pip install wheel'.")
-    sys.exit(1)
-
 
 class InstallPlatlib(setuptools.command.install.install):
     """This is to force installing all the modules to the non-pure, platform-
@@ -196,24 +175,17 @@ def main():
           zip_safe=False,
           python_requires='>=3.9',
           setup_requires=[
-              'wheel',
               'setuptools_scm',
-              'scikit-build',
-              'cmake',
-              'ninja'
           ],
           tests_require=[
               'pytest',
           ],
           install_requires=_get_requirements(),
-          scripts=_get_scripts(),
           entry_points={
               'console_scripts': _get_console_scripts(),
           },
           cmdclass={
               'build_scripts': CustomBuildScripts,
-              'bdist_wheel': CustomBDistWheel,
-              'install': InstallPlatlib,
           },
           )
 

