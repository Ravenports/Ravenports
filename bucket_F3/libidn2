# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libidn2
VERSION=		2.2.0
KEYWORDS=		dns
VARIANTS=		standard
SDESC[standard]=	IDNA2008 internationalized domain names library
HOMEPAGE=		https://gitlab.com/libidn/libidn2
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GNU/libidn
DISTFILE[1]=		libidn2-2.2.0.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	libunistring:primary:standard

USES=			charsetfix gmake iconv libtool

DISTNAME=		libidn2-2.2.0

LICENSE=		GPLv2+:primary LGPL3+:primary CUSTOM1:primary
LICENSE_TERMS=		primary:{{WRKSRC}}/COPYING
LICENSE_NAME=		CUSTOM1:"Unicode copyright"
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/COPYINGv2
			LGPL3+:{{WRKSRC}}/COPYING.LESSERv3
			CUSTOM1:{{WRKSRC}}/COPYING.unicode
LICENSE_SCHEME=		dual

INFO=			primary:libidn2
FPC_EQUIVALENT=		dns/libidn2
INFO_SUBDIR=		.

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-nls
			--with-libunistring-prefix={{LOCALBASE}}
			ac_cv_prog_RONN={{TRUE}}

INSTALL_TARGET=		install-strip
SOVERSION=		0.3.6

post-patch:
	${REINPLACE_CMD} -e '/^TMPDIR = /d' ${WRKSRC}/Makefile.in

post-install:
	${MV} ${STAGEDIR}${PREFIX}/share/gtk-doc/html/libidn2 \
		${STAGEDIR}${PREFIX}/share/doc
	${RM} -r ${STAGEDIR}${PREFIX}/share/gtk-doc

[FILE:531:descriptions/desc.primary]
Libidn2 is a free software implementation of IDNA2008, Punycode and TR46.
Its purpose is to encode and decode internationalized domain names.

This library is backwards (API) compatible with the libidn library.
Replacing the idna.h header with idn2.h into a program is sufficient to
switch the application from IDNA2003 to IDNA2008 as supported by this
library.

Libidn2 is believed to be a complete IDNA2008 and TR46 implementation,
it contains an extensive test-suite, and is included in the continuous
fuzzing project OSS-Fuzz.


[FILE:99:distinfo]
fc734732b506d878753ec6606982bf7b936e868c25c30ddb0d83f7d7056381fe      2110743 libidn2-2.2.0.tar.gz


[FILE:640:manifests/plist.primary]
%%EXCLUDE-DARWIN%%lib/libidn2.so.%%SOVERSION%%
bin/idn2
include/idn2.h
lib/
 libidn2.a
 libidn2.so
 libidn2.so.%%SOMAJOR%%
lib/pkgconfig/libidn2.pc
share/man/man1/idn2.1.gz
share/man/man3/
 idn2_check_version.3.gz
 idn2_free.3.gz
 idn2_lookup_u8.3.gz
 idn2_lookup_ul.3.gz
 idn2_register_u8.3.gz
 idn2_register_ul.3.gz
 idn2_strerror.3.gz
 idn2_strerror_name.3.gz
 idn2_to_ascii_4i.3.gz
 idn2_to_ascii_4z.3.gz
 idn2_to_ascii_8z.3.gz
 idn2_to_ascii_lz.3.gz
 idn2_to_unicode_44i.3.gz
 idn2_to_unicode_4z4z.3.gz
 idn2_to_unicode_8z4z.3.gz
 idn2_to_unicode_8z8z.3.gz
 idn2_to_unicode_8zlz.3.gz
 idn2_to_unicode_lzlz.3.gz
 idn2_to_ascii_4i2.3.gz


[FILE:218:manifests/plist.docs]
share/doc/libidn2/
 api-index-full.html
 home.png
 index.html
 left-insensitive.png
 left.png
 libidn2-idn2.html
 libidn2.devhelp2
 libidn2.html
 right-insensitive.png
 right.png
 style.css
 up-insensitive.png
 up.png


[FILE:743:dragonfly/patch-src-idn2.c]
--- src/idn2.c.orig	2019-04-15 08:00:25 UTC
+++ src/idn2.c
@@ -33,7 +33,7 @@
 #include <unistring/localcharset.h>
 
 /* Gnulib headers. */
-#include "error.h"
+#include "err.h"
 #include "gettext.h"
 #define _(String) dgettext (PACKAGE, String)
 #include "progname.h"
@@ -182,7 +182,7 @@ process_input (char *readbuf, int flags)
       free (output);
     }
   else
-    error (EXIT_FAILURE, 0, "%s: %s", tag, idn2_strerror (rc));
+    errc (EXIT_FAILURE, 0, "%s: %s", tag, idn2_strerror (rc));
 }
 
 int
@@ -249,7 +249,7 @@ main (int argc, char *argv[])
     }
 
   if (ferror (stdin))
-    error (EXIT_FAILURE, errno, "%s", _("input error"));
+    errc (EXIT_FAILURE, errno, "%s", _("input error"));
 
   cmdline_parser_free (&args_info);
 


[FILE:743:freebsd/patch-src-idn2.c]
--- src/idn2.c.orig	2019-04-15 08:00:25 UTC
+++ src/idn2.c
@@ -33,7 +33,7 @@
 #include <unistring/localcharset.h>
 
 /* Gnulib headers. */
-#include "error.h"
+#include "err.h"
 #include "gettext.h"
 #define _(String) dgettext (PACKAGE, String)
 #include "progname.h"
@@ -182,7 +182,7 @@ process_input (char *readbuf, int flags)
       free (output);
     }
   else
-    error (EXIT_FAILURE, 0, "%s: %s", tag, idn2_strerror (rc));
+    errc (EXIT_FAILURE, 0, "%s: %s", tag, idn2_strerror (rc));
 }
 
 int
@@ -249,7 +249,7 @@ main (int argc, char *argv[])
     }
 
   if (ferror (stdin))
-    error (EXIT_FAILURE, errno, "%s", _("input error"));
+    errc (EXIT_FAILURE, errno, "%s", _("input error"));
 
   cmdline_parser_free (&args_info);
 

