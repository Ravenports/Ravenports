# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		sbcl
VERSION=		1.4.0
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Steel Bank Common Lisp
HOMEPAGE=		http://www.sbcl.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main boot
SITES[main]=		SF/sbcl/sbcl/1.4.0
SITES[boot]=		SF/sbcl/sbcl/1.2.7
DISTFILE[1]=		sbcl-1.4.0-source.tar.bz2:main
DISTFILE[2]=		sbcl-1.2.7-x86-64-dragonfly-binary.tar.bz2:boot
DISTFILE[3]=		sbcl-1.2.7-x86-64-freebsd-binary.tar.bz2:boot
DISTFILE[4]=		sbcl-1.2.7-x86-64-linux-binary.tar.bz2:boot
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	DRAGONFLY FREEBSD LINUX CONCURRENCY
OPTIONS_STANDARD=	DRAGONFLY FREEBSD LINUX CONCURRENCY
OPTGROUP_RADIO=		SYSTEM
OPTDESCR[SYSTEM]=	Operating System
OPTGROUP[SYSTEM]=	DRAGONFLY FREEBSD LINUX
OPT_ON[freebsd]=	FREEBSD CONCURRENCY
OPT_ON[linux]=		LINUX CONCURRENCY
OPT_ON[dragonfly]=	DRAGONFLY

BUILD_DEPENDS=		gmp:static:standard
			mpfr:static:standard
BUILDRUN_DEPENDS=	gmp:shared:standard
			mpfr:shared:standard
RUN_DEPENDS=		asdf:primary:standard

USES=			gmake makeinfo zlib

FPC_EQUIVALENT=		lang/sbcl

MAKE_ENV=		LINKFLAGS="-L{{PREFIX}}/lib -Wl,-rpath,{{PREFIX}}/lib"

SUB_FILES=		sbclrc

CMAKE_ARGS=		--prefix="{{PREFIX}}"
			--xc-host="{{WRKDIR}}/bootstrap/src/runtime/sbcl --core {{WRKDIR}}/bootstrap/output/sbcl.core --noinform --disable-debugger --no-sysinit --no-userinit"
			--without-sb-thread
			--without-restore-fs-segment-register-from-tls
			--with-sb-unicode
			--with-sb-core-compression
			--without-sb-qshow
			--without-sb-xref-for-internals
			--without-sb-safepoint
			--without-sb-thruption
			--without-sb-wtimer

[DRAGONFLY].DESCRIPTION=		Build for DragonFly BSD
[DRAGONFLY].DF_INDEX_ON=		2

[FREEBSD].DESCRIPTION=			Build for FreeBSD
[FREEBSD].DF_INDEX_ON=			3

[CONCURRENCY].DESCRIPTION=		Enable thread support
[CONCURRENCY].CMAKE_ARGS_OFF=		--without-sb-thread
					--without-restore-fs-segment-register-from-tls
[CONCURRENCY].CMAKE_ARGS_ON=		--with-sb-thread
					--with-restore-fs-segment-register-from-tls

[LINUX].DESCRIPTION=			build for Linux
[LINUX].DF_INDEX_ON=			4

post-patch:
	# don't install files with "core" suffix, use "_core" instead
	${GREP} -Frl '.core' ${WRKSRC} | ${XARGS} ${REINPLACE_CMD} -e 's|\.core|_core|g'
	# fix paths
	@${REINPLACE_CMD} -e 's|/etc|${PREFIX}/etc|' \
		${WRKSRC}/src/code/toplevel.lisp \
		${WRKSRC}/doc/sbcl.1 \
		${WRKSRC}/doc/manual/start-stop.texinfo

do-build:
	(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${SH} make.sh ${CMAKE_ARGS})

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/sbcl
	${RM} ${STAGEDIR}${PREFIX}/${INFO_PATH}/dir
	${RM} -rf ${STAGEDIR}${STD_DOCDIR}

post-extract:
	${MV} ${WRKDIR}/sbcl-1.2.7-* ${WRKDIR}/bootstrap

do-install:
	(cd ${WRKSRC} && ${SETENV} \
	INSTALL_ROOT="${STAGEDIR}${PREFIX}" \
	MAN_DIR="${STAGEDIR}${MANPREFIX}/man" \
	INFO_DIR="${STAGEDIR}${PREFIX}/${INFO_PATH}" \
	DOC_DIR="${STAGEDIR}${STD_DOCDIR}" \
	${SH} install.sh)
.for M in asdf sb-aclrepl sb-bsd-sockets sb-cltl2 sb-concurrency sb-cover \
	sb-executable sb-gmp sb-grovel sb-introspect sb-md5 sb-mpfr sb-posix \
	sb-queue sb-rotate-byte sb-rt sb-simple-streams sb-sprof
	${MKDIR} ${STAGEDIR}${PREFIX}/lib/sbcl/${M}
	${INSTALL_DATA} ${WRKSRC}/contrib/${M}/*.[la]* \
		${STAGEDIR}${PREFIX}/lib/sbcl/${M}/
.endfor
	${INSTALL_DATA} ${WRKDIR}/sbclrc \
		${STAGEDIR}${PREFIX}/etc/sbclrc.sample
	# build documentation
	${DO_MAKE_BUILD} -C ${WRKSRC}/doc/manual info html

[FILE:343:descriptions/desc.single]
Steel Bank Common Lisp (SBCL) is a high performance Common Lisp compiler. 
It is open source / free software, with a permissive license. In addition 
to the compiler and runtime system for ANSI Common Lisp, it provides an 
interactive environment including a debugger, a statistical profiler, a 
code coverage tool, and many other extensions.


[FILE:461:distinfo]
08d59ca79f78311304664d5093764cda94ff2693d92736d1321fa6074b570769      5907661 sbcl-1.4.0-source.tar.bz2
4d8d589909d1b003afc5d58276affe2202f4a75d3760737f2ac6ce046a1f905c     10586301 sbcl-1.2.7-x86-64-dragonfly-binary.tar.bz2
c61f5e777e56921d2452d0fa6b71024ccd9b99bc659676498d398b8663176492     10463348 sbcl-1.2.7-x86-64-freebsd-binary.tar.bz2
92094d7a5ea19891a6245064b12d4e1125aa065634ad24b6607ab08c37e95b40     10528686 sbcl-1.2.7-x86-64-linux-binary.tar.bz2


[FILE:2673:manifests/plist.single]
bin/sbcl
lib/sbcl/asdf/
 asdf.lisp
 uiop.lisp
lib/sbcl/contrib/
 asdf.fasl
 sb-aclrepl.asd
 sb-aclrepl.fasl
 sb-bsd-sockets.asd
 sb-bsd-sockets.fasl
 sb-cltl2.asd
 sb-cltl2.fasl
 sb-concurrency.asd
 sb-concurrency.fasl
 sb-cover.asd
 sb-cover.fasl
 sb-executable.asd
 sb-executable.fasl
 sb-gmp.asd
 sb-gmp.fasl
 sb-grovel.asd
 sb-grovel.fasl
 sb-introspect.asd
 sb-introspect.fasl
 sb-md5.asd
 sb-md5.fasl
 sb-mpfr.asd
 sb-mpfr.fasl
 sb-posix.asd
 sb-posix.fasl
 sb-queue.asd
 sb-queue.fasl
 sb-rotate-byte.asd
 sb-rotate-byte.fasl
 sb-rt.asd
 sb-rt.fasl
 sb-simple-streams.asd
 sb-simple-streams.fasl
 sb-sprof.asd
 sb-sprof.fasl
 uiop.fasl
lib/sbcl/sb-aclrepl/
 debug.lisp
 inspect.lisp
 repl.lisp
 sb-aclrepl.asd
 tests.lisp
 toplevel.lisp
lib/sbcl/sb-bsd-sockets/
 constants.lisp
 defpackage.lisp
 inet.lisp
 inet4.lisp
 inet6.lisp
 local.lisp
 misc.lisp
 name-service.lisp
 protocol.lisp
 sb-bsd-sockets.asd
 sockets.lisp
 sockopt.lisp
 tests.lisp
 util.lisp
 win32-constants.lisp
 win32-lib.lisp
 win32-sockets.lisp
lib/sbcl/sb-cltl2/
 compiler-let.lisp
 defpackage.lisp
 env.lisp
 macroexpand.lisp
 sb-cltl2.asd
 tests.lisp
lib/sbcl/sb-concurrency/
 frlock.lisp
 gate.lisp
 mailbox.lisp
 package.lisp
 queue.lisp
 sb-concurrency.asd
lib/sbcl/sb-cover/
 cover.lisp
 sb-cover.asd
 test-data-1.lisp
 test-data-2.lisp
 test-data-3.lisp
 test-data-branching-forms.lisp
 tests.lisp
lib/sbcl/sb-executable/sb-executable.lisp
lib/sbcl/sb-gmp/
 bench.lisp
 gmp.lisp
 sb-gmp.asd
 tests-stress.lisp
 tests.lisp
lib/sbcl/sb-grovel/
 def-to-lisp.lisp
 defpackage.lisp
 example-constants.lisp
 foreign-glue.lisp
 sb-grovel.asd
lib/sbcl/sb-introspect/
 introspect.lisp
 load-test.lisp
 sb-introspect.asd
 test-driver.lisp
 test.lisp
 xref-test-data.lisp
 xref-test.lisp
lib/sbcl/sb-md5/
 md5-tests.lisp
 md5.lisp
 sb-md5.asd
lib/sbcl/sb-mpfr/
 mpfr.lisp
 sb-mpfr.asd
 tests.lisp
lib/sbcl/sb-posix/
 constants.lisp
 defpackage.lisp
 designator.lisp
 interface.lisp
 libc-tests.lisp
 macros.lisp
 posix-tests.lisp
 sb-posix.asd
 strtod.lisp
lib/sbcl/sb-queue/
 package.lisp
 sb-queue.asd
lib/sbcl/sb-rotate-byte/
 arm-vm.lisp
 arm64-vm.lisp
 compiler.lisp
 package.lisp
 ppc-vm.lisp
 rotate-byte-tests.lisp
 rotate-byte.lisp
 sb-rotate-byte.asd
 x86-64-vm.lisp
 x86-vm.lisp
lib/sbcl/sb-rt/
 rt.lisp
 sb-rt.asd
lib/sbcl/sb-simple-streams/
 classes.lisp
 direct.lisp
 file.lisp
 fndb.lisp
 impl.lisp
 internal.lisp
 iodefs.lisp
 null.lisp
 package.lisp
 sb-simple-streams.asd
 simple-stream-tests.lisp
 socket.lisp
 strategy.lisp
 string.lisp
 terminal.lisp
lib/sbcl/sb-sprof/
 sb-sprof.lisp
 test.lisp
lib/sbcl/
 sbcl.mk
 sbcl_core
share/man/man1/sbcl.1.gz
@sample etc/sbclrc.sample


[FILE:637:patches/patch-src_runtime_thread.c]
--- src/runtime/thread.c.orig	2017-09-30 16:30:58 UTC
+++ src/runtime/thread.c
@@ -50,7 +50,7 @@
 
 #ifdef LISP_FEATURE_SB_THREAD
 
-#ifdef LISP_FEATURE_OPENBSD
+#if defined LISP_FEATURE_OPENBSD || defined LISP_FEATURE_FREEBSD || defined LISP_FEATURE_DRAGONFLY
 #include <pthread_np.h>
 #endif
 
@@ -516,7 +516,7 @@ attach_os_thread(init_thread_data *scrib
     stack_size = pthread_get_stacksize_np(os);
 #else
     pthread_attr_t attr;
-#ifdef LISP_FEATURE_FREEBSD
+#if defined LISP_FEATURE_FREEBSD || defined LISP_FEATURE_DRAGONFLY
     pthread_attr_get_np(os, &attr);
 #else
     int pthread_getattr_np(pthread_t, pthread_attr_t *);


[FILE:39:files/sbclrc.in]
(load "%%PREFIX%%/etc/asdf-init.lisp")


[FILE:355:dragonfly/patch-src_runtime_interrupt.c]
--- src/runtime/interrupt.c.orig	2017-09-30 16:30:58 UTC
+++ src/runtime/interrupt.c
@@ -68,6 +68,10 @@
 #include "genesis/simple-fun.h"
 #include "genesis/cons.h"
 
+#ifndef SIGRTMIN
+#define SIGRTMIN 50
+#endif
+
 /*
  * This is a workaround for some slightly silly Linux/GNU Libc
  * behaviour: glibc defines sigset_t to support 1024 signals, which is


[FILE:291:dragonfly/patch-tools-for-build_grovel-headers.c]
--- tools-for-build/grovel-headers.c.orig	2017-01-06 07:13:57 UTC
+++ tools-for-build/grovel-headers.c
@@ -42,7 +42,7 @@
 #ifdef LISP_FEATURE_ANDROID
   #include <termios.h>
 #else
-  #include <sys/termios.h>
+  #include <termios.h>
   #include <langinfo.h>
 #endif
   #include <sys/time.h>


[FILE:361:freebsd/patch-src_runtime_x86-64-bsd-os.c]
--- src/runtime/x86-64-bsd-os.c.orig	2016-12-31 08:38:30 UTC
+++ src/runtime/x86-64-bsd-os.c
@@ -142,6 +142,13 @@ os_flush_icache(os_vm_address_t address,
 {
 }
 
+#ifdef LISP_FEATURE_SB_THREAD
+void
+arch_os_load_ldt(struct thread *thread)
+{
+}
+#endif
+
 int arch_os_thread_init(struct thread *thread) {
     stack_t sigstack;
 #ifdef LISP_FEATURE_SB_THREAD


[FILE:291:freebsd/patch-tools-for-build_grovel-headers.c]
--- tools-for-build/grovel-headers.c.orig	2017-01-06 07:13:57 UTC
+++ tools-for-build/grovel-headers.c
@@ -42,7 +42,7 @@
 #ifdef LISP_FEATURE_ANDROID
   #include <termios.h>
 #else
-  #include <sys/termios.h>
+  #include <termios.h>
   #include <langinfo.h>
 #endif
   #include <sys/time.h>


[FILE:2071:freebsd/patch-zzlate-fix-immobile-space]
From 8603d89d6bafb0dcd3f453c259dbf8c9f3ab9fb6 Mon Sep 17 00:00:00 2001
From: Douglas Katzman <dougk@google.com>
Date: Sun, 1 Oct 2017 00:23:02 -0400
Subject: [PATCH] Force immobile space to a low address on FreeBSD

lp#1720599
---
 src/runtime/bsd-os.c        | 10 +++++++++-
 src/runtime/x86-64-bsd-os.c |  2 +-
 2 files changed, 10 insertions(+), 2 deletions(-)

diff --git src/runtime/bsd-os.c src/runtime/bsd-os.c
index 8dfd2a631..7ae9d119f 100644
--- src/runtime/bsd-os.c
+++ src/runtime/bsd-os.c
@@ -144,8 +144,14 @@ os_validate(int movable, os_vm_address_t addr, os_vm_size_t len)
      * OpenBSD says:
        Except for MAP_FIXED mappings, the system will never replace existing mappings. */
 
-    if (!movable && addr)
+    if (addr && movable != MOVABLE) {
+        /* MOVABLE_LOW will use MAP_FIXED because if you don't,
+         * there is no chance of getting the hinted address */
         flags |= MAP_FIXED;
+#ifdef MAP_EXCL /* I think every *BSD has this but I'm not sure */
+        flags |= MAP_EXCL;
+#endif
+    }
 
 #ifdef __NetBSD__
     if (addr) {
@@ -177,6 +183,8 @@ os_validate(int movable, os_vm_address_t addr, os_vm_size_t len)
         addr = mmap(addr, len, OS_VM_PROT_ALL, flags, -1, 0);
     }
 
+    /* FIXME: if MOVABLE_LOW, probe for other possible addresses,
+     * since the combination of (MAP_FIXED | MAP_EXCL) won't */
     if (addr == MAP_FAILED) {
         perror("mmap");
         return NULL;
diff --git src/runtime/x86-64-bsd-os.c src/runtime/x86-64-bsd-os.c
index b3941182c..33987ea45 100644
--- src/runtime/x86-64-bsd-os.c
+++ src/runtime/x86-64-bsd-os.c
@@ -160,7 +160,7 @@ int arch_os_thread_init(struct thread *thread) {
     /* Signal handlers are run on the control stack, so if it is exhausted
      * we had better use an alternate stack for whatever signal tells us
      * we've exhausted it */
-    sigstack.ss_sp=((void *) thread)+dynamic_values_bytes;
+    sigstack.ss_sp=((char *) thread)+dynamic_values_bytes;
     sigstack.ss_flags=0;
     sigstack.ss_size = 32*SIGSTKSZ;
     sigaltstack(&sigstack,0);

