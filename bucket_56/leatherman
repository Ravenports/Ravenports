# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		leatherman
VERSION=		1.6.0
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	C++ and CMake utility libraries
HOMEPAGE=		https://github.com/puppetlabs/leatherman
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/puppetlabs:leatherman:1.6.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	curl:primary:standard
			boost-libraries:rest:python_default

USES=			cmake ruby gettext-tools

LICENSE=		APACHE20:single
LICENSE_TERMS=		single:{{WRKSRC}}/LICENSE
LICENSE_FILE=		APACHE20:stock
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/leatherman

SOVERSION=		1.6.0

CXXFLAGS=		-Wno-class-memaccess
			-Wno-ignored-qualifiers
CMAKE_ARGS=		-DLEATHERMAN_SHARED:BOOL=ON
			-DLEATHERMAN_ENABLE_TESTING:BOOL=OFF

post-patch:
	${REINPLACE_CMD} -e 's/ -Werror//' ${WRKSRC}/cmake/cflags.cmake

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/*.so

[FILE:455:descriptions/desc.single]
Leatherman - a C++ toolkit

Leatherman can be used in one of two ways: It can be installed as a regular
library, and included using the normal CMake find_package syntax, or it can
be setup as a submodule. The recommended method is to install Leatherman
and use it as a regular system library.

Leatherman is broken up into a number of focused component libraries. Both
methods of using Leatherman allow you to control which components are built
and used.


[FILE:113:distinfo]
bc5a157a9bab1dfa466ff1d70e040c4be0430ebd635e974ef09a49008cfab835       814463 puppetlabs-leatherman-1.6.0.tar.gz


[FILE:2734:manifests/plist.single]
include/boost/nowide/
 args.hpp
 cenv.hpp
 config.hpp
 convert.hpp
 cstdio.hpp
 cstdlib.hpp
 filebuf.hpp
 fstream.hpp
 iostream.hpp
 stackstring.hpp
 system.hpp
 utf8_codecvt.hpp
 windows.hpp
include/boost/nowide/integration/filesystem.hpp
include/leatherman/curl/
 client.hpp
 export.h
 request.hpp
 response.hpp
include/leatherman/dynamic_library/dynamic_library.hpp
include/leatherman/execution/execution.hpp
include/leatherman/file_util/
 directory.hpp
 file.hpp
include/leatherman/json_container/json_container.hpp
include/leatherman/locale/locale.hpp
include/leatherman/logging/logging.hpp
include/leatherman/ruby/api.hpp
include/leatherman/util/
 environment.hpp
 option_set.hpp
 regex.hpp
 scope_exit.hpp
 scoped_env.hpp
 scoped_resource.hpp
 strings.hpp
 time.hpp
 timer.hpp
 uri.hpp
include/leatherman/util/posix/scoped_descriptor.hpp
include/leatherman/util/windows/scoped_handle.hpp
include/leatherman/vendor/catch.hpp
include/leatherman/vendor/rapidjson/
 allocators.h
 document.h
 encodedstream.h
 encodings.h
 filereadstream.h
 filewritestream.h
 memorybuffer.h
 memorystream.h
 prettywriter.h
 rapidjson.h
 reader.h
 stringbuffer.h
 writer.h
include/leatherman/vendor/rapidjson/error/
 en.h
 error.h
include/leatherman/vendor/rapidjson/internal/
 biginteger.h
 diyfp.h
 dtoa.h
 ieee754.h
 itoa.h
 meta.h
 pow10.h
 stack.h
 strfunc.h
 strtod.h
include/leatherman/vendor/rapidjson/msinttypes/
 inttypes.h
 stdint.h
lib/
 libleatherman_curl.so
 libleatherman_curl.so.%%SOVERSION%%
 libleatherman_dynamic_library.so
 libleatherman_dynamic_library.so.%%SOVERSION%%
 libleatherman_execution.so
 libleatherman_execution.so.%%SOVERSION%%
 libleatherman_file_util.so
 libleatherman_file_util.so.%%SOVERSION%%
 libleatherman_json_container.so
 libleatherman_json_container.so.%%SOVERSION%%
 libleatherman_locale.so
 libleatherman_locale.so.%%SOVERSION%%
 libleatherman_logging.so
 libleatherman_logging.so.%%SOVERSION%%
 libleatherman_ruby.so
 libleatherman_ruby.so.%%SOVERSION%%
 libleatherman_util.so
 libleatherman_util.so.%%SOVERSION%%
lib/cmake/leatherman/
 LeathermanConfig.cmake
 LeathermanConfigVersion.cmake
 LeathermanLibraries-%%CMAKE_BUILD_TYPE%%.cmake
 LeathermanLibraries.cmake
 catch.cmake
 curl.cmake
 dynamic_library.cmake
 execution.cmake
 file_util.cmake
 json_container.cmake
 locale.cmake
 logging.cmake
 nowide.cmake
 rapidjson.cmake
 ruby.cmake
 util.cmake
lib/cmake/leatherman/cmake/
 GetGitRevisionDescription.cmake
 GetGitRevisionDescription.cmake.in
 cflags.cmake
 generate_translations.cmake
 leatherman.cmake
 leatherman_config.cmake
 normalize_pot.cmake
 options.cmake
 pod2man.cmake
lib/cmake/leatherman/scripts/cpplint.py
share/locale/fr/LC_MESSAGES/
 leatherman_locale.mo
 leatherman_logging.mo


[FILE:483:patches/patch-cmake_leatherman.cmake.in]
--- cmake/leatherman.cmake.in.orig	2018-12-13 17:34:43 UTC
+++ cmake/leatherman.cmake.in
@@ -83,11 +83,6 @@ macro(leatherman_install)
         RUNTIME DESTINATION bin
         LIBRARY DESTINATION lib${LIB_SUFFIX}
         ARCHIVE DESTINATION lib${LIB_SUFFIX})
-    foreach(ARG ${ARGV})
-        if (TARGET ${ARG})
-            set_target_properties(${ARG} PROPERTIES PREFIX "" IMPORT_PREFIX "")
-        endif()
-    endforeach()
 endmacro()
 
 # Usage: add_cppcheck_dirs(dir1 dir2)


[FILE:472:patches/patch-locale_src_locale.cc]
--- locale/src/locale.cc.orig	2018-12-13 17:34:43 UTC
+++ locale/src/locale.cc
@@ -44,6 +44,9 @@ namespace leatherman { namespace locale
             gen.add_messages_domain(domain);
         }
 
+        if (id.empty())
+            return g_locales.insert(make_pair(domain, std::locale())).first->second;
+
         // Ensure creating and adding a new locale is thread-safe.
         try {
             return g_locales.insert(make_pair(domain, gen(id))).first->second;

