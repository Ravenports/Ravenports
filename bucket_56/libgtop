# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libgtop
VERSION=		2.40.0
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	GNOME library to collect system monitoring data
HOMEPAGE=		https://gitlab.gnome.org/GNOME/libgtop/
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://download.gnome.org/sources/libgtop/2.40/
DISTFILE[1]=		libgtop-2.40.0.tar.xz:main
DIST_SUBDIR=		gnome2
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			nls
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		gtk-doc:single:standard

USES=			gettext-runtime gettext-tools:build gmake libtool
			pkgconfig perl
GNOME_COMPONENTS=	glib introspection

LICENSE=		GPLv2+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"ifndef __GLIBTOP_H__"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/glibtop.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/libgtop

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--enable-introspection
			--enable-gtk-doc-html

INSTALL_TARGET=		install-strip
SOVERSION=		11.0.1

[FILE:73:descriptions/desc.primary]
LibGTop is a GNOME library that collects various system minitoring data.


[FILE:107:distinfo]
78f3274c0c79c434c03655c1b35edf7b95ec0421430897fb1345a98a265ed2d4       744316 gnome2/libgtop-2.40.0.tar.xz


[FILE:802:manifests/plist.primary]
bin/
 libgtop_daemon2
 libgtop_server2
include/libgtop-2.0/
 glibtop.h
 glibtop_machine.h
 glibtop_server.h
 glibtop_suid.h
 libgtopconfig.h
include/libgtop-2.0/glibtop/
 close.h
 command.h
 cpu.h
 fsusage.h
 global.h
 gnuserv.h
 loadavg.h
 mem.h
 mountlist.h
 msg_limits.h
 netlist.h
 netload.h
 open.h
 parameter.h
 ppp.h
 procaffinity.h
 procargs.h
 procio.h
 prockernel.h
 proclist.h
 procmap.h
 procmem.h
 procopenfiles.h
 procsegment.h
 procsignal.h
 procstate.h
 proctime.h
 procuid.h
 procwd.h
 sem_limits.h
 shm_limits.h
 signal.h
 swap.h
 sysdeps.h
 sysinfo.h
 union.h
 uptime.h
lib/
 libgtop-2.0.a
 libgtop-2.0.so
 libgtop-2.0.so.%%SOMAJOR%%
 libgtop-2.0.so.%%SOVERSION%%
lib/girepository-1.0/GTop-2.0.typelib
lib/pkgconfig/libgtop-2.0.pc
share/gir-1.0/GTop-2.0.gir
share/info/libgtop2.info


[FILE:3398:manifests/plist.nls]
share/locale/am/LC_MESSAGES/libgtop.mo
share/locale/ar/LC_MESSAGES/libgtop.mo
share/locale/as/LC_MESSAGES/libgtop.mo
share/locale/ast/LC_MESSAGES/libgtop.mo
share/locale/az/LC_MESSAGES/libgtop.mo
share/locale/be/LC_MESSAGES/libgtop.mo
share/locale/bg/LC_MESSAGES/libgtop.mo
share/locale/bn/LC_MESSAGES/libgtop.mo
share/locale/bn_IN/LC_MESSAGES/libgtop.mo
share/locale/bs/LC_MESSAGES/libgtop.mo
share/locale/ca/LC_MESSAGES/libgtop.mo
share/locale/ca@valencia/LC_MESSAGES/libgtop.mo
share/locale/cs/LC_MESSAGES/libgtop.mo
share/locale/cy/LC_MESSAGES/libgtop.mo
share/locale/da/LC_MESSAGES/libgtop.mo
share/locale/de/LC_MESSAGES/libgtop.mo
share/locale/dz/LC_MESSAGES/libgtop.mo
share/locale/el/LC_MESSAGES/libgtop.mo
share/locale/en@shaw/LC_MESSAGES/libgtop.mo
share/locale/en_CA/LC_MESSAGES/libgtop.mo
share/locale/en_GB/LC_MESSAGES/libgtop.mo
share/locale/eo/LC_MESSAGES/libgtop.mo
share/locale/es/LC_MESSAGES/libgtop.mo
share/locale/et/LC_MESSAGES/libgtop.mo
share/locale/eu/LC_MESSAGES/libgtop.mo
share/locale/fa/LC_MESSAGES/libgtop.mo
share/locale/fi/LC_MESSAGES/libgtop.mo
share/locale/fr/LC_MESSAGES/libgtop.mo
share/locale/fur/LC_MESSAGES/libgtop.mo
share/locale/ga/LC_MESSAGES/libgtop.mo
share/locale/gl/LC_MESSAGES/libgtop.mo
share/locale/gu/LC_MESSAGES/libgtop.mo
share/locale/he/LC_MESSAGES/libgtop.mo
share/locale/hi/LC_MESSAGES/libgtop.mo
share/locale/hr/LC_MESSAGES/libgtop.mo
share/locale/hu/LC_MESSAGES/libgtop.mo
share/locale/id/LC_MESSAGES/libgtop.mo
share/locale/it/LC_MESSAGES/libgtop.mo
share/locale/ja/LC_MESSAGES/libgtop.mo
share/locale/ka/LC_MESSAGES/libgtop.mo
share/locale/kn/LC_MESSAGES/libgtop.mo
share/locale/ko/LC_MESSAGES/libgtop.mo
share/locale/ku/LC_MESSAGES/libgtop.mo
share/locale/ky/LC_MESSAGES/libgtop.mo
share/locale/la/LC_MESSAGES/libgtop.mo
share/locale/lt/LC_MESSAGES/libgtop.mo
share/locale/lv/LC_MESSAGES/libgtop.mo
share/locale/mai/LC_MESSAGES/libgtop.mo
share/locale/mg/LC_MESSAGES/libgtop.mo
share/locale/mi/LC_MESSAGES/libgtop.mo
share/locale/mk/LC_MESSAGES/libgtop.mo
share/locale/ml/LC_MESSAGES/libgtop.mo
share/locale/mn/LC_MESSAGES/libgtop.mo
share/locale/mr/LC_MESSAGES/libgtop.mo
share/locale/ms/LC_MESSAGES/libgtop.mo
share/locale/nb/LC_MESSAGES/libgtop.mo
share/locale/ne/LC_MESSAGES/libgtop.mo
share/locale/nl/LC_MESSAGES/libgtop.mo
share/locale/nn/LC_MESSAGES/libgtop.mo
share/locale/oc/LC_MESSAGES/libgtop.mo
share/locale/or/LC_MESSAGES/libgtop.mo
share/locale/pa/LC_MESSAGES/libgtop.mo
share/locale/pl/LC_MESSAGES/libgtop.mo
share/locale/pt/LC_MESSAGES/libgtop.mo
share/locale/pt_BR/LC_MESSAGES/libgtop.mo
share/locale/ro/LC_MESSAGES/libgtop.mo
share/locale/ru/LC_MESSAGES/libgtop.mo
share/locale/rw/LC_MESSAGES/libgtop.mo
share/locale/sk/LC_MESSAGES/libgtop.mo
share/locale/sl/LC_MESSAGES/libgtop.mo
share/locale/sq/LC_MESSAGES/libgtop.mo
share/locale/sr/LC_MESSAGES/libgtop.mo
share/locale/sr@latin/LC_MESSAGES/libgtop.mo
share/locale/sv/LC_MESSAGES/libgtop.mo
share/locale/ta/LC_MESSAGES/libgtop.mo
share/locale/te/LC_MESSAGES/libgtop.mo
share/locale/tg/LC_MESSAGES/libgtop.mo
share/locale/th/LC_MESSAGES/libgtop.mo
share/locale/tr/LC_MESSAGES/libgtop.mo
share/locale/ug/LC_MESSAGES/libgtop.mo
share/locale/uk/LC_MESSAGES/libgtop.mo
share/locale/vi/LC_MESSAGES/libgtop.mo
share/locale/xh/LC_MESSAGES/libgtop.mo
share/locale/zh_CN/LC_MESSAGES/libgtop.mo
share/locale/zh_HK/LC_MESSAGES/libgtop.mo
share/locale/zh_TW/LC_MESSAGES/libgtop.mo


[FILE:1068:manifests/plist.docs]
share/gtk-doc/html/libgtop/
 home.png
 index.html
 left-insensitive.png
 left.png
 libgtop-Close.html
 libgtop-Command.html
 libgtop-GlibTop-Server.html
 libgtop-GlibTop.html
 libgtop-Net-List.html
 libgtop-Net-Load.html
 libgtop-PPP.html
 libgtop-Process-Arguments.html
 libgtop-Process-List.html
 libgtop-Process-Time.html
 libgtop-Shared-Memory-Limits.html
 libgtop-Uptime.html
 libgtop-cpu.html
 libgtop-fsusage.html
 libgtop-lib.html
 libgtop-loadavg.html
 libgtop-mem.html
 libgtop-mountlist.html
 libgtop-msg-limits.html
 libgtop-open.html
 libgtop-parameter.html
 libgtop-prockernel.html
 libgtop-procmap.html
 libgtop-procmem.html
 libgtop-procopenfiles.html
 libgtop-procsegment.html
 libgtop-procsignal.html
 libgtop-procstate.html
 libgtop-procuid.html
 libgtop-sem-limits.html
 libgtop-signal.html
 libgtop-swap.html
 libgtop-sysdeps.html
 libgtop-sysinfo.html
 libgtop-union.html
 libgtop-version.html
 libgtop-white-paper-overview.html
 libgtop-white-paper.html
 libgtop.devhelp2
 right-insensitive.png
 right.png
 style.css
 up-insensitive.png
 up.png


[FILE:347:freebsd/patch-config.h.in]
--- config.h.in.orig	2015-08-13 20:06:02.824731000 +0200
+++ config.h.in	2015-08-13 20:07:06.011319000 +0200
@@ -115,6 +115,9 @@
 /* defined if you have linux/isdn.h */
 #undef HAVE_ISDN_H
 
+/* defined if you have kinfo_getfile in -lutil */
+#undef HAVE_KINFO_GETFILE
+
 /* Define to 1 if you have the `lchown' function. */
 #undef HAVE_LCHOWN
 


[FILE:1654:freebsd/patch-configure]
--- configure.orig	2015-08-13 20:06:09.161030000 +0200
+++ configure	2015-08-13 20:07:04.020683000 +0200
@@ -14503,6 +14503,57 @@
 
 fi
 
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for kinfo_getfile in -lutil" >&5
+$as_echo_n "checking for kinfo_getfile in -lutil... " >&6; }
+if ${ac_cv_lib_util_kinfo_getfile+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lutil  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char kinfo_getfile ();
+int
+main ()
+{
+return kinfo_getfile ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_util_kinfo_getfile=yes
+else
+  ac_cv_lib_util_kinfo_getfile=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_util_kinfo_getfile" >&5
+$as_echo "$ac_cv_lib_util_kinfo_getfile" >&6; }
+if test "x$ac_cv_lib_util_kinfo_getfile" = xyes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_LIBUTIL 1
+_ACEOF
+
+  LIBS="-lutil $LIBS"
+
+fi
+
+if test xac_cv_lib_kinfo_getfile_util = xyes ; then
+
+$as_echo "#define HAVE_KINFO_GETFILE 1" >>confdefs.h
+
+fi
+
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for an ANSI C-conforming const" >&5
 $as_echo_n "checking for an ANSI C-conforming const... " >&6; }
 if ${ac_cv_c_const+:} false; then :


[FILE:715:freebsd/patch-examples_mountlist.c]
Remove unreliable and non-portable way to demonstrate memory utilization
with sbrk(2).

https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=221751

--- examples/mountlist.c.orig
+++ examples/mountlist.c
@@ -71,16 +71,12 @@
 
 	printf ("Host = '%s' - %u\n\n", buffer, port);
 
-	printf ("sbrk (0) = %p\n\n", sbrk (0));
-
 	for (c = 0; c < PROFILE_COUNT; c++) {
 		mount_entries = glibtop_get_mountlist (&mount_list, 1);
 
 		g_free (mount_entries);
 	}
 
-	printf ("sbrk (0) = %p\n\n", sbrk (0));
-
 	mount_entries = glibtop_get_mountlist (&mount_list, 1);
 
 	if (mount_entries == NULL)
@@ -108,8 +104,6 @@
 
 	g_free (mount_entries);
 
-	printf ("\nsbrk (0) = %p\n\n", sbrk (0));
-
 	glibtop_close ();
 
 	exit (0);


[FILE:5109:freebsd/patch-sysdeps_freebsd_procmap.c]
--- sysdeps/freebsd/procmap.c.orig	2021-06-06 05:13:00 UTC
+++ sysdeps/freebsd/procmap.c
@@ -34,6 +34,8 @@
 #include <vm/vm_map.h>
 #include <vm/vm.h>
 
+#include <stdbool.h>
+
 #define _KVM_VNODE
 #include <sys/vnode.h>
 #undef _KVM_VNODE
@@ -51,14 +53,15 @@
 #define _KERNEL
 #include <sys/mount.h>
 #include <ufs/ufs/quota.h>
-#include <ufs/ufs/inode.h>
+#include <ufs/ufs/extattr.h>
+#include <ufs/ufs/ufsmount.h>
 #include <fs/devfs/devfs.h>
 #if (__FreeBSD_version >= 600006) || defined(__FreeBSD_kernel__)
 #include <fs/devfs/devfs_int.h>
 #endif
 #undef _KERNEL
+#include <ufs/ufs/inode.h>
 
-
 #if (__FreeBSD_version >= 1101001)
 #define _KERNEL
 #include <ufs/ufs/extattr.h>
@@ -95,12 +98,14 @@ _glibtop_sysdeps_freebsd_dev_inode (glibtop *server, s
         struct cdev_priv priv;
 #if __FreeBSD_version < 800039
         struct cdev si;
+#else
+        struct ufsmount um;
 #endif
 
         *inum = 0;
         *dev = 0;
 
-        if (kvm_read (server->machine->kd, (gulong) &vnode->v_tag,
+        if (kvm_read (server->machine->kd, (gulong) &vnode->v_lock.lock_object.lo_name,
  	             (char *) &tagptr, sizeof (tagptr)) != sizeof (tagptr) ||
             kvm_read (server->machine->kd, (gulong) tagptr,
 		     (char *) tagstr, sizeof (tagstr)) != sizeof (tagstr))
@@ -120,7 +125,7 @@ _glibtop_sysdeps_freebsd_dev_inode (glibtop *server, s
                 return;
         }
 
-        if (kvm_read (server->machine->kd, (gulong) VTOI(vn), (char *) &inode,
+        if (kvm_read (server->machine->kd, (gulong) ((struct inode *)(vn)->v_data), (char *) &inode,
  	              sizeof (inode)) != sizeof (inode))
         {
                 glibtop_warn_io_r (server, "kvm_read (inode)");
@@ -231,6 +236,32 @@ _glibtop_init_proc_map_p (glibtop *server)
         server->sysdeps.proc_map = _glibtop_sysdeps_proc_map;
 }
 
+static int
+vm_map_reader(void *token, vm_map_entry_t addr, vm_map_entry_t dest)
+{
+	kvm_t *kd;
+
+	kd = (kvm_t *)token;
+	return (kvm_read (kd, (gulong) addr, dest, sizeof(*dest)) == sizeof(*dest));
+}
+
+#if (__FreeBSD_version < 1300062)
+typedef int vm_map_entry_reader(void *token, vm_map_entry_t addr,
+    vm_map_entry_t dest);
+
+static inline vm_map_entry_t
+vm_map_entry_read_succ(void *token, struct vm_map_entry *const clone,
+     vm_map_entry_reader reader)
+{
+	vm_map_entry_t next;
+
+	next = clone->next;
+	if (!reader (token, next, clone))
+		return (NULL);
+	return (next);
+}
+#endif
+
 /* Provides detailed information about a process. */
 
 glibtop_map_entry *
@@ -238,13 +269,12 @@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
                         pid_t pid)
 {
         struct kinfo_proc *pinfo;
-        struct vm_map_entry entry, *first;
+        struct vm_map_entry entry;
         struct vmspace vmspace;
         struct vm_object object;
         GArray *maps;
         struct vnode vnode;
-        int count;
-        int update = 0;
+        int i, count;
 
         memset (buf, 0, sizeof (glibtop_proc_map));
 
@@ -273,16 +303,6 @@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
                 return NULL;
         }
 
-        first = vmspace.vm_map.header.next;
-
-        if (kvm_read (server->machine->kd,
-                        (gulong) vmspace.vm_map.header.next,
-                        (char *) &entry, sizeof (entry)) != sizeof (entry)) {
-                glibtop_warn_io_r (server, "kvm_read (entry)");
-		glibtop_suid_leave (server);
-                return NULL;
-        }
-
         /* Walk through the `vm_map_entry' list ... */
 
         /* I tested this a few times with `mmap'; as soon as you write
@@ -292,21 +312,17 @@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
         maps = g_array_sized_new(FALSE, FALSE, sizeof(glibtop_map_entry),
                                  vmspace.vm_map.nentries);
 
-        do {
+	entry = vmspace.vm_map.header;
+        for (i = 0; i < vmspace.vm_map.nentries; i++) {
                 glibtop_map_entry *mentry;
                 guint64 inum, dev;
                 guint len;
 
-                if (update) {
-                        if (kvm_read (server->machine->kd,
-                                        (gulong) entry.next,
-                                        (char *) &entry, sizeof (entry)) != sizeof (entry)) {
-                                glibtop_warn_io_r (server, "kvm_read (entry)");
-                                continue;
-                        }
-                } else {
-                        update = 1;
-                }
+		if (!vm_map_entry_read_succ(server->machine->kd, &entry, vm_map_reader)) {
+			glibtop_warn_io_r (server, "kvm_read (entry)");
+			glibtop_suid_leave (server);
+			return NULL;
+		}
 
                 if (entry.eflags & (MAP_ENTRY_IS_SUB_MAP))
                         continue;
@@ -377,7 +393,7 @@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
                 if (entry.protection & VM_PROT_EXECUTE)
                         mentry->perm |= GLIBTOP_MAP_PERM_EXECUTE;
 
-        } while (entry.next != first);
+        }
 
         glibtop_suid_leave (server);
 


[FILE:1911:freebsd/patch-sysdeps_freebsd_procopenfiles.c]
--- sysdeps/freebsd/procopenfiles.c.orig	2014-10-12 07:17:26 UTC
+++ sysdeps/freebsd/procopenfiles.c
@@ -322,12 +322,21 @@ glibtop_get_proc_open_files_s (glibtop *server, glibto
 				struct sockaddr_un *sun;
 
 				entry.type = GLIBTOP_FILE_TYPE_LOCALSOCKET;
+/* 64bit inodes */
+#if __FreeBSD_version >= 1200031
+				sun = (struct sockaddr_un *)&kif->kf_un.kf_sock.kf_sa_local;
+#else
 				sun = (struct sockaddr_un *)&kif->kf_sa_local;
+#endif
 
 				if (sun->sun_path[0]) {
 					char *addrstr;
 
+#if __FreeBSD_version >= 1200031
+					addrstr = addr_to_string(&kif->kf_un.kf_sock.kf_sa_local);
+#else
 					addrstr = addr_to_string(&kif->kf_sa_local);
+#endif
 					g_strlcpy(entry.info.localsock.name,
 						  addrstr,
 						  sizeof(entry.info.localsock.name));
@@ -335,7 +344,11 @@ glibtop_get_proc_open_files_s (glibtop *server, glibto
 				} else {
 					char *addrstr;
 
+#if __FreeBSD_version >= 1200031
+					addrstr = addr_to_string(&kif->kf_un.kf_sock.kf_sa_peer);
+#else
 					addrstr = addr_to_string(&kif->kf_sa_peer);
+#endif
 					g_strlcpy(entry.info.localsock.name,
 						  addrstr,
 						  sizeof(entry.info.localsock.name));
@@ -349,12 +362,20 @@ glibtop_get_proc_open_files_s (glibtop *server, glibto
 					entry.type = GLIBTOP_FILE_TYPE_INETSOCKET;
 				else
 					entry.type = GLIBTOP_FILE_TYPE_INET6SOCKET;
+#if __FreeBSD_version >= 1200031
+				addrstr = addr_to_string(&kif->kf_un.kf_sock.kf_sa_peer);
+#else
 				addrstr = addr_to_string(&kif->kf_sa_peer);
+#endif
 				g_strlcpy(entry.info.sock.dest_host,
 					  addrstr,
 					  sizeof(entry.info.sock.dest_host));
 				g_free(addrstr);
+#if __FreeBSD_version >= 1200031
+				entry.info.sock.dest_port = addr_to_port(&kif->kf_un.kf_sock.kf_sa_peer);
+#else
 				entry.info.sock.dest_port = addr_to_port(&kif->kf_sa_peer);
+#endif
 			}
 		} else if (kif->kf_type == KF_TYPE_PIPE) {
 			entry.type = GLIBTOP_FILE_TYPE_PIPE;

