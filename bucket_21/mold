# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		mold
VERSION=		2.35.1
KEYWORDS=		devel
VARIANTS=		std
SDESC[std]=		Faster replacement for existing Unix linkers
HOMEPAGE=		https://github.com/rui314/mold
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/rui314:mold:v2.35.1
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			man

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cmake zstd zlib ssl c++:primary
C_USES[freebsd]=	clang
C_USES[midnightbsd]=	clang

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/mold

CMAKE_ARGS=		-DMOLD_USE_SYSTEM_MIMALLOC=OFF
			-DMOLD_USE_SYSTEM_TBB=OFF
			-DOPENSSL_ROOT_DIR:STRING="{{OPENSSLBASE}}"

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/mold
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/mold/mold-wrapper.so

pre-configure:
	# don't duplicate license installation
	${REINPLACE_CMD} -e '/LICENSE DESTINATION/d' ${WRKSRC}/CMakeLists.txt

[FILE:322:descriptions/desc.primary]
mold is a faster drop-in replacement for existing Unix linkers.  It is
several times quicker than the LLVM lld linker, the second-fastest
open-source linker, which I initially developed a few years ago. mold
aims to enhance developer productivity by minimizing build time,
particularly in rapid debug-edit-rebuild cycles.


[FILE:104:distinfo]
912b90afe7fde03e53db08d85a62c7b03a57417e54afc72c08e2fa07cab421ff     10094602 rui314-mold-2.35.1.tar.gz


[FILE:61:manifests/plist.primary]
bin/
 ld.mold
 mold
lib/mold/mold-wrapper.so
libexec/mold/ld


[FILE:35:manifests/plist.man]
share/man/man1/
 ld.mold.1
 mold.1


[FILE:638:patches/patch-third-party_mimalloc_src_alloc-override.c]
--- third-party/mimalloc/src/alloc-override.c.orig	2024-12-16 08:27:33 UTC
+++ third-party/mimalloc/src/alloc-override.c
@@ -248,7 +248,7 @@ extern "C" {
   // Forward Posix/Unix calls as well
   void*  reallocf(void* p, size_t newsize) MI_FORWARD2(mi_reallocf,p,newsize)
   size_t malloc_size(const void* p)        MI_FORWARD1(mi_usable_size,p)
-  #if !defined(__ANDROID__) && !defined(__FreeBSD__)
+  #if !defined(__ANDROID__) && !defined(__FreeBSD__) && !defined(__DragonFly__)
   size_t malloc_usable_size(void *p)       MI_FORWARD1(mi_usable_size,p)
   #else
   size_t malloc_usable_size(const void *p) MI_FORWARD1(mi_usable_size,p)

