# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		utox
VERSION=		0.17.0
KEYWORDS=		net net_im net_p2p
VARIANTS=		standard
SDESC[standard]=	Lightweight Tox client
HOMEPAGE=		https://utox.io/
CONTACT=		Leonid_Bobrov[mazocomp@disroot.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/uTox/uTox/releases/download/v0.17.0/
DISTFILE[1]=		uTox-0.17.0-full.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		check:primary:standard
			video4linux:headers:standard
BUILDRUN_DEPENDS=	dbus:single:standard
			fontconfig:primary:standard
			freetype:primary:standard
			openal:single:standard
			toxcore:single:standard
			video4linux:primary:standard
RUN_DEPENDS=		gtk3:single:standard

USES=			cmake desktop-utils:single dos2unix pkgconfig
XORG_COMPONENTS=	ice sm x11 xext xrender

DISTNAME=		uTox

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

DOS2UNIX_GLOB=		*
FPC_EQUIVALENT=		net-im/uTox

CMAKE_ARGS=		-DENABLE_FILTERAUDIO=Off

post-extract:
	${CP} ${FILESDIR}/* ${WRKSRC}/cmake/

[FILE:445:descriptions/desc.single]
uTox is a lightweight Tox client with minimal dependencies, It not only looks
pretty, it runs fast!

uTox has full support for:
 * chat;
 * file transfers;
 * audio/video calling;
 * desktop sharing (both as video and inline screenshots);
 * group chats.

You shouldn't have to choose a new client for every device: So uTox works
everywhere! On every major system Windows, macOS, Linux, Android, FreeBSD,
NetBSD, OpenBSD, and even DragonFlyBSD.


[FILE:102:distinfo]
219ae83e9139d3a421c7bb6d03cc3f8953dd36fb8e8b67100d47d92d413e9d46      3946812 uTox-0.17.0-full.tar.gz


[FILE:719:manifests/plist.single]
bin/utox
share/applications/utox.desktop
share/man/man1/utox.1.gz
share/icons/hicolor/128x128/apps/utox-128x128.png
share/icons/hicolor/14x14/apps/utox-14x14.png
share/icons/hicolor/16x16/apps/utox-16x16.png
share/icons/hicolor/22x22/apps/utox-22x22.png
share/icons/hicolor/24x24/apps/utox-24x24.png
share/icons/hicolor/256x256/apps/utox-256x256.png
share/icons/hicolor/32x32/apps/utox-32x32.png
share/icons/hicolor/36x36/apps/utox-36x36.png
share/icons/hicolor/48x48/apps/utox-48x48.png
share/icons/hicolor/512x512/apps/utox-512x512.png
share/icons/hicolor/64x64/apps/utox-64x64.png
share/icons/hicolor/72x72/apps/utox-72x72.png
share/icons/hicolor/96x96/apps/utox-96x96.png
share/icons/hicolor/scalable/apps/utox.svg


[FILE:4870:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2018-10-03 23:52:26 UTC
+++ CMakeLists.txt
@@ -1,5 +1,4 @@
 cmake_minimum_required(VERSION 3.2)
-set(CMAKE_OSX_DEPLOYMENT_TARGET 10.6 CACHE STRING "Minimum OS X deployment version")
 project(uTox LANGUAGES C)
 
 #####################
@@ -31,13 +30,12 @@ if(WIN32)
     set(WINDOWS TRUE)
 elseif(APPLE)
     if(CMAKE_SYSTEM_NAME MATCHES ".*MacOS.*")
+        set(CMAKE_OSX_DEPLOYMENT_TARGET 10.6 CACHE STRING "Minimum OS X deployment version")
         set(MACOSX TRUE)
     endif()
 elseif(UNIX)
     if(CMAKE_SYSTEM_NAME MATCHES ".*Linux")
         set(LINUX TRUE)
-    elseif(CMAKE_SYSTEM_NAME MATCHES "kOpenBSD.*|OpenBSD.*")
-        set(OPENBSD TRUE)
     elseif(CMAKE_SYSTEM_NAME MATCHES "kNetBSD.*|NetBSD.*")
         set(NETBSD TRUE)
     elseif(CMAKE_SYSTEM_NAME MATCHES "kFreeBSD.*|FreeBSD")
@@ -85,7 +83,7 @@ endif()
 option(UTOX_STATIC        "Link uTox statically"                                 ${STATIC_DEFAULT} )
 option(TOXCORE_STATIC     "Build uTox with the static version of Toxcore"        ${STATIC_DEFAULT} )
 option(ENABLE_ASAN        "Enable Address Sanitizer on debug builds"               ${ASAN_DEFAULT} )
-option(ENABLE_TESTS       "Whether to build test binaries (currently linux only)"               OFF)
+option(ENABLE_TESTS       "Whether to build test binaries (currently Unix-like OSes only)"      ON )
 option(ENABLE_WERROR      "Error on Warning, whether to put -Werror flag to the compiler"       OFF)
 option(ENABLE_FILTERAUDIO "Enable Filter Audio"                                                 ON )
 option(ENABLE_AUTOUPDATE  "Enable Auto-updater"                                                 OFF)
@@ -103,10 +101,6 @@ if(WINDOWS AND NOT CROSS_COMPILING)
         # Helping Cygwin out again..
         set(WIN64 TRUE)
     endif()
-elseif(FREEBSD)
-    include(cmake/toolchain-freebsd.cmake)
-elseif(OPENBSD OR NETBSD)
-    include(cmake/toolchain-openbsd.cmake)
 elseif(APPLE)
     include(cmake/macOS.cmake)
 endif()
@@ -184,8 +178,7 @@ add_cflag("-fPIC")
 # Fix GNU stack
 if(CMAKE_C_COMPILER_ID MATCHES "GNU")
     # Have ld strip the symbols from Release and MinSizeRel build types.
-    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Os")
-    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -Os -s")
+    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -s")
 
     if(LINUX)
         # enable Link Time Optimization on gcc (linux only currently)
@@ -220,8 +213,11 @@ elseif(CMAKE_C_COMPILER_ID MATCHES "Clan
     endif()
 
     # Have ld strip the symbols from Release and MinSizeRel build types. (-Oz is clang specific)
-    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Os")
-    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -Oz -s")
+    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -s")
+
+    if(FREEBSD)
+        set(LIBRARIES ${LIBRARIES} "cxxrt")
+    endif()
 
     if(NOT ENABLE_ASAN)
         if(NOT APPLE)
@@ -273,11 +269,16 @@ endif()
 
 find_package(libtox REQUIRED)
 include_directories(${LIBTOX_INCLUDE_DIRS})
+set(LIBRARIES ${LIBRARIES} ${LIBTOX_LIBRARIES})
 
 find_package(libsodium REQUIRED)
 include_directories(${LIBSODIUM_INCLUDE_DIRS})
 set(LIBRARIES ${LIBRARIES} ${LIBSODIUM_LIBRARIES})
 
+find_package(libvpx REQUIRED)
+include_directories(${LIBVPX_INCLUDE_DIRS})
+set(LIBRARIES ${LIBRARIES} ${LIBVPX_LIBRARIES})
+
 include_directories(SYSTEM third-party/stb)
 include_directories(SYSTEM third-party/minini/dev)
 include_directories(SYSTEM third-party/qrcodegen/c)
@@ -303,6 +304,9 @@ elseif(APPLE)
     add_definitions("-x objective-c")
     add_subdirectory(src/cocoa)
 elseif(UNIX)
+    find_package(X11 REQUIRED)
+    include_directories(${X11_INCLUDE_DIR})
+
     add_subdirectory(src/xlib)
 
     if(LINUX)
@@ -364,9 +368,7 @@ target_link_libraries(utox
     utoxAV
     utoxNATIVE
     utoxUI
-    ${LIBTOX_LIBRARIES}
     ${LIBRARIES}
-    vpx
     pthread
     m
 )
@@ -402,7 +404,7 @@ include(CPack)
 
 if(ENABLE_TESTS)
   if(UNIX)
-    # Tests currently only run on Linux and macOS.
+    # Tests currently only run on Unix-like OSes.
     enable_testing()
     add_subdirectory(tests)
   endif()
@@ -423,9 +425,12 @@ message("- Auto Updater:            ${EN
 message("- uTox Static:             ${UTOX_STATIC}")
 message("- Toxcore Static:          ${TOXCORE_STATIC}")
 message("-- Platform Options --------------")
-message("- Windows Legacy:          ${WIN_XP_LEGACY}")
-message("- Enable DBus:             ${ENABLE_DBUS}")
-message("- Enable Tests             ${ENABLE_TESTS}")
+if(WINDOWS)
+    message("- Windows Legacy:          ${WIN_XP_LEGACY}")
+else()
+    message("- Enable DBus:             ${ENABLE_DBUS}")
+    message("- Enable Tests             ${ENABLE_TESTS}")
+endif()
 
 message("* CMake system is '${CMAKE_SYSTEM_NAME}'")
 message("* CMake build type is '${CMAKE_BUILD_TYPE}'")


[FILE:519:patches/patch-src_av_CMakeLists.txt]
diff --git src/av/CMakeLists.txt src/av/CMakeLists.txt
index 44bc42d1..ce49a97a 100644
--- src/av/CMakeLists.txt
+++ src/av/CMakeLists.txt
@@ -18,7 +18,9 @@ else()
     find_package(libopus REQUIRED)
     include_directories(${LIBOPUS_INCLUDE_DIRS})
     target_link_libraries(utoxAV ${LIBOPUS_LIBRARIES})
-    target_link_libraries(utoxAV openal)
+    find_package(OpenAL REQUIRED)
+    include_directories(${OPENAL_INCLUDE_DIR})
+    target_link_libraries(utoxAV ${OPENAL_LIBRARY})
 endif()
 
 if(ENABLE_FILTERAUDIO)


[FILE:1613:patches/patch-src_xlib_CMakeLists.txt]
diff --git src/xlib/CMakeLists.txt src/xlib/CMakeLists.txt
index 959294cf..2cf3ece3 100644
--- src/xlib/CMakeLists.txt
+++ src/xlib/CMakeLists.txt
@@ -52,13 +52,21 @@ message("Found Freetype version ${FREETYPE_VERSION_STRING}")
 message("Freetype include: ${FREETYPE_INCLUDE_DIRS}")
 message("Freetype library: ${FREETYPE_LIBRARIES}")
 
-find_package(X11 REQUIRED)
+find_package(libfontconfig REQUIRED)
+include_directories("${LIBFONTCONFIG_INCLUDE_DIRS}")
+message("FontConfig include: ${LIBFONTCONFIG_INCLUDE_DIRS}")
+message("FontConfig library: ${LIBFONTCONFIG_LIBRARIES}")
 
 message("X include:         ${X11_INCLUDE_DIR}")
 message("X library:         ${X11_LIBRARIES}")
 message("Xrender include:   ${X11_Xrender_INCLUDE_PATH}")
 message("Xrender library:   ${X11_Xrender_LIB}")
 
+find_package(libv4lconvert REQUIRED)
+include_directories("${LIBV4LCONVERT_INCLUDE_DIRS}")
+message("V4Lconvert include: ${LIBV4LCONVERT_INCLUDE_DIRS}")
+message("V4Lconvert library: ${LIBV4LCONVERT_LIBRARIES}")
+
 if(ENABLE_DBUS AND DBUS_LIBRARIES)
     message("DBus include:  ${DBUS_INCLUDE_DIRS}")
     message("DBus library:  ${DBUS_LIBRARIES}")
@@ -68,11 +76,12 @@ endif()
 
 target_link_libraries(utoxNATIVE
         icon
-        v4lconvert
+        ${LIBV4LCONVERT_LIBRARIES}
+        ${LIBFONTCONFIG_LIBRARIES}
         ${X11_LIBRARIES}
         ${X11_Xrender_LIB}
-        fontconfig
         ${FREETYPE_LIBRARIES}
+        ${DBUS_LIBRARIES}
         )
 
 if(LINUX OR NETBSD)
@@ -84,7 +93,6 @@ endif()
 if(LINUX)
     target_link_libraries(utoxNATIVE
         dl
-        ${DBUS_LIBRARIES}
         )
 endif()
 


[FILE:2254:patches/patch-src_xlib_main.c]
diff --git src/xlib/main.c src/xlib/main.c
index 6ea90be7..773d22ca 100644
--- src/xlib/main.c
+++ src/xlib/main.c
@@ -92,31 +92,8 @@ void init_ptt(void) {
 
 
 
-#ifdef __linux__
-#include <linux/input.h>
-static bool linux_check_ptt(void) {
-    /* First, we try for direct access to the keyboard. */
-    int ptt_key = KEY_LEFTCTRL; // TODO allow user to change this...
-    if (ptt_keyboard_handle) {
-        /* Nice! we have direct access to the keyboard! */
-        char key_map[KEY_MAX / 8 + 1]; // Create a byte array the size of the number of keys
-        memset(key_map, 0, sizeof(key_map));
-        ioctl(fileno(ptt_keyboard_handle), EVIOCGKEY(sizeof(key_map)), key_map); // Fill the keymap with the current
-                                                                                 // keyboard state
-        int keyb = key_map[ptt_key / 8]; // The key we want (and the seven others around it)
-        int mask = 1 << (ptt_key % 8);   // Put 1 in the same column as our key state
-
-        if (keyb & mask) {
-            LOG_TRACE("XLIB", "PTT key is down" );
-            return true;
-        } else {
-            LOG_TRACE("XLIB", "PTT key is up" );
-            return false;
-        }
-    }
-    /* Okay nope, lets' fallback to xinput... *pouts*
-     * Fall back to Querying the X for the current keymap. */
-    ptt_key       = XKeysymToKeycode(display, XK_Control_L);
+static bool check_ptt(void) {
+    int ptt_key   = XKeysymToKeycode(display, XK_Control_L); // TODO allow user to change this...
     char keys[32] = { 0 };
     /* We need our own connection, so that we don't block the main display... No idea why... */
     if (ptt_display) {
@@ -134,11 +111,6 @@ static bool linux_check_ptt(void) {
                 "keyboard.\nDisable push to talk to suppress this message.\n");
     return false;
 }
-#else
-static bool bsd_check_ptt(void) {
-    return false;
-}
-#endif
 
 bool check_ptt_key(void) {
     if (!settings.push_to_talk) {
@@ -146,11 +118,7 @@ bool check_ptt_key(void) {
         return true; /* If push to talk is disabled, return true. */
     }
 
-#ifdef __linux__
-    return linux_check_ptt();
-#else
-    return bsd_check_ptt();
-#endif
+    return check_ptt();
 }
 
 void exit_ptt(void) {


[FILE:575:patches/patch-src_xlib_v4l.c]
diff --git src/xlib/v4l.c src/xlib/v4l.c
index 3e942a08..d37f19c0 100644
--- src/xlib/v4l.c
+++ src/xlib/v4l.c
@@ -16,9 +16,9 @@
 int utox_v4l_fd = -1;
 
 #include <sys/mman.h>
-#if defined(__linux__) || defined(__FreeBSD__) //FreeBSD will have the proper includes after installing v4l
+#if defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__) // FreeBSD and DragonFlyBSD will have the proper includes after installing v4l_compat
 #include <linux/videodev2.h>
-#else //OpenBSD
+#else // OpenBSD and NetBSD have V4L in base
 #include <sys/videoio.h>
 #endif
 


[FILE:390:patches/patch-tests_CMakeLists.txt]
diff --git tests/CMakeLists.txt tests/CMakeLists.txt
index 6b2ed9cb..f166c100 100644
--- tests/CMakeLists.txt
+++ tests/CMakeLists.txt
@@ -4,6 +4,7 @@ include(CTest)
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
 
 find_package(Check REQUIRED)
+link_directories(${CHECK_LIBRARY_DIRS})
 
 function(make_test name)
     add_executable(test_${name} test_${name}.c)


[FILE:906:patches/patch-third-party_minini_dev_minIni.c]
--- third-party/minini/dev/minIni.c.orig	2018-10-03 23:26:53 UTC
+++ third-party/minini/dev/minIni.c
@@ -71,7 +71,7 @@
   #pragma warning(disable: 4996)	/* for Microsoft Visual C/C++ */
 #endif
 #if !defined strnicmp && !defined PORTABLE_STRNICMP
-  #if defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__ || defined __APPLE__
+  #if defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__ || defined __APPLE__ || defined __DragonFly__ || defined __NetBSD__
     #define strnicmp  strncasecmp
   #endif
 #endif
@@ -80,7 +80,7 @@
 #endif
 
 #if !defined INI_LINETERM
-  #if defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__ || defined __APPLE__
+  #if defined __LINUX__ || defined __FreeBSD__ || defined __OpenBSD__ || defined __APPLE__ || defined __DragonFly__ || defined __NetBSD__
     #define INI_LINETERM    __T("\n")
   #else
     #define INI_LINETERM    __T("\r\n")


[FILE:1205:files/Findlibfontconfig.cmake]
# - Try to find FontConfig
# Once done this will define
#  LIBFONTCONFIG_FOUND - System has FontConfig
#  LIBFONTCONFIG_INCLUDE_DIRS - The FontConfig include directories
#  LIBFONTCONFIG_LIBRARIES - The libraries needed to use FontConfig
#  LIBFONTCONFIG_DEFINITIONS - Compiler switches required for using FontConfig

find_package(PkgConfig)

pkg_check_modules(PKG_LIBFONTCONFIG QUIET libfontconfig)
set(LIBFONTCONFIG_DEFINITIONS ${PKG_LIBFONTCONFIG_CFLAGS_OTHER})

find_path(LIBFONTCONFIG_INCLUDE_DIR fontconfig/fontconfig.h HINTS
    ${PKG_LIBFONTCONFIG_INCLUDEDIR}
    ${PKG_LIBFONTCONFIG_INCLUDE_DIRS}
)

find_library(LIBFONTCONFIG_LIBRARY NAMES fontconfig HINTS
    ${PKG_LIBFONTCONFIG_LIBDIR}
    ${PKG_LIBFONTCONFIG_LIBRARY_DIRS}
)

include(FindPackageHandleStandardArgs)
# Handle the QUIETLY and REQUIRED arguments and set LIBFONTCONFIG_FOUND to TRUE
# if all listed variables are TRUE.
find_package_handle_standard_args(
    libfontconfig
    DEFAULT_MSG
    LIBFONTCONFIG_LIBRARY
    LIBFONTCONFIG_INCLUDE_DIR
)

mark_as_advanced(LIBFONTCONFIG_INCLUDE_DIR LIBFONTCONFIG_LIBRARY)

set(LIBFONTCONFIG_LIBRARIES ${LIBFONTCONFIG_LIBRARY})
set(LIBFONTCONFIG_INCLUDE_DIRS ${LIBFONTCONFIG_INCLUDE_DIR})


[FILE:1197:files/Findlibv4lconvert.cmake]
# - Try to find V4Lconvert
# Once done this will define
#  LIBV4LCONVERT_FOUND - System has V4Lconvert
#  LIBV4LCONVERT_INCLUDE_DIRS - The V4Lconvert include directories
#  LIBV4LCONVERT_LIBRARIES - The libraries needed to use V4Lconvert
#  LIBV4LCONVERT_DEFINITIONS - Compiler switches required for using V4Lconvert

find_package(PkgConfig)

pkg_check_modules(PKG_LIBV4LCONVERT QUIET libv4lconvert)
set(LIBV4LCONVERT_DEFINITIONS ${PKG_LIBV4LCONVERT_CFLAGS_OTHER})

find_path(LIBV4LCONVERT_INCLUDE_DIR libv4lconvert.h HINTS
    ${PKG_LIBV4LCONVERT_INCLUDEDIR}
    ${PKG_LIBV4LCONVERT_INCLUDE_DIRS}
)

find_library(LIBV4LCONVERT_LIBRARY NAMES v4lconvert HINTS
    ${PKG_LIBV4LCONVERT_LIBDIR}
    ${PKG_LIBV4LCONVERT_LIBRARY_DIRS}
)

include(FindPackageHandleStandardArgs)
# Handle the QUIETLY and REQUIRED arguments and set LIBV4LCONVERT_FOUND to TRUE
# if all listed variables are TRUE.
find_package_handle_standard_args(
    libv4lconvert
    DEFAULT_MSG
    LIBV4LCONVERT_LIBRARY
    LIBV4LCONVERT_INCLUDE_DIR
)

mark_as_advanced(LIBV4LCONVERT_INCLUDE_DIR LIBV4LCONVERT_LIBRARY)

set(LIBV4LCONVERT_LIBRARIES ${LIBV4LCONVERT_LIBRARY})
set(LIBV4LCONVERT_INCLUDE_DIRS ${LIBV4LCONVERT_INCLUDE_DIR})


[FILE:987:files/Findlibvpx.cmake]
# - Try to find VPX
# Once done this will define
#  LIBVPX_FOUND - System has VPX
#  LIBVPX_INCLUDE_DIRS - The VPX include directories
#  LIBVPX_LIBRARIES - The libraries needed to use VPX
#  LIBVPX_DEFINITIONS - Compiler switches required for using VPX

find_package(PkgConfig)

pkg_check_modules(PKG_LIBVPX QUIET libvpx)
set(LIBVPX_DEFINITIONS ${PKG_LIBVPX_CFLAGS_OTHER})

find_path(LIBVPX_INCLUDE_DIR vpx/vpx_codec.h HINTS
    ${PKG_LIBVPX_INCLUDEDIR}
    ${PKG_LIBVPX_INCLUDE_DIRS}
)

find_library(LIBVPX_LIBRARY NAMES vpx HINTS
    ${PKG_LIBVPX_LIBDIR}
    ${PKG_LIBVPX_LIBRARY_DIRS}
)

include(FindPackageHandleStandardArgs)
# Handle the QUIETLY and REQUIRED arguments and set LIBVPX_FOUND to TRUE
# if all listed variables are TRUE.
find_package_handle_standard_args(
    libvpx
    DEFAULT_MSG
    LIBVPX_LIBRARY
    LIBVPX_INCLUDE_DIR
)

mark_as_advanced(LIBVPX_INCLUDE_DIR LIBVPX_LIBRARY)

set(LIBVPX_LIBRARIES ${LIBVPX_LIBRARY})
set(LIBVPX_INCLUDE_DIRS ${LIBVPX_INCLUDE_DIR})

