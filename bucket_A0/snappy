# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		snappy
VERSION=		1.1.9
KEYWORDS=		archivers
VARIANTS=		standard
SDESC[standard]=	Fast compressor/decompressor library
HOMEPAGE=		http://google.github.io/snappy/
CONTACT=		Leonid_Bobrov[goleo@disroot.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/google:snappy:1.1.9
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			c++:single cclibs:single cmake

LICENSE=		BSD3CLAUSE:single
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		archivers/snappy

SOVERSION=		1.1.9

CMAKE_ARGS=		-DBUILD_SHARED_LIBS:BOOL=ON
			-DSNAPPY_BUILD_TESTS:BOOL=OFF
			-DSNAPPY_BUILD_BENCHMARKS:BOOL=OFF
			-DSNAPPY_REQUIRE_AVX:BOOL=ON
			-DSNAPPY_REQUIRE_AVX2:BOOL=ON

post-install:
	${STRIP_CMD} ${STAGEDIR}${LOCALBASE}/lib/libsnappy.so.1.1.9

[FILE:388:descriptions/desc.single]
Snappy is a compression/decompression library. It does not aim for maximum
compression, or compatibility with any other compression library; instead,
it aims for very high speeds and reasonable compression. For instance,
compared to the fastest mode of zlib, Snappy is an order of magnitude
faster for most inputs, but the resulting compressed files are anywhere
from 20% to 100% bigger.


[FILE:105:distinfo]
75c1fbb3d618dd3a0483bff0e26d0a92b495bbe5059c8b4f1c962b478b6e06e7      1102382 google-snappy-1.1.9.tar.gz


[FILE:263:manifests/plist.single]
include/
 snappy-c.h
 snappy-sinksource.h
 snappy-stubs-public.h
 snappy.h
lib/
 libsnappy.so
 libsnappy.so.%%SOMAJOR%%
 libsnappy.so.%%SOVERSION%%
lib/cmake/Snappy/
 SnappyConfig.cmake
 SnappyConfigVersion.cmake
 SnappyTargets-release.cmake
 SnappyTargets.cmake


[FILE:464:patches/patch-snappy.cc]
--- snappy.cc.orig	2021-05-04 22:53:34 UTC
+++ snappy.cc
@@ -1014,7 +1014,7 @@ void MemMove(ptrdiff_t dst, const void*
 }
 
 SNAPPY_ATTRIBUTE_ALWAYS_INLINE
-size_t AdvanceToNextTag(const uint8_t** ip_p, size_t* tag) {
+inline size_t AdvanceToNextTag(const uint8_t** ip_p, size_t* tag) {
   const uint8_t*& ip = *ip_p;
   // This section is crucial for the throughput of the decompression loop.
   // The latency of an iteration is fundamentally constrained by the

