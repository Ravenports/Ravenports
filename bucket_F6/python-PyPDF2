# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-PyPDF2
VERSION=		2.11.0
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Pure Python PDF Toolkit (3.10)
SDESC[py39]=		Pure Python PDF Toolkit (3.9)
HOMEPAGE=		none
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/c4/51/c044aeb6242a3e980dbd33dfc130d178e91d3f95b4c36bf72ab2fd0d2df9
DISTFILE[1]=		PyPDF2-2.11.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

USES=			cpe

DISTNAME=		PyPDF2-2.11.0.dist-info

CPE_PRODUCT=		pypdf2
CPE_VENDOR=		pypdf2_project
GENERATED=		yes

[PY39].RUN_DEPENDS_ON=			python-typing-extensions:single:py39
[PY39].USES_ON=				python:py39,wheel

[PY310].USES_ON=			python:py310,wheel

[FILE:2472:descriptions/desc.single]
[PyPI version]
[Python Support]
[![]](https://pypdf2.readthedocs.io/en/latest/)
[GitHub last commit]
[codecov]

# PyPDF2

PyPDF2 is a free and open-source pure-python PDF library capable of
splitting,
[merging],
[cropping, and transforming]
the pages of PDF files. It can also add
custom data, viewing options, and
[passwords]
to PDF files. PyPDF2 can
[retrieve text]
and
[metadata]
from PDFs as well.

## Installation

You can install PyPDF2 via pip:

`
pip install PyPDF2
`

If you plan to use PyPDF2 for encrypting or decrypting PDFs that use AES,
you
will need to install some extra dependencies. Encryption using RC4 is
supported
using the regular installation.

```
pip install PyPDF2[crypto]
```

## Usage

```python
from PyPDF2 import PdfReader

reader = PdfReader("example.pdf")
number_of_pages = len(reader.pages)
page = reader.pages[0]
text = page.extract_text()
```

PyPDF2 can do a lot more, e.g. splitting, merging, reading and creating
annotations, decrypting and encrypting, and more.

Please see [the documentation]
for more usage examples!

A lot of questions are asked and answered
[on StackOverflow].

## Contributions

Maintaining PyPDF2 is a collaborative effort. You can support PyPDF2 by
writing
documentation, helping to narrow down issues, and adding code.

### Q&A

The experience PyPDF2 users have covers the whole range from beginners who
want to make their live easier to experts who developed software before PDF
existed. You can contribute to the PyPDF2 community by answering questions
on [StackOverflow],
helping in [discussions],
and asking users who report issues for [MCVE]'s (Code + example PDF!).

### Issues

A good bug ticket includes a MCVE - a minimal complete verifiable example.
For PyPDF2, this means that you must upload a PDF that causes the bug to
occur
as well as the code you're executing with all of the output. Use
`print(PyPDF2.__version__)` to tell us which version you're using.

### Code

All code contributions are welcome, but smaller ones have a better chance
to
get included in a timely manner. Adding unit tests for new features or test
cases for bugs you've fixed help us to ensure that the Pull Request (PR) is
fine.

PyPDF2 includes a test suite which can be executed with `pytest`:

```bash
$ pytest
===================== test session starts =====================
platform linux -- Python 3.6.15, pytest-7.0.1, pluggy-1.0.0
rootdir: /home/moose/Github/Martin/PyPDF2
plugins: cov-3.0.0
collected 233 items



[FILE:109:distinfo]
5e4cf55d1bc7afe164915848bdf3568fa56ad644cb24954e31a928efaa4760c4       220224 PyPDF2-2.11.0-py3-none-any.whl

