# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-PyPDF2
VERSION=		1.27.9
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Pure Python PDF Toolkit (3.10)
SDESC[py39]=		Pure Python PDF Toolkit (3.9)
HOMEPAGE=		none
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/1a/09/7c598522e07057b28c7bd2afc1590d4b1cf5d4b18324143bc17119348d91
DISTFILE[1]=		PyPDF2-1.27.9-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		PyPDF2-1.27.9.dist-info

GENERATED=		yes

[PY39].USES_ON=				python:py39,wheel

[PY310].USES_ON=			python:py310,wheel

[FILE:2912:descriptions/desc.single]
[PyPI version]
[Python Support]
[![]](https://pypdf2.readthedocs.io/en/latest/)
[GitHub last commit]
[codecov]

# PyPDF2

PyPDF2 is a free and open-source pure-python PDF library capable of
splitting,
[merging],
[cropping, and transforming]
the pages of PDF files. It can also add
custom data, viewing options, and
[passwords]
to PDF files. PyPDF2 can
[retrieve text]
and
[metadata]
from PDFs as well.

## Installation

You can install PyPDF2 via pip:

`
pip install PyPDF2
`

## Usage

```python
from PyPDF2 import PdfFileReader

reader = PdfFileReader("example.pdf")
number_of_pages = reader.numPages
page = reader.pages[0]
text = page.extractText()
```

PyPDF2 can do a lot more, e.g. splitting, merging, reading and creating
annotations, decrypting and encrypting, and more.

Please see [the documentation]
and [`Scripts`] for
more usage examples!

A lot of questions are asked and answered
[on StackOverflow].

## Contributions

Maintaining PyPDF2 is a collaborative effort. You can support PyPDF2 by
writing
documentation, helping to narrow down issues, and adding code.

### Q&A

The experience PyPDF2 users have covers the whole range from beginners who
want to make their live easier to experts who developed software before PDF
existed. You can contribute to the PyPDF2 community by answering questions
on [StackOverflow],
helping in [discussions],
and asking users who report issues for [MCVE]'s (Code + example PDF!).

### Issues

A good bug ticket includes a MCVE - a minimal complete verifiable example.
For PyPDF2, this means that you must upload a PDF that causes the bug to
occur
as well as the code you're executing with all of the output. Use
`print(PyPDF2.__version__)` to tell us which version you're using.

### Code

All code contributions are welcome, but smaller ones have a better chance
to
get included in a timely manner. Adding unit tests for new features or test
cases for bugs you've fixed help us to ensure that the Pull Request (PR) is
fine.

PyPDF2 includes a test suite which can be executed with `pytest`:

```bash
$ pytest
========================= test session starts =========================
platform linux -- Python 3.6.15, pytest-7.0.1, pluggy-1.0.0
rootdir: /home/moose/Github/Martin/PyPDF2
plugins: cov-3.0.0
collected 57 items

Tests/test_basic_features.py ..                                 [  3%]
Tests/test_merger.py .                                          [  5%]
Tests/test_page.py .                                            [  7%]
Tests/test_pagerange.py .......                                 [ 19%]
Tests/test_reader.py ..........                                 [ 36%]
Tests/test_utils.py ......................                      [ 75%]
Tests/test_workflows.py ..........                              [ 92%]
Tests/test_writer.py ..                                         [ 96%]
Tests/test_xmp.py ..                                            [100%]


[FILE:109:distinfo]
5e29ffaf2efcfb77c25206e3b8df517a18af84e64ebe1b3a93abac8d01176374        71142 PyPDF2-1.27.9-py3-none-any.whl

