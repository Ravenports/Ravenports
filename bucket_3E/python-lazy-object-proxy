# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-lazy-object-proxy
VERSION=		1.7.1
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Fast and thorough lazy object proxy (3.10)
SDESC[py39]=		Fast and thorough lazy object proxy (3.9)
HOMEPAGE=		https://github.com/ionelmc/python-lazy-object-proxy
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/l/lazy-object-proxy
DISTFILE[1]=		lazy-object-proxy-1.7.1.tar.gz:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

BUILD_DEPENDS=		python-pip:single:python_used

DISTNAME=		lazy-object-proxy-1.7.1

GENERATED=		yes

[PY39].BUILDRUN_DEPENDS_ON=		python-setuptools-scm:single:py39
[PY39].USES_ON=				python:py39,sutools

[PY310].BUILDRUN_DEPENDS_ON=		python-setuptools-scm:single:py310
[PY310].USES_ON=			python:py310,sutools

[FILE:2518:descriptions/desc.single]
========
Overview
========

A fast and thorough lazy object proxy.

* Free software: BSD 2-Clause License

Note that this is based on `wrapt`_'s ObjectProxy with one big change: it
calls a function the first time the proxy object is
used, while `wrapt.ObjectProxy` just forwards the method calls to the
target object.

In other words, you use `lazy-object-proxy` when you only have the object
way later and you use `wrapt.ObjectProxy` when you
want to override few methods (by subclassing) and forward everything else
to the target object.

Example::

    import lazy_object_proxy

    def expensive_func():
        from time import sleep
        print('starting calculation')
        # just as example for a very slow computation
        sleep(2)
        print('finished calculation')
        # return the result of the calculation
        return 10

    obj = lazy_object_proxy.Proxy(expensive_func)
    # function is called only when object is actually used
    print(obj)  # now expensive_func is called

    print(obj)  # the result without calling the expensive_func

Installation
============

::

    pip install lazy-object-proxy

Documentation
=============

https://python-lazy-object-proxy.readthedocs.io/

Development
===========

To run all the tests run::

    tox

Acknowledgements
================

This project is based on some code from `wrapt`_ as you can see in the git
history.

.. _wrapt: https://github.com/GrahamDumpleton/wrapt

Changelog
=========

1.7.1 (2021-12-15)
------------------

* Removed most of the Python 2 support code and fixed python_requires to
require at least Python 3.6.

  Note that 1.7.0 has been yanked because it could not install on Python
2.7.
  Installing lazy-object-proxy on Python 2.7 should automatically fall back
to the 1.6.0 release now.

1.7.0 (2021-12-15)
------------------

* Switched CI to GitHub Actions, this has a couple consequences:

  * Support for Python 2.7 is dropped. You can still install it there but
it's not tested anymore and
    Python 2 specific handling will be removed at some point.
  * Linux wheels are now provided in `musllinux` and `manylinux2014`
variants.

* Fixed __index__ to fallback to int if the wrapped object doesn't have an
__index__ method.
  This prevents situations where code using a proxy would otherwise likely
just call int had the object
  not have an __index__ method.

1.6.0 (2021-03-22)
------------------

* Added support for async special methods (__aiter__, __anext__,
  __await__, __aenter__, __aexit__).


[FILE:109:distinfo]
d609c75b986def706743cdebe5e47553f4a5a1da9c5ff66d76013ef396b5a8a4        41995 lazy-object-proxy-1.7.1.tar.gz


[FILE:184:patches/patch-setup.cfg]
--- setup.cfg.orig	2021-03-22 20:53:25 UTC
+++ setup.cfg
@@ -1,6 +1,6 @@
 [options]
 setup_requires = 
-	setuptools_scm>=3.3.1,<6.0
+	setuptools_scm
 
 [flake8]
 max-line-length = 140

