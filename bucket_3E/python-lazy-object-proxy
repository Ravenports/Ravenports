# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-lazy-object-proxy
VERSION=		1.9.0
KEYWORDS=		python
VARIANTS=		py310 py311
SDESC[py310]=		Fast and thorough lazy object proxy (3.10)
SDESC[py311]=		Fast and thorough lazy object proxy (3.11)
HOMEPAGE=		https://github.com/ionelmc/python-lazy-object-proxy
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/l/lazy-object-proxy
DISTFILE[1]=		lazy-object-proxy-1.9.0.tar.gz:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py311]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[py311]=		PY310=OFF PY311=ON

BUILD_DEPENDS=		python-pip:single:python_used

DISTNAME=		lazy-object-proxy-1.9.0

GENERATED=		yes

[PY310].BUILDRUN_DEPENDS_ON=		python-setuptools-scm:single:py310
[PY310].USES_ON=			python:py310,sutools

[PY311].BUILDRUN_DEPENDS_ON=		python-setuptools-scm:single:py311
[PY311].USES_ON=			python:py311,sutools

[FILE:2585:descriptions/desc.single]
========
Overview
========

A fast and thorough lazy object proxy.

* Free software: BSD 2-Clause License

Note that this is based on `wrapt`_'s ObjectProxy with one big change: it
calls a function the first time the proxy object is
used, while `wrapt.ObjectProxy` just forwards the method calls to the
target object.

In other words, you use `lazy-object-proxy` when you only have the object
way later and you use `wrapt.ObjectProxy` when you
want to override few methods (by subclassing) and forward everything else
to the target object.

Example::

    import lazy_object_proxy

    def expensive_func():
        from time import sleep
        print('starting calculation')
        # just as example for a very slow computation
        sleep(2)
        print('finished calculation')
        # return the result of the calculation
        return 10

    obj = lazy_object_proxy.Proxy(expensive_func)
    # function is called only when object is actually used
    print(obj)  # now expensive_func is called

    print(obj)  # the result without calling the expensive_func

Installation
============

::

    pip install lazy-object-proxy

Documentation
=============

https://python-lazy-object-proxy.readthedocs.io/

Development
===========

To run all the tests run::

    tox

Acknowledgements
================

This project is based on some code from `wrapt`_ as you can see in the git
history.

.. _wrapt: https://github.com/GrahamDumpleton/wrapt

Changelog
=========

1.9.0 (2023-01-04)
------------------

* Added support for matrix multiplication operator (``@``).
* Should have all the wheels now (including the manylinux ones).
* Bumped minimum version requirements for setuptools and setuptools-scm.
* Switched the default pure python fallback implementation to the "simple"
one (when you from lazy_object_proxy import Proxy
  and the C extension is not available).
  Previously the "slots" implementation was used but as it turns out it is
slower on Python 3.

1.8.0 (2022-10-26)
------------------

* Cleaned up use of cPickle. Contributed by Sandro Tosi in `#62
<https://github.com/ionelmc/python-lazy-object-proxy/pull/62>`_.
* Cleaned up more dead Python 2 code.
* Added Python 3.11 wheels.
* Dropped support for Python 3.6.

1.7.1 (2021-12-15)
------------------

* Removed most of the Python 2 support code and fixed python_requires to
require at least Python 3.6.

  Note that 1.7.0 has been yanked because it could not install on Python
2.7.
  Installing lazy-object-proxy on Python 2.7 should automatically fall back
to the 1.6.0 release now.

1.7.0 (2021-12-15)


[FILE:109:distinfo]
659fb5809fa4629b8a1ac5106f669cfc7bef26fbb389dda53b3e010d1ac4ebae        42830 lazy-object-proxy-1.9.0.tar.gz

