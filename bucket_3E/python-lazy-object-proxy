# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-lazy-object-proxy
VERSION=		1.11.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Fast and thorough lazy object proxy (3.12)
SDESC[v13]=		Fast and thorough lazy object proxy (3.13)
HOMEPAGE=		https://github.com/ionelmc/python-lazy-object-proxy
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/e7/1e/fb441c07b6662ec1fc92b249225ba6e6e5221b05623cb0131d082f782edc
DISTFILE[1]=		lazy_object_proxy-1.11.0-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

BUILD_DEPENDS=		python-pip:single:python_used
			python-setuptools-scm:single:python_used

DISTNAME=		lazy_object_proxy-1.11.0.dist-info

GENERATED=		yes

[PY312].USES_ON=			python:v12,wheel

[PY313].USES_ON=			python:v13,wheel

[FILE:2489:descriptions/desc.single]
========
Overview
========

A fast and thorough lazy object proxy.

* Free software: BSD 2-Clause License

Note that this is based on `wrapt`_'s ObjectProxy with one big change: it
calls a function the first time the proxy object is
used, while `wrapt.ObjectProxy` just forwards the method calls to the
target object.

In other words, you use `lazy-object-proxy` when you only have the object
way later and you use `wrapt.ObjectProxy` when you
want to override few methods (by subclassing) and forward everything else
to the target object.

Example::

    import lazy_object_proxy

    def expensive_func():
        from time import sleep
        print('starting calculation')
        # just as example for a very slow computation
        sleep(2)
        print('finished calculation')
        # return the result of the calculation
        return 10

    obj = lazy_object_proxy.Proxy(expensive_func)
    # function is called only when object is actually used
    print(obj)  # now expensive_func is called

    print(obj)  # the result without calling the expensive_func

Installation
============

::

    pip install lazy-object-proxy

You can also install the in-development version with::

    pip install
https://github.com/ionelmc/python-lazy-object-proxy/archive/master.zip

Documentation
=============

https://python-lazy-object-proxy.readthedocs.io/

Development
===========

To run all the tests run::

    tox

Acknowledgements
================

This project is based on some code from `wrapt`_ as you can see in the git
history.

.. _wrapt: https://github.com/GrahamDumpleton/wrapt

Changelog
=========

1.11.0 (2025-04-16)
-------------------

* Added Python 3.13 wheels.
* Added support for __format__.
* Dropped support for Python 3.8.

1.10.0 (2023-12-15)
-------------------

* Added Python 3.12 wheels.
* Dropped support for Python 3.7.
* Applied some reformatting and lint fixes using ruff to the codebase
(mostly more Python 2 leftover cleanups).

1.9.0 (2023-01-04)
------------------

* Added support for matrix multiplication operator (``@``).
* Should have all the wheels now (including the manylinux ones).
* Bumped minimum version requirements for setuptools and setuptools-scm.
* Switched the default pure python fallback implementation to the "simple"
one (when you from lazy_object_proxy import Proxy
  and the C extension is not available).
  Previously the "slots" implementation was used but as it turns out it is
slower on Python 3.

1.8.0 (2022-10-26)


[FILE:131:distinfo]
a56a5093d433341ff7da0e89f9b486031ccd222ec8e52ec84d0ec1cdc819674b        16635 python-src/lazy_object_proxy-1.11.0-py3-none-any.whl

