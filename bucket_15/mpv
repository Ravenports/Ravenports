# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		mpv
VERSION=		0.27.2
KEYWORDS=		multimedia
VARIANTS=		standard
SDESC[standard]=	Advanced general-purpose multimedia player
HOMEPAGE=		https://mpv.io/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main waf
SITES[main]=		GITHUB/mpv-player:mpv:v0.27.2
SITES[waf]=		GITHUB/waf-project:waf:waf-1.9.8
DISTFILE[1]=		generated:main
DISTFILE[2]=		generated:waf
DF_INDEX=		1 2
SPKGS[standard]=	complete
			primary
			examples
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		python-docutils:single:python_default
			video4linux:headers:standard
BUILDRUN_DEPENDS=	ffmpeg:primary:standard
			libarchive:single:standard
			libass:single:standard
			libdvdnav:single:standard
			libdvdread:single:standard
			libvdpau:single:standard
			libva:single:standard
			uchardet:single:standard
			video4linux:primary:standard
RUN_DEPENDS=		youtube-dl:single:standard

USES=			desktop-utils iconv jpeg lua:5.2 pkgconfig
			perl:build python:build gnome-icons
SDL_COMPONENTS=		sdl2
XORG_COMPONENTS=	x11 xext xinerama xrandr xscrnsaver xv xxf86vm

FPC_EQUIVALENT=		multimedia/mpv

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--prefix="{{PREFIX}}"
			--docdir="{{STD_EXAMPLESDIR}}"
			--htmldir="{{STD_DOCDIR}}/html"
			--mandir="{{MANPREFIX}}/man"
			--lua={{LUA_VER_STR}}fbsd
			--enable-libmpv-shared
			--enable-libarchive
			--enable-html
			--enable-dvdnav
			--enable-dvdread
			--enable-sdl2
			--enable-tv
			--enable-dvbin
			--enable-zsh-comp
			--disable-debug-build
			--disable-optimize
			--disable-pdf
			--disable-rubberband
			--disable-vaapi-wayland
			--disable-vapoursynth
			--disable-vapoursynth-lazy
			--disable-wayland
			--disable-alsa
			--disable-caca
			--disable-jack
			--disable-lcms2
			--disable-libbluray
			--disable-sndio
			-j{{MAKE_JOBS_NUMBER}}
CONFIGURE_ENV=		BIN_PYTHON="{{PYTHON_CMD}}"
			BIN_PERL="{{PERL}}"

BUILD_TARGET=		build
DESTDIRNAME=		--destdir

post-patch:
	${FIND} ${WRKSRC}/DOCS/man -name '*.rst' | \
		${XARGS} ${REINPLACE_CMD} -e 's|/usr/local|${PREFIX}|g'

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/mpv
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libmpv.so

[FILE:364:descriptions/desc.primary]
Mpv is based on the MPlayer and mplayer2 projects which it greatly improves.
It supports a wide variety of video file formats, audio and video codecs, and
subtitle types. Special input URL types are available to read input from
a variety of sources other than disk files. Depending on platform, a variety of
different video and audio output methods are supported.


[FILE:218:distinfo]
2ad104d83fd3b2b9457716615acad57e479fd1537b8fc5e37bfe9065359b50be      2957191 mpv-player-mpv-0.27.2.tar.gz
b487efec83ea33cf8df0495cc5730e245f8dc8784e68aebf3dcf07c6712c5913       628874 waf-project-waf-waf-1.9.8.tar.gz


[FILE:465:manifests/plist.primary]
bin/mpv
etc/mpv/encoding-profiles.conf
include/mpv/
 client.h
 opengl_cb.h
 qthelper.hpp
 stream_cb.h
lib/
 libmpv.so
 libmpv.so.1
 libmpv.so.1.25.0
lib/pkgconfig/mpv.pc
share/man/man1/mpv.1.gz
share/applications/mpv.desktop
share/icons/hicolor/16x16/apps/mpv.png
share/icons/hicolor/32x32/apps/mpv.png
share/icons/hicolor/64x64/apps/mpv.png
share/icons/hicolor/scalable/apps/mpv.svg
share/icons/hicolor/symbolic/apps/mpv-symbolic.svg
share/zsh/site-functions/_mpv


[FILE:89:manifests/plist.examples]
share/examples/mpv/
 input.conf
 mplayer-input.conf
 mpv.conf
 restore-old-bindings.conf


[FILE:28:manifests/plist.docs]
share/doc/mpv/html/mpv.html


[FILE:3093:patches/patch-2ecf240]
From 2ecf240b1cd20875991a5b18efafbe799864ff7f Mon Sep 17 00:00:00 2001
From: Mark Thompson <sw@jkqxz.net>
Date: Mon, 9 Oct 2017 20:10:26 +0100
Subject: [PATCH] vaapi: Use libva2 message callbacks

They are no longer global, so they work vaguely sensibly.
---
 video/vaapi.c | 32 +++++++++++++++++++++++++++++---
 1 file changed, 29 insertions(+), 3 deletions(-)

diff --git video/vaapi.c video/vaapi.c
index 6bedbbaa18..3b1cb9cc41 100644
--- video/vaapi.c
+++ video/vaapi.c
@@ -40,9 +40,27 @@ int va_get_colorspace_flag(enum mp_csp csp)
     return 0;
 }
 
-// VA message callbacks are global and do not have a context parameter, so it's
-// impossible to know from which VADisplay they originate. Try to route them
-// to existing mpv/libmpv instances within this process.
+#if VA_CHECK_VERSION(1, 0, 0)
+static void va_message_callback(void *context, const char *msg, int mp_level)
+{
+    struct mp_vaapi_ctx *res = context;
+    mp_msg(res->log, mp_level, "libva: %s", msg);
+}
+
+static void va_error_callback(void *context, const char *msg)
+{
+    va_message_callback(context, msg, MSGL_ERR);
+}
+
+static void va_info_callback(void *context, const char *msg)
+{
+    va_message_callback(context, msg, MSGL_V);
+}
+#else
+// Pre-libva2 VA message callbacks are global and do not have a context
+// parameter, so it's impossible to know from which VADisplay they
+// originate.  Try to route them to existing mpv/libmpv instances within
+// this process.
 static pthread_mutex_t va_log_mutex = PTHREAD_MUTEX_INITIALIZER;
 static struct mp_vaapi_ctx **va_mpv_clients;
 static int num_va_mpv_clients;
@@ -77,6 +95,7 @@ static void va_info_callback(const char *msg)
 {
     va_message_callback(msg, MSGL_V);
 }
+#endif
 
 static void open_lavu_vaapi_device(struct mp_vaapi_ctx *ctx)
 {
@@ -108,6 +127,10 @@ struct mp_vaapi_ctx *va_initialize(VADisplay *display, struct mp_log *plog,
         },
     };
 
+#if VA_CHECK_VERSION(1, 0, 0)
+    vaSetErrorCallback(display, va_error_callback, res);
+    vaSetInfoCallback(display,  va_info_callback,  res);
+#else
     pthread_mutex_lock(&va_log_mutex);
     MP_TARRAY_APPEND(NULL, va_mpv_clients, num_va_mpv_clients, res);
     pthread_mutex_unlock(&va_log_mutex);
@@ -118,6 +141,7 @@ struct mp_vaapi_ctx *va_initialize(VADisplay *display, struct mp_log *plog,
     vaSetErrorCallback(va_error_callback);
     vaSetInfoCallback(va_info_callback);
 #endif
+#endif
 
     int major, minor;
     int status = vaInitialize(display, &major, &minor);
@@ -154,6 +178,7 @@ void va_destroy(struct mp_vaapi_ctx *ctx)
         if (ctx->destroy_native_ctx)
             ctx->destroy_native_ctx(ctx->native_ctx);
 
+#if !VA_CHECK_VERSION(1, 0, 0)
         pthread_mutex_lock(&va_log_mutex);
         for (int n = 0; n < num_va_mpv_clients; n++) {
             if (va_mpv_clients[n] == ctx) {
@@ -164,6 +189,7 @@ void va_destroy(struct mp_vaapi_ctx *ctx)
         if (num_va_mpv_clients == 0)
             TA_FREEP(&va_mpv_clients); // avoid triggering leak detectors
         pthread_mutex_unlock(&va_log_mutex);
+#endif
 
         talloc_free(ctx);
     }


[FILE:178:files/special.mk]
# Emulate USES=waf
MAKE_CMD=	${PYTHON_CMD} ${WRKDIR}/waf-*/waf-light
CONFIGURE_CMD=	${PYTHON_CMD} ${WRKDIR}/waf-*/waf-light configure
MAKEFILE=
MAKE_FLAGS=
MAKE_ARGS+=	--verbose


[FILE:158:dragonfly/patch-libmpv_mpv.def]
--- libmpv/mpv.def.orig	2017-07-18 19:14:02 UTC
+++ libmpv/mpv.def
@@ -1,3 +1,5 @@
+__progname
+environ
 mpv_client_api_version
 mpv_client_name
 mpv_command


[FILE:158:freebsd/patch-libmpv_mpv.def]
--- libmpv/mpv.def.orig	2017-07-18 19:14:02 UTC
+++ libmpv/mpv.def
@@ -1,3 +1,5 @@
+__progname
+environ
 mpv_client_api_version
 mpv_client_name
 mpv_command

