# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libebml
VERSION=		1.4.4
KEYWORDS=		textproc
VARIANTS=		standard
SDESC[standard]=	Library for Extensible Binary Meta-Language files
HOMEPAGE=		https://matroska-org.github.io/libebml/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://dl.matroska.org/downloads/libebml/
DISTFILE[1]=		libebml-1.4.4.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cpe cmake c++:single

LICENSE=		LGPL21+:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		LGPL21+:{{WRKSRC}}/LICENSE.LGPL
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/src/EbmlVersion.cpp
LICENSE_SCHEME=		solo

CPE_VENDOR=		matroska
FPC_EQUIVALENT=		textproc/libebml

SOVERSION=		5.0.0

CMAKE_ARGS=		-DBUILD_SHARED_LIBS:BOOL=ON

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libebml.so

[FILE:1376:descriptions/desc.single]
Extensible Binary Markup Language (EBML)

EBML was designed to be a simplified binary extension of XML for the
purpose of storing and manipulating data in a hierarchical form with
variable field lengths.

It uses the same paradigms as XML files, meaning that syntax and
semantics are separated. So a generic EBML library could read any format
based on it. The interpretation of data is up to a specific application
that knows how each elements (equivalent of XML tag) has to be handled.

Among all the advantages of XML, there are a few limitations compared to
what XML can achieve:

- There is currently no equivalent to a DTD or Schema to define known
  elements for a document. But we plan on adding such a level.
- No entity can be defined, ie an element that would be replaced by
  another content. We don't plan to add something like this so far.
- No external include of other files (like CSS, images, etc). It could
  be easily added as a "proprietary" element (not defined in the basic
  EBML format).

For the rest, you have all advantages like:

- Upward compatibility when the format is updated. Something rare in
  binary formats, unless you have some unused space in the original
  format.
- Unlimited size of binary data.
- Very size efficient: only space required for a data is written (unless
  you specifically require more space for better updating later).


[FILE:99:distinfo]
82dc5f83356cc9340aee76ed7512210b3a4edf5f346bc9c2c7044f55052687a7        64116 libebml-1.4.4.tar.xz


[FILE:662:manifests/plist.single]
include/ebml/
 Debug.h
 EbmlBinary.h
 EbmlConfig.h
 EbmlContexts.h
 EbmlCrc32.h
 EbmlDate.h
 EbmlDummy.h
 EbmlElement.h
 EbmlEndian.h
 EbmlFloat.h
 EbmlHead.h
 EbmlId.h
 EbmlMaster.h
 EbmlSInteger.h
 EbmlStream.h
 EbmlString.h
 EbmlSubHead.h
 EbmlTypes.h
 EbmlUInteger.h
 EbmlUnicodeString.h
 EbmlVersion.h
 EbmlVoid.h
 IOCallback.h
 MemIOCallback.h
 MemReadIOCallback.h
 SafeReadIOCallback.h
 StdIOCallback.h
 ebml_export.h
include/ebml/c/libebml_t.h
lib/
 libebml.so
 libebml.so.%%SOMAJOR%%
 libebml.so.%%SOVERSION%%
lib/cmake/EBML/
 EBMLConfig.cmake
 EBMLConfigVersion.cmake
 EBMLTargets-%%CMAKE_BUILD_TYPE%%.cmake
 EBMLTargets.cmake
lib/pkgconfig/libebml.pc

