# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		botan
VERSION=		3.6.1
KEYWORDS=		security
VARIANTS=		std
SDESC[std]=		Crypto library written in C++
HOMEPAGE=		https://botan.randombit.net/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/randombit:botan:3.6.1
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			tools
			dev
			man
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		python-Sphinx:single:python_used
			python-docutils:single:python_used
			boost-libraries:dev:std
BUILDRUN_DEPENDS=	boost-libraries:primary:std
EXRUN[tools]=		botan:primary:std

USES=			cpe gmake shebangfix zlib bz2 xz sqlite python

LICENSE=		BSD2CLAUSE:primary
LICENSE_FILE=		BSD2CLAUSE:{{WRKSRC}}/license.txt
LICENSE_SCHEME=		solo

CPE_PRODUCT=		botan
CPE_VENDOR=		botan_project
FPC_EQUIVALENT=		security/botan2
SHEBANG_FILES=		configure.py
			src/python/botan3.py
			src/scripts/install.py

MUST_CONFIGURE=		yes
CONFIGURE_SCRIPT=	configure.py
CONFIGURE_ARGS=		--prefix={{PREFIX}}
			--cc=gcc
			--with-boost
			--with-bzip2
			--with-lzma
			--with-zlib
			--with-sphinx
			--with-sqlite3
			--with-rst2man
			--with-python-versions={{PYTHON_VER}}
			--without-stack-protector

SOVERSION=		6.6.1
PLIST_SUB=		VERSION=3.6.1

VAR_OPSYS[midnightbsd]=	CONFIGURE_ARGS=--os=freebsd

post-install:
	${MV} ${STAGEDIR}${PREFIX}/share/doc/botan-3.6.1 \
		${STAGEDIR}${STD_DOCDIR}
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/botan
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libbotan-3.so

[FILE:662:descriptions/desc.primary]
Botan is a crypto library written in C++. It provides a variety of
cryptographic algorithms, including common ones such as AES, MD5, SHA,
HMAC, RSA, Diffie-Hellman, DSA, and ECDSA, as well as many others that
are more obscure or specialized. It also offers X.509v3 certificates
and CRLs, and PKCS #10 certificate requests. A message processing
system that uses a filter/pipeline metaphor allows for many common
cryptographic tasks to be completed with just a few lines of code.
Assembly optimizations for common CPUs, including x86, x86-64, and
PowerPC, offers further speedups for critical tasks such as SHA-1
hashing and multiple precision integer operations.


[FILE:35:descriptions/desc.tools]
This package contains botan tools.


[FILE:107:distinfo]
a6c4e8dcb6c7f4b9b67e2c8b43069d65b548970ca17847e3b1e031d3ffdd874a     12584898 randombit-botan-3.6.1.tar.gz


[FILE:61:manifests/plist.primary]
lib/
 libbotan-3.so.%%SOMAJOR%%
 libbotan-3.so.%%SOVERSION%%


[FILE:42:manifests/plist.tools]
%%PYTHON_SITELIBDIR%%/botan3.py
bin/botan


[FILE:2508:manifests/plist.dev]
include/botan-3/botan/
 aead.h
 allocator.h
 argon2.h
 argon2fmt.h
 asio_async_ops.h
 asio_compat.h
 asio_context.h
 asio_error.h
 asio_stream.h
 asn1_obj.h
 asn1_print.h
 assert.h
 auto_rng.h
 base32.h
 base58.h
 base64.h
 bcrypt.h
 bcrypt_pbkdf.h
 ber_dec.h
 bigint.h
 block_cipher.h
 buf_comp.h
 build.h
 bzip2.h
 certstor.h
 certstor_flatfile.h
 certstor_sql.h
 certstor_sqlite.h
 certstor_system.h
 chacha_rng.h
 cipher_mode.h
 compiler.h
 compression.h
 concepts.h
 credentials_manager.h
 cryptobox.h
 curve25519.h
 curve_gfp.h
 data_snk.h
 data_src.h
 database.h
 der_enc.h
 dh.h
 dilithium.h
 dl_group.h
 dlies.h
 dsa.h
 ec_apoint.h
 ec_group.h
 ec_point.h
 ec_scalar.h
 ecc_key.h
 ecdh.h
 ecdsa.h
 ecgdsa.h
 ecies.h
 eckcdsa.h
 ed25519.h
 ed448.h
 elgamal.h
 entropy_src.h
 exceptn.h
 fd_unix.h
 ffi.h
 filter.h
 filters.h
 fpe_fe1.h
 frodo_mode.h
 frodokem.h
 gost_3410.h
 hash.h
 hex.h
 hmac_drbg.h
 hss_lms.h
 kdf.h
 kyber.h
 lzma.h
 mac.h
 mceliece.h
 mem_ops.h
 ml_dsa.h
 ml_kem.h
 mutex.h
 nist_keywrap.h
 numthry.h
 ocsp.h
 oids.h
 otp.h
 p11.h
 p11_ecc_key.h
 p11_ecdh.h
 p11_ecdsa.h
 p11_object.h
 p11_randomgenerator.h
 p11_rsa.h
 p11_types.h
 p11_x509.h
 passhash9.h
 pbkdf.h
 pbkdf2.h
 pem.h
 pgp_s2k.h
 pipe.h
 pk_algs.h
 pk_keys.h
 pk_ops.h
 pk_ops_fwd.h
 pkcs10.h
 pkcs11.h
 pkcs11f.h
 pkcs11t.h
 pkcs8.h
 pkix_enums.h
 pkix_types.h
 processor_rng.h
 psk_db.h
 pubkey.h
 pwdhash.h
 reducer.h
 rfc3394.h
 rfc4880.h
 rng.h
 roughtime.h
 rsa.h
 scrypt.h
 secmem.h
 slh_dsa.h
 sm2.h
 sodium.h
 sp_parameters.h
 sphincsplus.h
 sqlite3.h
 srp6.h
 stateful_rng.h
 stream_cipher.h
 strong_type.h
 sym_algo.h
 symkey.h
 system_rng.h
 tls.h
 tls_alert.h
 tls_algos.h
 tls_callbacks.h
 tls_channel.h
 tls_ciphersuite.h
 tls_client.h
 tls_exceptn.h
 tls_extensions.h
 tls_external_psk.h
 tls_handshake_msg.h
 tls_magic.h
 tls_messages.h
 tls_policy.h
 tls_psk_identity_13.h
 tls_server.h
 tls_server_info.h
 tls_session.h
 tls_session_manager.h
 tls_session_manager_hybrid.h
 tls_session_manager_memory.h
 tls_session_manager_noop.h
 tls_session_manager_sql.h
 tls_session_manager_sqlite.h
 tls_session_manager_stateless.h
 tls_signature_scheme.h
 tls_version.h
 tss.h
 types.h
 uuid.h
 version.h
 x25519.h
 x448.h
 x509_ca.h
 x509_crl.h
 x509_ext.h
 x509_key.h
 x509_obj.h
 x509cert.h
 x509path.h
 x509self.h
 xmss.h
 xmss_parameters.h
 xof.h
 zfec.h
 zlib.h
lib/
 libbotan-3.a
 libbotan-3.so
lib/cmake/Botan-%%VERSION%%/
 botan-config-version.cmake
 botan-config.cmake
lib/pkgconfig/botan-3.pc


[FILE:23:manifests/plist.man]
share/man/man1/botan.1


[FILE:4172:manifests/plist.docs]
share/doc/botan/
 authors.txt
 license.txt
 news.txt
 pgpkey.txt
share/doc/botan/handbook/
 .buildinfo
 abi.html
 building.html
 cli.html
 contents.html
 credits.html
 deprecated.html
 genindex.html
 goals.html
 hardware_acceleration.html
 index.html
 migration_guide.html
 objects.inv
 old_news.html
 openssl_migration_guide.html
 packaging.html
 py-modindex.html
 roadmap.html
 search.html
 searchindex.js
 security.html
 sem_ver.html
 side_channels.html
 support.html
share/doc/botan/handbook/.doctrees/
 abi.doctree
 building.doctree
 cli.doctree
 contents.doctree
 credits.doctree
 deprecated.doctree
 environment.pickle
 goals.doctree
 hardware_acceleration.doctree
 index.doctree
 migration_guide.doctree
 old_news.doctree
 openssl_migration_guide.doctree
 packaging.doctree
 roadmap.doctree
 security.doctree
 sem_ver.doctree
 side_channels.doctree
 support.doctree
share/doc/botan/handbook/.doctrees/api_ref/
 bigint.doctree
 block_cipher.doctree
 cipher_modes.doctree
 compression.doctree
 contents.doctree
 credentials_manager.doctree
 cryptobox.doctree
 ecc.doctree
 env_vars.doctree
 ffi.doctree
 filters.doctree
 footguns.doctree
 fpe.doctree
 hash.doctree
 kdf.doctree
 keywrap.doctree
 message_auth_codes.doctree
 otp.doctree
 passhash.doctree
 pbkdf.doctree
 pkcs11.doctree
 providers.doctree
 psk_db.doctree
 pubkey.doctree
 python.doctree
 rng.doctree
 roughtime.doctree
 secmem.doctree
 srp.doctree
 stream_ciphers.doctree
 tls.doctree
 tpm.doctree
 tss.doctree
 versions.doctree
 x509.doctree
 zfec.doctree
share/doc/botan/handbook/.doctrees/dev_ref/
 configure.doctree
 contents.doctree
 continuous_integration.doctree
 contributing.doctree
 fuzzing.doctree
 mistakes.doctree
 next_major.doctree
 oids.doctree
 os.doctree
 reading_list.doctree
 release_process.doctree
 test_framework.doctree
 todo.doctree
share/doc/botan/handbook/_sources/
 abi.rst.txt
 building.rst.txt
 cli.rst.txt
 contents.rst.txt
 credits.rst.txt
 deprecated.rst.txt
 goals.rst.txt
 hardware_acceleration.rst.txt
 index.rst.txt
 migration_guide.rst.txt
 old_news.rst.txt
 openssl_migration_guide.rst.txt
 packaging.rst.txt
 roadmap.rst.txt
 security.rst.txt
 sem_ver.rst.txt
 side_channels.rst.txt
 support.rst.txt
share/doc/botan/handbook/_sources/api_ref/
 bigint.rst.txt
 block_cipher.rst.txt
 cipher_modes.rst.txt
 compression.rst.txt
 contents.rst.txt
 credentials_manager.rst.txt
 cryptobox.rst.txt
 ecc.rst.txt
 env_vars.rst.txt
 ffi.rst.txt
 filters.rst.txt
 footguns.rst.txt
 fpe.rst.txt
 hash.rst.txt
 kdf.rst.txt
 keywrap.rst.txt
 message_auth_codes.rst.txt
 otp.rst.txt
 passhash.rst.txt
 pbkdf.rst.txt
 pkcs11.rst.txt
 providers.rst.txt
 psk_db.rst.txt
 pubkey.rst.txt
 python.rst.txt
 rng.rst.txt
 roughtime.rst.txt
 secmem.rst.txt
 srp.rst.txt
 stream_ciphers.rst.txt
 tls.rst.txt
 tpm.rst.txt
 tss.rst.txt
 versions.rst.txt
 x509.rst.txt
 zfec.rst.txt
share/doc/botan/handbook/_sources/dev_ref/
 configure.rst.txt
 contents.rst.txt
 continuous_integration.rst.txt
 contributing.rst.txt
 fuzzing.rst.txt
 mistakes.rst.txt
 next_major.rst.txt
 oids.rst.txt
 os.rst.txt
 reading_list.rst.txt
 release_process.rst.txt
 test_framework.rst.txt
 todo.rst.txt
share/doc/botan/handbook/_static/
 agogo.css
 basic.css
 bgfooter.png
 bgtop.png
 doctools.js
 documentation_options.js
 file.png
 language_data.js
 minus.png
 plus.png
 pygments.css
 searchtools.js
 sphinx_highlight.js
share/doc/botan/handbook/api_ref/
 bigint.html
 block_cipher.html
 cipher_modes.html
 compression.html
 contents.html
 credentials_manager.html
 cryptobox.html
 ecc.html
 env_vars.html
 ffi.html
 filters.html
 footguns.html
 fpe.html
 hash.html
 kdf.html
 keywrap.html
 message_auth_codes.html
 otp.html
 passhash.html
 pbkdf.html
 pkcs11.html
 providers.html
 psk_db.html
 pubkey.html
 python.html
 rng.html
 roughtime.html
 secmem.html
 srp.html
 stream_ciphers.html
 tls.html
 tpm.html
 tss.html
 versions.html
 x509.html
 zfec.html
share/doc/botan/handbook/dev_ref/
 configure.html
 contents.html
 continuous_integration.html
 contributing.html
 fuzzing.html
 mistakes.html
 next_major.html
 oids.html
 os.html
 reading_list.html
 release_process.html
 test_framework.html
 todo.html


[FILE:10172:patches/patch-fix-boost-1.87.0]
From 2a406beab449a2cb310fa543451a7087ca7b4b1a Mon Sep 17 00:00:00 2001
From: q66 <q66@chimera-linux.org>
Date: Sun, 15 Dec 2024 02:42:02 +0100
Subject: [PATCH] Remove usage of deprecated asio API

These were all finally dropped with boost 1.87, so this fixes
build with boost 1.87.
---
 src/cli/tls_proxy.cpp               | 24 ++++++++++++------------
 src/lib/utils/socket/socket.cpp     | 17 ++++++++---------
 src/lib/utils/socket/socket_udp.cpp | 17 ++++++++---------
 3 files changed, 28 insertions(+), 30 deletions(-)

--- src/cli/tls_proxy.cpp
+++ src/cli/tls_proxy.cpp
@@ -106,11 +106,11 @@ class tls_proxy_session final : public std::enable_shared_from_this<tls_proxy_se
 
       typedef std::shared_ptr<tls_proxy_session> pointer;
 
-      static pointer create(boost::asio::io_service& io,
+      static pointer create(boost::asio::io_context& io,
                             const std::shared_ptr<Botan::TLS::Session_Manager>& session_manager,
                             const std::shared_ptr<Botan::Credentials_Manager>& credentials,
                             const std::shared_ptr<Botan::TLS::Policy>& policy,
-                            const tcp::resolver::iterator& endpoints) {
+                            const tcp::resolver::results_type& endpoints) {
          auto session = std::make_shared<tls_proxy_session>(io, endpoints);
 
          // Defer the setup of the TLS server to make use of
@@ -144,7 +144,7 @@ class tls_proxy_session final : public std::enable_shared_from_this<tls_proxy_se
          }
       }
 
-      tls_proxy_session(boost::asio::io_service& io, tcp::resolver::iterator endpoints) :
+      tls_proxy_session(boost::asio::io_context& io, tcp::resolver::results_type endpoints) :
             m_strand(io),
             m_server_endpoints(std::move(endpoints)),
             m_client_socket(io),
@@ -287,7 +287,7 @@ class tls_proxy_session final : public std::enable_shared_from_this<tls_proxy_se
 
       void tls_session_activated() override {
          auto onConnect = [self = weak_from_this()](boost::system::error_code ec,
-                                                    const tcp::resolver::iterator& /*endpoint*/) {
+                                                    tcp::resolver::results_type::iterator /*endpoint*/) {
             if(ec) {
                log_error("Server connection", ec);
                return;
@@ -301,7 +301,7 @@ class tls_proxy_session final : public std::enable_shared_from_this<tls_proxy_se
                return;
             }
          };
-         async_connect(m_server_socket, m_server_endpoints, onConnect);
+         async_connect(m_server_socket, m_server_endpoints.begin(), m_server_endpoints.end(), onConnect);
       }
 
       void tls_session_established(const Botan::TLS::Session_Summary& session) override {
@@ -315,9 +315,9 @@ class tls_proxy_session final : public std::enable_shared_from_this<tls_proxy_se
          }
       }
 
-      boost::asio::io_service::strand m_strand;
+      boost::asio::io_context::strand m_strand;
 
-      tcp::resolver::iterator m_server_endpoints;
+      tcp::resolver::results_type m_server_endpoints;
 
       tcp::socket m_client_socket;
       tcp::socket m_server_socket;
@@ -341,9 +341,9 @@ class tls_proxy_server final {
    public:
       typedef tls_proxy_session session;
 
-      tls_proxy_server(boost::asio::io_service& io,
+      tls_proxy_server(boost::asio::io_context& io,
                        unsigned short port,
-                       tcp::resolver::iterator endpoints,
+                       tcp::resolver::results_type endpoints,
                        std::shared_ptr<Botan::Credentials_Manager> creds,
                        std::shared_ptr<Botan::TLS::Policy> policy,
                        std::shared_ptr<Botan::TLS::Session_Manager> session_mgr,
@@ -383,7 +383,7 @@ class tls_proxy_server final {
       }
 
       tcp::acceptor m_acceptor;
-      tcp::resolver::iterator m_server_endpoints;
+      tcp::resolver::results_type m_server_endpoints;
 
       std::shared_ptr<Botan::Credentials_Manager> m_creds;
       std::shared_ptr<Botan::TLS::Policy> m_policy;
@@ -429,10 +429,10 @@ class TLS_Proxy final : public Command {
 
          auto policy = load_tls_policy(get_arg("policy"));
 
-         boost::asio::io_service io;
+         boost::asio::io_context io;
 
          tcp::resolver resolver(io);
-         auto server_endpoint_iterator = resolver.resolve({target, target_port});
+         auto server_endpoint_iterator = resolver.resolve(target, target_port);
 
          std::shared_ptr<Botan::TLS::Session_Manager> session_mgr;
 
--- src/lib/utils/socket/socket.cpp
+++ src/lib/utils/socket/socket.cpp
@@ -46,20 +46,19 @@ class Asio_Socket final : public OS::Socket {
    public:
       Asio_Socket(std::string_view hostname, std::string_view service, std::chrono::milliseconds timeout) :
             m_timeout(timeout), m_timer(m_io), m_tcp(m_io) {
-         m_timer.expires_from_now(m_timeout);
+         m_timer.expires_after(m_timeout);
          check_timeout();
 
          boost::asio::ip::tcp::resolver resolver(m_io);
-         boost::asio::ip::tcp::resolver::query query(std::string{hostname}, std::string{service});
-         boost::asio::ip::tcp::resolver::iterator dns_iter = resolver.resolve(query);
+         boost::asio::ip::tcp::resolver::results_type dns_iter = resolver.resolve(std::string{hostname}, std::string{service});
 
          boost::system::error_code ec = boost::asio::error::would_block;
 
-         auto connect_cb = [&ec](const boost::system::error_code& e, const boost::asio::ip::tcp::resolver::iterator&) {
+         auto connect_cb = [&ec](const boost::system::error_code& e, boost::asio::ip::tcp::resolver::results_type::iterator) {
             ec = e;
          };
 
-         boost::asio::async_connect(m_tcp, dns_iter, connect_cb);
+         boost::asio::async_connect(m_tcp, dns_iter.begin(), dns_iter.end(), connect_cb);
 
          while(ec == boost::asio::error::would_block) {
             m_io.run_one();
@@ -74,7 +73,7 @@ class Asio_Socket final : public OS::Socket {
       }
 
       void write(const uint8_t buf[], size_t len) override {
-         m_timer.expires_from_now(m_timeout);
+         m_timer.expires_after(m_timeout);
 
          boost::system::error_code ec = boost::asio::error::would_block;
 
@@ -90,7 +89,7 @@ class Asio_Socket final : public OS::Socket {
       }
 
       size_t read(uint8_t buf[], size_t len) override {
-         m_timer.expires_from_now(m_timeout);
+         m_timer.expires_after(m_timeout);
 
          boost::system::error_code ec = boost::asio::error::would_block;
          size_t got = 0;
@@ -116,7 +115,7 @@ class Asio_Socket final : public OS::Socket {
 
    private:
       void check_timeout() {
-         if(m_tcp.is_open() && m_timer.expires_at() < std::chrono::system_clock::now()) {
+         if(m_tcp.is_open() && m_timer.expiry() < std::chrono::system_clock::now()) {
             boost::system::error_code err;
 
             // NOLINTNEXTLINE(bugprone-unused-return-value,cert-err33-c)
@@ -127,7 +126,7 @@ class Asio_Socket final : public OS::Socket {
       }
 
       const std::chrono::milliseconds m_timeout;
-      boost::asio::io_service m_io;
+      boost::asio::io_context m_io;
       boost::asio::system_timer m_timer;
       boost::asio::ip::tcp::socket m_tcp;
 };
--- src/lib/utils/socket/socket_udp.cpp
+++ src/lib/utils/socket/socket_udp.cpp
@@ -46,20 +46,19 @@ class Asio_SocketUDP final : public OS::SocketUDP {
    public:
       Asio_SocketUDP(std::string_view hostname, std::string_view service, std::chrono::microseconds timeout) :
             m_timeout(timeout), m_timer(m_io), m_udp(m_io) {
-         m_timer.expires_from_now(m_timeout);
+         m_timer.expires_after(m_timeout);
          check_timeout();
 
          boost::asio::ip::udp::resolver resolver(m_io);
-         boost::asio::ip::udp::resolver::query query(std::string{hostname}, std::string{service});
-         boost::asio::ip::udp::resolver::iterator dns_iter = resolver.resolve(query);
+         boost::asio::ip::udp::resolver::results_type dns_iter = resolver.resolve(std::string{hostname}, std::string{service});
 
          boost::system::error_code ec = boost::asio::error::would_block;
 
-         auto connect_cb = [&ec](const boost::system::error_code& e, const boost::asio::ip::udp::resolver::iterator&) {
+         auto connect_cb = [&ec](const boost::system::error_code& e, boost::asio::ip::udp::resolver::results_type::iterator) {
             ec = e;
          };
 
-         boost::asio::async_connect(m_udp, dns_iter, connect_cb);
+         boost::asio::async_connect(m_udp, dns_iter.begin(), dns_iter.end(), connect_cb);
 
          while(ec == boost::asio::error::would_block) {
             m_io.run_one();
@@ -74,7 +73,7 @@ class Asio_SocketUDP final : public OS::SocketUDP {
       }
 
       void write(const uint8_t buf[], size_t len) override {
-         m_timer.expires_from_now(m_timeout);
+         m_timer.expires_after(m_timeout);
 
          boost::system::error_code ec = boost::asio::error::would_block;
 
@@ -90,7 +89,7 @@ class Asio_SocketUDP final : public OS::SocketUDP {
       }
 
       size_t read(uint8_t buf[], size_t len) override {
-         m_timer.expires_from_now(m_timeout);
+         m_timer.expires_after(m_timeout);
 
          boost::system::error_code ec = boost::asio::error::would_block;
          size_t got = 0;
@@ -116,7 +115,7 @@ class Asio_SocketUDP final : public OS::SocketUDP {
 
    private:
       void check_timeout() {
-         if(m_udp.is_open() && m_timer.expires_at() < std::chrono::system_clock::now()) {
+         if(m_udp.is_open() && m_timer.expiry() < std::chrono::system_clock::now()) {
             boost::system::error_code err;
 
             // NOLINTNEXTLINE(bugprone-unused-return-value,cert-err33-c)
@@ -127,7 +126,7 @@ class Asio_SocketUDP final : public OS::SocketUDP {
       }
 
       const std::chrono::microseconds m_timeout;
-      boost::asio::io_service m_io;
+      boost::asio::io_context m_io;
       boost::asio::system_timer m_timer;
       boost::asio::ip::udp::socket m_udp;
 };

