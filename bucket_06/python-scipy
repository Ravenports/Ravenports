# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-scipy
VERSION=		1.11.0
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Scientific library for Python (3.10)
SDESC[v11]=		Scientific library for Python (3.11)
HOMEPAGE=		https://scipy.org/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/s/scipy
DISTFILE[1]=		scipy-1.11.0.tar.gz:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

BUILD_DEPENDS=		python-Cython:single:python_used
BUILDRUN_DEPENDS=	lapack:lapack:standard
			python-pybind11:single:python_used
			python-pythran:single:python_used

USES=			shebangfix c++:single

DISTNAME=		scipy-1.11.0

SHEBANG_GLOB=		test_gcrotmk.py
GENERATED=		yes

INSTALL_REQ_TOOLCHAIN=	yes

[PY310].BUILDRUN_DEPENDS_ON=		python-numpy:single:py310
[PY310].USES_ON=			python:py310,sutools

[PY311].BUILDRUN_DEPENDS_ON=		python-numpy:single:v11
[PY311].USES_ON=			python:v11,sutools

post-install:
	${RMDIR} ${STAGEDIR}${PYTHON_SITELIBDIR}/scipy/linalg/src/lapack_deprecations

[FILE:2461:descriptions/desc.single]
  :width: 110
  :height: 110
  :align: left 

SciPy (pronounced "Sigh Pie") is an open-source software for mathematics,
science, and engineering. It includes modules for statistics, optimization,
integration, linear algebra, Fourier transforms, signal and image
processing,
ODE solvers, and more.

- **Website:** https://scipy.org
- **Documentation:** https://docs.scipy.org/doc/scipy/
- **Development version of the documentation:**
https://scipy.github.io/devdocs
- **Mailing list:**
https://mail.python.org/mailman3/lists/scipy-dev.python.org/
- **Source code:** https://github.com/scipy/scipy
- **Contributing:** https://scipy.github.io/devdocs/dev/index.html
- **Bug reports:** https://github.com/scipy/scipy/issues
- **Code of Conduct:**
https://docs.scipy.org/doc/scipy/dev/conduct/code_of_conduct.html
- **Report a security vulnerability:** https://tidelift.com/docs/security
- **Citing in your work:** https://www.scipy.org/citing-scipy/

SciPy is built to work with
NumPy arrays, and provides many user-friendly and efficient numerical
routines,
such as routines for numerical integration and optimization. Together, they
run on all popular operating systems, are quick to install, and are free of
charge. NumPy and SciPy are easy to use, but powerful enough to be depended
upon by some of the world's leading scientists and engineers. If you need
to
manipulate numbers on a computer and display or publish the results, give
SciPy a try!

For the installation instructions, see [our install
guide].

Call for Contributions
----------------------

We appreciate and welcome contributions. Small improvements or fixes are
always appreciated; issues labeled as "good
first issue" may be a good starting point. Have a look at [our contributing
guide].

Writing code isn’t the only way to contribute to SciPy. You can also:

- review pull requests
- triage issues
- develop tutorials, presentations, and other educational materials
- maintain and improve [our website]
- develop graphic design for our brand assets and promotional materials
- help with outreach and onboard new contributors
- write grant proposals and help with other fundraising efforts

If you’re unsure where to start or how your skills fit in, reach out! You
can
ask on the mailing list or here, on GitHub, by leaving a
comment on a relevant issue that is already open.

If you are new to contributing to open source, [this
guide] helps explain why, what,
and how to get involved.


[FILE:98:distinfo]
f9b0248cb9d08eead44cde47cbf6339f1e9aa0dfde28f5fb27950743e317bd5d     56030121 scipy-1.11.0.tar.gz


[FILE:818:patches/patch-scipy_special___logit.h]
$NetBSD: patch-scipy_special___logit.h,v 1.2 2022/05/13 09:49:31 tnn Exp $

py-scipy: work around undefined PLT symbol "log1pl" on NetBSD

--- scipy/special/_logit.h.orig	1970-01-01 00:00:00 UTC
+++ scipy/special/_logit.h
@@ -31,6 +31,17 @@ inline T _expit(T x) {
 // obtain accurate results (compared to the naive implementation
 // log(expit(x))).
 //
+#if defined(__NetBSD__)
+template <typename T>
+inline T _log_expit(T x) {
+    if (x < 0.0) {
+        return x - std::log(std::exp(x) + 1.0);
+    }
+    else {
+        return -std::log(std::exp(-x) + 1.0);
+    }
+};
+#else
 template <typename T>
 inline T _log_expit(T x) {
     if (x < 0.0) {
@@ -40,6 +51,7 @@ inline T _log_expit(T x) {
         return -std::log1p(std::exp(-x));
     }
 };
+#endif
 
 
 npy_float logitf(npy_float x)  {return _logit(x);};

