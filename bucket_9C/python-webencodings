# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-webencodings
VERSION=		0.5.1
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Legacy web character encoding aliases (PY37)
SDESC[py38]=		Legacy web character encoding aliases (PY38)
HOMEPAGE=		https://github.com/SimonSapin/python-webencodings
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/w/webencodings
DISTFILE[1]=		webencodings-0.5.1.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		webencodings-0.5.1

GENERATED=		yes

[PY37].USES_ON=				python:py37

[PY38].USES_ON=				python:py38

[FILE:994:descriptions/desc.single]
python-webencodings
===================

This is a Python implementation of the [WHATWG Encoding standard
].

* Latest documentation: http://packages.python.org/webencodings/
* Source code and issue tracker:
  https://github.com/gsnedders/python-webencodings
* PyPI releases: http://pypi.python.org/pypi/webencodings
* License: BSD
* Python 2.6+ and 3.3+

In order to be compatible with legacy web content
when interpreting something like ``Content-Type: text/html;
charset=latin1``,
tools need to use a particular set of aliases for encoding labels
as well as some overriding rules.
For example, ``US-ASCII and iso-8859-1 on the web are actually
aliases for windows-1252``, and an UTF-8 or UTF-16 BOM takes precedence
over any other encoding declaration.
The Encoding standard defines all such details so that implementations do
not have to reverse-engineer each other.

This module has encoding labels and BOM detection,
but the actual implementation for encoders and decoders is Pythonâ€™s.


[FILE:104:distinfo]
b36a1c245f2d304965eb4e0a82848379241dc04b865afcc4aab16748587e1923         9721 webencodings-0.5.1.tar.gz

