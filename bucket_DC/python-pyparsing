# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pyparsing
VERSION=		3.0.9
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Defines and executes parsing grammers (3.10)
SDESC[v11]=		Defines and executes parsing grammers (3.11)
HOMEPAGE=		none
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/6c/10/a7d0fa5baea8fe7b50f448ab742f26f52b80bfca85ac2be9d35cdd9a3246
DISTFILE[1]=		pyparsing-3.0.9-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		pyparsing-3.0.9.dist-info

GENERATED=		yes

[PY310].USES_ON=			python:py310,wheel

[PY311].USES_ON=			python:v11,wheel

[FILE:751:descriptions/desc.single]
PyParsing -- A Python Parsing Module
====================================

|Build Status| |Coverage|

Introduction
============

The pyparsing module is an alternative approach to creating and
executing simple grammars, vs. the traditional lex/yacc approach, or the
use of regular expressions. The pyparsing module provides a library of
classes that client code uses to construct the grammar directly in
Python code.

*[Since first writing this description of pyparsing in late 2003, this
technique for developing parsers has become more widespread, under the
name Parsing Expression Grammars - PEGs. See more information on PEGs*
[here]
*.]*

Here is a program to parse ``"Hello, World!"`` (or any greeting of the form
``"salutation, addressee!"``):


[FILE:111:distinfo]
5026bae9a10eeaefb61dab2f09052b9f4307d44aee4eda64b309723d8d206bbc        98338 pyparsing-3.0.9-py3-none-any.whl

