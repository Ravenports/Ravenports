# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pyparsing
VERSION=		2.4.7
KEYWORDS=		python
VARIANTS=		py38 py39
SDESC[py38]=		Python parsing module (PY38)
SDESC[py39]=		Python parsing module (PY39)
HOMEPAGE=		https://github.com/pyparsing/pyparsing/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/8a/bb/488841f56197b13700afd5658fc279a2025a39e22449b7cf29864669b15d
DISTFILE[1]=		pyparsing-2.4.7-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py38]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY38 PY39
OPTIONS_STANDARD=	none
VOPTS[py38]=		PY38=ON PY39=OFF
VOPTS[py39]=		PY38=OFF PY39=ON

DISTNAME=		pyparsing-2.4.7.dist-info

GENERATED=		yes

[PY38].USES_ON=				python:py38,wheel

[PY39].USES_ON=				python:py39,wheel

[FILE:793:descriptions/desc.single]
PyParsing -- A Python Parsing Module
====================================

|Build Status|

Introduction
============

The pyparsing module is an alternative approach to creating and
executing simple grammars, vs. the traditional lex/yacc approach, or the
use of regular expressions. The pyparsing module provides a library of
classes that client code uses to construct the grammar directly in
Python code.

*[Since first writing this description of pyparsing in late 2003, this
technique for developing parsers has become more widespread, under the
name Parsing Expression Grammars - PEGs. See more information on PEGs at*
https://en.wikipedia.org/wiki/Parsing_expression_grammar *.]*

Here is a program to parse ``"Hello, World!"`` (or any greeting of the form
``"salutation, addressee!"``):


[FILE:115:distinfo]
ef9d7589ef3c200abe66653d3f1ab1033c3c419ae9b9bdb1240a85b024efc88b        67842 pyparsing-2.4.7-py2.py3-none-any.whl

