# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-yarl
VERSION=		1.19.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Yet another URL library (3.12)
SDESC[v13]=		Yet another URL library (3.13)
HOMEPAGE=		https://github.com/aio-libs/yarl
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/a4/06/ae25a353e8f032322df6f30d6bb1fc329773ee48e1a80a2196ccb8d1206b
DISTFILE[1]=		yarl-1.19.0-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		yarl-1.19.0.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-idna:single:v12
					python-multidict:single:v12
					python-propcache:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-idna:single:v13
					python-multidict:single:v13
					python-propcache:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:2354:descriptions/desc.single]
yarl
====

The module provides handy URL class for URL parsing and changing.

   :align: right

   :alt: Codecov coverage for the pytest-driven measurements

   :alt: Matrix Room — #aio-libs:matrix.org

   :alt: Matrix Space — #aio-libs-space:matrix.org

Introduction
------------

Url is constructed from str:

.. code-block:: pycon

   >>> from yarl import URL
   >>> url = URL('https://www.python.org/~guido?arg=1#frag')
   >>> url
   URL('https://www.python.org/~guido?arg=1#frag')

All url parts: *scheme*, *user*, *password*, *host*, *port*, *path*,
*query* and *fragment* are accessible by properties:

.. code-block:: pycon

   >>> url.scheme
   'https'
   >>> url.host
   'www.python.org'
   >>> url.path
   '/~guido'
   >>> url.query_string
   'arg=1'
   >>> url.query
   <MultiDictProxy('arg': '1')>
   >>> url.fragment
   'frag'

All url manipulations produce a new url object:

.. code-block:: pycon

   >>> url = URL('https://www.python.org')
   >>> url / 'foo' / 'bar'
   URL('https://www.python.org/foo/bar')
   >>> url / 'foo' % {'bar': 'baz'}
   URL('https://www.python.org/foo?bar=baz')

Strings passed to constructor and modification methods are
automatically encoded giving canonical representation as result:

.. code-block:: pycon

   >>> url = URL('https://www.python.org/шлях')
   >>> url
   URL('https://www.python.org/%D1%88%D0%BB%D1%8F%D1%85')

Regular properties are *percent-decoded*, use raw_ versions for
getting *encoded* strings:

.. code-block:: pycon

   >>> url.path
   '/шлях'

   >>> url.raw_path
   '/%D1%88%D0%BB%D1%8F%D1%85'

Human readable representation of URL is available as ``.human_repr()``:

.. code-block:: pycon

   >>> url.human_repr()
   'https://www.python.org/шлях'

For full documentation please read https://yarl.aio-libs.org.

Installation
------------

::

   $ pip install yarl

The library is Python 3 only!

PyPI contains binary wheels for Linux, Windows and MacOS.  If you want to
install
yarl on another operating system where wheels are not provided,
the tarball will be used to compile the library from
the source code. It requires a C compiler and and Python headers installed.

To skip the compilation you must explicitly opt-in by using a PEP 517
configuration setting ``pure-python``, or setting the YARL_NO_EXTENSIONS
environment variable to a non-empty value, e.g.:


[FILE:118:distinfo]
a727101eb27f66727576630d02985d8a065d09cd0b5fcbe38a5793f71b2a97ef        45990 python-src/yarl-1.19.0-py3-none-any.whl

