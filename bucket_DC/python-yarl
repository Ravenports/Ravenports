# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-yarl
VERSION=		1.11.1
KEYWORDS=		python
VARIANTS=		v11 v12
SDESC[v11]=		Yet another URL library (3.11)
SDESC[v12]=		Yet another URL library (3.12)
HOMEPAGE=		https://github.com/aio-libs/yarl
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/5b/b3/841f7d706137bdc8b741c6826106b6f703155076d58f1830f244da857451
DISTFILE[1]=		yarl-1.11.1-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v11]=		single
SPKGS[v12]=		single

OPTIONS_AVAILABLE=	PY311 PY312
OPTIONS_STANDARD=	none
VOPTS[v11]=		PY311=ON PY312=OFF
VOPTS[v12]=		PY311=OFF PY312=ON

DISTNAME=		yarl-1.11.1.dist-info

GENERATED=		yes

[PY311].RUN_DEPENDS_ON=			python-idna:single:v11
					python-multidict:single:v11
[PY311].USES_ON=			python:v11,wheel

[PY312].RUN_DEPENDS_ON=			python-idna:single:v12
					python-multidict:single:v12
[PY312].USES_ON=			python:v12,wheel

[FILE:2395:descriptions/desc.single]
yarl
====

The module provides handy URL class for URL parsing and changing.

  :align: right

   :alt: Matrix Room — #aio-libs:matrix.org

   :alt: Matrix Space — #aio-libs-space:matrix.org

Introduction
------------

Url is constructed from str:

.. code-block:: pycon

   >>> from yarl import URL
   >>> url = URL('https://www.python.org/~guido?arg=1#frag')
   >>> url
   URL('https://www.python.org/~guido?arg=1#frag')

All url parts: *scheme*, *user*, *password*, *host*, *port*, *path*,
*query* and *fragment* are accessible by properties:

.. code-block:: pycon

   >>> url.scheme
   'https'
   >>> url.host
   'www.python.org'
   >>> url.path
   '/~guido'
   >>> url.query_string
   'arg=1'
   >>> url.query
   <MultiDictProxy('arg': '1')>
   >>> url.fragment
   'frag'

All url manipulations produce a new url object:

.. code-block:: pycon

   >>> url = URL('https://www.python.org')
   >>> url / 'foo' / 'bar'
   URL('https://www.python.org/foo/bar')
   >>> url / 'foo' % {'bar': 'baz'}
   URL('https://www.python.org/foo?bar=baz')

Strings passed to constructor and modification methods are
automatically encoded giving canonical representation as result:

.. code-block:: pycon

   >>> url = URL('https://www.python.org/шлях')
   >>> url
   URL('https://www.python.org/%D1%88%D0%BB%D1%8F%D1%85')

Regular properties are *percent-decoded*, use raw_ versions for
getting *encoded* strings:

.. code-block:: pycon

   >>> url.path
   '/шлях'

   >>> url.raw_path
   '/%D1%88%D0%BB%D1%8F%D1%85'

Human readable representation of URL is available as ``.human_repr()``:

.. code-block:: pycon

   >>> url.human_repr()
   'https://www.python.org/шлях'

For full documentation please read https://yarl.aio-libs.org.

Installation
------------

::

   $ pip install yarl

The library is Python 3 only!

PyPI contains binary wheels for Linux, Windows and MacOS.  If you want to
install
yarl on another operating system (like *Alpine Linux*, which is not
manylinux-compliant because of the missing glibc and therefore, cannot be
used with our wheels) the the tarball will be used to compile the library
from
the source code. It requires a C compiler and and Python headers installed.

To skip the compilation you must explicitly opt-in by using a PEP 517
configuration setting ``pure-python``, or setting the YARL_NO_EXTENSIONS
environment variable to a non-empty value, e.g.:


[FILE:107:distinfo]
72bf26f66456baa0584eff63e44545c9f0eaed9b73cb6601b647c91f14c11f38        38648 yarl-1.11.1-py3-none-any.whl

