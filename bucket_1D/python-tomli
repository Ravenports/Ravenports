# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-tomli
VERSION=		1.0.4
KEYWORDS=		python
VARIANTS=		py38 py39
SDESC[py38]=		Lil' TOML parser (PY38)
SDESC[py39]=		Lil' TOML parser (PY39)
HOMEPAGE=		none
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/ec/81/e0741c4f4dfde87348987869e66de74d13378aa7c0fe97dd1eba2a69f74c
DISTFILE[1]=		tomli-1.0.4-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py38]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY38 PY39
OPTIONS_STANDARD=	none
VOPTS[py38]=		PY38=ON PY39=OFF
VOPTS[py39]=		PY38=OFF PY39=ON

DISTNAME=		tomli-1.0.4.dist-info

GENERATED=		yes

[PY38].USES_ON=				python:py38,wheel

[PY39].USES_ON=				python:py39,wheel

[FILE:2183:descriptions/desc.single]
[Build Status]
[![codecov.io]](https://codecov.io/gh/hukkin/tomli)
[PyPI version]

# Tomli

> A lil' TOML parser

**Table of Contents**  *generated with [mdformat-toc]*

<!-- mdformat-toc start --slug=github --maxlevel=6 --minlevel=2 -->

- [Intro]
- [Installation]
- [Usage]
  - [Parse a TOML string]
  - [Parse a TOML file]
  - [Handle invalid TOML]
  - [Construct `decimal.Decimal`s from TOML floats]
- [FAQ]
  - [Why this parser?]
  - [Is comment preserving round-trip parsing supported?]
  - [Is there a `dumps`, `write` or `encode` function?]
  - [How do TOML types map into Python types?]
- [Performance]

<!-- mdformat-toc end -->

## Intro</a>

Tomli is a Python library for parsing [TOML].
Tomli is fully compatible with [TOML v1.0.0].

## Installation<a name="installation">

`bash
pip install tomli
`

## Usage</a>

### Parse a TOML string<a name="parse-a-toml-string">

```python
import tomli

toml_str = """
           gretzky = 99

           [kurri]
           jari = 17
           """

toml_dict = tomli.loads(toml_str)
assert toml_dict == {"gretzky": 99, "kurri": {"jari": 17}}
```

### Parse a TOML file</a>

```python
import tomli

with open("path_to_file/conf.toml", encoding="utf-8") as f:
    toml_dict = tomli.load(f)
```

### Handle invalid TOML<a name="handle-invalid-toml">

```python
import tomli

try:
    toml_dict = tomli.loads("]] this is invalid TOML [[")
except tomli.TOMLDecodeError:
    print("Yep, definitely not valid.")
```

Note that while the `TOMLDecodeError` type is public API, error messages of
raised instances of it are not.
Error messages should not be assumed to stay constant across Tomli
versions.

### Construct `decimal.Decimal`s from TOML floats</a>

```python
from decimal import Decimal
import tomli

toml_dict = tomli.loads("precision-matters = 0.982492",
parse_float=Decimal)
assert isinstance(toml_dict["precision-matters"], Decimal)
```

Note that you may replace `decimal.Decimal` with any callable that converts
a TOML float from string to any Python type (except `list` or `dict`).
The `decimal.Decimal` type is, however, the most typical replacement when
float inaccuracies can not be tolerated.

## FAQ<a name="faq">



[FILE:107:distinfo]
0713b16ff91df8638a6a694e295c8159ab35ba93e3424a626dd5226d386057be        11497 tomli-1.0.4-py3-none-any.whl

