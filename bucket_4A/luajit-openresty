# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		luajit-openresty
VERSION=		2.1-20240314
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Just-in-time compiler for Lua, OpenResty branch
HOMEPAGE=		https://github.com/openresty/luajit2
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/openresty:luajit2:v2.1-20240314
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			tools
			dev
			man

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

EXRUN[tools]=		luajit-openresty:primary:standard

USES=			cpe gmake cclibs:primary

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/COPYRIGHT
LICENSE_SCHEME=		solo

CPE_PRODUCT=		luajit
CPE_VENDOR=		luajit
FPC_EQUIVALENT=		lang/luajit-openresty

MAKE_ARGS=		CC={{CC}}
			Q=

SOVERSION=		2.1.1710398010
PLIST_SUB=		VERSION=2.1
			LIBVER=5.1
			API=2.1

VAR_OPSYS[dragonfly]=	MAKE_ARGS=XCFLAGS=-DLJ_TARGET_HAS_GETENTROPY=0

post-install:
	${LN} -sf luajit-2.1.1710398010 ${STAGEDIR}${PREFIX}/bin/luajit
	${INSTALL_MAN} ${WRKSRC}/etc/luajit.1 ${STAGEDIR}${MAN1PREFIX}/man/man1
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/luajit
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libluajit-*.so

[FILE:236:descriptions/desc.primary]
This is the official OpenResty branch of LuaJIT. It is not considered a
fork, since it is synchronized regularly from the upstream LuaJIT project
(https://github.com/LuaJIT/LuaJIT).

There are extensions which may never be merged back.


[FILE:39:descriptions/desc.tools]
This package contains the luajit tool.


[FILE:116:distinfo]
3efddc4104a0ce720ddf4da3d9bce927f3c5816a8a45a043462ca58914cde271      1162566 openresty-luajit2-2.1-20240314.tar.gz


[FILE:81:manifests/plist.primary]
lib/
 libluajit-%%LIBVER%%.so.%%SOMAJOR%%
 libluajit-%%LIBVER%%.so.%%SOVERSION%%


[FILE:316:manifests/plist.tools]
bin/
 luajit
 luajit-%%SOVERSION%%
share/luajit-%%VERSION%%/jit/
 bc.lua
 bcsave.lua
 dis_arm.lua
 dis_arm64.lua
 dis_arm64be.lua
 dis_mips.lua
 dis_mips64.lua
 dis_mips64el.lua
 dis_mips64r6.lua
 dis_mips64r6el.lua
 dis_mipsel.lua
 dis_ppc.lua
 dis_x64.lua
 dis_x86.lua
 dump.lua
 p.lua
 v.lua
 vmdef.lua
 zone.lua


[FILE:160:manifests/plist.dev]
include/luajit-%%API%%/
 lauxlib.h
 lua.h
 lua.hpp
 luaconf.h
 luajit.h
 lualib.h
lib/
 libluajit-%%LIBVER%%.a
 libluajit-%%LIBVER%%.so
lib/pkgconfig/luajit.pc


[FILE:27:manifests/plist.man]
share/man/man1/luajit.1.gz


[FILE:1694:patches/patch-Makefile]
--- Makefile.orig	2023-11-17 07:29:25 UTC
+++ Makefile
@@ -30,7 +30,6 @@ VERSION= $(MMVERSION).$(RELVER)
 # Change the installation path as needed. This automatically adjusts
 # the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!
 #
-export PREFIX= /usr/local
 export MULTILIB= lib
 ##############################################################################
 
@@ -69,8 +68,7 @@ INSTALL_T= $(INSTALL_BIN)/$(INSTALL_TNAM
 INSTALL_TSYM= $(INSTALL_BIN)/$(INSTALL_TSYMNAME)
 INSTALL_PC= $(INSTALL_PKGCONFIG)/$(INSTALL_PCNAME)
 
-INSTALL_DIRS= $(INSTALL_BIN) $(INSTALL_LIB) $(INSTALL_INC) $(INSTALL_MAN) \
-  $(INSTALL_PKGCONFIG) $(INSTALL_JITLIB) $(INSTALL_LMOD) $(INSTALL_CMOD)
+INSTALL_DIRS= $(INSTALL_INC) $(INSTALL_PKGCONFIG) $(INSTALL_JITLIB)
 UNINSTALL_DIRS= $(INSTALL_JITLIB) $(INSTALL_LJLIBD) $(INSTALL_INC) \
   $(INSTALL_LMOD) $(INSTALL_LMODD) $(INSTALL_CMOD) $(INSTALL_CMODD)
 
@@ -133,10 +131,8 @@ install: $(INSTALL_DEP)
 	$(RM) $(INSTALL_DYN) $(INSTALL_SHORT1) $(INSTALL_SHORT2)
 	cd src && test -f $(FILE_SO) && \
 	  $(INSTALL_X) $(FILE_SO) $(INSTALL_DYN) && \
-	  ( $(LDCONFIG) $(INSTALL_LIB) || : ) && \
 	  $(SYMLINK) $(INSTALL_SONAME) $(INSTALL_SHORT1) && \
 	  $(SYMLINK) $(INSTALL_SONAME) $(INSTALL_SHORT2) || :
-	cd etc && $(INSTALL_F) $(FILE_MAN) $(INSTALL_MAN)
 	cd etc && $(SED_PC) $(FILE_PC) > $(FILE_PC).tmp && \
 	  $(INSTALL_F) $(FILE_PC).tmp $(INSTALL_PC) && \
 	  $(RM) $(FILE_PC).tmp
@@ -154,7 +150,6 @@ uninstall:
 	for file in $(FILES_INC); do \
 	  $(UNINSTALL) $(INSTALL_INC)/$$file; \
 	  done
-	$(LDCONFIG) $(INSTALL_LIB)
 	$(RMDIR) $(UNINSTALL_DIRS) || :
 	@echo "==== Successfully uninstalled LuaJIT $(VERSION) from $(PREFIX) ===="
 


[FILE:809:patches/patch-src_Makefile]
--- src/Makefile.orig	2023-11-17 07:29:25 UTC
+++ src/Makefile
@@ -35,7 +35,6 @@ CC= $(DEFAULT_CC)
 # to slow down the C part by not omitting it. Debugging, tracebacks and
 # unwinding are not affected -- the assembler part has frame unwind
 # information and GCC emits it where needed (x64) or with -g (see CCDEBUG).
-CCOPT= -O2 -fomit-frame-pointer
 # Use this if you want to generate a smaller binary (but it's slower):
 #CCOPT= -Os -fomit-frame-pointer
 # Note: it's no longer recommended to use -O3 with GCC 4.x.
@@ -46,7 +45,6 @@ CCOPT= -O2 -fomit-frame-pointer
 # x86/x64 only: For GCC 4.2 or higher and if you don't intend to distribute
 # the binaries to a different machine you could also use: -march=native
 #
-CCOPT_x86= -march=i686 -msse -msse2 -mfpmath=sse
 CCOPT_x64=
 CCOPT_arm=
 CCOPT_arm64=


[FILE:226:patches/patch-src_lj__ccallback.c]
--- src/lj_ccallback.c.orig	2023-11-17 07:29:25 UTC
+++ src/lj_ccallback.c
@@ -20,6 +20,7 @@
 #include "lj_mcode.h"
 #include "lj_trace.h"
 #include "lj_vm.h"
+#include "lualib.h"
 
 #if LJ_ARCH_PPC_ELFV2
 #include "lualib.h"


[FILE:577:patches/patch-src_lj__prng.c]
--- src/lj_prng.c.orig	2023-11-17 07:29:25 UTC
+++ src/lj_prng.c
@@ -113,6 +113,7 @@ static PRGR libfunc_rgr;
 #include <sys/syscall.h>
 #else
 
+# ifndef LJ_TARGET_HAS_GETENTROPY
 #if LJ_TARGET_OSX && !LJ_TARGET_IOS
 /*
 ** In their infinite wisdom Apple decided to disallow getentropy() in the
@@ -128,6 +129,7 @@ static PRGR libfunc_rgr;
 #elif (LJ_TARGET_BSD && !defined(__NetBSD__)) || LJ_TARGET_SOLARIS || LJ_TARGET_CYGWIN || LJ_TARGET_QNX
 #define LJ_TARGET_HAS_GETENTROPY	1
 #endif
+# endif
 
 #if LJ_TARGET_HAS_GETENTROPY
 extern int getentropy(void *buf, size_t len)


[FILE:123:files/special.mk]
.if ${OPSYS} != Linux
pre-configure:
	# remove -ldl from pc file
	sed -i.bak -e 's/ -ldl//' ${WRKSRC}/etc/luajit.pc
.endif

