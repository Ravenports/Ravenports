# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		boost-jam
VERSION=		1.88.0
KEYWORDS=		devel
VARIANTS=		std
SDESC[std]=		Build tool from the boost.org
HOMEPAGE=		https://www.boost.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://archives.boost.io/release/1.88.0/source/
DISTFILE[1]=		boost_1_88_0.tar.bz2:main
DF_INDEX=		1
SPKGS[std]=		single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cpe c++:single

DISTNAME=		boost_1_88_0
EXTRACT_HEAD[1]=	{{TAR}} -xf
EXTRACT_TAIL[1]=	{{DISTNAME}}/tools/build/src/engine {{DISTNAME}}/LICENSE_1_0.txt

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"Boost Software License - Version 1.0"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE_1_0.txt
LICENSE_SCHEME=		solo

CPE_PRODUCT=		boost
CPE_VENDOR=		boost
FPC_EQUIVALENT=		devel/boost-jam

BUILD_WRKSRC=		{{WRKSRC}}/tools/build/src/engine
BUILD_TARGET=		gcc

INSTALL_WRKSRC=		{{BUILD_WRKSRC}}

CXXFLAGS=		{{LDFLAGS}}

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
	./build.sh ${MAKE_ARGS:C,^${DESTDIRNAME}=.*,,g} ${BUILD_TARGET})

pre-configure:
	# removing -O3 flag
	${REINPLACE_CMD} -e 's|-O3 ||g' ${BUILD_WRKSRC}/build.sh
	# hardcode executable path on fallback
	${REINPLACE_CMD} -e 's|@LOCALBASE@|${PREFIX}|' ${BUILD_WRKSRC}/pathsys.cpp

do-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/bin
	${INSTALL_PROGRAM} ${INSTALL_WRKSRC}/b2 ${STAGEDIR}${PREFIX}/bin/
	(cd ${STAGEDIR}${PREFIX}/bin && ln -s b2 bjam)

[FILE:233:descriptions/desc.single]
Boost.Jam (BJam) is a build tool based on FTJam, which in turn is
based on Perforce Jam. It contains significant improvements made to
facilitate its use in the Boost Build System, but should be backward
compatible with Perforce Jam.


[FILE:99:distinfo]
46d9d2c06637b219270877c9e16155cbd015b6dc84349af064c088e9b5b12f7b    143894119 boost_1_88_0.tar.bz2


[FILE:15:manifests/plist.single]
bin/
 b2
 bjam


[FILE:1435:patches/patch-tools_build_src_engine_pathsys.cpp]
--- tools/build/src/engine/pathsys.cpp.orig	2025-04-03 11:37:31 UTC
+++ tools/build/src/engine/pathsys.cpp
@@ -451,36 +451,6 @@ char * executable_path( char const * arg
 #else
 char * executable_path( char const * argv0 )
 {
-    char * result = nullptr;
-    /* If argv0 is an absolute path, assume it is the right absolute path. */
-    if (!result && b2::paths::is_rooted(argv0))
-        result = strdup( argv0 );
-    // If argv0 is a relative path, we can compute the absolute one from the
-    // current working dir.
-    if (!result && b2::paths::is_relative(argv0))
-    {
-        auto p = b2::paths::normalize(b2::cwd_str()+"/"+argv0);
-        result = strdup( p.c_str() );
-    }
-    // If it's a bare basename, search the PATH for a match.
-    if (!result)
-    {
-        std::string path_env = getenv( "PATH" );
-        std::string::size_type i = 0;
-        while (i != std::string::npos)
-        {
-            std::string::size_type e = path_env.find_first_of(':', i);
-            std::string p = e == std::string::npos
-                ? path_env.substr(i)
-                : path_env.substr(i, e-i);
-            if (b2::filesys::is_file(p+"/"+argv0))
-            {
-                result = strdup( (p+"/"+argv0).c_str() );
-                break;
-            }
-            i = e == std::string::npos ? e : e+1;
-        }
-    }
-    return result;
+    return strdup("@LOCALBASE@/bin/jam");
 }
 #endif

