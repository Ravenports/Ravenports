# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		dbus
VERSION=		1.12.8
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Message bus system for IPC communication
HOMEPAGE=		http://www.freedesktop.org/Software/dbus
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://dbus.freedesktop.org/releases/dbus/
DISTFILE[1]=		dbus-1.12.8.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		expat:static:standard
			minixmlto:single:standard
BUILDRUN_DEPENDS=	expat:shared:standard

USERS=			messagebus
GROUPS=			messagebus
USERGROUP_SPKG=		single

USES=			cpe gmake libtool python:build shebangfix
XORG_COMPONENTS=	ice sm x11

LICENSE=		CUSTOM1:single GPLv2+:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_NAME=		CUSTOM1:"Academic Free License version 2.1"
LICENSE_FILE=		GPLv2+:stock
			CUSTOM1:{{WRKDIR}}/LICENSE_AFL
LICENSE_AWK=		TERMS:"^The Academic"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		dual

CPE_PRODUCT=		d-bus
CPE_VENDOR=		d-bus_project
FPC_EQUIVALENT=		devel/dbus
SHEBANG_FILES=		tools/GetAllMatchRules.py

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--with-x
			--with-test-socket-dir={{WRKDIR}}
			--disable-doxygen-docs
			--disable-selinux
			--disable-apparmor
			--disable-systemd
CONFIGURE_ENV=		XMLTO={{LOCALBASE}}/bin/minixmlto

INSTALL_TARGET=		install-strip
SOVERSION=		3.19.7
PLIST_SUB=		VERSION="1.0"
			GROUPS={{GROUPS}}
RC_SUBR=		dbus:single

post-patch:
	${REINPLACE_CMD} -e 's|/usr/local|${LOCALBASE}|g' \
		${WRKSRC}/dbus/dbus-sysdeps-unix.c
	${REINPLACE_CMD} '/^SUBDIRS =/s|test||' ${WRKSRC}/Makefile.in

post-install:
	# delete examples
	${RM} -r ${STAGEDIR}${STD_DOCDIR}

post-extract:
	${AWK} '/^The Academic Free License/,/^but the BSD, MIT/' \
		${WRKSRC}/COPYING > ${WRKDIR}/LICENSE_AFL

post-patch-sunos:
	# work around deficient /bin/sh in solaris
	${REINPLACE_CMD} -e 's|#! /bin/sh|#!/bin/bash|' \
		-e '/LIBTOOL=/ s|.(SHELL)|/bin/bash|' \
		${WRKSRC}/configure

[FILE:392:descriptions/desc.single]
D-BUS supplies both a system daemon (for events such as "new hardware device
added" or "printer queue changed") and a per-user-login-session daemon (for
general IPC needs among user applications). Also, the message bus is built on
top of a general one-to-one message passing framework, which can be used by
any two apps to communicate directly (without going through the message bus
daemon).


[FILE:97:distinfo]
e2dc99e7338303393b6663a98320aba6a63421bcdaaf571c8022f815e5896eb3      2071751 dbus-1.12.8.tar.gz


[FILE:1231:manifests/plist.single]
bin/
 dbus-cleanup-sockets
 dbus-daemon
 dbus-launch
 dbus-monitor
 dbus-run-session
 dbus-send
 dbus-test-tool
 dbus-update-activation-environment
 dbus-uuidgen
etc/dbus-1/
 session.conf
 system.conf
include/dbus-%%VERSION%%/dbus/
 dbus-address.h
 dbus-bus.h
 dbus-connection.h
 dbus-errors.h
 dbus-macros.h
 dbus-memory.h
 dbus-message.h
 dbus-misc.h
 dbus-pending-call.h
 dbus-protocol.h
 dbus-server.h
 dbus-shared.h
 dbus-signature.h
 dbus-syntax.h
 dbus-threads.h
 dbus-types.h
 dbus.h
lib/
 libdbus-1.a
 libdbus-1.so
 libdbus-1.so.%%SOMAJOR%%
 libdbus-1.so.%%SOVERSION%%
lib/cmake/DBus1/
 DBus1Config.cmake
 DBus1ConfigVersion.cmake
lib/dbus-%%VERSION%%/include/dbus/dbus-arch-deps.h
lib/pkgconfig/dbus-1.pc
@(,%%GROUPS%%,4750) libexec/dbus-daemon-launch-helper
share/dbus-1/
 session.conf
 system.conf
share/man/man1/
 dbus-cleanup-sockets.1.gz
 dbus-daemon.1.gz
 dbus-launch.1.gz
 dbus-monitor.1.gz
 dbus-run-session.1.gz
 dbus-send.1.gz
 dbus-test-tool.1.gz
 dbus-update-activation-environment.1.gz
 dbus-uuidgen.1.gz
share/xml/dbus-1/
 busconfig.dtd
 introspect.dtd
@dir /var/lib/dbus
@dir /var/run/dbus
@dir share/dbus-1/services
@dir share/dbus-1/session.d
@dir share/dbus-1/system-services
@dir share/dbus-1/system.d


[FILE:1385:patches/patch-configure]
--- configure.orig	2018-04-30 12:54:40 UTC
+++ configure
@@ -24499,14 +24499,14 @@ fi
 done
 
 
-    if test "$ax_enable_compile_warnings" != "no"; then :
+    if test "$ax_enable_compile_warnings" == "skipme"; then :
 
         # "yes" flags
 
 
 
 
-for flag in       ; do
+for flag in ""      ; do
   as_CACHEVAR=`$as_echo "ax_cv_check_ldflags_$ax_compiler_flags_test_$flag" | $as_tr_sh`
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the linker accepts $flag" >&5
 $as_echo_n "checking whether the linker accepts $flag... " >&6; }
@@ -26014,14 +26014,14 @@ fi
 done
 
 
-    if test "$ax_enable_compile_warnings" != "no"; then :
+    if test "$ax_enable_compile_warnings" != "yes"; then :
 
         # "yes" flags
 
 
 
 
-for flag in    ; do
+for flag in ""   ; do
   as_CACHEVAR=`$as_echo "ax_cv_check_ldflags_$ax_compiler_flags_test_$flag" | $as_tr_sh`
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the linker accepts $flag" >&5
 $as_echo_n "checking whether the linker accepts $flag... " >&6; }
@@ -26195,8 +26195,6 @@ case $host_os in
         CFLAGS="$CFLAGS -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT"
         # ... this opt-in to get sockaddr_in6 and sockaddr_storage...
         CFLAGS="$CFLAGS -D__EXTENSIONS__"
-        # ... and this opt-in to get file descriptor passing support
-        CFLAGS="$CFLAGS -D_XOPEN_SOURCE=500"
         ;;
 esac
 


[FILE:3151:patches/patch-dbus_dbus-connection.c]
--- dbus/dbus-connection.c.orig	2018-02-08 14:07:21 UTC
+++ dbus/dbus-connection.c
@@ -2385,7 +2385,7 @@ _dbus_connection_block_pending_call (DBu
   DBusConnection *connection;
   dbus_uint32_t client_serial;
   DBusTimeout *timeout;
-  int timeout_milliseconds, elapsed_milliseconds;
+  int timeout_milliseconds, elapsed_milliseconds, remain_milliseconds;
 
   _dbus_assert (pending != NULL);
 
@@ -2466,7 +2466,11 @@ _dbus_connection_block_pending_call (DBu
   _dbus_get_monotonic_time (&tv_sec, &tv_usec);
   elapsed_milliseconds = (tv_sec - start_tv_sec) * 1000 +
 	  (tv_usec - start_tv_usec) / 1000;
-  
+  if (timeout_milliseconds != -1)
+    remain_milliseconds = timeout_milliseconds - elapsed_milliseconds;
+  else
+    remain_milliseconds = -1;
+
   if (!_dbus_connection_get_is_connected_unlocked (connection))
     {
       DBusMessage *error_msg;
@@ -2494,7 +2498,7 @@ _dbus_connection_block_pending_call (DBu
            */
           _dbus_verbose ("dbus_connection_send_with_reply_and_block() waiting for more memory\n");
 
-          _dbus_memory_pause_based_on_timeout (timeout_milliseconds - elapsed_milliseconds);
+          _dbus_memory_pause_based_on_timeout (remain_milliseconds);
         }
       else
         {          
@@ -2503,7 +2507,7 @@ _dbus_connection_block_pending_call (DBu
                                                   pending,
                                                   DBUS_ITERATION_DO_READING |
                                                   DBUS_ITERATION_BLOCK,
-                                                  timeout_milliseconds - elapsed_milliseconds);
+                                                  remain_milliseconds);
         }
 
       goto recheck_status;
@@ -2512,7 +2516,7 @@ _dbus_connection_block_pending_call (DBu
     _dbus_verbose ("dbus_connection_send_with_reply_and_block(): clock set backward\n");
   else if (elapsed_milliseconds < timeout_milliseconds)
     {
-      _dbus_verbose ("dbus_connection_send_with_reply_and_block(): %d milliseconds remain\n", timeout_milliseconds - elapsed_milliseconds);
+      _dbus_verbose ("dbus_connection_send_with_reply_and_block(): %d milliseconds remain\n", remain_milliseconds);
       
       if (status == DBUS_DISPATCH_NEED_MEMORY)
         {
@@ -2522,7 +2526,7 @@ _dbus_connection_block_pending_call (DBu
            */
           _dbus_verbose ("dbus_connection_send_with_reply_and_block() waiting for more memory\n");
 
-          _dbus_memory_pause_based_on_timeout (timeout_milliseconds - elapsed_milliseconds);
+          _dbus_memory_pause_based_on_timeout (remain_milliseconds);
         }
       else
         {          
@@ -2531,7 +2535,7 @@ _dbus_connection_block_pending_call (DBu
                                                   pending,
                                                   DBUS_ITERATION_DO_READING |
                                                   DBUS_ITERATION_BLOCK,
-                                                  timeout_milliseconds - elapsed_milliseconds);
+                                                  remain_milliseconds);
         }
 
       goto recheck_status;


[FILE:354:patches/patch-dbus_dbus-sysdeps-unix.c]
--- dbus/dbus-sysdeps-unix.c.orig	2017-11-24 13:42:27 UTC
+++ dbus/dbus-sysdeps-unix.c
@@ -24,6 +24,14 @@
 
 #include <config.h>
 
+#ifdef __sun
+#  if __STDC_VERSION__ - 0 < 199901L
+#define	_XOPEN_SOURCE	500
+#  else
+#define	_XOPEN_SOURCE	600
+#  endif
+#endif
+
 #include "dbus-internals.h"
 #include "dbus-sysdeps.h"
 #include "dbus-sysdeps-unix.h"


[FILE:1388:patches/patch-dbus_dbus-sysdeps-util-unix.c]
--- dbus/dbus-sysdeps-util-unix.c.orig	2017-10-30 12:26:18 UTC
+++ dbus/dbus-sysdeps-util-unix.c
@@ -42,6 +42,7 @@
 #include <stdio.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <syslog.h>
 #include <sys/stat.h>
 #ifdef HAVE_SYS_RESOURCE_H
 #include <sys/resource.h>
@@ -51,6 +52,10 @@
 #include <dirent.h>
 #include <sys/un.h>
 
+#if defined(__sun) && defined(__SVR4)
+#include <pwd.h>
+#endif
+
 #ifdef HAVE_SYS_SYSLIMITS_H
 #include <sys/syslimits.h>
 #endif
@@ -551,8 +556,31 @@ _dbus_user_at_console (const char *usern
 #ifdef DBUS_CONSOLE_AUTH_DIR
   DBusString u, f;
   dbus_bool_t result;
+#if defined(__sun) && defined(__SVR4)
+  struct passwd *passwd_entry;
+#endif
 
   result = FALSE;
+
+#if defined(__sun) && defined(__SVR4)
+  passwd_entry = getpwnam (username);
+  if (passwd_entry != NULL)
+    {
+      struct stat st;
+      uid_t uid;
+
+      uid = passwd_entry->pw_uid;
+
+      if (stat ("/dev/vt/console_user", &st) == 0 && st.st_uid == uid)
+        {
+         /*
+          * Owner is allowed to take over. Before we have real
+          * ownership in HAL, assume it's the console owner.
+          */
+          result = TRUE;
+        }
+    }
+#else
   if (!_dbus_string_init (&f))
     {
       _DBUS_SET_OOM (error);
@@ -577,6 +605,7 @@ _dbus_user_at_console (const char *usern
 
  out:
   _dbus_string_free (&f);
+#endif
 
   return result;
 #else


[FILE:542:patches/patch-tools_dbus-launch.c]
--- tools/dbus-launch.c.orig	2017-10-30 12:26:18 UTC
+++ tools/dbus-launch.c
@@ -846,6 +846,12 @@ main (int argc, char **argv)
   exit_with_session = FALSE;
   config_file = NULL;
 
+  if (getenv("RAVENADM") != NULL)
+    {
+      fprintf (stderr, "Package building detected, launch not executed.\n");
+      exit (0);
+    }
+
   /* Ensure that the first three fds are open, to ensure that when we
    * create other file descriptors (for example for epoll, inotify or
    * a socket), they never get assigned as fd 0, 1 or 2. If they were,


[FILE:785:files/dbus.in]
#!/bin/sh
#
# $FreeBSD: head/devel/dbus/files/dbus.in 431498 2017-01-14 22:48:49Z tijl $
#
# PROVIDE: dbus
# REQUIRE: DAEMON ldconfig
#
# Add the following lines to /etc/rc.conf to enable the D-BUS messaging system:
#
# dbus_enable="YES"
#

. /etc/rc.subr

: ${dbus_enable=${gnome_enable-NO}} ${dbus_flags="--system"}

name=dbus
rcvar=dbus_enable

command="%%PREFIX%%/bin/dbus-daemon"
pidfile="/var/run/dbus/pid"

start_precmd="dbus_prestart"
stop_postcmd="dbus_poststop"

dbus_prestart()
{
    %%PREFIX%%/bin/dbus-uuidgen --ensure
    mkdir -p /var/run/dbus
}

dbus_poststop()
{
    rm -f $pidfile
# The following two lines may be removed after 2018-01-01
    rm -f /var/db/dbus/machine-id
    [ ! -d /var/db/dbus ] || rmdir /var/db/dbus
}

load_rc_config ${name}
run_rc_command "$1"

