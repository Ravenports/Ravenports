# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		m4
VERSION=		1.4.18
REVISION=		1
KEYWORDS=		devel
VARIANTS=		standard noprefix
SDESC[noprefix]=	GNU macro processor with unprefixed program name
SDESC[standard]=	GNU implementation of the Unix macro processor
HOMEPAGE=		https://www.gnu.org/software/m4/m4.html
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GNU/m4
DISTFILE[1]=		m4-1.4.18.tar.xz:main
DF_INDEX=		1
SPKGS[noprefix]=	complete
			primary
			examples
SPKGS[standard]=	complete
			primary
			examples

OPTIONS_AVAILABLE=	NOPREFIX
OPTIONS_STANDARD=	none
VOPTS[noprefix]=	NOPREFIX=ON

BUILD_DEPENDS=		libsigsegv:static:standard

USES=			cpe

LICENSE=		GPLv3+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv3+:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"^\#include"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/src/m4.c
LICENSE_SCHEME=		solo

CPE_VENDOR=		gnu
FPC_EQUIVALENT=		devel/m4
INFO_SUBDIR=		.

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--with-libsigsegv-prefix={{LOCALBASE}}

[NOPREFIX].DESCRIPTION=			Build without prefixing all programs with "g"
[NOPREFIX].CONFIGURE_ARGS_OFF=		--program-prefix=g
[NOPREFIX].INFO_OFF=			primary:gm4
[NOPREFIX].INFO_ON=			primary:m4

post-patch:
	${REINPLACE_CMD} -e '/^install-exec-am: / s| .*||' \
		${WRKSRC}/lib/Makefile.in

post-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/share/examples/m4
	${INSTALL_DATA} ${WRKSRC}/examples/*.m4 \
		${STAGEDIR}${PREFIX}/share/examples/m4

post-patch-NOPREFIX-OFF:
	${REINPLACE_CMD} -e 's|/m4.info|/gm4.info|' ${WRKSRC}/doc/Makefile.in
.for EXT in info info-1 info-2
	${MV} ${WRKSRC}/doc/m4.${EXT} ${WRKSRC}/doc/gm4.${EXT}
.endfor

[FILE:839:descriptions/desc.primary]
GNU M4 is an implementation of the traditional Unix macro processor. It is
mostly SVR4 compatible although it has some extensions (for example, handling
more than 9 positional parameters to macros). GNU M4 also has built-in functions
for including files, running shell commands, doing arithmetic, etc.

GNU M4 is a macro processor in the sense that it copies its input to the output
expanding macros as it goes. Macros are either builtin or user-defined and can
take any number of arguments. Besides just doing macro expansion, m4 has builtin
functions for including named files, running UNIX commands, doing integer
arithmetic, manipulating text in various ways, recursion etc... m4 can be used
either as a front-end to a compiler or as a macro processor in its own right.

One of the biggest users of GNU M4 is the GNU Autoconf project.


[FILE:95:distinfo]
f2c1e86ca0a404ff281631bdc8377638992744b175afb806e25871a24a934e07      1207688 m4-1.4.18.tar.xz


[FILE:32:manifests/plist.primary.standard]
bin/gm4
share/man/man1/gm4.1.gz


[FILE:30:manifests/plist.primary.noprefix]
bin/m4
share/man/man1/m4.1.gz


[FILE:1964:patches/patch-lib_vasnprintf.c]
$NetBSD: patch-lib_vasnprintf.c,v 1.1 2017/08/25 05:28:53 adam Exp $

Fix crash on macOS 10.13 (Darwin 17).
http://git.savannah.gnu.org/cgit/gnulib.git/commit/lib/vasnprintf.c?id=7df04f9b8a0adb1575ca0555775ec10860143cbf

--- lib/vasnprintf.c.orig	2015-01-04 16:46:03.000000000 +0000
+++ lib/vasnprintf.c
@@ -4858,7 +4869,10 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *
 #endif
                   *fbp = dp->conversion;
 #if USE_SNPRINTF
-# if !(((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__) || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))
+# if ! (((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3))        \
+         && !defined __UCLIBC__)                                            \
+        || (defined __APPLE__ && defined __MACH__)                          \
+        || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))
                 fbp[1] = '%';
                 fbp[2] = 'n';
                 fbp[3] = '\0';
@@ -4872,6 +4886,13 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *
                    in format strings in writable memory may crash the program
                    (if compiled with _FORTIFY_SOURCE=2), so we should avoid it
                    in this situation.  */
+                /* On Mac OS X 10.3 or newer, we know that snprintf's return
+                   value conforms to ISO C 99: the tests gl_SNPRINTF_RETVAL_C99
+                   and gl_SNPRINTF_TRUNCATION_C99 pass.
+                   Therefore we can avoid using %n in this situation.
+                   On Mac OS X 10.13 or newer, the use of %n in format strings
+                   in writable memory by default crashes the program, so we
+                   should avoid it in this situation.  */
                 /* On native Windows systems (such as mingw), we can avoid using
                    %n because:
                      - Although the gl_SNPRINTF_TRUNCATION_C99 test fails,

