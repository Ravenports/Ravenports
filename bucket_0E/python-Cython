# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-Cython
VERSION=		0.29.16
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Compiler to write C extensions for Python (PY37)
SDESC[py38]=		Compiler to write C extensions for Python (PY38)
HOMEPAGE=		https://cython.org/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/C/Cython
DISTFILE[1]=		Cython-0.29.16.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		Cython-0.29.16

GENERATED=		yes

[PY37].USES_ON=				python:py37

[PY38].USES_ON=				python:py38

[FILE:1108:descriptions/desc.single]
The Cython language makes writing C extensions for the Python language as
easy as Python itself.  Cython is a source code translator based on Pyrex_,
but supports more cutting edge functionality and optimizations.

The Cython language is a superset of the Python language (almost all Python
code is also valid Cython code), but Cython additionally supports optional
static typing to natively call C functions, operate with C++ classes and
declare fast C types on variables and class attributes.  This allows the
compiler to generate very efficient C code from Cython code.

This makes Cython the ideal language for writing glue code for external
C/C++ libraries, and for fast C modules that speed up the execution of
Python code.

Note that for one-time builds, e.g. for CI/testing, on platforms that are
not
covered by one of the wheel packages provided on PyPI, it is substantially
faster
than a full source build to install an uncompiled (slower) version of
Cython with::

    pip install Cython --install-option="--no-cython-compile"

.. _Pyrex: http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/


[FILE:100:distinfo]
232755284f942cbb3b43a06cd85974ef3c970a021aef19b5243c03ee2b08fa05      2058582 Cython-0.29.16.tar.gz

