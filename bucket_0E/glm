# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		glm
VERSION=		0.9.9.0
REVISION=		1
KEYWORDS=		math graphics
VARIANTS=		standard
SDESC[standard]=	C++ mathematics library for graphics programming
HOMEPAGE=		https://glm.g-truc.net/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/g-truc:glm:0.9.9.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cmake:outsource pkgconfig

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKSRC}}/copying.txt
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		math/glm

CMAKE_ARGS=		-DGLM_ENABLE_EXPERIMENTAL=ON

post-patch:
	${FIND} ${WRKSRC} -name "*.orig" -type f -delete

[FILE:917:descriptions/desc.single]
OpenGL Mathematics (GLM) is a header only C++ mathematics library for
graphics software based on the OpenGL Shading Language (GLSL)
specification.

GLM provides classes and functions designed and implemented with the same
naming conventions and functionalities than GLSL so that when a programmer
knows GLSL, he knows GLM as well which makes it really easy to use.

This project isn't limited to GLSL features.  An extension system, based
on the GLSL extension conventions, provides extended capabilities: matrix
transformations, quaternions, half-based types, random numbers,
procedural noise functions, etc...

This library works perfectly with OpenGL but it also ensures
interoperability with third party libraries and SDKs.  It is a good
candidate for software rendering (Raytracing / Rasterisation), image
processing, physic simulations and any context that requires a simple
and convenient mathematics library.


[FILE:104:distinfo]
514dea9ac0099dc389cf293cf1ab3d97aff080abad55bf79d4ab7ff6895ee69c      2716220 g-truc-glm-0.9.9.0.tar.gz


[FILE:4692:manifests/plist.single]
include/glm/
 common.hpp
 experimental.hpp
 exponential.hpp
 ext.hpp
 fwd.hpp
 geometric.hpp
 glm.hpp
 integer.hpp
 mat2x2.hpp
 mat2x3.hpp
 mat2x4.hpp
 mat3x2.hpp
 mat3x3.hpp
 mat3x4.hpp
 mat4x2.hpp
 mat4x3.hpp
 mat4x4.hpp
 matrix.hpp
 packing.hpp
 trigonometric.hpp
 vec2.hpp
 vec3.hpp
 vec4.hpp
 vector_relational.hpp
include/glm/detail/
 _features.hpp
 _fixes.hpp
 _noise.hpp
 _swizzle.hpp
 _swizzle_func.hpp
 _vectorize.hpp
 compute_vector_relational.hpp
 func_common.inl
 func_common_simd.inl
 func_exponential.inl
 func_exponential_simd.inl
 func_geometric.inl
 func_geometric_simd.inl
 func_integer.inl
 func_integer_simd.inl
 func_matrix.inl
 func_matrix_simd.inl
 func_packing.inl
 func_packing_simd.inl
 func_trigonometric.inl
 func_trigonometric_simd.inl
 func_vector_relational.inl
 func_vector_relational_simd.inl
 qualifier.hpp
 setup.hpp
 type_float.hpp
 type_gentype.hpp
 type_gentype.inl
 type_half.hpp
 type_half.inl
 type_int.hpp
 type_mat.hpp
 type_mat.inl
 type_mat2x2.hpp
 type_mat2x2.inl
 type_mat2x3.hpp
 type_mat2x3.inl
 type_mat2x4.hpp
 type_mat2x4.inl
 type_mat3x2.hpp
 type_mat3x2.inl
 type_mat3x3.hpp
 type_mat3x3.inl
 type_mat3x4.hpp
 type_mat3x4.inl
 type_mat4x2.hpp
 type_mat4x2.inl
 type_mat4x3.hpp
 type_mat4x3.inl
 type_mat4x4.hpp
 type_mat4x4.inl
 type_mat4x4_simd.inl
 type_vec.hpp
 type_vec.inl
 type_vec1.hpp
 type_vec1.inl
 type_vec2.hpp
 type_vec2.inl
 type_vec3.hpp
 type_vec3.inl
 type_vec4.hpp
 type_vec4.inl
 type_vec4_simd.inl
include/glm/ext/
 vec1.hpp
 vec1.inl
 vector_relational.hpp
 vector_relational.inl
include/glm/gtc/
 bitfield.hpp
 bitfield.inl
 color_space.hpp
 color_space.inl
 constants.hpp
 constants.inl
 epsilon.hpp
 epsilon.inl
 integer.hpp
 integer.inl
 matrix_access.hpp
 matrix_access.inl
 matrix_integer.hpp
 matrix_inverse.hpp
 matrix_inverse.inl
 matrix_transform.hpp
 matrix_transform.inl
 noise.hpp
 noise.inl
 packing.hpp
 packing.inl
 quaternion.hpp
 quaternion.inl
 quaternion_simd.inl
 random.hpp
 random.inl
 reciprocal.hpp
 reciprocal.inl
 round.hpp
 round.inl
 type_aligned.hpp
 type_precision.hpp
 type_precision.inl
 type_ptr.hpp
 type_ptr.inl
 ulp.hpp
 ulp.inl
 vec1.hpp
 vec1.inl
include/glm/gtx/
 associated_min_max.hpp
 associated_min_max.inl
 bit.hpp
 bit.inl
 closest_point.hpp
 closest_point.inl
 color_encoding.hpp
 color_encoding.inl
 color_space.hpp
 color_space.inl
 color_space_YCoCg.hpp
 color_space_YCoCg.inl
 common.hpp
 common.inl
 compatibility.hpp
 compatibility.inl
 component_wise.hpp
 component_wise.inl
 dual_quaternion.hpp
 dual_quaternion.inl
 easing.hpp
 easing.inl
 euler_angles.hpp
 euler_angles.inl
 extend.hpp
 extend.inl
 extended_min_max.hpp
 extended_min_max.inl
 exterior_product.hpp
 exterior_product.inl
 fast_exponential.hpp
 fast_exponential.inl
 fast_square_root.hpp
 fast_square_root.inl
 fast_trigonometry.hpp
 fast_trigonometry.inl
 float_notmalize.inl
 functions.hpp
 functions.inl
 gradient_paint.hpp
 gradient_paint.inl
 handed_coordinate_space.hpp
 handed_coordinate_space.inl
 hash.hpp
 hash.inl
 integer.hpp
 integer.inl
 intersect.hpp
 intersect.inl
 io.hpp
 io.inl
 log_base.hpp
 log_base.inl
 matrix_cross_product.hpp
 matrix_cross_product.inl
 matrix_decompose.hpp
 matrix_decompose.inl
 matrix_factorisation.hpp
 matrix_factorisation.inl
 matrix_interpolation.hpp
 matrix_interpolation.inl
 matrix_major_storage.hpp
 matrix_major_storage.inl
 matrix_operation.hpp
 matrix_operation.inl
 matrix_query.hpp
 matrix_query.inl
 matrix_transform_2d.hpp
 matrix_transform_2d.inl
 mixed_product.hpp
 mixed_product.inl
 norm.hpp
 norm.inl
 normal.hpp
 normal.inl
 normalize_dot.hpp
 normalize_dot.inl
 number_precision.hpp
 number_precision.inl
 optimum_pow.hpp
 optimum_pow.inl
 orthonormalize.hpp
 orthonormalize.inl
 perpendicular.hpp
 perpendicular.inl
 polar_coordinates.hpp
 polar_coordinates.inl
 projection.hpp
 projection.inl
 quaternion.hpp
 quaternion.inl
 range.hpp
 raw_data.hpp
 raw_data.inl
 rotate_normalized_axis.hpp
 rotate_normalized_axis.inl
 rotate_vector.hpp
 rotate_vector.inl
 scalar_multiplication.hpp
 scalar_relational.hpp
 scalar_relational.inl
 spline.hpp
 spline.inl
 std_based_type.hpp
 std_based_type.inl
 string_cast.hpp
 string_cast.inl
 texture.hpp
 texture.inl
 transform.hpp
 transform.inl
 transform2.hpp
 transform2.inl
 type_aligned.hpp
 type_aligned.inl
 type_trait.hpp
 type_trait.inl
 vec_swizzle.hpp
 vector_angle.hpp
 vector_angle.inl
 vector_query.hpp
 vector_query.inl
 wrap.hpp
 wrap.inl
include/glm/simd/
 common.h
 exponential.h
 geometric.h
 integer.h
 matrix.h
 packing.h
 platform.h
 trigonometric.h
 vector_relational.h
lib/cmake/glm/
 glmConfig.cmake
 glmConfigVersion.cmake
 glmTargets.cmake
lib/pkgconfig/glm.pc


[FILE:34152:patches/patch-0001-Make-GLM_ENABLE_EXPERIMENTAL-a-configurable-option]
From 99a9676a0193f6291d7202d7af72e24580abe565 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andreas=20M=C3=BCller?= <schnitzeltony@gmail.com>
Date: Fri, 16 Mar 2018 13:55:29 +0100
Subject: [PATCH 1/2] Make GLM_ENABLE_EXPERIMENTAL a configurable option
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

It seems that erroring out if GLM_ENABLE_EXPERIMENTAL is not set turns into
packagers nightmare: There are packages around expecting glx headers. E.g
libgltf [1] fails during configure checking for usable headers AND during
compile. Paticularly fixing configure for those packages is time-consuming:
The only way (correct me if I am wrong) is creating a patch adding

AC_DEFINE([GLM_ENABLE_EXPERIMENTAL], [1], [glm needs this for gtx headers])

By adding a configure option 'GLM_ENABLE_EXPERIMENTAL', the decision to use
glm/glx is done at one (and the right) place.

Signed-off-by: Andreas MÃ¼ller <schnitzeltony@gmail.com>

[1] https://gerrit.libreoffice.org/gitweb?p=libgltf.git

Uptream-Status: Submitted [2]

[2] https://github.com/g-truc/glm/pull/741
---
 CMakeLists.txt                      | 6 ++++++
 glm/CMakeLists.txt                  | 2 ++
 glm/experimental.hpp.in             | 1 +
 glm/ext.hpp                         | 1 +
 glm/gtx/associated_min_max.hpp      | 1 +
 glm/gtx/bit.hpp                     | 1 +
 glm/gtx/closest_point.hpp           | 1 +
 glm/gtx/color_space.hpp             | 1 +
 glm/gtx/color_space_YCoCg.hpp       | 1 +
 glm/gtx/common.hpp                  | 1 +
 glm/gtx/compatibility.hpp           | 1 +
 glm/gtx/component_wise.hpp          | 1 +
 glm/gtx/dual_quaternion.hpp         | 1 +
 glm/gtx/euler_angles.hpp            | 1 +
 glm/gtx/extend.hpp                  | 1 +
 glm/gtx/extended_min_max.hpp        | 1 +
 glm/gtx/fast_exponential.hpp        | 1 +
 glm/gtx/fast_square_root.hpp        | 1 +
 glm/gtx/fast_trigonometry.hpp       | 1 +
 glm/gtx/gradient_paint.hpp          | 1 +
 glm/gtx/handed_coordinate_space.hpp | 1 +
 glm/gtx/hash.hpp                    | 1 +
 glm/gtx/integer.hpp                 | 1 +
 glm/gtx/intersect.hpp               | 1 +
 glm/gtx/io.hpp                      | 1 +
 glm/gtx/log_base.hpp                | 1 +
 glm/gtx/matrix_cross_product.hpp    | 1 +
 glm/gtx/matrix_decompose.hpp        | 1 +
 glm/gtx/matrix_factorisation.hpp    | 1 +
 glm/gtx/matrix_interpolation.hpp    | 1 +
 glm/gtx/matrix_major_storage.hpp    | 1 +
 glm/gtx/matrix_operation.hpp        | 1 +
 glm/gtx/matrix_query.hpp            | 1 +
 glm/gtx/matrix_transform_2d.hpp     | 1 +
 glm/gtx/mixed_product.hpp           | 1 +
 glm/gtx/norm.hpp                    | 1 +
 glm/gtx/normal.hpp                  | 1 +
 glm/gtx/normalize_dot.hpp           | 1 +
 glm/gtx/number_precision.hpp        | 1 +
 glm/gtx/optimum_pow.hpp             | 1 +
 glm/gtx/orthonormalize.hpp          | 1 +
 glm/gtx/perpendicular.hpp           | 1 +
 glm/gtx/polar_coordinates.hpp       | 1 +
 glm/gtx/projection.hpp              | 1 +
 glm/gtx/quaternion.hpp              | 1 +
 glm/gtx/range.hpp                   | 1 +
 glm/gtx/raw_data.hpp                | 1 +
 glm/gtx/rotate_normalized_axis.hpp  | 1 +
 glm/gtx/rotate_vector.hpp           | 1 +
 glm/gtx/scalar_multiplication.hpp   | 1 +
 glm/gtx/scalar_relational.hpp       | 1 +
 glm/gtx/spline.hpp                  | 1 +
 glm/gtx/std_based_type.hpp          | 1 +
 glm/gtx/string_cast.hpp             | 1 +
 glm/gtx/texture.hpp                 | 1 +
 glm/gtx/transform.hpp               | 1 +
 glm/gtx/transform2.hpp              | 1 +
 glm/gtx/type_aligned.hpp            | 1 +
 glm/gtx/type_trait.hpp              | 1 +
 glm/gtx/vec_swizzle.hpp             | 1 +
 glm/gtx/vector_angle.hpp            | 1 +
 glm/gtx/vector_query.hpp            | 1 +
 glm/gtx/wrap.hpp                    | 1 +
 63 files changed, 69 insertions(+)
 create mode 100644 glm/experimental.hpp.in

diff --git CMakeLists.txt CMakeLists.txt
index e5159b0f..bd4dd654 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -82,6 +82,11 @@ option(GLM_TEST_ENABLE_SIMD_AVX "Enable AVX optimizations" OFF)
 option(GLM_TEST_ENABLE_SIMD_AVX2 "Enable AVX2 optimizations" OFF)
 option(GLM_TEST_FORCE_PURE "Force 'pure' instructions" OFF)
 
+option(GLM_ENABLE_EXPERIMENTAL "Enable experimental GLM_GTX" OFF)
+configure_file(glm/experimental.hpp.in experimental.hpp @ONLY)
+include_directories(${CMAKE_BINARY_DIR}/glm)
+include_directories(${CMAKE_BINARY_DIR})
+
 if(GLM_TEST_FORCE_PURE)
 	add_definitions(-DGLM_FORCE_PURE)
 
@@ -167,6 +172,7 @@ option(GLM_INSTALL_ENABLE "GLM install" ON)
 set(GLM_INSTALL_CONFIGDIR "${CMAKE_INSTALL_LIBDIR}/cmake/glm")
 if (GLM_INSTALL_ENABLE)
 	install(DIRECTORY glm DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+	install(FILES "${CMAKE_CURRENT_BINARY_DIR}/experimental.hpp" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/glm)
 endif()
 
 write_basic_package_version_file("${CMAKE_CURRENT_BINARY_DIR}/glmConfigVersion.cmake" VERSION ${GLM_VERSION} COMPATIBILITY AnyNewerVersion)
diff --git glm/CMakeLists.txt glm/CMakeLists.txt
index df9c9ee5..dc5db4bc 100644
--- glm/CMakeLists.txt
+++ glm/CMakeLists.txt
@@ -43,6 +43,8 @@ source_group("SIMD Files" FILES ${SIMD_INLINE})
 source_group("SIMD Files" FILES ${SIMD_HEADER})
 
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/..)
+# make out-of tree builds find experimental.hpp
+include_directories(${CMAKE_BINARY_DIR}/glm)
 
 if(GLM_STATIC_LIBRARY_ENABLE OR GLM_DYNAMIC_LIBRARY_ENABLE)
 	if(GLM_STATIC_LIBRARY_ENABLE)
diff --git glm/experimental.hpp.in glm/experimental.hpp.in
new file mode 100644
index 00000000..bfab5138
--- /dev/null
+++ glm/experimental.hpp.in
@@ -0,0 +1 @@
+#cmakedefine GLM_ENABLE_EXPERIMENTAL
diff --git glm/ext.hpp glm/ext.hpp
index d085bfd5..a2948447 100644
--- glm/ext.hpp
+++ glm/ext.hpp
@@ -39,6 +39,7 @@
 #	include "./gtc/type_aligned.hpp"
 #endif
 
+#include "experimental.hpp"
 #ifdef GLM_ENABLE_EXPERIMENTAL
 #include "./gtx/associated_min_max.hpp"
 #include "./gtx/bit.hpp"
diff --git glm/gtx/associated_min_max.hpp glm/gtx/associated_min_max.hpp
index 0c9935f3..d00c2bc4 100644
--- glm/gtx/associated_min_max.hpp
+++ glm/gtx/associated_min_max.hpp
@@ -16,6 +16,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GTX_associated_min_max is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/bit.hpp glm/gtx/bit.hpp
index 1447fa00..31957083 100644
--- glm/gtx/bit.hpp
+++ glm/gtx/bit.hpp
@@ -15,6 +15,7 @@
 // Dependencies
 #include "../gtc/bitfield.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_bit is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/closest_point.hpp glm/gtx/closest_point.hpp
index 6859bb96..ebd9fe5a 100644
--- glm/gtx/closest_point.hpp
+++ glm/gtx/closest_point.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_closest_point is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/color_space.hpp glm/gtx/color_space.hpp
index d1e655c3..51416819 100644
--- glm/gtx/color_space.hpp
+++ glm/gtx/color_space.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_color_space is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/color_space_YCoCg.hpp glm/gtx/color_space_YCoCg.hpp
index e82cbd8b..7ae71041 100644
--- glm/gtx/color_space_YCoCg.hpp
+++ glm/gtx/color_space_YCoCg.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_color_space_YCoCg is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/common.hpp glm/gtx/common.hpp
index 8081bff7..57a68a8d 100644
--- glm/gtx/common.hpp
+++ glm/gtx/common.hpp
@@ -18,6 +18,7 @@
 #include "../vec4.hpp"
 #include "../gtc/vec1.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_common is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/compatibility.hpp glm/gtx/compatibility.hpp
index e5b60399..9876669c 100644
--- glm/gtx/compatibility.hpp
+++ glm/gtx/compatibility.hpp
@@ -16,6 +16,7 @@
 #include "../glm.hpp"
 #include "../gtc/quaternion.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_compatibility is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/component_wise.hpp glm/gtx/component_wise.hpp
index 39bab5d5..4fe0e4e2 100644
--- glm/gtx/component_wise.hpp
+++ glm/gtx/component_wise.hpp
@@ -18,6 +18,7 @@
 #include "../detail/setup.hpp"
 #include "../detail/qualifier.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_component_wise is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/dual_quaternion.hpp glm/gtx/dual_quaternion.hpp
index c4343e9d..d59fb459 100644
--- glm/gtx/dual_quaternion.hpp
+++ glm/gtx/dual_quaternion.hpp
@@ -20,6 +20,7 @@
 #include "../gtc/constants.hpp"
 #include "../gtc/quaternion.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_dual_quaternion is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/euler_angles.hpp glm/gtx/euler_angles.hpp
index e66e9281..ad5988c1 100644
--- glm/gtx/euler_angles.hpp
+++ glm/gtx/euler_angles.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_euler_angles is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/extend.hpp glm/gtx/extend.hpp
index eda4e470..cde6db63 100644
--- glm/gtx/extend.hpp
+++ glm/gtx/extend.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_extend is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/extended_min_max.hpp glm/gtx/extended_min_max.hpp
index 3e767b0c..0bcffcc6 100644
--- glm/gtx/extended_min_max.hpp
+++ glm/gtx/extended_min_max.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_extented_min_max is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/fast_exponential.hpp glm/gtx/fast_exponential.hpp
index 2d4918e7..e6d11f0a 100644
--- glm/gtx/fast_exponential.hpp
+++ glm/gtx/fast_exponential.hpp
@@ -16,6 +16,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_fast_exponential is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/fast_square_root.hpp glm/gtx/fast_square_root.hpp
index 1e1ec3cf..f758aeef 100644
--- glm/gtx/fast_square_root.hpp
+++ glm/gtx/fast_square_root.hpp
@@ -19,6 +19,7 @@
 #include "../exponential.hpp"
 #include "../geometric.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_fast_square_root is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/fast_trigonometry.hpp glm/gtx/fast_trigonometry.hpp
index 739065fb..f1332958 100644
--- glm/gtx/fast_trigonometry.hpp
+++ glm/gtx/fast_trigonometry.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../gtc/constants.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_fast_trigonometry is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/gradient_paint.hpp glm/gtx/gradient_paint.hpp
index 2713cec0..d4703991 100644
--- glm/gtx/gradient_paint.hpp
+++ glm/gtx/gradient_paint.hpp
@@ -17,6 +17,7 @@
 #include "../glm.hpp"
 #include "../gtx/optimum_pow.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_gradient_paint is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/handed_coordinate_space.hpp glm/gtx/handed_coordinate_space.hpp
index 1d0d4104..3a52ddcf 100644
--- glm/gtx/handed_coordinate_space.hpp
+++ glm/gtx/handed_coordinate_space.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_handed_coordinate_space is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/hash.hpp glm/gtx/hash.hpp
index fe8a3efd..92bfc9b2 100644
--- glm/gtx/hash.hpp
+++ glm/gtx/hash.hpp
@@ -12,6 +12,7 @@
 
 #pragma once
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_hash is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/integer.hpp glm/gtx/integer.hpp
index 96637a13..5d1a16c6 100644
--- glm/gtx/integer.hpp
+++ glm/gtx/integer.hpp
@@ -16,6 +16,7 @@
 #include "../glm.hpp"
 #include "../gtc/integer.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_integer is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/intersect.hpp glm/gtx/intersect.hpp
index 61e2226a..4895ba93 100644
--- glm/gtx/intersect.hpp
+++ glm/gtx/intersect.hpp
@@ -21,6 +21,7 @@
 #include "../gtx/closest_point.hpp"
 #include "../gtx/vector_query.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_closest_point is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/io.hpp glm/gtx/io.hpp
index 49a1ec11..ae39cd60 100644
--- glm/gtx/io.hpp
+++ glm/gtx/io.hpp
@@ -23,6 +23,7 @@
 #include "../glm.hpp"
 #include "../gtx/quaternion.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_io is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/log_base.hpp glm/gtx/log_base.hpp
index e873e356..45b8d53c 100644
--- glm/gtx/log_base.hpp
+++ glm/gtx/log_base.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_log_base is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/matrix_cross_product.hpp glm/gtx/matrix_cross_product.hpp
index 967743b8..52d6c173 100644
--- glm/gtx/matrix_cross_product.hpp
+++ glm/gtx/matrix_cross_product.hpp
@@ -16,6 +16,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_matrix_cross_product is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/matrix_decompose.hpp glm/gtx/matrix_decompose.hpp
index b7ec0e83..6793fee2 100644
--- glm/gtx/matrix_decompose.hpp
+++ glm/gtx/matrix_decompose.hpp
@@ -20,6 +20,7 @@
 #include "../gtc/quaternion.hpp"
 #include "../gtc/matrix_transform.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_matrix_decompose is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/matrix_factorisation.hpp glm/gtx/matrix_factorisation.hpp
index e30a7746..79c293be 100644
--- glm/gtx/matrix_factorisation.hpp
+++ glm/gtx/matrix_factorisation.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_matrix_factorisation is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/matrix_interpolation.hpp glm/gtx/matrix_interpolation.hpp
index 89c4596c..799983bb 100644
--- glm/gtx/matrix_interpolation.hpp
+++ glm/gtx/matrix_interpolation.hpp
@@ -16,6 +16,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_matrix_interpolation is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/matrix_major_storage.hpp glm/gtx/matrix_major_storage.hpp
index 7f264a59..e68467cd 100644
--- glm/gtx/matrix_major_storage.hpp
+++ glm/gtx/matrix_major_storage.hpp
@@ -16,6 +16,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_matrix_major_storage is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/matrix_operation.hpp glm/gtx/matrix_operation.hpp
index bce938bb..1e85bb5e 100644
--- glm/gtx/matrix_operation.hpp
+++ glm/gtx/matrix_operation.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_matrix_operation is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/matrix_query.hpp glm/gtx/matrix_query.hpp
index 5df5f52f..eec1eec0 100644
--- glm/gtx/matrix_query.hpp
+++ glm/gtx/matrix_query.hpp
@@ -18,6 +18,7 @@
 #include "../gtx/vector_query.hpp"
 #include <limits>
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_matrix_query is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/matrix_transform_2d.hpp glm/gtx/matrix_transform_2d.hpp
index 239ab9f4..3ca8d2f2 100644
--- glm/gtx/matrix_transform_2d.hpp
+++ glm/gtx/matrix_transform_2d.hpp
@@ -17,6 +17,7 @@
 #include "../mat3x3.hpp"
 #include "../vec2.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_matrix_transform_2d is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/mixed_product.hpp glm/gtx/mixed_product.hpp
index 58562aab..5c7460d5 100644
--- glm/gtx/mixed_product.hpp
+++ glm/gtx/mixed_product.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_mixed_product is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/norm.hpp glm/gtx/norm.hpp
index 46474e07..3cf2c3ea 100644
--- glm/gtx/norm.hpp
+++ glm/gtx/norm.hpp
@@ -17,6 +17,7 @@
 #include "../geometric.hpp"
 #include "../gtx/quaternion.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_norm is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/normal.hpp glm/gtx/normal.hpp
index 15cec9c2..7bb4c096 100644
--- glm/gtx/normal.hpp
+++ glm/gtx/normal.hpp
@@ -16,6 +16,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_normal is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/normalize_dot.hpp glm/gtx/normalize_dot.hpp
index 86048e70..c6604da4 100644
--- glm/gtx/normalize_dot.hpp
+++ glm/gtx/normalize_dot.hpp
@@ -16,6 +16,7 @@
 // Dependency:
 #include "../gtx/fast_square_root.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_normalize_dot is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/number_precision.hpp glm/gtx/number_precision.hpp
index 3732a56c..b48845f7 100644
--- glm/gtx/number_precision.hpp
+++ glm/gtx/number_precision.hpp
@@ -18,6 +18,7 @@
 #include "../glm.hpp"
 #include "../gtc/type_precision.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_number_precision is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/optimum_pow.hpp glm/gtx/optimum_pow.hpp
index eb09f1c3..94a6bbb2 100644
--- glm/gtx/optimum_pow.hpp
+++ glm/gtx/optimum_pow.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_optimum_pow is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/orthonormalize.hpp glm/gtx/orthonormalize.hpp
index 2a684ee4..4ff47e53 100644
--- glm/gtx/orthonormalize.hpp
+++ glm/gtx/orthonormalize.hpp
@@ -18,6 +18,7 @@
 #include "../mat3x3.hpp"
 #include "../geometric.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_orthonormalize is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/perpendicular.hpp glm/gtx/perpendicular.hpp
index 35601ac7..17251ebe 100644
--- glm/gtx/perpendicular.hpp
+++ glm/gtx/perpendicular.hpp
@@ -17,6 +17,7 @@
 #include "../glm.hpp"
 #include "../gtx/projection.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_perpendicular is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/polar_coordinates.hpp glm/gtx/polar_coordinates.hpp
index b8421db4..5125215d 100644
--- glm/gtx/polar_coordinates.hpp
+++ glm/gtx/polar_coordinates.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_polar_coordinates is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/projection.hpp glm/gtx/projection.hpp
index 9a24abf9..4d5bf76f 100644
--- glm/gtx/projection.hpp
+++ glm/gtx/projection.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../geometric.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_projection is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/quaternion.hpp glm/gtx/quaternion.hpp
index c3d99a5c..808ba0fd 100644
--- glm/gtx/quaternion.hpp
+++ glm/gtx/quaternion.hpp
@@ -19,6 +19,7 @@
 #include "../gtc/quaternion.hpp"
 #include "../gtx/norm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_quaternion is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/range.hpp glm/gtx/range.hpp
index e0ef46af..03c797c3 100644
--- glm/gtx/range.hpp
+++ glm/gtx/range.hpp
@@ -15,6 +15,7 @@
 // Dependencies
 #include "../detail/setup.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_range is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/raw_data.hpp glm/gtx/raw_data.hpp
index fb34c8cb..0084fec6 100644
--- glm/gtx/raw_data.hpp
+++ glm/gtx/raw_data.hpp
@@ -16,6 +16,7 @@
 #include "../detail/setup.hpp"
 #include "../detail/type_int.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_raw_data is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/rotate_normalized_axis.hpp glm/gtx/rotate_normalized_axis.hpp
index eee90d6e..82612928 100644
--- glm/gtx/rotate_normalized_axis.hpp
+++ glm/gtx/rotate_normalized_axis.hpp
@@ -19,6 +19,7 @@
 #include "../gtc/epsilon.hpp"
 #include "../gtc/quaternion.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_rotate_normalized_axis is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/rotate_vector.hpp glm/gtx/rotate_vector.hpp
index c8ace89e..e954b041 100644
--- glm/gtx/rotate_vector.hpp
+++ glm/gtx/rotate_vector.hpp
@@ -17,6 +17,7 @@
 #include "../glm.hpp"
 #include "../gtx/transform.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_rotate_vector is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/scalar_multiplication.hpp glm/gtx/scalar_multiplication.hpp
index b73edf67..22baa52a 100644
--- glm/gtx/scalar_multiplication.hpp
+++ glm/gtx/scalar_multiplication.hpp
@@ -16,6 +16,7 @@
 
 #include "../detail/setup.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_scalar_multiplication is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/scalar_relational.hpp glm/gtx/scalar_relational.hpp
index 7fc8c1cc..f21f3b2b 100644
--- glm/gtx/scalar_relational.hpp
+++ glm/gtx/scalar_relational.hpp
@@ -15,6 +15,7 @@
 // Dependency:
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_extend is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/spline.hpp glm/gtx/spline.hpp
index f96d7e07..76359cfd 100644
--- glm/gtx/spline.hpp
+++ glm/gtx/spline.hpp
@@ -16,6 +16,7 @@
 #include "../glm.hpp"
 #include "../gtx/optimum_pow.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_spline is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/std_based_type.hpp glm/gtx/std_based_type.hpp
index 55a2f074..92532b9e 100644
--- glm/gtx/std_based_type.hpp
+++ glm/gtx/std_based_type.hpp
@@ -17,6 +17,7 @@
 #include "../glm.hpp"
 #include <cstdlib>
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_std_based_type is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/string_cast.hpp glm/gtx/string_cast.hpp
index 4b4e280f..dfcd5085 100644
--- glm/gtx/string_cast.hpp
+++ glm/gtx/string_cast.hpp
@@ -24,6 +24,7 @@
 #include <string>
 #include <cmath>
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_string_cast is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/texture.hpp glm/gtx/texture.hpp
index 312bf398..7af185f6 100644
--- glm/gtx/texture.hpp
+++ glm/gtx/texture.hpp
@@ -17,6 +17,7 @@
 #include "../gtc/integer.hpp"
 #include "../gtx/component_wise.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_texture is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/transform.hpp glm/gtx/transform.hpp
index d23b99ce..5a5d9619 100644
--- glm/gtx/transform.hpp
+++ glm/gtx/transform.hpp
@@ -19,6 +19,7 @@
 #include "../glm.hpp"
 #include "../gtc/matrix_transform.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_transform is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/transform2.hpp glm/gtx/transform2.hpp
index 85f5bea4..5d7c83fc 100644
--- glm/gtx/transform2.hpp
+++ glm/gtx/transform2.hpp
@@ -17,6 +17,7 @@
 #include "../glm.hpp"
 #include "../gtx/transform.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_transform2 is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/type_aligned.hpp glm/gtx/type_aligned.hpp
index 6ff9f276..6ad92fad 100644
--- glm/gtx/type_aligned.hpp
+++ glm/gtx/type_aligned.hpp
@@ -18,6 +18,7 @@
 // Dependency:
 #include "../gtc/type_precision.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_type_aligned is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/type_trait.hpp glm/gtx/type_trait.hpp
index 637bbd19..65519cab 100644
--- glm/gtx/type_trait.hpp
+++ glm/gtx/type_trait.hpp
@@ -12,6 +12,7 @@
 
 #pragma once
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_type_trait is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/vec_swizzle.hpp glm/gtx/vec_swizzle.hpp
index daebac38..13d523dc 100644
--- glm/gtx/vec_swizzle.hpp
+++ glm/gtx/vec_swizzle.hpp
@@ -14,6 +14,7 @@
 
 #include "../glm.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_vec_swizzle is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/vector_angle.hpp glm/gtx/vector_angle.hpp
index 401a47eb..98c9d110 100644
--- glm/gtx/vector_angle.hpp
+++ glm/gtx/vector_angle.hpp
@@ -20,6 +20,7 @@
 #include "../gtx/quaternion.hpp"
 #include "../gtx/rotate_vector.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_vector_angle is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/vector_query.hpp glm/gtx/vector_query.hpp
index 6560eaa5..5ab1ffda 100644
--- glm/gtx/vector_query.hpp
+++ glm/gtx/vector_query.hpp
@@ -17,6 +17,7 @@
 #include <cfloat>
 #include <limits>
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_vector_query is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
diff --git glm/gtx/wrap.hpp glm/gtx/wrap.hpp
index 2c4b55df..5bf26a33 100644
--- glm/gtx/wrap.hpp
+++ glm/gtx/wrap.hpp
@@ -16,6 +16,7 @@
 #include "../glm.hpp"
 #include "../gtc/vec1.hpp"
 
+#include "../experimental.hpp"
 #ifndef GLM_ENABLE_EXPERIMENTAL
 #	error "GLM: GLM_GTX_wrap is an experimental extension and may change in the future. Use #define GLM_ENABLE_EXPERIMENTAL before including it, if you really want to use it."
 #endif
-- 
2.14.3



[FILE:1249:patches/patch-0002-glm-install-headers-only]
From 7fdd36d7496238e03e43fcc32839f75588116c5d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andreas=20M=C3=BCller?= <schnitzeltony@gmail.com>
Date: Fri, 16 Mar 2018 15:44:48 +0100
Subject: [PATCH 2/2] glm: install headers only
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Plausibility check in root source path

$ find glm -type f ! -name '*.hpp' ! -name '*.h' ! -name '*.inl'
glm/detail/glm.cpp
glm/detail/dummy.cpp
glm/experimental.hpp.in
glm/CMakeLists.txt

Signed-off-by: Andreas MÃ¼ller <schnitzeltony@gmail.com>

Uptream-Status: Submitted [1]

[1] https://github.com/g-truc/glm/pull/741
---
 CMakeLists.txt | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

--- CMakeLists.txt
+++ CMakeLists.txt
@@ -171,7 +171,12 @@ option(GLM_INSTALL_ENABLE "GLM install" ON)
 
 set(GLM_INSTALL_CONFIGDIR "${CMAKE_INSTALL_LIBDIR}/cmake/glm")
 if (GLM_INSTALL_ENABLE)
-	install(DIRECTORY glm DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+	install(DIRECTORY glm
+		DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+		FILES_MATCHING
+			PATTERN "*.h"
+			PATTERN "*.hpp"
+			PATTERN "*.inl")
 	install(FILES "${CMAKE_CURRENT_BINARY_DIR}/experimental.hpp" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/glm)
 endif()
 
-- 
2.14.3


