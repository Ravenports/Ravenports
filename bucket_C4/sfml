# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		sfml
VERSION=		2.6.0
KEYWORDS=		devel multimedia
VARIANTS=		standard
SDESC[standard]=	Simple Fast Multimedia Library
HOMEPAGE=		https://www.sfml-dev.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/SFML:SFML:2.6.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		openal:dev:standard
			libvorbis:dev:standard
			flac:dev:standard
			libglvnd:dev:standard
BUILDRUN_DEPENDS=	flac:primary:standard
			libvorbis:primary:standard
			libglvnd:primary:standard
			openal:primary:standard
EXRUN[dev]=		flac:dev:standard
			openal:dev:standard
			libvorbis:dev:standard

USES=			cmake jpeg freetype
XORG_COMPONENTS=	x11 xrandr xcursor

LICENSE=		ZLIB:primary
LICENSE_FILE=		ZLIB:{{WRKSRC}}/license.md
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/sfml

SOVERSION=		2.6.0
PLIST_SUB=		SOMINOR=6

CMAKE_ARGS=		-DSFML_INSTALL_PKGCONFIG_FILES=ON
			-DSFML_USE_SYSTEM_DEPS=ON
			-DWARNINGS_AS_ERRORS=FALSE

post-patch:
	${REINPLACE_CMD} 's|libdata/pkgconfig|lib/pkgconfig|' \
		${WRKSRC}/cmake/Config.cmake

post-patch-netbsd:
	${REINPLACE_CMD} 's|SFML_SYSTEM_OPENBSD|SFML_SYSTEM_NETBSD|' \
		${WRKSRC}/src/SFML/Window/CursorImpl.hpp \
		${WRKSRC}/src/SFML/Window/GlContext.cpp \
		${WRKSRC}/src/SFML/Window/SensorImpl.hpp \
		${WRKSRC}/src/SFML/Window/WindowImpl.cpp \
		${WRKSRC}/src/SFML/Window/InputImpl.hpp \
		${WRKSRC}/src/SFML/Window/ClipboardImpl.hpp \
		${WRKSRC}/include/SFML/OpenGL.hpp \
		${WRKSRC}/include/SFML/Window/WindowHandle.hpp

post-patch-dragonfly:
	${REINPLACE_CMD} 's|FreeBSD|DragonFly|' \
		${WRKSRC}/cmake/Config.cmake \
		${WRKSRC}/include/SFML/Window/WindowHandle.hpp \
		${WRKSRC}/include/SFML/Config.hpp
	${REINPLACE_CMD} 's|dev/usb/usbhid.h|bus/u4b/usbhid.h|' \
		${WRKSRC}/src/SFML/Window/FreeBSD/JoystickImpl.hpp

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/*.so
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc

post-patch-midnightbsd:
	${REINPLACE_CMD} 's|FreeBSD|MidnightBSD|' \
		${WRKSRC}/cmake/Config.cmake \
		${WRKSRC}/include/SFML/Window/WindowHandle.hpp \
		${WRKSRC}/include/SFML/Config.hpp

[FILE:357:descriptions/desc.primary]
SFML is a portable and easy to use multimedia API written in C++.
You can see it as a modern, object-oriented alternative to SDL.

SFML is composed of several packages to perfectly suit your needs.
You can use SFML as a minimal windowing system to interface with
OpenGL, or as a fully-featured multimedia library for building games
or interactive programs.


[FILE:101:distinfo]
0c3f84898ea1db07dc46fa92e85038d8c449e3c8653fe09997383173de96bc06     25493305 SFML-SFML-2.6.0.tar.gz


[FILE:389:manifests/plist.primary]
lib/
 libsfml-audio.so.%%SOMAJOR%%.%%SOMINOR%%
 libsfml-audio.so.%%SOVERSION%%
 libsfml-graphics.so.%%SOMAJOR%%.%%SOMINOR%%
 libsfml-graphics.so.%%SOVERSION%%
 libsfml-network.so.%%SOMAJOR%%.%%SOMINOR%%
 libsfml-network.so.%%SOVERSION%%
 libsfml-system.so.%%SOMAJOR%%.%%SOMINOR%%
 libsfml-system.so.%%SOVERSION%%
 libsfml-window.so.%%SOMAJOR%%.%%SOMINOR%%
 libsfml-window.so.%%SOVERSION%%


[FILE:2067:manifests/plist.dev]
include/SFML/
 Audio.hpp
 Config.hpp
 GpuPreference.hpp
 Graphics.hpp
 Main.hpp
 Network.hpp
 OpenGL.hpp
 System.hpp
 Window.hpp
include/SFML/Audio/
 AlResource.hpp
 Export.hpp
 InputSoundFile.hpp
 Listener.hpp
 Music.hpp
 OutputSoundFile.hpp
 Sound.hpp
 SoundBuffer.hpp
 SoundBufferRecorder.hpp
 SoundFileFactory.hpp
 SoundFileFactory.inl
 SoundFileReader.hpp
 SoundFileWriter.hpp
 SoundRecorder.hpp
 SoundSource.hpp
 SoundStream.hpp
include/SFML/Graphics/
 BlendMode.hpp
 CircleShape.hpp
 Color.hpp
 ConvexShape.hpp
 Drawable.hpp
 Export.hpp
 Font.hpp
 Glsl.hpp
 Glsl.inl
 Glyph.hpp
 Image.hpp
 PrimitiveType.hpp
 Rect.hpp
 Rect.inl
 RectangleShape.hpp
 RenderStates.hpp
 RenderTarget.hpp
 RenderTexture.hpp
 RenderWindow.hpp
 Shader.hpp
 Shape.hpp
 Sprite.hpp
 Text.hpp
 Texture.hpp
 Transform.hpp
 Transformable.hpp
 Vertex.hpp
 VertexArray.hpp
 VertexBuffer.hpp
 View.hpp
include/SFML/Network/
 Export.hpp
 Ftp.hpp
 Http.hpp
 IpAddress.hpp
 Packet.hpp
 Socket.hpp
 SocketHandle.hpp
 SocketSelector.hpp
 TcpListener.hpp
 TcpSocket.hpp
 UdpSocket.hpp
include/SFML/System/
 Clock.hpp
 Err.hpp
 Export.hpp
 FileInputStream.hpp
 InputStream.hpp
 Lock.hpp
 MemoryInputStream.hpp
 Mutex.hpp
 NativeActivity.hpp
 NonCopyable.hpp
 Sleep.hpp
 String.hpp
 String.inl
 Thread.hpp
 Thread.inl
 ThreadLocal.hpp
 ThreadLocalPtr.hpp
 ThreadLocalPtr.inl
 Time.hpp
 Utf.hpp
 Utf.inl
 Vector2.hpp
 Vector2.inl
 Vector3.hpp
 Vector3.inl
include/SFML/Window/
 Clipboard.hpp
 Context.hpp
 ContextSettings.hpp
 Cursor.hpp
 Event.hpp
 Export.hpp
 GlResource.hpp
 Joystick.hpp
 Keyboard.hpp
 Mouse.hpp
 Sensor.hpp
 Touch.hpp
 VideoMode.hpp
 Window.hpp
 WindowHandle.hpp
 WindowStyle.hpp
 Vulkan.hpp
 WindowBase.hpp
lib/
 libsfml-audio.so
 libsfml-graphics.so
 libsfml-network.so
 libsfml-system.so
 libsfml-window.so
lib/cmake/SFML/
 SFMLConfig.cmake
 SFMLConfigDependencies.cmake
 SFMLConfigVersion.cmake
 SFMLSharedTargets-%%CMAKE_BUILD_TYPE%%.cmake
 SFMLSharedTargets.cmake
lib/pkgconfig/
 sfml-all.pc
 sfml-audio.pc
 sfml-graphics.pc
 sfml-network.pc
 sfml-system.pc
 sfml-window.pc


[FILE:963:patches/patch-cmake_Config.cmake]
$NetBSD: patch-cmake_Config.cmake,v 1.1 2020/05/21 08:42:00 plunky Exp $

add NetBSD support

--- cmake/Config.cmake.orig	2023-06-20 21:44:57 UTC
+++ cmake/Config.cmake
@@ -31,6 +31,10 @@ elseif(CMAKE_SYSTEM_NAME MATCHES "^k?Fre
     set(SFML_OS_FREEBSD 1)
     # don't use the OpenGL ES implementation on FreeBSD
     set(OPENGL_ES 0)
+elseif(CMAKE_SYSTEM_NAME MATCHES "NetBSD")
+    set(SFML_OS_NETBSD 1)
+    # XXX we want to use OPENGL_ES for some NetBSD, but which?
+    set(OPENGL_ES 0)
 elseif(CMAKE_SYSTEM_NAME MATCHES "^OpenBSD$")
     set(SFML_OS_OPENBSD 1)
     # don't use the OpenGL ES implementation on OpenBSD
@@ -81,6 +85,10 @@ if(SFML_OS_FREEBSD OR SFML_OS_OPENBSD OR
     set(SFML_PKGCONFIG_DIR "/libdata/pkgconfig")
 endif()
 
+if(SFML_OS_NETBSD)
+    set(SFML_PKGCONFIG_DIR "/lib/pkgconfig")
+endif()
+
 # detect the compiler and its version
 # Note: The detection is order is important because:
 # - Visual Studio can both use MSVC and Clang


[FILE:406:patches/patch-include_SFML_Config.hpp]
$NetBSD: patch-include_SFML_Config.hpp,v 1.1 2020/05/21 08:42:00 plunky Exp $

add NetBSD support

--- include/SFML/Config.hpp.orig	2023-06-20 21:44:57 UTC
+++ include/SFML/Config.hpp
@@ -86,6 +86,11 @@
         // FreeBSD
         #define SFML_SYSTEM_FREEBSD
 
+    #elif defined(__NetBSD__)
+
+        // NetBSD
+        #define SFML_SYSTEM_NETBSD
+
     #elif defined(__OpenBSD__)
 
         // OpenBSD


[FILE:490:patches/patch-src_SFML_System_CMakeLists.txt]
$NetBSD: patch-src_SFML_System_CMakeLists.txt,v 1.1 2020/05/21 08:42:00 plunky Exp $

add NetBSD support

--- src/SFML/System/CMakeLists.txt.orig	2023-06-20 21:44:57 UTC
+++ src/SFML/System/CMakeLists.txt
@@ -95,7 +95,7 @@ if(SFML_OS_ANDROID)
 endif()
 
 # setup dependencies
-if(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_MACOSX)
+if(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_NETBSD OR SFML_OS_MACOSX)
     target_link_libraries(sfml-system PRIVATE pthread)
 endif()
 if(SFML_OS_LINUX)


[FILE:556:patches/patch-src_SFML_Window_CMakeLists.txt]
--- src/SFML/Window/CMakeLists.txt.orig	2023-06-20 21:44:57 UTC
+++ src/SFML/Window/CMakeLists.txt
@@ -342,7 +342,7 @@ if(SFML_OS_LINUX)
     target_link_libraries(sfml-window PRIVATE UDev dl)
 elseif(SFML_OS_WINDOWS)
     target_link_libraries(sfml-window PRIVATE winmm gdi32)
-elseif(SFML_OS_FREEBSD)
+elseif(SFML_OS_FREEBSD OR SFML_OS_NETBSD)
     target_link_libraries(sfml-window PRIVATE usbhid)
 elseif(SFML_OS_MACOSX)
     target_link_libraries(sfml-window PRIVATE "-framework Foundation" "-framework AppKit" "-framework IOKit" "-framework Carbon")


[FILE:671:patches/patch-src_SFML_Window_FreeBSD_JoystickImpl.cpp]
$NetBSD: patch-src_SFML_Window_FreeBSD_JoystickImpl.cpp,v 1.1 2020/05/21 08:42:00 plunky Exp $

add NetBSD support

--- src/SFML/Window/FreeBSD/JoystickImpl.cpp.orig	2023-06-20 21:44:57 UTC
+++ src/SFML/Window/FreeBSD/JoystickImpl.cpp
@@ -52,6 +52,16 @@ namespace
     std::map<unsigned int, std::string> plugged;
     std::map<int, std::pair<int, int> > hatValueMap;
 
+#if defined(__NetBSD__)
+    int hid_get_report_id(int fd)
+    {
+        int id;
+        if (ioctl(fd, USB_GET_REPORT_ID, &id) < 0)
+            return -1; 
+        return id;
+    }
+#endif
+
     bool isJoystick(const char *name)
     {
         int file = ::open(name, O_RDONLY | O_NONBLOCK);


[FILE:517:patches/patch-src_SFML_Window_FreeBSD_JoystickImpl.hpp]
$NetBSD: patch-src_SFML_Window_FreeBSD_JoystickImpl.hpp,v 1.1 2020/05/21 08:42:00 plunky Exp $

add NetBSD support

--- src/SFML/Window/FreeBSD/JoystickImpl.hpp.orig	2023-06-20 21:44:57 UTC
+++ src/SFML/Window/FreeBSD/JoystickImpl.hpp
@@ -28,6 +28,9 @@
 ////////////////////////////////////////////////////////////
 // Headers
 ////////////////////////////////////////////////////////////
+#if defined(__NetBSD__)
+#include <dev/usb/usb.h>
+#endif
 #include <dev/usb/usbhid.h>
 #include <usbhid.h>
 #include <vector>


[FILE:465:patches/patch-src_SFML_Window_JoystickImpl.hpp]
$NetBSD: patch-src_SFML_Window_JoystickImpl.hpp,v 1.1 2020/05/21 08:42:00 plunky Exp $

add NetBSD support

--- src/SFML/Window/JoystickImpl.hpp.orig	2023-06-20 21:44:57 UTC
+++ src/SFML/Window/JoystickImpl.hpp
@@ -85,7 +85,7 @@ struct JoystickState
 
     #include <SFML/Window/Unix/JoystickImpl.hpp>
 
-#elif defined(SFML_SYSTEM_FREEBSD)
+#elif defined(SFML_SYSTEM_FREEBSD) || defined (SFML_SYSTEM_NETBSD)
 
     #include <SFML/Window/FreeBSD/JoystickImpl.hpp>
 

