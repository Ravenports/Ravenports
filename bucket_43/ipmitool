# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ipmitool
VERSION=		1.8.19
KEYWORDS=		sysutils
VARIANTS=		std
SDESC[std]=		Command-line interface to IPMI-enabled devices
HOMEPAGE=		https://codeberg.org/IPMITool/ipmitool
CONTACT=		nobody

DOWNLOAD_GROUPS=	main iana
SITES[main]=		https://codeberg.org/IPMITool/ipmitool/archive/
SITES[iana]=		https://leaf.dragonflybsd.org/~marino/raven-distfiles/iana/
DISTFILE[1]=		IPMITOOL_1_8_19.tar.gz:main
DISTFILE[2]=		enterprise-numbers-20230829.tar.gz:iana
DF_INDEX=		1 2
SPKGS[std]=		set
			primary
			man
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		freeipmi:dev:std
BUILDRUN_DEPENDS=	freeipmi:primary:std

USES=			cpe gmake readline ssl autoreconf

DISTNAME=		ipmitool
EXTRACT_DIRTY=		2

LICENSE=		BSD3CLAUSE:primary
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

CPE_VENDOR=		sun
FPC_EQUIVALENT=		sysutils/ipmitool

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-intf-open
			--enable-intf-free

SUB_FILES=		status-ipmi.sh

VAR_OPSYS[netbsd]=	CFLAGS=-D_NETBSD_SOURCE

post-install:
	# remove duplicate license
	${RM} ${STAGEDIR}${STD_DOCDIR}/COPYING
	# install periodic
	${MKDIR} ${STAGEDIR}${PREFIX}/etc/periodic/daily
	${INSTALL_SCRIPT} ${WRKDIR}/status-ipmi.sh \
		${STAGEDIR}${PREFIX}/etc/periodic/daily/400.status-ipmi
	# install IANA database
	${MKDIR} ${STAGEDIR}${PREFIX}/share/misc/
	${INSTALL_DATA} ${WRKDIR}/${NAMEBASE}_2/enterprise-numbers-20230829.txt \
		${STAGEDIR}${PREFIX}/share/misc/enterprise-numbers

[FILE:842:descriptions/desc.primary]
ipmitool is a utility for managing and configuring devices that support
the Intelligent Platform Management Interface.  IPMI is an open standard
for monitoring, logging, recovery, inventory, and control of hardware
that is implemented independent of the main CPU, BIOS, and OS.  The
service processor (or Baseboard Management Controller, BMC) is the brain
behind platform management and its primary purpose is to handle the
autonomous sensor monitoring and event logging features.

The ipmitool program provides a simple command-line interface to this BMC.
It features the ability to read the sensor data repository (SDR) and print
sensor values, display the contents of the System Event Log (SEL), print
Field Replaceable Unit (FRU) inventory information, read and set LAN
configuration parameters, and perform remote chassis power control.


[FILE:214:distinfo]
ce13c710fea3c728ba03a2a65f2dd45b7b13382b6f57e25594739f2e4f20d010       641027 IPMITOOL_1_8_19.tar.gz
40f23aed4b83422e8dfb7e64abd1a70a29fa5149e1cff12aa78b10247b4b9d75      1993010 enterprise-numbers-20230829.tar.gz


[FILE:122:manifests/plist.primary]
bin/ipmitool
etc/periodic/daily/400.status-ipmi
sbin/ipmievd
share/ipmitool/oem_ibm_sel_map
share/misc/enterprise-numbers


[FILE:57:manifests/plist.man]
share/man/man1/ipmitool.1.gz
share/man/man8/ipmievd.8.gz


[FILE:48:manifests/plist.docs]
share/doc/ipmitool/
 AUTHORS
 ChangeLog
 README


[FILE:611:patches/patch-configure.ac]
--- configure.ac.orig	2022-09-01 18:42:31 UTC
+++ configure.ac
@@ -60,6 +60,7 @@ if test "x$WGET" = "x"; then
 	if test "x$CURL" = "x"; then
 		AC_MSG_WARN([** Neither wget nor curl could be found.])
 		AC_MSG_WARN([** IANA PEN database will not be installed by `make install` !])
+		AM_CONDITIONAL([DOWNLOAD], [false])	
 	else
 		DOWNLOAD="$CURL --location --progress-bar"
 		AM_CONDITIONAL([DOWNLOAD], [true])
@@ -118,7 +119,7 @@ solaris*)
 	xenable_intf_lipmi=no
 	xenable_ipmishell=no
 	;;
-*freebsd*)
+*freebsd*|*dragonfly*)
 	xenable_intf_imb=no
 	xenable_intf_lipmi=no
 	CFLAGS="$CFLAGS -D__BSD_VISIBLE"


[FILE:319:patches/patch-lib_ipmi__time.c]
--- lib/ipmi_time.c.orig	2022-09-01 18:42:31 UTC
+++ lib/ipmi_time.c
@@ -105,7 +105,9 @@ ipmi_strftime(char *s, size_t max, const
 		 * the timezone offset.
 		 */
 		gmtime_r(&stamp, &tm);
+#if !defined(__FreeBSD__)
 		daylight = -1;
+#endif
 	} else {
 		/*
 		 * The user wants the time reported in local time zone.


[FILE:1596:files/status-ipmi.sh.in]
#!/bin/sh
#
# Check status of IPMI sensors and System Event Log
#

# If there is a global system configuration file, suck it in.
#
if [ -r /etc/defaults/periodic.conf ]
then
    . /etc/defaults/periodic.conf
    source_periodic_confs
fi

sdr_list_args=${daily_status_ipmi_sdr_list_args:-}
sel_list_args=${daily_status_ipmi_sel_list_args:-}
sel_cap_warn_pct=${daily_status_ipmi_sel_cap_warn_pct:-80}

ipmitool=%%PREFIX%%/bin/ipmitool

rc=0

case "${daily_status_ipmi_enable}" in
    [Yy][Ee][Ss])
        if [ ! -x $ipmitool ]; then
          echo "\$daily_status_ipmi_enable is set but ${ipmitool}" \
               "isn't executable"
          exit 2
        fi

        echo ""
        echo "Checking IPMI sensors:"

        $ipmitool sdr list $sdr_list_args && rc=1 || rc=3

        echo ""
        echo "Checking IPMI System Event Log:"

        info=`$ipmitool sel info` || exit 3
        used=$(echo "${info}" | awk '/Percent Used/{print 0 + $4}')
        entries=$(echo "${info}" | awk '/Entries/{print 0 + $3}')

        if [ $used -gt $sel_cap_warn_pct ]; then
           echo "  SEL is at ${used}% capacity"
           rc=3
        fi

        last=`cat /var/db/ipmi-sel-count 2>/dev/null || echo 0`

        if [ $entries -gt $last ]; then
          echo $entries > /var/db/ipmi-sel-count
          echo ""
          if [ "$sel_list_args" ]; then
            $ipmitool sel list $sel_list_args
          else
            count=$(($entries-$last))
            $ipmitool sel list last $count
          fi
          rc=3
        fi
        ;;
    *)
        rc=0
        ;;
esac

exit $rc

