# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-tornado
VERSION=		6.0.4
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Web framework and asynchronous networking (PY37)
SDESC[py38]=		Web framework and asynchronous networking (PY38)
HOMEPAGE=		http://www.tornadoweb.org/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/t/tornado
DISTFILE[1]=		tornado-6.0.4.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		tornado-6.0.4

GENERATED=		yes

[PY37].USES_ON=				python:py37

[PY38].USES_ON=				python:py38

[FILE:1115:descriptions/desc.single]
Tornado Web Server
==================

[Tornado]_ is a Python web framework and
asynchronous networking library, originally developed at [FriendFeed
]_.  By using non-blocking network I/O, Tornado
can scale to tens of thousands of open connections, making it ideal for
[long polling]_,
[WebSockets]_, and other
applications that require a long-lived connection to each user.

Hello, world
------------

Here is a simple "Hello, world" example web app for Tornado:

.. code-block:: python

    import tornado.ioloop
    import tornado.web

    class MainHandler(tornado.web.RequestHandler):
        def get(self):
            self.write("Hello, world")

    def make_app():
        return tornado.web.Application([
            (r"/", MainHandler),
       ])

    if __name__ == "__main__":
        app = make_app()
        app.listen(8888)
        tornado.ioloop.IOLoop.current().start()

This example does not use any of Tornado's asynchronous features; for
that see this [simple chat room
]_.

Documentation
-------------

Documentation and links to additional resources are available at
http://www.tornadoweb.org


[FILE:99:distinfo]
0fe2d45ba43b00a41cd73f8be321a44936dc1aba233dee979f17a042b83eb6dc       496204 tornado-6.0.4.tar.gz

