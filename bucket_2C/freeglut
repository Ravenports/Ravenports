# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		freeglut
VERSION=		3.2.1
KEYWORDS=		graphics
VARIANTS=		standard
SDESC[standard]=	FOSS implementation of the GLUT library
HOMEPAGE=		http://freeglut.sourceforge.net/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		SF/freeglut/freeglut/3.2.1
DISTFILE[1]=		freeglut-3.2.1.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs
			examples

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	libGLU:single:standard

USES=			cmake:insource mesa
XORG_COMPONENTS=	ice x11 xi xrandr

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		graphics/freeglut

INSTALL_TARGET=		install/strip
SOVERSION=		3.11.0

VAR_OPSYS[freebsd]=	LDFLAGS=-lusbhid
			LDFLAGS=-lm
VAR_OPSYS[sunos]=	LDFLAGS=-lrt

post-patch:
.for fract in Fractals/fractals.c Fractals_random/fractals_random.c
	${REINPLACE_CMD} -e "s|/usr/local|${PREFIX}|g"		\
		${WRKSRC}/progs/demos/${fract}
.endfor

post-install:
	@${MKDIR} ${STAGEDIR}${STD_DOCDIR}  ${STAGEDIR}${STD_EXAMPLESDIR}
.for f in download.html freeglut.html freeglut_logo.png freeglut_user_interface.html index.html ogl_sm.png progress.html structure.html
	${INSTALL_DATA} ${WRKSRC}/doc/${f} ${STAGEDIR}${STD_DOCDIR}
.endfor
	${INSTALL_DATA} ${WRKSRC}/progs/demos/Fractals/fractals.dat \
		${STAGEDIR}${STD_EXAMPLESDIR}
.for prog in CallbackMaker Fractals Fractals_random Lorenz One Resizer multi-touch shapes smooth_opengl3 spaceball subwin timer
	${INSTALL_PROGRAM} ${BUILD_WRKSRC}/bin/${prog} ${STAGEDIR}${STD_EXAMPLESDIR}
.endfor

[FILE:537:descriptions/desc.primary]
freeglut is a completely OpenSourced alternative to the OpenGL Utility
Toolkit (GLUT) library. GLUT was originally written by Mark Kilgard to
support the sample programs in the second edition OpenGL 'RedBook'.
Since then, GLUT has been used in a wide variety of practical applications
because it is simple, universally available and highly portable.

GLUT (and hence freeglut) allows the user to create and manage windows
containing OpenGL contexts on a wide range of platforms and also read the
mouse, keyboard and joystick functions.
 

[FILE:100:distinfo]
d4000e02102acaf259998c870e25214739d1f16f67f99cb35e4f46841399da68       440228 freeglut-3.2.1.tar.gz


[FILE:307:manifests/plist.primary]
include/GL/
 freeglut.h
 freeglut_ext.h
 freeglut_std.h
 freeglut_ucall.h
 glut.h
lib/
 libglut.a
 libglut.so
 libglut.so.%%SOMAJOR%%
 libglut.so.%%SOVERSION%%
lib/cmake/FreeGLUT/
 FreeGLUTConfig.cmake
 FreeGLUTConfigVersion.cmake
 FreeGLUTTargets-release.cmake
 FreeGLUTTargets.cmake
lib/pkgconfig/glut.pc


[FILE:154:manifests/plist.docs]
share/doc/freeglut/
 download.html
 freeglut.html
 freeglut_logo.png
 freeglut_user_interface.html
 index.html
 ogl_sm.png
 progress.html
 structure.html


[FILE:166:manifests/plist.examples]
share/examples/freeglut/
 CallbackMaker
 Fractals
 Fractals_random
 Lorenz
 One
 Resizer
 fractals.dat
 multi-touch
 shapes
 smooth_opengl3
 spaceball
 subwin
 timer


[FILE:442:patches/patch-src_fg__internal.h]
--- src/fg_internal.h.orig	2019-09-25 10:08:07 UTC
+++ src/fg_internal.h
@@ -1067,6 +1067,7 @@ int         fgJoystickDetect( void );
 void        fgInitialiseJoysticks( void );
 void        fgJoystickClose( void );
 void        fgJoystickPollWindow( SFG_Window* window );
+void        fgJoystickRawRead( SFG_Joystick* joy, int* buttons, float* axes );
 
 /* InputDevice Initialisation and Closure */
 int         fgInputDeviceDetect( void );


[FILE:2673:patches/patch-src_x11_fg__internal__x11.h]
--- src/x11/fg_internal_x11.h.orig	2014-10-20 15:27:04 UTC
+++ src/x11/fg_internal_x11.h
@@ -136,8 +136,42 @@ struct tagSFG_PlatformWindowState
 #include <string.h>
 
 #    if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__NetBSD__)
+
+static int hatmap_x[9] = { 0, 0, 1, 1, 1, 0, -1, -1, -1 };
+static int hatmap_y[9] = { 0, 1, 1, 0, -1, -1, -1, 0, 1 };
+
+/* Idents lower than USB_IDENT_OFFSET are for analog joysticks. */
+#    define USB_IDENT_OFFSET    2
+
+#    define USBDEV "/dev/usb"
+#    define UHIDDEV "/dev/uhid"
+#    define AJSDEV "/dev/joy"
+
 /* XXX The below hack is done until freeglut's autoconf is updated. */
 #        define HAVE_USB_JS    1
+#        if defined(__NetBSD__)
+/* XXX The below hack is done until freeglut's autoconf is updated. */
+#            define HAVE_USBHID_H 1
+#            ifdef HAVE_USBHID_H
+#                include <usbhid.h>
+#            else
+#                include <usb.h>
+#            endif
+#        elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
+#            ifdef HAVE_USBHID_H
+#                include <usbhid.h>
+#            else
+#                include <libusbhid.h>
+#            endif
+#            include <dev/usb/usb_ioctl.h>
+#        endif
+#        include <dev/usb/usb.h>
+#        include <dev/usb/usbhid.h>
+
+/* Compatibility with older usb.h revisions */
+#        if !defined(USB_MAX_DEVNAMES) && defined(MAXDEVNAMES)
+#            define USB_MAX_DEVNAMES MAXDEVNAMES
+#        endif
 
 #        if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
 #            include <sys/joystick.h>
@@ -189,6 +223,30 @@ struct tagSFG_PlatformWindowState
  */
 #    define _JS_MAX_AXES 16
 typedef struct tagSFG_PlatformJoystick SFG_PlatformJoystick;
+
+#    if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__NetBSD__)
+struct os_specific_s {
+  char             fname [128 ];
+  int              fd;
+  int              is_analog;
+  /* The following structure members are specific to analog joysticks */
+  struct joystick  ajs;
+#      ifdef HAVE_USB_JS
+  /* The following structure members are specific to USB joysticks */
+  struct hid_item *hids;
+  int              hid_dlen;
+  int              hid_offset;
+  char            *hid_data_buf;
+  int              axes_usage [ _JS_MAX_AXES ];
+#      endif
+  /* We keep button and axes state ourselves, as they might not be updated
+   * on every read of a USB device
+   */
+  int              cache_buttons;
+  float            cache_axes [ _JS_MAX_AXES ];
+};
+#    endif
+
 struct tagSFG_PlatformJoystick
 {
 #   if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__NetBSD__)

