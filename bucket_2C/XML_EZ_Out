# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		XML_EZ_Out
VERSION=		1.06
KEYWORDS=		textproc ada
VARIANTS=		standard
SDESC[standard]=	Library for emitting XML from Ada programs
HOMEPAGE=		http://www.mckae.com/xmlEz.html
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		http://www.mckae.com/xml_ezout/
DISTFILE[1]=		xml_ez_out_1.06.tgz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs
			examples

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			dos2unix gprbuild

DISTNAME=		xml_ez_out

LICENSE=		GMGPL:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GMGPL:stock
LICENSE_AWK=		TERMS:"^package"
LICENSE_SOURCE=		TERMS:{{BUILD_WRKSRC}}/mckae-xml.ads
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		textproc/xml_ez_out

BUILD_WRKSRC=		{{WRKSRC}}/mckae

do-build:
	(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} gprbuild -p -Pxezo_bld)

post-extract:
	${CP} ${FILESDIR}/xezo_bld.gpr ${WRKSRC}
	${SED} -e "s,@PREFIX@,${LOCALBASE},g" ${FILESDIR}/runme.sh.in \
		> ${WRKSRC}/runme.sh

do-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/lib/gnat \
		${STAGEDIR}${PREFIX}/lib/xml_ez_out \
		${STAGEDIR}${PREFIX}/include/xml_ez_out \
		${STAGEDIR}${STD_EXAMPLESDIR} \
		${STAGEDIR}${STD_DOCDIR}
	${INSTALL_DATA} ${FILESDIR}/xml_ez_out.gpr \
		${STAGEDIR}${PREFIX}/lib/gnat
	${INSTALL_DATA} ${BUILD_WRKSRC}/mckae* \
		${STAGEDIR}${PREFIX}/include/xml_ez_out
	${INSTALL_DATA} ${WRKSRC}/lib/* ${STAGEDIR}${PREFIX}/lib/xml_ez_out
	${INSTALL_DATA} ${BUILD_WRKSRC}/README ${STAGEDIR}${STD_DOCDIR}
	${INSTALL_SCRIPT} ${WRKSRC}/runme.sh ${STAGEDIR}${STD_EXAMPLESDIR}
	${INSTALL_DATA} ${BUILD_WRKSRC}/tmeztf.adb \
		${FILESDIR}/example.gpr ${STAGEDIR}${STD_EXAMPLESDIR}

[FILE:493:descriptions/desc.primary]
XML EZ Out is a small set of packages intended to aid the creation of
XML-formatted output from within Ada programs.  It basically wraps the
tags and data provided to it with XML syntax and writes them to a
user-supplied medium.

This medium can be any sort of writable entity, such as a file, a
memory buffer, or even a communications link, such as a socket.  The
only functionality required of the medium is that it supply a
meaningful "Put" (for writing a string) and "New_Line" procedure.


[FILE:98:distinfo]
2473caaddfdbd1e75a1b1e2e3b3b77c6641032a78f281af6bdbd229d26e49f61        12694 xml_ez_out_1.06.tgz


[FILE:468:manifests/plist.primary]
include/xml_ez_out/
 mckae-xml-ez_out-generic_medium.adb
 mckae-xml-ez_out-generic_medium.ads
 mckae-xml-ez_out-string_stream.adb
 mckae-xml-ez_out-string_stream.ads
 mckae-xml-ez_out-text_file.ads
 mckae-xml-ez_out.ads
 mckae-xml.ads
 mckae.ads
lib/gnat/xml_ez_out.gpr
lib/xml_ez_out/
 libxml_ez_out.a
 mckae-xml-ez_out-generic_medium.ali
 mckae-xml-ez_out-string_stream.ali
 mckae-xml-ez_out-text_file.ali
 mckae-xml-ez_out.ali
 mckae-xml.ali
 mckae.ali
 tmeztf.ali


[FILE:28:manifests/plist.docs]
share/doc/XML_EZ_Out/README


[FILE:62:manifests/plist.examples]
share/examples/XML_EZ_Out/
 example.gpr
 tmeztf.adb
 runme.sh


[FILE:232:files/example.gpr]
with "xml_ez_out";
project Example is

   for Exec_Dir use "/tmp";
   for Object_Dir use "/tmp";
   for Main use ("tmeztf.adb");

   package Compiler is
      for Default_Switches ("ada") use ("-O2");
   end Compiler;

end Example;


[FILE:453:files/runme.sh.in]
#!/bin/sh

# This script will:
# 1) Build the example executable in /tmp
# 2) Tell the user how to execute it

GNATMAKE=@PREFIX@/gcc-aux/bin/gnatmake
ADA_PROJECT_PATH=@PREFIX@/lib/gnat
export ADA_PROJECT_PATH

${GNATMAKE} -P example

echo
echo "The source for the example is tmeztf.adb"
echo "The executable example is located in /tmp/tmeztf"
echo "It requires no optons; just run it"
echo 'You may want to execute "rm /tmp/tmeztf*" when you are done.'


[FILE:339:files/xezo_bld.gpr]
project XEZO_Bld is

   for Languages use ("ada");
   for Source_Dirs use ("mckae");
   for Object_Dir use "obj";
   for Library_Name use "xml_ez_out";
   for Library_Dir use "lib";
   for Library_Kind use "static";

   package Builder is
      for Default_Switches ("ada") use ("-gnatf", "-gnatws", "-O2");
   end Builder;

end XEZO_Bld;


[FILE:243:files/xml_ez_out.gpr]
project XML_EZ_Out is
   for Languages use ("ada");
   for Source_Dirs use ("../../include/xml_ez_out");
   for Library_Name use "xml_ez_out";
   for Library_Dir use  "../../lib/xml_ez_out";
   for Externally_Built use "true";
end XML_EZ_Out;

