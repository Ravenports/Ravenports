# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		llvm40
VERSION=		4.0.1
REVISION=		1
KEYWORDS=		devel lang
VARIANTS=		standard
SDESC[standard]=	LLVM 4.0 and Clang
HOMEPAGE=		http://llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://llvm.org/releases/4.0.1/
DISTFILE[1]=		llvm-4.0.1.src.tar.xz:main
DISTFILE[2]=		cfe-4.0.1.src.tar.xz:main
DISTFILE[3]=		clang-tools-extra-4.0.1.src.tar.xz:main
DISTFILE[4]=		openmp-4.0.1.src.tar.xz:main
DF_INDEX=		1 2 3 4
SPKGS[standard]=	complete
			clang
			llvm

OPTIONS_AVAILABLE=	GOLD OPENMP
OPTIONS_STANDARD=	GOLD OPENMP
OPT_ON[freebsd]=	OPENMP//x86_64 GOLD//x86_64
OPT_ON[linux]=		GOLD//x86_64
OPT_ON[dragonfly]=	OPENMP//x86_64 GOLD//x86_64

BROKEN[darwin]=		This port is on its way out, don't build

USES=			cmake:outsource ncurses perl:build python:build
			shebangfix zlib c++:llvm,clang
GNOME_COMPONENTS=	libxml2

DISTNAME=		llvm-4.0.1.src

LICENSE=		CUSTOM1:llvm
LICENSE_NAME=		CUSTOM1:"LLVM Release License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
CMAKE_INSTALL_PREFIX=	{{PREFIX}}/llvm40
FPC_EQUIVALENT=		devel/llvm40
SHEBANG_FILES=		tools/clang/tools/scan-view/bin/scan-view
			tools/clang/tools/clang-format/git-clang-format
			tools/clang/tools/clang-format/clang-format-diff.py
			tools/clang/tools/extra/clang-tidy/tool/clang-tidy-diff.py
			tools/clang/tools/extra/clang-tidy/tool/run-clang-tidy.py
			tools/clang/tools/extra/include-fixer/find-all-symbols/tool/run-find-all-symbols.py

MAKE_JOBS_NUMBER_LIMIT=	2

PLIST_SUB=		NAMEBASE="llvm40"
			LLVM_RELEASE="4.0.1"
			LLVM_MAJOR="4.0"

CMAKE_ARGS=		-DLLVM_BUILD_LLVM_DYLIB=ON
			-DCMAKE_BUILD_WITH_INSTALL_RPATH=1
			-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm40/lib"
			-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"

[OPENMP].DESCRIPTION=			Install libomp, the LLVM OpenMP runtime library

[GOLD].DESCRIPTION=			Build the LLVM Gold plugin for LTO
[GOLD].CMAKE_ARGS_ON=			-DLLVM_BINUTILS_INCDIR={{LOCALBASE}}/toolchain/include

post-patch:
	${REINPLACE_CMD} -e 's,/usr/local/,${LOCALBASE}/,' \
		${WRKSRC}/CMakeLists.txt \
		${WRKSRC}/tools/clang/lib/Driver/Tools.cpp
	${REINPLACE_CMD} -e 's|@RAVEN_GCC@|${LOCALBASE}/toolchain/gcc8/lib|' \
		-e 's|@RAVEN_GCC_TARGET@|${LOCALBASE}/toolchain/gcc8/lib/gcc/${CONFIGURE_TARGET}/8.2.0|' \
		${WRKSRC}/tools/clang/lib/Driver/ToolChains.cpp \
		${WRKSRC}/tools/clang/lib/Driver/Tools.cpp
	${REINPLACE_CMD} \
		-e 's|@RAVEN_GXX_HEADERS_DIR@|${LOCALBASE}/toolchain/gcc8/include/c++/8.2.0|' \
		${WRKSRC}/tools/clang/lib/Driver/ToolChains.cpp \
		${WRKSRC}/tools/clang/lib/Frontend/InitHeaderSearch.cpp

post-patch-OPENMP-OFF:
	${MV} ${WRKSRC}/tools/openmp ${WRKDIR}/unused-openmp-source

post-install:
	${RM} -r ${STAGEDIR}${MANPREFIX}/man
	${RM} -r ${STAGEDIR}${PREFIX}/llvm40/share/man
	${RM} -r ${STAGEDIR}${PREFIX}/llvm40/include/llvm/MC/MCAnalysis
	${INSTALL_PROGRAM} ${WRKDIR}/.build/bin/clang-tblgen \
	    ${STAGEDIR}${PREFIX}/llvm40/bin/
	${FIND} ${STAGEDIR}${PREFIX}/llvm40/bin/ -type f ! \( -name git-clang-format -o -name "scan-*" \) \
		| ${XARGS} ${STRIP_CMD}
	${FIND} ${STAGEDIR}${PREFIX}/llvm40/lib/ -type f -name "*.so*" \
		| ${XARGS} ${STRIP_CMD}

post-extract:
	${MV} ${WRKDIR}/cfe-4.0.1.src ${WRKSRC}/tools/clang
	${MV} ${WRKDIR}/clang-tools-extra-4.0.1.src ${WRKSRC}/tools/clang/tools/extra
	${MV} ${WRKDIR}/openmp-4.0.1.src ${WRKSRC}/tools/openmp

[FILE:842:descriptions/desc.clang]
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies. Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them. The name "LLVM" itself is not an
acronym; it is the full name of the project.

This package contains Clang is an "LLVM native" C/C++/Objective-C
compiler, which aims to deliver amazingly fast compiles (e.g. about 3x
faster than GCC when compiling Objective-C code in a debug
configuration), extremely useful error and warning messages and to
provide a platform for building great source level tools. The Clang
Static Analyzer is a tool that automatically finds bugs in your code,
and is a great example of the sort of tool that can be built using
the Clang frontend as a library to parse C/C++ code.


[FILE:834:descriptions/desc.llvm]
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies. Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them. The name "LLVM" itself is not an
acronym; it is the full name of the project.

This package contains the LLVM Core libraries which provide a modern
source- and target-independent optimizer, along with code generation
support for many popular CPUs (as well as some less common ones!)
These libraries are built around a well specified code representation
known as the LLVM intermediate representation ("LLVM IR"). The LLVM
Core libraries are well documented, and it is particularly easy to
invent your own language (or port an existing compiler) to use LLVM
as an optimizer and code generator.


[FILE:414:distinfo]
da783db1f82d516791179fe103c71706046561f7972b18f0049242dee6712b51     21065652 llvm-4.0.1.src.tar.xz
61738a735852c23c3bdbe52d035488cdb2083013f384d67c1ba36fabebd8769b     10933628 cfe-4.0.1.src.tar.xz
35d1e64efc108076acbe7392566a52c35df9ec19778eb9eb12245fc7d8b915b6       581788 clang-tools-extra-4.0.1.src.tar.xz
ec693b170e0600daa7b372240a06e66341ace790d89eaf4a843e8d56d5f4ada4      2275240 openmp-4.0.1.src.tar.xz


[FILE:13421:manifests/plist.clang]
%%NAMEBASE%%/bin/
 c-index-test
 clang
 clang++
 clang-%%LLVM_MAJOR%%
 clang-apply-replacements
 clang-change-namespace
 clang-check
 clang-cl
 clang-cpp
 clang-format
 clang-import-test
 clang-include-fixer
 clang-offload-bundler
 clang-query
 clang-rename
 clang-reorder-fields
 clang-tblgen
 clang-tidy
 find-all-symbols
 git-clang-format
 modularize
 scan-build
 scan-view
%%NAMEBASE%%/include/clang-c/
 BuildSystem.h
 CXCompilationDatabase.h
 CXErrorCode.h
 CXString.h
 Documentation.h
 Index.h
 Platform.h
%%NAMEBASE%%/include/clang/ARCMigrate/
 ARCMT.h
 ARCMTActions.h
 FileRemapper.h
%%NAMEBASE%%/include/clang/AST/
 APValue.h
 AST.h
 ASTConsumer.h
 ASTContext.h
 ASTDiagnostic.h
 ASTFwd.h
 ASTImporter.h
 ASTLambda.h
 ASTMutationListener.h
 ASTTypeTraits.h
 ASTUnresolvedSet.h
 ASTVector.h
 Attr.h
 AttrDump.inc
 AttrImpl.inc
 AttrIterator.h
 AttrVisitor.inc
 Attrs.inc
 Availability.h
 BaseSubobject.h
 BuiltinTypes.def
 CXXInheritance.h
 CanonicalType.h
 CharUnits.h
 Comment.h
 CommentBriefParser.h
 CommentCommandInfo.inc
 CommentCommandList.inc
 CommentCommandTraits.h
 CommentDiagnostic.h
 CommentHTMLNamedCharacterReferences.inc
 CommentHTMLTags.inc
 CommentHTMLTagsProperties.inc
 CommentLexer.h
 CommentNodes.inc
 CommentParser.h
 CommentSema.h
 CommentVisitor.h
 Decl.h
 DeclAccessPair.h
 DeclBase.h
 DeclCXX.h
 DeclContextInternals.h
 DeclFriend.h
 DeclGroup.h
 DeclLookups.h
 DeclNodes.inc
 DeclObjC.h
 DeclOpenMP.h
 DeclTemplate.h
 DeclVisitor.h
 DeclarationName.h
 DependentDiagnostic.h
 EvaluatedExprVisitor.h
 Expr.h
 ExprCXX.h
 ExprObjC.h
 ExprOpenMP.h
 ExternalASTSource.h
 GlobalDecl.h
 LambdaCapture.h
 LocInfoType.h
 Mangle.h
 MangleNumberingContext.h
 NSAPI.h
 NestedNameSpecifier.h
 OpenMPClause.h
 OperationKinds.def
 OperationKinds.h
 ParentMap.h
 PrettyPrinter.h
 RawCommentList.h
 RecordLayout.h
 RecursiveASTVisitor.h
 Redeclarable.h
 SelectorLocationsKind.h
 Stmt.h
 StmtCXX.h
 StmtGraphTraits.h
 StmtIterator.h
 StmtNodes.inc
 StmtObjC.h
 StmtOpenMP.h
 StmtVisitor.h
 TemplateBase.h
 TemplateName.h
 Type.h
 TypeLoc.h
 TypeLocNodes.def
 TypeLocVisitor.h
 TypeNodes.def
 TypeOrdering.h
 TypeVisitor.h
 UnresolvedSet.h
 VTTBuilder.h
 VTableBuilder.h
%%NAMEBASE%%/include/clang/ASTMatchers/
 ASTMatchFinder.h
 ASTMatchers.h
 ASTMatchersInternal.h
 ASTMatchersMacros.h
%%NAMEBASE%%/include/clang/ASTMatchers/Dynamic/
 Diagnostics.h
 Parser.h
 Registry.h
 VariantValue.h
%%NAMEBASE%%/include/clang/Analysis/
 AnalysisContext.h
 AnalysisDiagnostic.h
 CFG.h
 CFGStmtMap.h
 CallGraph.h
 CloneDetection.h
 CodeInjector.h
 ProgramPoint.h
%%NAMEBASE%%/include/clang/Analysis/Analyses/
 CFGReachabilityAnalysis.h
 Consumed.h
 Dominators.h
 FormatString.h
 LiveVariables.h
 OSLog.h
 PostOrderCFGView.h
 PseudoConstantAnalysis.h
 ReachableCode.h
 ThreadSafety.h
 ThreadSafetyCommon.h
 ThreadSafetyLogical.h
 ThreadSafetyOps.def
 ThreadSafetyTIL.h
 ThreadSafetyTraverse.h
 ThreadSafetyUtil.h
 UninitializedValues.h
%%NAMEBASE%%/include/clang/Analysis/DomainSpecific/
 CocoaConventions.h
 ObjCNoReturn.h
%%NAMEBASE%%/include/clang/Analysis/FlowSensitive/DataflowValues.h
%%NAMEBASE%%/include/clang/Analysis/Support/BumpVector.h
%%NAMEBASE%%/include/clang/Basic/
 ABI.h
 AddressSpaces.h
 AllDiagnostics.h
 AttrHasAttributeImpl.inc
 AttrKinds.h
 AttrList.inc
 Attributes.h
 Builtins.def
 Builtins.h
 BuiltinsAArch64.def
 BuiltinsAMDGPU.def
 BuiltinsARM.def
 BuiltinsHexagon.def
 BuiltinsLe64.def
 BuiltinsMips.def
 BuiltinsNEON.def
 BuiltinsNVPTX.def
 BuiltinsPPC.def
 BuiltinsSystemZ.def
 BuiltinsWebAssembly.def
 BuiltinsX86.def
 BuiltinsX86_64.def
 BuiltinsXCore.def
 CapturedStmt.h
 CharInfo.h
 CommentOptions.h
 Cuda.h
 DebugInfoOptions.h
 Diagnostic.h
 DiagnosticASTKinds.inc
 DiagnosticAnalysisKinds.inc
 DiagnosticCategories.h
 DiagnosticCommentKinds.inc
 DiagnosticCommonKinds.inc
 DiagnosticDriverKinds.inc
 DiagnosticFrontendKinds.inc
 DiagnosticGroups.inc
 DiagnosticIDs.h
 DiagnosticIndexName.inc
 DiagnosticLexKinds.inc
 DiagnosticOptions.def
 DiagnosticOptions.h
 DiagnosticParseKinds.inc
 DiagnosticSemaKinds.inc
 DiagnosticSerializationKinds.inc
 ExceptionSpecificationType.h
 ExpressionTraits.h
 FileManager.h
 FileSystemOptions.h
 FileSystemStatCache.h
 IdentifierTable.h
 LLVM.h
 Lambda.h
 LangOptions.def
 LangOptions.h
 Linkage.h
 MacroBuilder.h
 Module.h
 ObjCRuntime.h
 OpenCLExtensions.def
 OpenCLImageTypes.def
 OpenCLOptions.h
 OpenMPKinds.def
 OpenMPKinds.h
 OperatorKinds.def
 OperatorKinds.h
 OperatorPrecedence.h
 PartialDiagnostic.h
 PlistSupport.h
 PragmaKinds.h
 PrettyStackTrace.h
 SanitizerBlacklist.h
 Sanitizers.def
 Sanitizers.h
 SourceLocation.h
 SourceManager.h
 SourceManagerInternals.h
 Specifiers.h
 TargetBuiltins.h
 TargetCXXABI.h
 TargetInfo.h
 TargetOptions.h
 TemplateKinds.h
 TokenKinds.def
 TokenKinds.h
 TypeTraits.h
 Version.h
 Version.inc
 VersionTuple.h
 VirtualFileSystem.h
 Visibility.h
 arm_neon.inc
%%NAMEBASE%%/include/clang/CodeGen/
 BackendUtil.h
 CGFunctionInfo.h
 CodeGenABITypes.h
 CodeGenAction.h
 ModuleBuilder.h
 ObjectFilePCHContainerOperations.h
 SwiftCallingConv.h
%%NAMEBASE%%/include/clang/Config/config.h
%%NAMEBASE%%/include/clang/Driver/
 Action.h
 Compilation.h
 Distro.h
 Driver.h
 DriverDiagnostic.h
 Job.h
 Multilib.h
 Options.h
 Options.inc
 Phases.h
 SanitizerArgs.h
 Tool.h
 ToolChain.h
 Types.def
 Types.h
 Util.h
%%NAMEBASE%%/include/clang/Edit/
 Commit.h
 EditedSource.h
 EditsReceiver.h
 FileOffset.h
 Rewriters.h
%%NAMEBASE%%/include/clang/Format/Format.h
%%NAMEBASE%%/include/clang/Frontend/
 ASTConsumers.h
 ASTUnit.h
 ChainedDiagnosticConsumer.h
 CodeGenOptions.def
 CodeGenOptions.h
 CommandLineSourceLoc.h
 CompilerInstance.h
 CompilerInvocation.h
 DependencyOutputOptions.h
 DiagnosticRenderer.h
 FrontendAction.h
 FrontendActions.h
 FrontendDiagnostic.h
 FrontendOptions.h
 FrontendPluginRegistry.h
 LangStandard.h
 LangStandards.def
 LayoutOverrideSource.h
 LogDiagnosticPrinter.h
 MigratorOptions.h
 MultiplexConsumer.h
 PCHContainerOperations.h
 PreprocessorOutputOptions.h
 SerializedDiagnosticPrinter.h
 SerializedDiagnosticReader.h
 SerializedDiagnostics.h
 TextDiagnostic.h
 TextDiagnosticBuffer.h
 TextDiagnosticPrinter.h
 Utils.h
 VerifyDiagnosticConsumer.h
%%NAMEBASE%%/include/clang/FrontendTool/Utils.h
%%NAMEBASE%%/include/clang/Index/
 CodegenNameGenerator.h
 CommentToXML.h
 IndexDataConsumer.h
 IndexSymbol.h
 IndexingAction.h
 USRGeneration.h
%%NAMEBASE%%/include/clang/Lex/
 CodeCompletionHandler.h
 DirectoryLookup.h
 ExternalPreprocessorSource.h
 HeaderMap.h
 HeaderMapTypes.h
 HeaderSearch.h
 HeaderSearchOptions.h
 LexDiagnostic.h
 Lexer.h
 LiteralSupport.h
 MacroArgs.h
 MacroInfo.h
 ModuleLoader.h
 ModuleMap.h
 MultipleIncludeOpt.h
 PPCallbacks.h
 PPConditionalDirectiveRecord.h
 PTHLexer.h
 PTHManager.h
 Pragma.h
 PreprocessingRecord.h
 Preprocessor.h
 PreprocessorLexer.h
 PreprocessorOptions.h
 ScratchBuffer.h
 Token.h
 TokenConcatenation.h
 TokenLexer.h
%%NAMEBASE%%/include/clang/Parse/
 AttrParserStringSwitches.inc
 ParseAST.h
 ParseDiagnostic.h
 Parser.h
%%NAMEBASE%%/include/clang/Rewrite/Core/
 DeltaTree.h
 HTMLRewrite.h
 RewriteBuffer.h
 RewriteRope.h
 Rewriter.h
 TokenRewriter.h
%%NAMEBASE%%/include/clang/Rewrite/Frontend/
 ASTConsumers.h
 FixItRewriter.h
 FrontendActions.h
 Rewriters.h
%%NAMEBASE%%/include/clang/Sema/
 AnalysisBasedWarnings.h
 AttrParsedAttrImpl.inc
 AttrParsedAttrKinds.inc
 AttrParsedAttrList.inc
 AttrSpellingListIndex.inc
 AttrTemplateInstantiate.inc
 AttributeList.h
 CXXFieldCollector.h
 CleanupInfo.h
 CodeCompleteConsumer.h
 CodeCompleteOptions.h
 DeclSpec.h
 DelayedDiagnostic.h
 Designator.h
 ExternalSemaSource.h
 IdentifierResolver.h
 Initialization.h
 Lookup.h
 LoopHint.h
 MultiplexExternalSemaSource.h
 ObjCMethodList.h
 Overload.h
 Ownership.h
 ParsedTemplate.h
 PrettyDeclStackTrace.h
 Scope.h
 ScopeInfo.h
 Sema.h
 SemaConsumer.h
 SemaDiagnostic.h
 SemaFixItUtils.h
 SemaInternal.h
 SemaLambda.h
 Template.h
 TemplateDeduction.h
 TypoCorrection.h
 Weak.h
%%NAMEBASE%%/include/clang/Serialization/
 ASTBitCodes.h
 ASTDeserializationListener.h
 ASTReader.h
 ASTWriter.h
 AttrPCHRead.inc
 AttrPCHWrite.inc
 ContinuousRangeMap.h
 GlobalModuleIndex.h
 Module.h
 ModuleFileExtension.h
 ModuleManager.h
 SerializationDiagnostic.h
%%NAMEBASE%%/include/clang/StaticAnalyzer/Checkers/
 Checkers.inc
 ClangCheckers.h
 LocalCheckers.h
 MPIFunctionClassifier.h
 ObjCRetainCount.h
 SValExplainer.h
%%NAMEBASE%%/include/clang/StaticAnalyzer/Core/
 Analyses.def
 AnalyzerOptions.h
 Checker.h
 CheckerManager.h
 CheckerOptInfo.h
 CheckerRegistry.h
 IssueHash.h
 PathDiagnosticConsumers.h
%%NAMEBASE%%/include/clang/StaticAnalyzer/Core/BugReporter/
 BugReporter.h
 BugReporterVisitor.h
 BugType.h
 CommonBugCategories.h
 PathDiagnostic.h
%%NAMEBASE%%/include/clang/StaticAnalyzer/Core/PathSensitive/
 APSIntType.h
 AnalysisManager.h
 BasicValueFactory.h
 BlockCounter.h
 CallEvent.h
 CheckerContext.h
 CheckerHelpers.h
 ConstraintManager.h
 CoreEngine.h
 DynamicTypeInfo.h
 DynamicTypeMap.h
 Environment.h
 ExplodedGraph.h
 ExprEngine.h
 FunctionSummary.h
 LoopWidening.h
 MemRegion.h
 ProgramState.h
 ProgramStateTrait.h
 ProgramState_Fwd.h
 Regions.def
 SValBuilder.h
 SValVisitor.h
 SVals.def
 SVals.h
 Store.h
 StoreRef.h
 SubEngine.h
 SummaryManager.h
 SymExpr.h
 SymbolManager.h
 Symbols.def
 TaintManager.h
 TaintTag.h
 WorkList.h
%%NAMEBASE%%/include/clang/StaticAnalyzer/Frontend/
 AnalysisConsumer.h
 CheckerRegistration.h
 FrontendActions.h
 ModelConsumer.h
%%NAMEBASE%%/include/clang/Tooling/
 ArgumentsAdjusters.h
 CommonOptionsParser.h
 CompilationDatabase.h
 CompilationDatabasePluginRegistry.h
 DiagnosticsYaml.h
 FileMatchTrie.h
 FixIt.h
 JSONCompilationDatabase.h
 Refactoring.h
 RefactoringCallbacks.h
 ReplacementsYaml.h
 Tooling.h
%%NAMEBASE%%/include/clang/Tooling/Core/
 Diagnostic.h
 Lookup.h
 QualTypeNames.h
 Replacement.h
%%NAMEBASE%%/lib/
 libclang.so
 libclang.so.%%LLVM_MAJOR%%
 libclang.so.4
 libclangARCMigrate.a
 libclangAST.a
 libclangASTMatchers.a
 libclangAnalysis.a
 libclangApplyReplacements.a
 libclangBasic.a
 libclangChangeNamespace.a
 libclangCodeGen.a
 libclangDriver.a
 libclangDynamicASTMatchers.a
 libclangEdit.a
 libclangFormat.a
 libclangFrontend.a
 libclangFrontendTool.a
 libclangIncludeFixer.a
 libclangIncludeFixerPlugin.a
 libclangIndex.a
 libclangLex.a
 libclangMove.a
 libclangParse.a
 libclangQuery.a
 libclangRename.a
 libclangReorderFields.a
 libclangRewrite.a
 libclangRewriteFrontend.a
 libclangSema.a
 libclangSerialization.a
 libclangStaticAnalyzerCheckers.a
 libclangStaticAnalyzerCore.a
 libclangStaticAnalyzerFrontend.a
 libclangTidy.a
 libclangTidyBoostModule.a
 libclangTidyCERTModule.a
 libclangTidyCppCoreGuidelinesModule.a
 libclangTidyGoogleModule.a
 libclangTidyLLVMModule.a
 libclangTidyMPIModule.a
 libclangTidyMiscModule.a
 libclangTidyModernizeModule.a
 libclangTidyPerformanceModule.a
 libclangTidyPlugin.a
 libclangTidyReadabilityModule.a
 libclangTidyUtils.a
 libclangTooling.a
 libclangToolingCore.a
 libfindAllSymbols.a
%%NAMEBASE%%/lib/clang/%%LLVM_RELEASE%%/include/
 __clang_cuda_builtin_vars.h
 __clang_cuda_cmath.h
 __clang_cuda_complex_builtins.h
 __clang_cuda_intrinsics.h
 __clang_cuda_math_forward_declares.h
 __clang_cuda_runtime_wrapper.h
 __stddef_max_align_t.h
 __wmmintrin_aes.h
 __wmmintrin_pclmul.h
 adxintrin.h
 altivec.h
 ammintrin.h
 arm_acle.h
 arm_neon.h
 armintr.h
 avx2intrin.h
 avx512bwintrin.h
 avx512cdintrin.h
 avx512dqintrin.h
 avx512erintrin.h
 avx512fintrin.h
 avx512ifmaintrin.h
 avx512ifmavlintrin.h
 avx512pfintrin.h
 avx512vbmiintrin.h
 avx512vbmivlintrin.h
 avx512vlbwintrin.h
 avx512vlcdintrin.h
 avx512vldqintrin.h
 avx512vlintrin.h
 avxintrin.h
 bmi2intrin.h
 bmiintrin.h
 clflushoptintrin.h
 cpuid.h
 emmintrin.h
 f16cintrin.h
 float.h
 fma4intrin.h
 fmaintrin.h
 fxsrintrin.h
 htmintrin.h
 htmxlintrin.h
 ia32intrin.h
 immintrin.h
 intrin.h
 inttypes.h
 iso646.h
 lzcntintrin.h
 mm3dnow.h
 mm_malloc.h
 mmintrin.h
 module.modulemap
 msa.h
 mwaitxintrin.h
 nmmintrin.h
 opencl-c.h
 pkuintrin.h
 pmmintrin.h
 popcntintrin.h
 prfchwintrin.h
 rdseedintrin.h
 rtmintrin.h
 s390intrin.h
 shaintrin.h
 smmintrin.h
 tbmintrin.h
 tgmath.h
 tmmintrin.h
 unwind.h
 vadefs.h
 vecintrin.h
 wmmintrin.h
 x86intrin.h
 xmmintrin.h
 xopintrin.h
 xsavecintrin.h
 xsaveintrin.h
 xsaveoptintrin.h
 xsavesintrin.h
 xtestintrin.h
%%NAMEBASE%%/lib/clang/%%LLVM_RELEASE%%/include/cuda_wrappers/
 algorithm
 complex
 new
%%NAMEBASE%%/lib/cmake/clang/
 ClangConfig.cmake
 ClangTargets-%%CMAKE_BUILD_TYPE%%.cmake
 ClangTargets.cmake
%%NAMEBASE%%/libexec/
 c++-analyzer
 ccc-analyzer
%%NAMEBASE%%/share/clang/
 clang-format-bbedit.applescript
 clang-format-diff.py
 clang-format-sublime.py
 clang-format.el
 clang-format.py
 clang-include-fixer.el
 clang-include-fixer.py
 clang-rename.el
 clang-rename.py
 clang-tidy-diff.py
 run-clang-tidy.py
 run-find-all-symbols.py
%%NAMEBASE%%/share/scan-build/
 scanview.css
 sorttable.js
%%NAMEBASE%%/share/scan-view/
 FileRadar.scpt
 GetRadarVersion.scpt
 Reporter.py
 ScanView.py
 bugcatcher.ico
 startfile.py
%%ONLY-LINUX%%%%NAMEBASE%%/lib/clang/%%LLVM_RELEASE%%/include/
 limits.h
 stdalign.h
 stdarg.h
 stdatomic.h
 stdbool.h
 stddef.h
 stdint.h
 stdnoreturn.h
 varargs.h
%%ONLY-SUNOS%%%%NAMEBASE%%/lib/clang/%%LLVM_RELEASE%%/include/
 limits.h
 stdalign.h
 stdarg.h
 stdatomic.h
 stdbool.h
 stddef.h
 stdint.h
 stdnoreturn.h
 varargs.h
%%OPENMP-ON%%%%NAMEBASE%%/lib/clang/%%LLVM_RELEASE%%/include/omp.h


[FILE:23994:manifests/plist.llvm]
%%GOLD-ON%%%%NAMEBASE%%/lib/LLVMgold.so
%%NAMEBASE%%/bin/
 bugpoint
 llc
 lli
 llvm-ar
 llvm-as
 llvm-bcanalyzer
 llvm-c-test
 llvm-cat
 llvm-config
 llvm-cov
 llvm-cxxdump
 llvm-cxxfilt
 llvm-diff
 llvm-dis
 llvm-dsymutil
 llvm-dwarfdump
 llvm-dwp
 llvm-extract
 llvm-lib
 llvm-link
 llvm-lto
 llvm-lto2
 llvm-mc
 llvm-mcmarkup
 llvm-modextract
 llvm-nm
 llvm-objdump
 llvm-opt-report
 llvm-pdbdump
 llvm-profdata
 llvm-ranlib
 llvm-readobj
 llvm-rtdyld
 llvm-size
 llvm-split
 llvm-stress
 llvm-strings
 llvm-symbolizer
 llvm-tblgen
 llvm-xray
 obj2yaml
 opt
 sancov
 sanstats
 verify-uselistorder
 yaml2obj
%%NAMEBASE%%/include/llvm/
 InitializePasses.h
 LinkAllIR.h
 LinkAllPasses.h
 Pass.h
 PassAnalysisSupport.h
 PassInfo.h
 PassRegistry.h
 PassSupport.h
%%NAMEBASE%%/include/llvm-c/
 Analysis.h
 BitReader.h
 BitWriter.h
 Core.h
 Disassembler.h
 ErrorHandling.h
 ExecutionEngine.h
 IRReader.h
 Initialization.h
 LinkTimeOptimizer.h
 Linker.h
 Object.h
 OrcBindings.h
 Support.h
 Target.h
 TargetMachine.h
 Types.h
 lto.h
%%NAMEBASE%%/include/llvm-c/Transforms/
 IPO.h
 PassManagerBuilder.h
 Scalar.h
 Vectorize.h
%%NAMEBASE%%/include/llvm/ADT/
 APFloat.h
 APInt.h
 APSInt.h
 AllocatorList.h
 ArrayRef.h
 BitVector.h
 BitmaskEnum.h
 CachedHashString.h
 DAGDeltaAlgorithm.h
 DeltaAlgorithm.h
 DenseMap.h
 DenseMapInfo.h
 DenseSet.h
 DepthFirstIterator.h
 EpochTracker.h
 EquivalenceClasses.h
 FoldingSet.h
 GraphTraits.h
 Hashing.h
 ImmutableList.h
 ImmutableMap.h
 ImmutableSet.h
 IndexedMap.h
 IntEqClasses.h
 IntervalMap.h
 IntrusiveRefCntPtr.h
 MapVector.h
 None.h
 Optional.h
 PackedVector.h
 PointerEmbeddedInt.h
 PointerIntPair.h
 PointerSumType.h
 PointerUnion.h
 PostOrderIterator.h
 PriorityQueue.h
 PriorityWorklist.h
 SCCIterator.h
 STLExtras.h
 ScopeExit.h
 ScopedHashTable.h
 Sequence.h
 SetOperations.h
 SetVector.h
 SmallBitVector.h
 SmallPtrSet.h
 SmallSet.h
 SmallString.h
 SmallVector.h
 SparseBitVector.h
 SparseMultiSet.h
 SparseSet.h
 Statistic.h
 StringExtras.h
 StringMap.h
 StringRef.h
 StringSet.h
 StringSwitch.h
 TinyPtrVector.h
 Triple.h
 Twine.h
 UniqueVector.h
 VariadicFunction.h
 edit_distance.h
 ilist.h
 ilist_base.h
 ilist_iterator.h
 ilist_node.h
 ilist_node_base.h
 ilist_node_options.h
 iterator.h
 iterator_range.h
 simple_ilist.h
%%NAMEBASE%%/include/llvm/Analysis/
 AliasAnalysis.h
 AliasAnalysisEvaluator.h
 AliasSetTracker.h
 AssumptionCache.h
 BasicAliasAnalysis.h
 BlockFrequencyInfo.h
 BlockFrequencyInfoImpl.h
 BranchProbabilityInfo.h
 CFG.h
 CFGPrinter.h
 CFLAndersAliasAnalysis.h
 CFLSteensAliasAnalysis.h
 CGSCCPassManager.h
 CallGraph.h
 CallGraphSCCPass.h
 CallPrinter.h
 CaptureTracking.h
 CodeMetrics.h
 ConstantFolding.h
 DOTGraphTraitsPass.h
 DemandedBits.h
 DependenceAnalysis.h
 DivergenceAnalysis.h
 DomPrinter.h
 DominanceFrontier.h
 DominanceFrontierImpl.h
 EHPersonalities.h
 GlobalsModRef.h
 IVUsers.h
 IndirectCallPromotionAnalysis.h
 IndirectCallSiteVisitor.h
 InlineCost.h
 InstructionSimplify.h
 Interval.h
 IntervalIterator.h
 IntervalPartition.h
 IteratedDominanceFrontier.h
 LazyBlockFrequencyInfo.h
 LazyBranchProbabilityInfo.h
 LazyCallGraph.h
 LazyValueInfo.h
 Lint.h
 Loads.h
 LoopAccessAnalysis.h
 LoopAnalysisManager.h
 LoopInfo.h
 LoopInfoImpl.h
 LoopIterator.h
 LoopPass.h
 LoopUnrollAnalyzer.h
 MemoryBuiltins.h
 MemoryDependenceAnalysis.h
 MemoryLocation.h
 ModuleSummaryAnalysis.h
 ObjCARCAliasAnalysis.h
 ObjCARCAnalysisUtils.h
 ObjCARCInstKind.h
 OptimizationDiagnosticInfo.h
 OrderedBasicBlock.h
 PHITransAddr.h
 Passes.h
 PostDominators.h
 ProfileSummaryInfo.h
 PtrUseVisitor.h
 RegionInfo.h
 RegionInfoImpl.h
 RegionIterator.h
 RegionPass.h
 RegionPrinter.h
 ScalarEvolution.h
 ScalarEvolutionAliasAnalysis.h
 ScalarEvolutionExpander.h
 ScalarEvolutionExpressions.h
 ScalarEvolutionNormalization.h
 ScopedNoAliasAA.h
 SparsePropagation.h
 TargetFolder.h
 TargetLibraryInfo.def
 TargetLibraryInfo.h
 TargetTransformInfo.h
 TargetTransformInfoImpl.h
 Trace.h
 TypeBasedAliasAnalysis.h
 TypeMetadataUtils.h
 ValueTracking.h
 VectorUtils.h
%%NAMEBASE%%/include/llvm/AsmParser/
 Parser.h
 SlotMapping.h
%%NAMEBASE%%/include/llvm/Bitcode/
 BitCodes.h
 BitcodeReader.h
 BitcodeWriter.h
 BitcodeWriterPass.h
 BitstreamReader.h
 BitstreamWriter.h
 LLVMBitCodes.h
%%NAMEBASE%%/include/llvm/CodeGen/
 Analysis.h
 AsmPrinter.h
 AtomicExpandUtils.h
 BasicTTIImpl.h
 CalcSpillWeights.h
 CallingConvLower.h
 CommandFlags.h
 DAGCombine.h
 DFAPacketizer.h
 DIE.h
 DIEValue.def
 DwarfStringPoolEntry.h
 EdgeBundles.h
 FastISel.h
 FaultMaps.h
 FunctionLoweringInfo.h
 GCMetadata.h
 GCMetadataPrinter.h
 GCStrategy.h
 GCs.h
 ISDOpcodes.h
 IntrinsicLowering.h
 LatencyPriorityQueue.h
 LexicalScopes.h
 LinkAllAsmWriterComponents.h
 LinkAllCodegenComponents.h
 LiveInterval.h
 LiveIntervalAnalysis.h
 LiveIntervalUnion.h
 LivePhysRegs.h
 LiveRangeEdit.h
 LiveRegMatrix.h
 LiveStackAnalysis.h
 LiveVariables.h
 LowLevelType.h
 MIRYamlMapping.h
 MachORelocation.h
 MachineBasicBlock.h
 MachineBlockFrequencyInfo.h
 MachineBranchProbabilityInfo.h
 MachineCombinerPattern.h
 MachineConstantPool.h
 MachineDominanceFrontier.h
 MachineDominators.h
 MachineFrameInfo.h
 MachineFunction.h
 MachineFunctionInitializer.h
 MachineFunctionPass.h
 MachineInstr.h
 MachineInstrBuilder.h
 MachineInstrBundle.h
 MachineInstrBundleIterator.h
 MachineJumpTableInfo.h
 MachineLoopInfo.h
 MachineMemOperand.h
 MachineModuleInfo.h
 MachineModuleInfoImpls.h
 MachineOperand.h
 MachinePassRegistry.h
 MachinePostDominators.h
 MachineRegionInfo.h
 MachineRegisterInfo.h
 MachineSSAUpdater.h
 MachineScheduler.h
 MachineTraceMetrics.h
 MachineValueType.h
 PBQPRAConstraint.h
 ParallelCG.h
 Passes.h
 PreISelIntrinsicLowering.h
 PseudoSourceValue.h
 RegAllocPBQP.h
 RegAllocRegistry.h
 RegisterClassInfo.h
 RegisterPressure.h
 RegisterScavenging.h
 RegisterUsageInfo.h
 ResourcePriorityQueue.h
 RuntimeLibcalls.h
 ScheduleDAG.h
 ScheduleDAGInstrs.h
 ScheduleDAGMutation.h
 ScheduleDFS.h
 ScheduleHazardRecognizer.h
 SchedulerRegistry.h
 ScoreboardHazardRecognizer.h
 SelectionDAG.h
 SelectionDAGISel.h
 SelectionDAGNodes.h
 SelectionDAGTargetInfo.h
 SlotIndexes.h
 StackMaps.h
 StackProtector.h
 TailDuplicator.h
 TargetLoweringObjectFileImpl.h
 TargetPassConfig.h
 TargetSchedule.h
 UnreachableBlockElim.h
 ValueTypes.h
 ValueTypes.td
 VirtRegMap.h
 WinEHFuncInfo.h
%%NAMEBASE%%/include/llvm/CodeGen/GlobalISel/
 CallLowering.h
 GISelAccessor.h
 IRTranslator.h
 InstructionSelect.h
 InstructionSelector.h
 Legalizer.h
 LegalizerHelper.h
 LegalizerInfo.h
 MachineIRBuilder.h
 RegBankSelect.h
 RegisterBank.h
 RegisterBankInfo.h
 Types.h
 Utils.h
%%NAMEBASE%%/include/llvm/CodeGen/MIRParser/MIRParser.h
%%NAMEBASE%%/include/llvm/CodeGen/PBQP/
 CostAllocator.h
 Graph.h
 Math.h
 ReductionRules.h
 Solution.h
%%NAMEBASE%%/include/llvm/Config/
 AsmParsers.def
 AsmPrinters.def
 Disassemblers.def
 Targets.def
 abi-breaking.h
 llvm-config.h
%%NAMEBASE%%/include/llvm/DebugInfo/DIContext.h
%%NAMEBASE%%/include/llvm/DebugInfo/CodeView/
 CVDebugRecord.h
 CVRecord.h
 CVSymbolTypes.def
 CVSymbolVisitor.h
 CVTypeDumper.h
 CVTypeVisitor.h
 CodeView.h
 CodeViewError.h
 CodeViewRecordIO.h
 EnumTables.h
 FunctionId.h
 Line.h
 ModuleSubstream.h
 ModuleSubstreamVisitor.h
 RecordSerialization.h
 SymbolDeserializer.h
 SymbolDumpDelegate.h
 SymbolDumper.h
 SymbolRecord.h
 SymbolRecordMapping.h
 SymbolSerializer.h
 SymbolVisitorCallbackPipeline.h
 SymbolVisitorCallbacks.h
 SymbolVisitorDelegate.h
 TypeDatabase.h
 TypeDatabaseVisitor.h
 TypeDeserializer.h
 TypeDumpVisitor.h
 TypeDumperBase.h
 TypeIndex.h
 TypeRecord.h
 TypeRecordBuilder.h
 TypeRecordMapping.h
 TypeRecords.def
 TypeSerializer.h
 TypeStreamMerger.h
 TypeSymbolEmitter.h
 TypeTableBuilder.h
 TypeVisitorCallbackPipeline.h
 TypeVisitorCallbacks.h
%%NAMEBASE%%/include/llvm/DebugInfo/DWARF/
 DWARFAbbreviationDeclaration.h
 DWARFAcceleratorTable.h
 DWARFCompileUnit.h
 DWARFContext.h
 DWARFDebugAbbrev.h
 DWARFDebugArangeSet.h
 DWARFDebugAranges.h
 DWARFDebugFrame.h
 DWARFDebugInfoEntry.h
 DWARFDebugLine.h
 DWARFDebugLoc.h
 DWARFDebugMacro.h
 DWARFDebugPubTable.h
 DWARFDebugRangeList.h
 DWARFDie.h
 DWARFFormValue.h
 DWARFGdbIndex.h
 DWARFRelocMap.h
 DWARFSection.h
 DWARFTypeUnit.h
 DWARFUnit.h
 DWARFUnitIndex.h
%%NAMEBASE%%/include/llvm/DebugInfo/MSF/
 ByteStream.h
 IMSFFile.h
 MSFBuilder.h
 MSFCommon.h
 MSFError.h
 MSFStreamLayout.h
 MappedBlockStream.h
 SequencedItemStream.h
 StreamArray.h
 StreamInterface.h
 StreamReader.h
 StreamRef.h
 StreamWriter.h
%%NAMEBASE%%/include/llvm/DebugInfo/PDB/
 ConcreteSymbolEnumerator.h
 GenericError.h
 IPDBDataStream.h
 IPDBEnumChildren.h
 IPDBLineNumber.h
 IPDBRawSymbol.h
 IPDBSession.h
 IPDBSourceFile.h
 PDB.h
 PDBContext.h
 PDBExtras.h
 PDBSymDumper.h
 PDBSymbol.h
 PDBSymbolAnnotation.h
 PDBSymbolBlock.h
 PDBSymbolCompiland.h
 PDBSymbolCompilandDetails.h
 PDBSymbolCompilandEnv.h
 PDBSymbolCustom.h
 PDBSymbolData.h
 PDBSymbolExe.h
 PDBSymbolFunc.h
 PDBSymbolFuncDebugEnd.h
 PDBSymbolFuncDebugStart.h
 PDBSymbolLabel.h
 PDBSymbolPublicSymbol.h
 PDBSymbolThunk.h
 PDBSymbolTypeArray.h
 PDBSymbolTypeBaseClass.h
 PDBSymbolTypeBuiltin.h
 PDBSymbolTypeCustom.h
 PDBSymbolTypeDimension.h
 PDBSymbolTypeEnum.h
 PDBSymbolTypeFriend.h
 PDBSymbolTypeFunctionArg.h
 PDBSymbolTypeFunctionSig.h
 PDBSymbolTypeManaged.h
 PDBSymbolTypePointer.h
 PDBSymbolTypeTypedef.h
 PDBSymbolTypeUDT.h
 PDBSymbolTypeVTable.h
 PDBSymbolTypeVTableShape.h
 PDBSymbolUnknown.h
 PDBSymbolUsingNamespace.h
 PDBTypes.h
%%NAMEBASE%%/include/llvm/DebugInfo/PDB/DIA/
 DIADataStream.h
 DIAEnumDebugStreams.h
 DIAEnumLineNumbers.h
 DIAEnumSourceFiles.h
 DIAEnumSymbols.h
 DIAError.h
 DIALineNumber.h
 DIARawSymbol.h
 DIASession.h
 DIASourceFile.h
 DIASupport.h
%%NAMEBASE%%/include/llvm/DebugInfo/PDB/Raw/
 DbiStream.h
 DbiStreamBuilder.h
 EnumTables.h
 GlobalsStream.h
 Hash.h
 ISectionContribVisitor.h
 InfoStream.h
 InfoStreamBuilder.h
 ModInfo.h
 ModStream.h
 NameHashTable.h
 NameMap.h
 NameMapBuilder.h
 PDBFile.h
 PDBFileBuilder.h
 PublicsStream.h
 RawConstants.h
 RawError.h
 RawSession.h
 RawTypes.h
 SymbolStream.h
 TpiHashing.h
 TpiStream.h
 TpiStreamBuilder.h
%%NAMEBASE%%/include/llvm/DebugInfo/Symbolize/
 DIPrinter.h
 SymbolizableModule.h
 Symbolize.h
%%NAMEBASE%%/include/llvm/Demangle/Demangle.h
%%NAMEBASE%%/include/llvm/ExecutionEngine/
 ExecutionEngine.h
 GenericValue.h
 Interpreter.h
 JITEventListener.h
 JITSymbol.h
 MCJIT.h
 OProfileWrapper.h
 ObjectCache.h
 ObjectMemoryBuffer.h
 OrcMCJITReplacement.h
 RTDyldMemoryManager.h
 RuntimeDyld.h
 RuntimeDyldChecker.h
 SectionMemoryManager.h
%%NAMEBASE%%/include/llvm/ExecutionEngine/Orc/
 CompileOnDemandLayer.h
 CompileUtils.h
 ExecutionUtils.h
 GlobalMappingLayer.h
 IRCompileLayer.h
 IRTransformLayer.h
 IndirectionUtils.h
 LambdaResolver.h
 LazyEmittingLayer.h
 NullResolver.h
 ObjectLinkingLayer.h
 ObjectTransformLayer.h
 OrcABISupport.h
 OrcError.h
 OrcRemoteTargetClient.h
 OrcRemoteTargetRPCAPI.h
 OrcRemoteTargetServer.h
 RPCSerialization.h
 RPCUtils.h
 RawByteChannel.h
%%NAMEBASE%%/include/llvm/IR/
 Argument.h
 AssemblyAnnotationWriter.h
 Attributes.gen
 Attributes.h
 Attributes.td
 AutoUpgrade.h
 BasicBlock.h
 CFG.h
 CallSite.h
 CallingConv.h
 Comdat.h
 Constant.h
 ConstantFolder.h
 ConstantRange.h
 Constants.h
 DIBuilder.h
 DataLayout.h
 DebugInfo.h
 DebugInfoFlags.def
 DebugInfoMetadata.h
 DebugLoc.h
 DerivedTypes.h
 DiagnosticInfo.h
 DiagnosticPrinter.h
 Dominators.h
 Function.h
 GVMaterializer.h
 GetElementPtrTypeIterator.h
 GlobalAlias.h
 GlobalIFunc.h
 GlobalIndirectSymbol.h
 GlobalObject.h
 GlobalValue.h
 GlobalVariable.h
 IRBuilder.h
 IRPrintingPasses.h
 InlineAsm.h
 InstIterator.h
 InstVisitor.h
 InstrTypes.h
 Instruction.def
 Instruction.h
 Instructions.h
 IntrinsicInst.h
 Intrinsics.gen
 Intrinsics.h
 Intrinsics.td
 IntrinsicsAArch64.td
 IntrinsicsAMDGPU.td
 IntrinsicsARM.td
 IntrinsicsBPF.td
 IntrinsicsHexagon.td
 IntrinsicsMips.td
 IntrinsicsNVVM.td
 IntrinsicsPowerPC.td
 IntrinsicsSystemZ.td
 IntrinsicsWebAssembly.td
 IntrinsicsX86.td
 IntrinsicsXCore.td
 LLVMContext.h
 LegacyPassManager.h
 LegacyPassManagers.h
 LegacyPassNameParser.h
 MDBuilder.h
 Mangler.h
 Metadata.def
 Metadata.h
 Module.h
 ModuleSlotTracker.h
 ModuleSummaryIndex.h
 ModuleSummaryIndexYAML.h
 NoFolder.h
 OperandTraits.h
 Operator.h
 OptBisect.h
 PassManager.h
 PassManagerInternal.h
 PatternMatch.h
 PredIteratorCache.h
 ProfileSummary.h
 Statepoint.h
 SymbolTableListTraits.h
 TrackingMDRef.h
 Type.h
 TypeBuilder.h
 TypeFinder.h
 Use.h
 UseListOrder.h
 User.h
 Value.def
 Value.h
 ValueHandle.h
 ValueMap.h
 ValueSymbolTable.h
 Verifier.h
%%NAMEBASE%%/include/llvm/IRReader/IRReader.h
%%NAMEBASE%%/include/llvm/LTO/
 Caching.h
 Config.h
 LTO.h
 LTOBackend.h
%%NAMEBASE%%/include/llvm/LTO/legacy/
 LTOCodeGenerator.h
 LTOModule.h
 ThinLTOCodeGenerator.h
 UpdateCompilerUsed.h
%%NAMEBASE%%/include/llvm/LibDriver/LibDriver.h
%%NAMEBASE%%/include/llvm/LineEditor/LineEditor.h
%%NAMEBASE%%/include/llvm/Linker/
 IRMover.h
 Linker.h
%%NAMEBASE%%/include/llvm/MC/
 ConstantPools.h
 LaneBitmask.h
 MCAsmBackend.h
 MCAsmInfo.h
 MCAsmInfoCOFF.h
 MCAsmInfoDarwin.h
 MCAsmInfoELF.h
 MCAsmLayout.h
 MCAssembler.h
 MCCodeEmitter.h
 MCCodeView.h
 MCContext.h
 MCDirectives.h
 MCDwarf.h
 MCELFObjectWriter.h
 MCELFStreamer.h
 MCExpr.h
 MCFixedLenDisassembler.h
 MCFixup.h
 MCFixupKindInfo.h
 MCFragment.h
 MCInst.h
 MCInstBuilder.h
 MCInstPrinter.h
 MCInstrAnalysis.h
 MCInstrDesc.h
 MCInstrInfo.h
 MCInstrItineraries.h
 MCLabel.h
 MCLinkerOptimizationHint.h
 MCMachObjectWriter.h
 MCObjectFileInfo.h
 MCObjectStreamer.h
 MCObjectWriter.h
 MCRegisterInfo.h
 MCSchedule.h
 MCSection.h
 MCSectionCOFF.h
 MCSectionELF.h
 MCSectionMachO.h
 MCStreamer.h
 MCSubtargetInfo.h
 MCSymbol.h
 MCSymbolCOFF.h
 MCSymbolELF.h
 MCSymbolMachO.h
 MCTargetOptions.h
 MCTargetOptionsCommandFlags.h
 MCValue.h
 MCWin64EH.h
 MCWinCOFFObjectWriter.h
 MCWinCOFFStreamer.h
 MCWinEH.h
 MachineLocation.h
 SectionKind.h
 StringTableBuilder.h
 SubtargetFeature.h
%%NAMEBASE%%/include/llvm/MC/MCDisassembler/
 MCDisassembler.h
 MCExternalSymbolizer.h
 MCRelocationInfo.h
 MCSymbolizer.h
%%NAMEBASE%%/include/llvm/MC/MCParser/
 AsmCond.h
 AsmLexer.h
 MCAsmLexer.h
 MCAsmParser.h
 MCAsmParserExtension.h
 MCAsmParserUtils.h
 MCParsedAsmOperand.h
 MCTargetAsmParser.h
%%NAMEBASE%%/include/llvm/Object/
 Archive.h
 ArchiveWriter.h
 Binary.h
 COFF.h
 COFFImportFile.h
 Decompressor.h
 ELF.h
 ELFObjectFile.h
 ELFTypes.h
 Error.h
 IRObjectFile.h
 MachO.h
 MachOUniversal.h
 ModuleSummaryIndexObjectFile.h
 ModuleSymbolTable.h
 ObjectFile.h
 RelocVisitor.h
 StackMapParser.h
 SymbolSize.h
 SymbolicFile.h
 Wasm.h
%%NAMEBASE%%/include/llvm/ObjectYAML/
 COFFYAML.h
 DWARFYAML.h
 ELFYAML.h
 MachOYAML.h
 ObjectYAML.h
 YAML.h
%%NAMEBASE%%/include/llvm/Option/
 Arg.h
 ArgList.h
 OptParser.td
 OptSpecifier.h
 OptTable.h
 Option.h
%%NAMEBASE%%/include/llvm/Passes/PassBuilder.h
%%NAMEBASE%%/include/llvm/ProfileData/
 InstrProf.h
 InstrProfData.inc
 InstrProfReader.h
 InstrProfWriter.h
 ProfileCommon.h
 SampleProf.h
 SampleProfReader.h
 SampleProfWriter.h
%%NAMEBASE%%/include/llvm/ProfileData/Coverage/
 CoverageMapping.h
 CoverageMappingReader.h
 CoverageMappingWriter.h
%%NAMEBASE%%/include/llvm/Support/
 AArch64TargetParser.def
 ARMBuildAttributes.h
 ARMEHABI.h
 ARMTargetParser.def
 ARMWinEH.h
 AlignOf.h
 Allocator.h
 ArrayRecycler.h
 Atomic.h
 AtomicOrdering.h
 BlockFrequency.h
 BranchProbability.h
 CBindingWrapping.h
 COFF.h
 COM.h
 CachePruning.h
 Capacity.h
 Casting.h
 Chrono.h
 CodeGen.h
 CodeGenCWrappers.h
 CommandLine.h
 Compiler.h
 Compression.h
 ConvertUTF.h
 CrashRecoveryContext.h
 DOTGraphTraits.h
 DataExtractor.h
 DataTypes.h
 Debug.h
 Dwarf.def
 Dwarf.h
 DynamicLibrary.h
 ELF.h
 Endian.h
 EndianStream.h
 Errc.h
 Errno.h
 Error.h
 ErrorHandling.h
 ErrorOr.h
 FileOutputBuffer.h
 FileSystem.h
 FileUtilities.h
 Format.h
 FormatAdapters.h
 FormatCommon.h
 FormatProviders.h
 FormatVariadic.h
 FormatVariadicDetails.h
 FormattedStream.h
 GCOV.h
 GenericDomTree.h
 GenericDomTreeConstruction.h
 GlobPattern.h
 GraphWriter.h
 Host.h
 JamCRC.h
 LEB128.h
 LICENSE.TXT
 LineIterator.h
 Locale.h
 LockFileManager.h
 MD5.h
 MachO.def
 MachO.h
 ManagedStatic.h
 MathExtras.h
 Memory.h
 MemoryBuffer.h
 MipsABIFlags.h
 Mutex.h
 MutexGuard.h
 NativeFormatting.h
 OnDiskHashTable.h
 Options.h
 Path.h
 PluginLoader.h
 PointerLikeTypeTraits.h
 PrettyStackTrace.h
 Printable.h
 Process.h
 Program.h
 RWMutex.h
 RandomNumberGenerator.h
 Recycler.h
 RecyclingAllocator.h
 Regex.h
 Registry.h
 SHA1.h
 SMLoc.h
 SaveAndRestore.h
 ScaledNumber.h
 ScopedPrinter.h
 Signals.h
 Solaris.h
 SourceMgr.h
 SpecialCaseList.h
 StringPool.h
 StringSaver.h
 SwapByteOrder.h
 SystemUtils.h
 TarWriter.h
 TargetParser.h
 TargetRegistry.h
 TargetSelect.h
 ThreadLocal.h
 ThreadPool.h
 Threading.h
 Timer.h
 ToolOutputFile.h
 TrailingObjects.h
 TrigramIndex.h
 TypeName.h
 Unicode.h
 UnicodeCharRanges.h
 UniqueLock.h
 Valgrind.h
 Wasm.h
 Watchdog.h
 Win64EH.h
 WindowsError.h
 YAMLParser.h
 YAMLTraits.h
 circular_raw_ostream.h
 raw_os_ostream.h
 raw_ostream.h
 raw_sha1_ostream.h
 thread.h
 type_traits.h
 xxhash.h
%%NAMEBASE%%/include/llvm/Support/ELFRelocs/
 AArch64.def
 AMDGPU.def
 ARM.def
 AVR.def
 BPF.def
 Hexagon.def
 Lanai.def
 Mips.def
 PowerPC.def
 PowerPC64.def
 RISCV.def
 Sparc.def
 SystemZ.def
 WebAssembly.def
 i386.def
 x86_64.def
%%NAMEBASE%%/include/llvm/TableGen/
 Error.h
 Main.h
 Record.h
 SearchableTable.td
 SetTheory.h
 StringMatcher.h
 StringToOffsetTable.h
 TableGenBackend.h
%%NAMEBASE%%/include/llvm/Target/
 CostTable.h
 GenericOpcodes.td
 Target.td
 TargetCallingConv.h
 TargetCallingConv.td
 TargetFrameLowering.h
 TargetGlobalISel.td
 TargetInstrInfo.h
 TargetIntrinsicInfo.h
 TargetItinerary.td
 TargetLowering.h
 TargetLoweringObjectFile.h
 TargetMachine.h
 TargetOpcodes.def
 TargetOpcodes.h
 TargetOptions.h
 TargetRegisterInfo.h
 TargetSchedule.td
 TargetSelectionDAG.td
 TargetSubtargetInfo.h
%%NAMEBASE%%/include/llvm/Transforms/
 Coroutines.h
 GCOVProfiler.h
 IPO.h
 InstrProfiling.h
 Instrumentation.h
 ObjCARC.h
 PGOInstrumentation.h
 SampleProfile.h
 Scalar.h
 Vectorize.h
%%NAMEBASE%%/include/llvm/Transforms/IPO/
 AlwaysInliner.h
 ConstantMerge.h
 CrossDSOCFI.h
 DeadArgumentElimination.h
 ElimAvailExtern.h
 ForceFunctionAttrs.h
 FunctionAttrs.h
 FunctionImport.h
 GlobalDCE.h
 GlobalOpt.h
 GlobalSplit.h
 InferFunctionAttrs.h
 Inliner.h
 Internalize.h
 LowerTypeTests.h
 PartialInlining.h
 PassManagerBuilder.h
 SCCP.h
 StripDeadPrototypes.h
 WholeProgramDevirt.h
%%NAMEBASE%%/include/llvm/Transforms/InstCombine/
 InstCombine.h
 InstCombineWorklist.h
%%NAMEBASE%%/include/llvm/Transforms/Scalar/
 ADCE.h
 AlignmentFromAssumptions.h
 BDCE.h
 ConstantHoisting.h
 CorrelatedValuePropagation.h
 DCE.h
 DeadStoreElimination.h
 EarlyCSE.h
 Float2Int.h
 GVN.h
 GVNExpression.h
 GuardWidening.h
 IVUsersPrinter.h
 IndVarSimplify.h
 JumpThreading.h
 LICM.h
 LoopAccessAnalysisPrinter.h
 LoopDataPrefetch.h
 LoopDeletion.h
 LoopDistribute.h
 LoopIdiomRecognize.h
 LoopInstSimplify.h
 LoopPassManager.h
 LoopRotation.h
 LoopSimplifyCFG.h
 LoopStrengthReduce.h
 LoopUnrollPass.h
 LowerAtomic.h
 LowerExpectIntrinsic.h
 LowerGuardIntrinsic.h
 MemCpyOptimizer.h
 MergedLoadStoreMotion.h
 NaryReassociate.h
 NewGVN.h
 PartiallyInlineLibCalls.h
 Reassociate.h
 SCCP.h
 SROA.h
 SimplifyCFG.h
 Sink.h
 SpeculativeExecution.h
 TailRecursionElimination.h
%%NAMEBASE%%/include/llvm/Transforms/Utils/
 ASanStackFrameLayout.h
 AddDiscriminators.h
 BasicBlockUtils.h
 BreakCriticalEdges.h
 BuildLibCalls.h
 BypassSlowDivision.h
 Cloning.h
 CmpInstAnalysis.h
 CodeExtractor.h
 CtorUtils.h
 EscapeEnumerator.h
 Evaluator.h
 FunctionComparator.h
 FunctionImportUtils.h
 GlobalStatus.h
 ImportedFunctionsInliningStatistics.h
 IntegerDivision.h
 LCSSA.h
 LibCallsShrinkWrap.h
 Local.h
 LoopSimplify.h
 LoopUtils.h
 LoopVersioning.h
 LowerInvoke.h
 Mem2Reg.h
 MemorySSA.h
 ModuleUtils.h
 NameAnonGlobals.h
 PromoteMemToReg.h
 SSAUpdater.h
 SSAUpdaterImpl.h
 SanitizerStats.h
 SimplifyIndVar.h
 SimplifyInstructions.h
 SimplifyLibCalls.h
 SplitModule.h
 SymbolRewriter.h
 UnifyFunctionExitNodes.h
 UnrollLoop.h
 ValueMapper.h
%%NAMEBASE%%/include/llvm/Transforms/Vectorize/
 LoopVectorize.h
 SLPVectorizer.h
%%NAMEBASE%%/include/llvm/XRay/
 Trace.h
 XRayRecord.h
 YAMLXRayRecord.h
%%NAMEBASE%%/lib/
 BugpointPasses.so
 LLVMHello.so
 libLLVM-%%LLVM_MAJOR%%.so
 libLLVM-%%LLVM_RELEASE%%.so
 libLLVM.so
 libLLVMAArch64AsmParser.a
 libLLVMAArch64AsmPrinter.a
 libLLVMAArch64CodeGen.a
 libLLVMAArch64Desc.a
 libLLVMAArch64Disassembler.a
 libLLVMAArch64Info.a
 libLLVMAArch64Utils.a
 libLLVMAMDGPUAsmParser.a
 libLLVMAMDGPUAsmPrinter.a
 libLLVMAMDGPUCodeGen.a
 libLLVMAMDGPUDesc.a
 libLLVMAMDGPUDisassembler.a
 libLLVMAMDGPUInfo.a
 libLLVMAMDGPUUtils.a
 libLLVMARMAsmParser.a
 libLLVMARMAsmPrinter.a
 libLLVMARMCodeGen.a
 libLLVMARMDesc.a
 libLLVMARMDisassembler.a
 libLLVMARMInfo.a
 libLLVMAnalysis.a
 libLLVMAsmParser.a
 libLLVMAsmPrinter.a
 libLLVMBPFAsmPrinter.a
 libLLVMBPFCodeGen.a
 libLLVMBPFDesc.a
 libLLVMBPFDisassembler.a
 libLLVMBPFInfo.a
 libLLVMBitReader.a
 libLLVMBitWriter.a
 libLLVMCodeGen.a
 libLLVMCore.a
 libLLVMCoroutines.a
 libLLVMCoverage.a
 libLLVMDebugInfoCodeView.a
 libLLVMDebugInfoDWARF.a
 libLLVMDebugInfoMSF.a
 libLLVMDebugInfoPDB.a
 libLLVMDemangle.a
 libLLVMExecutionEngine.a
 libLLVMGlobalISel.a
 libLLVMHexagonAsmParser.a
 libLLVMHexagonCodeGen.a
 libLLVMHexagonDesc.a
 libLLVMHexagonDisassembler.a
 libLLVMHexagonInfo.a
 libLLVMIRReader.a
 libLLVMInstCombine.a
 libLLVMInstrumentation.a
 libLLVMInterpreter.a
 libLLVMLTO.a
 libLLVMLanaiAsmParser.a
 libLLVMLanaiCodeGen.a
 libLLVMLanaiDesc.a
 libLLVMLanaiDisassembler.a
 libLLVMLanaiInfo.a
 libLLVMLanaiInstPrinter.a
 libLLVMLibDriver.a
 libLLVMLineEditor.a
 libLLVMLinker.a
 libLLVMMC.a
 libLLVMMCDisassembler.a
 libLLVMMCJIT.a
 libLLVMMCParser.a
 libLLVMMIRParser.a
 libLLVMMSP430AsmPrinter.a
 libLLVMMSP430CodeGen.a
 libLLVMMSP430Desc.a
 libLLVMMSP430Info.a
 libLLVMMipsAsmParser.a
 libLLVMMipsAsmPrinter.a
 libLLVMMipsCodeGen.a
 libLLVMMipsDesc.a
 libLLVMMipsDisassembler.a
 libLLVMMipsInfo.a
 libLLVMNVPTXAsmPrinter.a
 libLLVMNVPTXCodeGen.a
 libLLVMNVPTXDesc.a
 libLLVMNVPTXInfo.a
 libLLVMObjCARCOpts.a
 libLLVMObject.a
 libLLVMObjectYAML.a
 libLLVMOption.a
 libLLVMOrcJIT.a
 libLLVMPasses.a
 libLLVMPowerPCAsmParser.a
 libLLVMPowerPCAsmPrinter.a
 libLLVMPowerPCCodeGen.a
 libLLVMPowerPCDesc.a
 libLLVMPowerPCDisassembler.a
 libLLVMPowerPCInfo.a
 libLLVMProfileData.a
 libLLVMRISCVCodeGen.a
 libLLVMRISCVDesc.a
 libLLVMRISCVInfo.a
 libLLVMRuntimeDyld.a
 libLLVMScalarOpts.a
 libLLVMSelectionDAG.a
 libLLVMSparcAsmParser.a
 libLLVMSparcAsmPrinter.a
 libLLVMSparcCodeGen.a
 libLLVMSparcDesc.a
 libLLVMSparcDisassembler.a
 libLLVMSparcInfo.a
 libLLVMSupport.a
 libLLVMSymbolize.a
 libLLVMSystemZAsmParser.a
 libLLVMSystemZAsmPrinter.a
 libLLVMSystemZCodeGen.a
 libLLVMSystemZDesc.a
 libLLVMSystemZDisassembler.a
 libLLVMSystemZInfo.a
 libLLVMTableGen.a
 libLLVMTarget.a
 libLLVMTransformUtils.a
 libLLVMVectorize.a
 libLLVMX86AsmParser.a
 libLLVMX86AsmPrinter.a
 libLLVMX86CodeGen.a
 libLLVMX86Desc.a
 libLLVMX86Disassembler.a
 libLLVMX86Info.a
 libLLVMX86Utils.a
 libLLVMXCoreAsmPrinter.a
 libLLVMXCoreCodeGen.a
 libLLVMXCoreDesc.a
 libLLVMXCoreDisassembler.a
 libLLVMXCoreInfo.a
 libLLVMXRay.a
 libLLVMipo.a
 libLTO.so
 libLTO.so.%%LLVM_RELEASE%%
 libLTO.so.4
%%NAMEBASE%%/lib/cmake/llvm/
 AddLLVM.cmake
 AddLLVMDefinitions.cmake
 AddOCaml.cmake
 AddSphinxTarget.cmake
 CheckAtomic.cmake
 CheckCompilerVersion.cmake
 CheckLinkerFlag.cmake
 ChooseMSVCCRT.cmake
 CrossCompile.cmake
 DetermineGCCCompatible.cmake
 FindOCaml.cmake
 FindSphinx.cmake
 GenerateVersionFromCVS.cmake
 GetSVN.cmake
 HandleLLVMOptions.cmake
 HandleLLVMStdlib.cmake
 LLVM-Config.cmake
 LLVMConfig.cmake
 LLVMConfigVersion.cmake
 LLVMExports-%%CMAKE_BUILD_TYPE%%.cmake
 LLVMExports.cmake
 LLVMExternalProjectUtils.cmake
 LLVMInstallSymlink.cmake
 LLVMProcessSources.cmake
 TableGen.cmake
 VersionFromVCS.cmake
%%OPENMP-ON%%%%NAMEBASE%%/lib/
 libgomp.so
 libiomp5.so
 libomp.so


[FILE:1361:patches/patch-bug32279]
--- tools/openmp/runtime/cmake/LibompHandleFlags.cmake.orig	2017-03-16 15:50:48 UTC
+++ tools/openmp/runtime/cmake/LibompHandleFlags.cmake
@@ -156,6 +156,9 @@ function(libomp_get_libflags libflags)
   if(${IA32})
     libomp_append(libflags_local -lirc_pic LIBOMP_HAVE_IRC_PIC_LIBRARY)
   endif()
+  IF(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD|DragonFly")
+    libomp_append(libflags_local "-lm")
+  ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
   IF(${CMAKE_SYSTEM_NAME} MATCHES "NetBSD")
     libomp_append(libflags_local -lm)
   ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "NetBSD")
 runtime/cmake/LibompHandleFlags.cmake | 5 +++++
 runtime/cmake/LibompMicroTests.cmake  | 2 +-
 2 files changed, 6 insertions(+), 1 deletion(-)

--- tools/openmp/runtime/cmake/LibompMicroTests.cmake.orig	2017-03-16 15:50:48 UTC
+++ tools/openmp/runtime/cmake/LibompMicroTests.cmake
@@ -171,7 +171,7 @@ add_custom_command(
 add_custom_target(libomp-test-deps DEPENDS test-deps/.success)
 set(libomp_expected_library_deps)
 if(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
-  set(libomp_expected_library_deps libc.so.7 libthr.so.3)
+  set(libomp_expected_library_deps libc.so.7 libthr.so.3 libm.so.5)
   libomp_append(libomp_expected_library_deps libhwloc.so.5 LIBOMP_USE_HWLOC)
 elseif(CMAKE_SYSTEM_NAME MATCHES "NetBSD")
   set(libomp_expected_library_deps libc.so.12 libpthread.so.1 libm.so.0)


[FILE:739:patches/patch-cmake_modules_AddLLVM.cmake]
--- cmake/modules/AddLLVM.cmake.orig	2017-05-19 01:55:05 UTC
+++ cmake/modules/AddLLVM.cmake
@@ -182,9 +182,6 @@ function(add_link_opts target_name)
         # ld64's implementation of -dead_strip breaks tools that use plugins.
         set_property(TARGET ${target_name} APPEND_STRING PROPERTY
                      LINK_FLAGS " -Wl,-dead_strip")
-      elseif(${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
-        set_property(TARGET ${target_name} APPEND_STRING PROPERTY
-                     LINK_FLAGS " -Wl,-z -Wl,discard-unused=sections")
       elseif(NOT WIN32 AND NOT LLVM_LINKER_IS_GOLD)
         # Object files are compiled with -ffunction-data-sections.
         # Versions of bfd ld < 2.23.1 have a bug in --gc-sections that breaks


[FILE:688:patches/patch-include_llvm_ExecutionEngine_Orc_OrcRemoteTargetClient.h]
#    Description                  : Enable LLVM build with gcc 8

--- include/llvm/ExecutionEngine/Orc/OrcRemoteTargetClient.h
+++ include/llvm/ExecutionEngine/Orc/OrcRemoteTargetClient.h
@@ -687,8 +687,8 @@ private:
 
   uint32_t getTrampolineSize() const { return RemoteTrampolineSize; }
 
-  Expected<std::vector<char>> readMem(char *Dst, JITTargetAddress Src,
-                                      uint64_t Size) {
+  Expected<std::vector<uint8_t>> readMem(char *Dst, JITTargetAddress Src,
+                                         uint64_t Size) {
     // Check for an 'out-of-band' error, e.g. from an MM destructor.
     if (ExistingError)
       return std::move(ExistingError);


[FILE:569:patches/patch-include_llvm_Support_Host.h]
--- include/llvm/Support/Host.h.orig	2016-10-13 17:43:20 UTC
+++ include/llvm/Support/Host.h
@@ -20,6 +20,18 @@
 #include <endian.h>
 #elif defined(_AIX)
 #include <sys/machine.h>
+#elif defined(__sun) & defined(__SVR4)
+# ifndef BYTE_ORDER
+# define LITTLE_ENDIAN 1234
+# define BIG_ENDIAN 4321
+# include <sys/isa_defs.h>
+# ifdef _LITTLE_ENDIAN
+# define BYTE_ORDER LITTLE_ENDIAN
+# endif
+# ifdef _BIG_ENDIAN
+# define BYTE_ORDER BIG_ENDIAN
+# endif
+# endif /* BYTE_ORDER */
 #else
 #if !defined(BYTE_ORDER) && !defined(LLVM_ON_WIN32)
 #include <machine/endian.h>


[FILE:420:patches/patch-lib_ObjectYAML_MachOYAML.cpp]
--- lib/ObjectYAML/MachOYAML.cpp.orig	2016-12-22 21:58:03 UTC
+++ lib/ObjectYAML/MachOYAML.cpp
@@ -19,6 +19,18 @@
 
 #include <string.h> // For memcpy, memset and strnlen.
 
+#ifdef __sun__
+static size_t
+strnlen(const char *s, size_t maxlen)
+{
+	size_t len;
+	for (len = 0; len < maxlen; len++, s++) {
+		if (!*s) break;
+	}
+	return (len);
+}
+#endif
+
 namespace llvm {
 
 MachOYAML::LoadCommand::~LoadCommand() {}


[FILE:262:patches/patch-lib_Support_Unix_Program.inc]
--- lib/Support/Unix/Program.inc.orig	2016-04-05 20:45:04 UTC
+++ lib/Support/Unix/Program.inc
@@ -40,9 +40,6 @@
 #include <unistd.h>
 #endif
 #ifdef HAVE_POSIX_SPAWN
-#ifdef __sun__
-#define  _RESTRICT_KYWD
-#endif
 #include <spawn.h>
 
 #if defined(__APPLE__)


[FILE:1721:patches/patch-tools_clang_lib_Driver_Tools.cpp]
--- tools/clang/lib/Driver/Tools.cpp.orig	2017-04-22 17:20:27 UTC
+++ tools/clang/lib/Driver/Tools.cpp
@@ -3222,13 +3222,13 @@ static void addOpenMPRuntime(ArgStringLi
 
   switch (TC.getDriver().getOpenMPRuntime(Args)) {
   case Driver::OMPRT_OMP:
-    CmdArgs.push_back("-lomp");
+    CmdArgs.push_back("/usr/local/llvm40/lib/libomp.so");
     break;
   case Driver::OMPRT_GOMP:
-    CmdArgs.push_back("-lgomp");
+    CmdArgs.push_back("/usr/local/llvm40/lib/libgomp.so");
     break;
   case Driver::OMPRT_IOMP5:
-    CmdArgs.push_back("-liomp5");
+    CmdArgs.push_back("/usr/local/llvm40/lib/libiomp5.so");
     break;
   case Driver::OMPRT_Unknown:
     // Already diagnosed.
@@ -10246,17 +10246,15 @@ void gnutools::Linker::ConstructJob(Comp
         // Also link the particular OpenMP runtimes.
         switch (ToolChain.getDriver().getOpenMPRuntime(Args)) {
         case Driver::OMPRT_OMP:
-          CmdArgs.push_back("-lomp");
+          CmdArgs.push_back("/usr/local/llvm40/lib/libomp.so");
           break;
         case Driver::OMPRT_GOMP:
-          CmdArgs.push_back("-lgomp");
-
-          // FIXME: Exclude this for platforms with libgomp that don't require
-          // librt. Most modern Linux platforms require it, but some may not.
-          CmdArgs.push_back("-lrt");
+          CmdArgs.push_back("/usr/local/llvm40/lib/libgomp.so");
+          if (ToolChain.getTriple().getOS() == llvm::Triple::Linux)
+             CmdArgs.push_back("-lrt");
           break;
         case Driver::OMPRT_IOMP5:
-          CmdArgs.push_back("-liomp5");
+          CmdArgs.push_back("/usr/local/llvm40/lib/libiomp5.so");
           break;
         case Driver::OMPRT_Unknown:
           // Already diagnosed.


[FILE:486:patches/patch-tools_clang_lib_Lex_HeaderMap.cpp]
--- tools/clang/lib/Lex/HeaderMap.cpp.orig	2016-10-01 16:38:28 UTC
+++ tools/clang/lib/Lex/HeaderMap.cpp
@@ -24,6 +24,19 @@
 #include "llvm/Support/Debug.h"
 #include <cstring>
 #include <memory>
+
+#ifdef __sun__
+static size_t
+strnlen(const char *s, size_t maxlen)
+{
+	size_t len;
+	for (len = 0; len < maxlen; len++, s++) {
+		if (!*s) break;
+	}
+	return (len);
+}
+#endif
+
 using namespace clang;
 
 /// HashHMapKey - This is the 'well known' hash function required by the file


[FILE:431:patches/patch-tools_llvm-pdbdump_LLVMOutputStyle.cpp]
--- tools/llvm-pdbdump/LLVMOutputStyle.cpp.orig	2017-01-11 23:24:22 UTC
+++ tools/llvm-pdbdump/LLVMOutputStyle.cpp
@@ -37,6 +37,18 @@
 
 #include <unordered_map>
 
+#ifdef __sun__
+static size_t
+strnlen(const char *s, size_t maxlen)
+{
+	size_t len;
+	for (len = 0; len < maxlen; len++, s++) {
+		if (!*s) break;
+	}
+	return (len);
+}
+#endif
+
 using namespace llvm;
 using namespace llvm::codeview;
 using namespace llvm::msf;


[FILE:874:patches/patch-tools_llvm-shlib_CMakeLists.txt]
--- tools/llvm-shlib/CMakeLists.txt.orig	2016-11-01 20:19:33 UTC
+++ tools/llvm-shlib/CMakeLists.txt
@@ -37,11 +37,13 @@ endif()
 add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB SONAME ${SOURCES})
 
 list(REMOVE_DUPLICATES LIB_NAMES)
-if("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux" OR MINGW) # FIXME: It should be "GNU ld for elf"
+if(CMAKE_SYSTEM_NAME MATCHES "Linux|FreeBSD|DragonFly" OR MINGW) # FIXME: It should be "GNU ld for elf"
   # GNU ld doesn't resolve symbols in the version script.
   set(LIB_NAMES -Wl,--whole-archive ${LIB_NAMES} -Wl,--no-whole-archive)
 elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
   set(LIB_NAMES -Wl,-all_load ${LIB_NAMES})
+elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "SunOS")
+  set(LIB_NAMES -Wl,-Bsymbolic -Wl,-z -Wl,allextract ${LIB_NAMES} -Wl,-z -Wl,defaultextract)
 endif()
 
 target_link_libraries(LLVM PRIVATE ${LIB_NAMES})


[FILE:384:patches/patch-tools_obj2yaml_macho2yaml.cpp]
--- tools/obj2yaml/macho2yaml.cpp.orig	2016-12-22 21:58:03 UTC
+++ tools/obj2yaml/macho2yaml.cpp
@@ -17,6 +17,18 @@
 
 #include <string.h> // for memcpy
 
+#ifdef __sun__
+static size_t
+strnlen(const char *s, size_t maxlen)
+{
+	size_t len;
+	for (len = 0; len < maxlen; len++, s++) {
+		if (!*s) break;
+	}
+	return (len);
+}
+#endif
+
 using namespace llvm;
 
 class MachODumper {


[FILE:128:files/special.mk]
# for some reason linux freezes when linking two clang programs
# at the same time

.if ${OPSYS} == Linux
SINGLE_JOB=	yes
.endif

[FILE:536:dragonfly/patch-cmake_modules_HandleLLVMOptions.cmake]
--- cmake/modules/HandleLLVMOptions.cmake.orig	2016-06-30 20:15:44.000000000 +0300
+++ cmake/modules/HandleLLVMOptions.cmake
@@ -103,6 +103,7 @@ endif()
 # Pass -Wl,-z,defs. This makes sure all symbols are defined. Otherwise a DSO
 # build might work on ELF but fail on MachO/COFF.
 if(NOT (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR WIN32 OR CYGWIN OR
+        ${CMAKE_SYSTEM_NAME} MATCHES "DragonFly" OR
         ${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD" OR
         ${CMAKE_SYSTEM_NAME} MATCHES "OpenBSD") AND
    NOT LLVM_USE_SANITIZER)


[FILE:870:dragonfly/patch-tools_clang_lib_Driver_ToolChains.cpp]
--- tools/clang/lib/Driver/ToolChains.cpp.orig	2017-01-10 21:13:08 UTC
+++ tools/clang/lib/Driver/ToolChains.cpp
@@ -4860,7 +4860,8 @@ DragonFly::DragonFly(const Driver &D, co
 
   getFilePaths().push_back(getDriver().Dir + "/../lib");
   getFilePaths().push_back("/usr/lib");
-  getFilePaths().push_back("/usr/lib/gcc50");
+  getFilePaths().push_back("@RAVEN_GCC@");
+  getFilePaths().push_back("@RAVEN_GCC_TARGET@");
 }
 
 Tool *DragonFly::buildAssembler() const {
@@ -4871,6 +4872,8 @@ Tool *DragonFly::buildLinker() const {
   return new tools::dragonfly::Linker(*this);
 }
 
+bool DragonFly::HasNativeLLVMSupport() const { return true; }
+
 /// CUDA toolchain.  Our assembler is ptxas, and our "linker" is fatbinary,
 /// which isn't properly a linker but nonetheless performs the step of stitching
 /// together object files from the assembler into a single blob.


[FILE:368:dragonfly/patch-tools_clang_lib_Driver_ToolChains.h]
--- tools/clang/lib/Driver/ToolChains.h.orig	2017-01-05 16:52:29 UTC
+++ tools/clang/lib/Driver/ToolChains.h
@@ -854,6 +854,8 @@ public:
   DragonFly(const Driver &D, const llvm::Triple &Triple,
             const llvm::opt::ArgList &Args);
 
+  bool HasNativeLLVMSupport() const override;
+
   bool IsMathErrnoDefault() const override { return false; }
 
 protected:


[FILE:1854:dragonfly/patch-tools_clang_lib_Driver_Tools.cpp]
--- tools/clang/lib/Driver/Tools.cpp.orig	2017-04-22 17:20:27 UTC
+++ tools/clang/lib/Driver/Tools.cpp
@@ -10714,7 +10714,7 @@ void dragonfly::Linker::ConstructJob(Com
       CmdArgs.push_back("-Bshareable");
     else {
       CmdArgs.push_back("-dynamic-linker");
-      CmdArgs.push_back("/usr/libexec/ld-elf.so.2");
+      CmdArgs.push_back("/libexec/ld-elf.so.2");
     }
     CmdArgs.push_back("--hash-style=gnu");
     CmdArgs.push_back("--enable-new-dtags");
@@ -10757,17 +10757,20 @@ void dragonfly::Linker::ConstructJob(Com
           Args.MakeArgString(getToolChain().GetFilePath("crtbegin.o")));
   }
 
+  if (D.isUsingLTO())
+    AddGoldPlugin(getToolChain(), Args, CmdArgs, D.getLTOMode() == LTOK_Thin, D);
+
   Args.AddAllArgs(CmdArgs,
                   {options::OPT_L, options::OPT_T_Group, options::OPT_e});
 
   AddLinkerInputs(getToolChain(), Inputs, Args, CmdArgs, JA);
 
   if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs)) {
-    CmdArgs.push_back("-L/usr/lib/gcc50");
+    CmdArgs.push_back("-L@RAVEN_GCC@");
 
     if (!Args.hasArg(options::OPT_static)) {
       CmdArgs.push_back("-rpath");
-      CmdArgs.push_back("/usr/lib/gcc50");
+      CmdArgs.push_back("@RAVEN_GCC@");
     }
 
     if (D.CCCIsCXX()) {
@@ -10787,16 +10790,7 @@ void dragonfly::Linker::ConstructJob(Com
         CmdArgs.push_back("-lgcc");
         CmdArgs.push_back("-lgcc_eh");
     } else {
-      if (Args.hasArg(options::OPT_shared_libgcc)) {
-          CmdArgs.push_back("-lgcc_pic");
-          if (!Args.hasArg(options::OPT_shared))
-            CmdArgs.push_back("-lgcc");
-      } else {
-          CmdArgs.push_back("-lgcc");
-          CmdArgs.push_back("--as-needed");
-          CmdArgs.push_back("-lgcc_pic");
-          CmdArgs.push_back("--no-as-needed");
-      }
+        CmdArgs.push_back("-lgcc_s");
     }
   }
 


[FILE:592:dragonfly/patch-tools_clang_lib_Frontend_InitHeaderSearch.cpp]
--- tools/clang/lib/Frontend/InitHeaderSearch.cpp.orig	2016-12-02 09:51:51 UTC
+++ tools/clang/lib/Frontend/InitHeaderSearch.cpp
@@ -411,7 +411,9 @@ AddDefaultCPlusPlusIncludePaths(const ll
     }
     break;
   case llvm::Triple::DragonFly:
-    AddPath("/usr/include/c++/5.0", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@/backward", CXXSystem, false);
+    AddPath("@RAVEN_GXX_HEADERS_DIR@/" + triple.getTriple(), CXXSystem, false);
     break;
   case llvm::Triple::OpenBSD: {
     std::string t = triple.getTriple();


[FILE:564:dragonfly/patch-tools_clang_lib_Headers_CMakeLists.txt]
--- tools/clang/lib/Headers/CMakeLists.txt.orig	2015-07-30 22:47:41 UTC
+++ tools/clang/lib/Headers/CMakeLists.txt
@@ -30,7 +30,6 @@ set(files
   Intrin.h
   inttypes.h
   iso646.h
-  limits.h
   lzcntintrin.h
   mm3dnow.h
   mmintrin.h
@@ -45,20 +44,12 @@ set(files
   s390intrin.h
   shaintrin.h
   smmintrin.h
-  stdalign.h
-  stdarg.h
-  stdatomic.h
-  stdbool.h
-  stddef.h
   __stddef_max_align_t.h
-  stdint.h
-  stdnoreturn.h
   tbmintrin.h
   tgmath.h
   tmmintrin.h
   unwind.h
   vadefs.h
-  varargs.h
   vecintrin.h
   __wmmintrin_aes.h
   wmmintrin.h


[FILE:697:dragonfly/patch-tools_openmp_runtime_cmake_LibompMicroTests.cmake]
--- tools/openmp/runtime/cmake/LibompMicroTests.cmake.orig	2016-12-08 11:22:24.000000000 +0200
+++ tools/openmp/runtime/cmake/LibompMicroTests.cmake
@@ -176,6 +176,9 @@ if(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
 elseif(CMAKE_SYSTEM_NAME MATCHES "NetBSD")
   set(libomp_expected_library_deps libc.so.12 libpthread.so.1 libm.so.0)
   libomp_append(libomp_expected_library_deps libhwloc.so.5 LIBOMP_USE_HWLOC)
+elseif(CMAKE_SYSTEM_NAME MATCHES "DragonFly")
+  set(libomp_expected_library_deps libc.so.8 libpthread.so.0 libm.so.4)
+  libomp_append(libomp_expected_library_deps libhwloc.so.5 LIBOMP_USE_HWLOC)
 elseif(APPLE)
   set(libomp_expected_library_deps /usr/lib/libSystem.B.dylib)
 elseif(WIN32)


[FILE:631:dragonfly/patch-tools_openmp_runtime_src_kmp.h]
--- tools/openmp/runtime/src/kmp.h.orig	2016-12-15 01:01:24.000000000 +0200
+++ tools/openmp/runtime/src/kmp.h
@@ -974,6 +974,10 @@ extern int __kmp_place_num_threads_per_c
 /* TODO: tune for KMP_OS_NETBSD */
 #  define KMP_INIT_WAIT  1024U          /* initial number of spin-tests   */
 #  define KMP_NEXT_WAIT   512U          /* susequent number of spin-tests */
+#elif KMP_OS_DRAGONFLY
+/* TODO: tune for KMP_OS_DRAGONFLY */
+#  define KMP_INIT_WAIT  1024U          /* initial number of spin-tests   */
+#  define KMP_NEXT_WAIT   512U          /* susequent number of spin-tests */
 #endif
 
 #if KMP_ARCH_X86 || KMP_ARCH_X86_64


[FILE:474:dragonfly/patch-tools_openmp_runtime_src_kmp__ftn__entry.h]
--- tools/openmp/runtime/src/kmp_ftn_entry.h.orig	2016-11-14 23:08:35.000000000 +0200
+++ tools/openmp/runtime/src/kmp_ftn_entry.h
@@ -406,7 +406,7 @@ xexpand(FTN_GET_THREAD_NUM)( void )
     #else
         int gtid;
 
-        #if KMP_OS_DARWIN || KMP_OS_FREEBSD || KMP_OS_NETBSD
+        #if KMP_OS_DARWIN || KMP_OS_FREEBSD || KMP_OS_NETBSD || KMP_OS_DRAGONFLY
             gtid = __kmp_entry_gtid();
         #elif KMP_OS_WINDOWS
             if (!__kmp_init_parallel ||


[FILE:1073:dragonfly/patch-tools_openmp_runtime_src_kmp__platform.h]
--- tools/openmp/runtime/src/kmp_platform.h.orig	2016-12-08 11:22:24.000000000 +0200
+++ tools/openmp/runtime/src/kmp_platform.h
@@ -17,6 +17,7 @@
 /* ---------------------- Operating system recognition ------------------- */
 
 #define KMP_OS_LINUX    0
+#define KMP_OS_DRAGONFLY 0
 #define KMP_OS_FREEBSD  0
 #define KMP_OS_NETBSD   0
 #define KMP_OS_DARWIN   0
@@ -45,6 +46,11 @@
 #else
 #endif
 
+#if ( defined __DragonFly__ )
+# undef KMP_OS_DRAGONFLY
+# define KMP_OS_DRAGONFLY 1
+#endif
+
 #if ( defined __FreeBSD__ )
 # undef KMP_OS_FREEBSD
 # define KMP_OS_FREEBSD 1
@@ -60,11 +66,11 @@
 # define KMP_OS_CNK 1
 #endif
 
-#if (1 != KMP_OS_LINUX + KMP_OS_FREEBSD + KMP_OS_NETBSD + KMP_OS_DARWIN + KMP_OS_WINDOWS)
+#if (1 != KMP_OS_LINUX + KMP_OS_DRAGONFLY + KMP_OS_FREEBSD + KMP_OS_NETBSD + KMP_OS_DARWIN + KMP_OS_WINDOWS)
 # error Unknown OS
 #endif
 
-#if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD || KMP_OS_DARWIN
+#if KMP_OS_LINUX || KMP_OS_DRAGONFLY || KMP_OS_FREEBSD || KMP_OS_NETBSD || KMP_OS_DARWIN
 # undef KMP_OS_UNIX
 # define KMP_OS_UNIX 1
 #endif


[FILE:539:dragonfly/patch-tools_openmp_runtime_src_kmp__runtime.cpp]
--- tools/openmp/runtime/src/kmp_runtime.cpp.orig	2016-12-15 01:01:24.000000000 +0200
+++ tools/openmp/runtime/src/kmp_runtime.cpp
@@ -7567,7 +7567,7 @@ __kmp_determine_reduction_method( ident_
 
         #if KMP_ARCH_X86_64 || KMP_ARCH_PPC64 || KMP_ARCH_AARCH64 || KMP_ARCH_MIPS64
 
-            #if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD || KMP_OS_WINDOWS || KMP_OS_DARWIN
+            #if KMP_OS_LINUX || KMP_OS_DRAGONFLY || KMP_OS_FREEBSD || KMP_OS_NETBSD || KMP_OS_WINDOWS || KMP_OS_DARWIN
 
 	    int teamsize_cutoff = 4;
 


[FILE:575:dragonfly/patch-tools_openmp_runtime_src_kmp__wrapper__malloc.h]
--- tools/openmp/runtime/src/kmp_wrapper_malloc.h.orig	2015-09-21 23:02:45.000000000 +0300
+++ tools/openmp/runtime/src/kmp_wrapper_malloc.h
@@ -103,7 +103,7 @@
 #if KMP_OS_WINDOWS
     #include <malloc.h>        // Windows* OS: _alloca() declared in "malloc.h".
     #define alloca _alloca     // Allow to use alloca() with no underscore.
-#elif KMP_OS_FREEBSD || KMP_OS_NETBSD
+#elif KMP_OS_DRAGONFLY || KMP_OS_FREEBSD || KMP_OS_NETBSD
     // Declared in "stdlib.h".
 #elif KMP_OS_UNIX
     #include <alloca.h>        // Linux* OS and OS X*: alloc() declared in "alloca".


[FILE:2674:dragonfly/patch-tools_openmp_runtime_src_z__Linux__util.cpp]
--- tools/openmp/runtime/src/z_Linux_util.cpp.orig	2016-12-15 01:01:24.000000000 +0200
+++ tools/openmp/runtime/src/z_Linux_util.cpp
@@ -24,7 +24,7 @@
 #include "kmp_wait_release.h"
 #include "kmp_affinity.h"
 
-#if !KMP_OS_FREEBSD && !KMP_OS_NETBSD
+#if !KMP_OS_DRAGONFLY && !KMP_OS_FREEBSD && !KMP_OS_NETBSD
 # include <alloca.h>
 #endif
 #include <unistd.h>
@@ -52,7 +52,7 @@
 #elif KMP_OS_DARWIN
 # include <sys/sysctl.h>
 # include <mach/mach.h>
-#elif KMP_OS_FREEBSD
+#elif KMP_OS_DRAGONFLY || KMP_OS_FREEBSD
 # include <pthread_np.h>
 #endif
 
@@ -539,7 +539,7 @@ static kmp_int32
 __kmp_set_stack_info( int gtid, kmp_info_t *th )
 {
     int            stack_data;
-#if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD
+#if KMP_OS_LINUX || KMP_OS_DRAGONFLY || KMP_OS_FREEBSD || KMP_OS_NETBSD
     /* Linux* OS only -- no pthread_getattr_np support on OS X* */
     pthread_attr_t attr;
     int            status;
@@ -554,7 +554,7 @@ __kmp_set_stack_info( int gtid, kmp_info
         /* Fetch the real thread attributes */
         status = pthread_attr_init( &attr );
         KMP_CHECK_SYSFAIL( "pthread_attr_init", status );
-#if KMP_OS_FREEBSD || KMP_OS_NETBSD
+#if KMP_OS_DRAGONFLY || KMP_OS_FREEBSD || KMP_OS_NETBSD
         status = pthread_attr_get_np( pthread_self(), &attr );
         KMP_CHECK_SYSFAIL( "pthread_attr_get_np", status );
 #else
@@ -594,7 +594,7 @@ __kmp_launch_worker( void *thr )
     sigset_t    new_set, old_set;
 #endif /* KMP_BLOCK_SIGNALS */
     void *exit_val;
-#if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD
+#if KMP_OS_LINUX || KMP_OS_DRAGONFLY || KMP_OS_FREEBSD || KMP_OS_NETBSD
     void * volatile padding = 0;
 #endif
     int gtid;
@@ -645,7 +645,7 @@ __kmp_launch_worker( void *thr )
     KMP_CHECK_SYSFAIL( "pthread_sigmask", status );
 #endif /* KMP_BLOCK_SIGNALS */
 
-#if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD
+#if KMP_OS_LINUX || KMP_OS_DRAGONFLY || KMP_OS_FREEBSD || KMP_OS_NETBSD
     if ( __kmp_stkoffset > 0 && gtid > 0 ) {
         padding = KMP_ALLOCA( gtid * __kmp_stkoffset );
     }
@@ -1957,7 +1957,7 @@ __kmp_get_xproc( void ) {
 
     int r = 0;
 
-    #if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD
+    #if KMP_OS_LINUX || KMP_OS_DRAGONFLY || KMP_OS_FREEBSD || KMP_OS_NETBSD
 
         r = sysconf( _SC_NPROCESSORS_ONLN );
 
@@ -2240,9 +2240,9 @@ __kmp_is_address_mapped( void * addr ) {
             found = 1;
         }; // if
 
-    #elif KMP_OS_FREEBSD || KMP_OS_NETBSD
+    #elif KMP_OS_DRAGONFLY || KMP_OS_FREEBSD || KMP_OS_NETBSD
 
-        // FIXME(FreeBSD, NetBSD): Implement this
+        // FIXME(DragonFly, FreeBSD, NetBSD): Implement this
         found = 1;
 
     #else


[FILE:555:dragonfly/patch-wrong_predefs]
--- tools/clang/lib/Basic/Targets.cpp.orig	2017-01-10 08:02:12.000000000 +0200
+++ tools/clang/lib/Basic/Targets.cpp
@@ -302,10 +302,7 @@ protected:
                     MacroBuilder &Builder) const override {
     // DragonFly defines; list based off of gcc output
     Builder.defineMacro("__DragonFly__");
-    Builder.defineMacro("__DragonFly_cc_version", "100001");
     Builder.defineMacro("__ELF__");
-    Builder.defineMacro("__KPRINTF_ATTRIBUTE__");
-    Builder.defineMacro("__tune_i386__");
     DefineStd(Builder, "unix", Opts);
   }
 public:


[FILE:564:freebsd/patch-tools_clang_lib_Headers_CMakeLists.txt]
--- tools/clang/lib/Headers/CMakeLists.txt.orig	2015-07-30 22:47:41 UTC
+++ tools/clang/lib/Headers/CMakeLists.txt
@@ -30,7 +30,6 @@ set(files
   Intrin.h
   inttypes.h
   iso646.h
-  limits.h
   lzcntintrin.h
   mm3dnow.h
   mmintrin.h
@@ -45,20 +44,12 @@ set(files
   s390intrin.h
   shaintrin.h
   smmintrin.h
-  stdalign.h
-  stdarg.h
-  stdatomic.h
-  stdbool.h
-  stddef.h
   __stddef_max_align_t.h
-  stdint.h
-  stdnoreturn.h
   tbmintrin.h
   tgmath.h
   tmmintrin.h
   unwind.h
   vadefs.h
-  varargs.h
   vecintrin.h
   __wmmintrin_aes.h
   wmmintrin.h


[FILE:2681:linux/patch-tools_clang_lib_Driver_ToolChains.cpp]
--- tools/clang/lib/Driver/ToolChains.cpp.orig	2017-06-23 13:14:28 UTC
+++ tools/clang/lib/Driver/ToolChains.cpp
@@ -4112,10 +4112,6 @@ Linux::Linux(const Driver &D, const llvm
 
   Distro Distro(D.getVFS());
 
-  if (Distro.IsOpenSUSE() || Distro.IsUbuntu()) {
-    ExtraOpts.push_back("-z");
-    ExtraOpts.push_back("relro");
-  }
 
   if (Arch == llvm::Triple::arm || Arch == llvm::Triple::thumb)
     ExtraOpts.push_back("-X");
@@ -4132,13 +4128,7 @@ Linux::Linux(const Driver &D, const llvm
   // ABI requires a mapping between the GOT and the symbol table.
   // Android loader does not support .gnu.hash.
   if (!IsMips && !IsAndroid) {
-    if (Distro.IsRedhat() || Distro.IsOpenSUSE() ||
-        (Distro.IsUbuntu() && Distro >= Distro::UbuntuMaverick))
       ExtraOpts.push_back("--hash-style=gnu");
-
-    if (Distro.IsDebian() || Distro.IsOpenSUSE() || Distro == Distro::UbuntuLucid ||
-        Distro == Distro::UbuntuJaunty || Distro == Distro::UbuntuKarmic)
-      ExtraOpts.push_back("--hash-style=both");
   }
 
   if (Distro.IsRedhat() && Distro != Distro::RHEL5 && Distro != Distro::RHEL6)
@@ -4148,7 +4138,6 @@ Linux::Linux(const Driver &D, const llvm
   ExtraOpts.push_back("--build-id");
 #endif
 
-  if (Distro.IsOpenSUSE())
     ExtraOpts.push_back("--enable-new-dtags");
 
   // The selection of paths to try here is designed to match the patterns which
@@ -4228,6 +4217,8 @@ Linux::Linux(const Driver &D, const llvm
   addPathIfExists(D, SysRoot + "/lib/../" + OSLibDir, Paths);
   addPathIfExists(D, SysRoot + "/usr/lib/" + MultiarchTriple, Paths);
   addPathIfExists(D, SysRoot + "/usr/lib/../" + OSLibDir, Paths);
+  addPathIfExists(D, SysRoot + "@RAVEN_GCC@", Paths);
+  addPathIfExists(D, SysRoot + "@RAVEN_GCC_TARGET@", Paths);
 
   // Try walking via the GCC triple path in case of biarch or multiarch GCC
   // installations with strange symlinks.
@@ -4664,10 +4655,9 @@ void Linux::addLibStdCxxIncludePaths(con
   const GCCVersion &Version = GCCInstallation.getVersion();
 
   // The primary search for libstdc++ supports multiarch variants.
-  if (addLibStdCXXIncludePaths(LibDir.str() + "/../include",
-                               "/c++/" + Version.Text, TripleStr,
-                               GCCMultiarchTriple, TargetMultiarchTriple,
-                               Multilib.includeSuffix(), DriverArgs, CC1Args))
+  addSystemInclude(DriverArgs, CC1Args, "@RAVEN_GXX_HEADERS_DIR@");
+  addSystemInclude(DriverArgs, CC1Args, "@RAVEN_GXX_HEADERS_DIR@/backward");
+  addSystemInclude(DriverArgs, CC1Args, "@RAVEN_GXX_HEADERS_DIR@" + TripleStr);
     return;
 
   // Otherwise, fall back on a bunch of options which don't use multiarch


[FILE:689:linux/patch-tools_clang_lib_Driver_Tools.cpp]
--- tools/clang/lib/Driver/Tools.cpp.orig	2017-06-23 13:14:28 UTC
+++ tools/clang/lib/Driver/Tools.cpp
@@ -10140,6 +10140,9 @@ void gnutools::Linker::ConstructJob(Comp
   }
 
   if (!Args.hasArg(options::OPT_static)) {
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back("@RAVEN_GCC@");
+
     if (Args.hasArg(options::OPT_rdynamic))
       CmdArgs.push_back("-export-dynamic");
 
@@ -10225,6 +10228,8 @@ void gnutools::Linker::ConstructJob(Comp
 
   if (!Args.hasArg(options::OPT_nostdlib)) {
     if (!Args.hasArg(options::OPT_nodefaultlibs)) {
+      CmdArgs.push_back("-L@RAVEN_GCC@");
+
       if (Args.hasArg(options::OPT_static))
         CmdArgs.push_back("--start-group");
 

