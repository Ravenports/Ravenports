# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		gstreamer1-plugins-good
VERSION=		1.16.1
KEYWORDS=		multimedia
VARIANTS=		standard
SDESC[standard]=	GStreamer Multimedia Framework "Good" Plugins
HOMEPAGE=		https://gstreamer.freedesktop.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://gstreamer.freedesktop.org/src/gst-plugins-good/
DISTFILE[1]=		gst-plugins-good-1.16.1.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		bzip2:static:standard
BUILDRUN_DEPENDS=	gstreamer1:single:standard
			gstreamer1-plugins-base:single:standard
			bzip2:shared:standard

USES=			gmake pkgconfig libtool gettext-runtime zlib
GNOME_COMPONENTS=	glib introspection

DISTNAME=		gst-plugins-good-1.16.1

FPC_EQUIVALENT=		multimedia/gstreamer1-plugins-good

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-aalib
			--disable-cairo
			--disable-flac
			--disable-gdk_pixbuf
			--disable-gst_v4l2
			--disable-jack
			--disable-jpeg
			--disable-libcaca
			--disable-libdv
			--disable-libpng
			--disable-pulse
			--disable-shout2
			--disable-soup
			--disable-speex
			--disable-taglib
			--disable-vpx
			--disable-wavpack
			--disable-x
			--disable-dv1394
			--disable-directsound
			--disable-osx_audio
			--disable-osx_video
			--disable-sunaudio
			--disable-waveform
			--enable-bz2
			--enable-oss
			--enable-oss4
			--enable-zlib

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		0.1601.0
PLIST_SUB=		GSTVER=1.0

CFLAGS=			-Wno-format
LDFLAGS=		-lpthread

post-patch:
	${REINPLACE_CMD} -e 's/= plugins/=/' ${WRKSRC}/docs/Makefile.in

[FILE:91:descriptions/desc.single]
This package contains self-contained plugins from the "good" plugin set
for GStreamer (1).


[FILE:109:distinfo]
9fbabe69018fcec707df0b71150168776040cde6c1a26bb5a82a136755fa8f1f      3892840 gst-plugins-good-1.16.1.tar.xz


[FILE:3700:manifests/plist.single]
%%ONLY-DRAGONFLY%%lib/gstreamer-%%GSTVER%%/libgstossaudio.so
%%ONLY-FREEBSD%%lib/gstreamer-%%GSTVER%%/libgstossaudio.so
%%ONLY-LINUX%%lib/gstreamer-%%GSTVER%%/libgstossaudio.so
lib/gstreamer-%%GSTVER%%/
 libgstalaw.so
 libgstalpha.so
 libgstalphacolor.so
 libgstapetag.so
 libgstaudiofx.so
 libgstaudioparsers.so
 libgstauparse.so
 libgstautodetect.so
 libgstavi.so
 libgstcutter.so
 libgstdebug.so
 libgstdeinterlace.so
 libgstdtmf.so
 libgsteffectv.so
 libgstequalizer.so
 libgstflv.so
 libgstflxdec.so
 libgstgoom.so
 libgstgoom2k1.so
 libgsticydemux.so
 libgstid3demux.so
 libgstimagefreeze.so
 libgstinterleave.so
 libgstisomp4.so
 libgstlevel.so
 libgstmatroska.so
 libgstmulaw.so
 libgstmultifile.so
 libgstmultipart.so
 libgstnavigationtest.so
 libgstoss4.so
 libgstreplaygain.so
 libgstrtp.so
 libgstrtpmanager.so
 libgstrtsp.so
 libgstshapewipe.so
 libgstsmpte.so
 libgstspectrum.so
 libgstudp.so
 libgstvideobox.so
 libgstvideocrop.so
 libgstvideofilter.so
 libgstvideomixer.so
 libgstwavenc.so
 libgstwavparse.so
 libgsty4menc.so
share/gstreamer-%%GSTVER%%/presets/
 GstIirEqualizer10Bands.prs
 GstIirEqualizer3Bands.prs
 GstQTMux.prs
share/locale/af/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/az/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/bg/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/ca/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/cs/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/da/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/de/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/el/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/en_GB/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/eo/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/es/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/eu/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/fi/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/fr/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/fur/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/gl/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/hr/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/hu/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/id/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/it/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/ja/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/ky/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/lt/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/lv/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/mt/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/nb/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/nl/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/or/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/pl/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/pt_BR/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/ro/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/ru/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/sk/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/sl/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/sq/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/sr/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/sv/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/tr/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/uk/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/vi/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/zh_CN/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/zh_HK/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo
share/locale/zh_TW/LC_MESSAGES/gst-plugins-good-%%GSTVER%%.mo


[FILE:228:patches/patch-configure]
--- configure.orig	2017-12-07 16:58:26 UTC
+++ configure
@@ -27983,7 +27983,7 @@ if test "${with_default_audiosink+set}"
 
 else
 
-      DEFAULT_AUDIOSINK="$DEFAULT_AUDIOSINK"
+	DEFAULT_VISUALIZER="$DEFAULT_VISUALIZER"
 
 fi
 


[FILE:2373:dragonfly/patch-sys_oss_gstosshelper.c]
--- sys/oss/gstosshelper.c.orig	2017-05-15 15:46:26 UTC
+++ sys/oss/gstosshelper.c
@@ -82,9 +82,9 @@ GstCaps *
 gst_oss_helper_probe_caps (gint fd)
 {
 #if G_BYTE_ORDER == G_LITTLE_ENDIAN
-  const guint probe_formats[] = { AFMT_S16_LE, AFMT_U16_LE, AFMT_U8, AFMT_S8 };
+  const guint probe_formats[] = { AFMT_U32_LE, AFMT_S32_LE, AFMT_U24_LE, AFMT_S24_LE, AFMT_S16_LE, AFMT_U16_LE, AFMT_U8, AFMT_S8 };
 #else
-  const guint probe_formats[] = { AFMT_S16_BE, AFMT_U16_BE, AFMT_U8, AFMT_S8 };
+  const guint probe_formats[] = { AFMT_U32_BE, AFMT_S32_BE, AFMT_U24_BE, AFMT_S24_BE, AFMT_S16_BE, AFMT_U16_BE, AFMT_U8, AFMT_S8 };
 #endif
   GstOssProbe *probe;
   int i, f;
@@ -165,6 +165,9 @@ gst_oss_helper_get_format_structure (uns
   const gchar *format;
 
   switch (format_bit) {
+    case AFMT_S8:
+      format = "S8";
+      break;
     case AFMT_U8:
       format = "U8";
       break;
@@ -174,15 +177,36 @@ gst_oss_helper_get_format_structure (uns
     case AFMT_S16_BE:
       format = "S16BE";
       break;
-    case AFMT_S8:
-      format = "S8";
-      break;
     case AFMT_U16_LE:
       format = "U16LE";
       break;
     case AFMT_U16_BE:
       format = "U16BE";
       break;
+    case AFMT_S24_LE:
+      format = "S24LE";
+      break;
+    case AFMT_S24_BE:
+      format = "S24BE";
+      break;
+    case AFMT_U24_LE:
+      format = "U24LE";
+      break;
+    case AFMT_U24_BE:
+      format = "U24BE";
+      break;
+    case AFMT_S32_LE:
+      format = "S32LE";
+      break;
+    case AFMT_S32_BE:
+      format = "S32BE";
+      break;
+    case AFMT_U32_LE:
+      format = "U32LE";
+      break;
+    case AFMT_U32_BE:
+      format = "U32BE";
+      break;
     default:
       g_assert_not_reached ();
       return NULL;
@@ -320,13 +344,17 @@ gst_oss_helper_rate_check_rate (GstOssPr
   int format;
   int n_channels;
   int ret;
+  int rst;
 
   rate = irate;
   format = probe->format;
   n_channels = probe->n_channels;
+  rst = 4000; /* XXX Lowest supported rate for FreeBSD. */
 
   GST_LOG ("checking format %d, channels %d, rate %d",
       format, n_channels, rate);
+  /* Reset rate to lowest supported rate. */
+  ioctl (probe->fd, SNDCTL_DSP_SPEED, &rst);
   ret = ioctl (probe->fd, SNDCTL_DSP_SETFMT, &format);
   if (ret < 0 || format != probe->format) {
     GST_DEBUG ("unsupported format: %d (%d)", probe->format, format);


[FILE:2339:dragonfly/patch-sys_oss_gstosssink.c]
--- sys/oss/gstosssink.c.orig	2017-05-15 15:46:26 UTC
+++ sys/oss/gstosssink.c
@@ -106,7 +106,10 @@ enum
   PROP_DEVICE,
 };
 
-#define FORMATS "{" GST_AUDIO_NE(S16)","GST_AUDIO_NE(U16)", S8, U8 }"
+#define FORMATS "{" GST_AUDIO_NE(S32)","GST_AUDIO_NE(U32)"," \
+                    GST_AUDIO_NE(S24)","GST_AUDIO_NE(U24)"," \
+                    GST_AUDIO_NE(S16)","GST_AUDIO_NE(U16)"," \
+                    "S8, U8 }"
 
 static GstStaticPadTemplate osssink_sink_factory =
     GST_STATIC_PAD_TEMPLATE ("sink",
@@ -321,6 +324,9 @@ gst_oss_sink_get_format (GstAudioRingBuf
     case GST_AUDIO_RING_BUFFER_FORMAT_TYPE_RAW:
     {
       switch (rfmt) {
+        case GST_AUDIO_FORMAT_S8:
+          result = AFMT_S8;
+          break;
         case GST_AUDIO_FORMAT_U8:
           result = AFMT_U8;
           break;
@@ -330,15 +336,36 @@ gst_oss_sink_get_format (GstAudioRingBuf
         case GST_AUDIO_FORMAT_S16BE:
           result = AFMT_S16_BE;
           break;
-        case GST_AUDIO_FORMAT_S8:
-          result = AFMT_S8;
-          break;
         case GST_AUDIO_FORMAT_U16LE:
           result = AFMT_U16_LE;
           break;
         case GST_AUDIO_FORMAT_U16BE:
           result = AFMT_U16_BE;
           break;
+        case GST_AUDIO_FORMAT_S24LE:
+          result = AFMT_S24_LE;
+          break;
+        case GST_AUDIO_FORMAT_S24BE:
+          result = AFMT_S24_BE;
+          break;
+        case GST_AUDIO_FORMAT_U24LE:
+          result = AFMT_U24_LE;
+          break;
+        case GST_AUDIO_FORMAT_U24BE:
+          result = AFMT_U24_BE;
+          break;
+        case GST_AUDIO_FORMAT_S32LE:
+          result = AFMT_S32_LE;
+          break;
+        case GST_AUDIO_FORMAT_S32BE:
+          result = AFMT_S32_BE;
+          break;
+        case GST_AUDIO_FORMAT_U32LE:
+          result = AFMT_U32_LE;
+          break;
+        case GST_AUDIO_FORMAT_U32BE:
+          result = AFMT_U32_BE;
+          break;
         default:
           result = 0;
           break;
@@ -441,7 +468,7 @@ gst_oss_sink_prepare (GstAudioSink * asi
   rate = GST_AUDIO_INFO_RATE (&spec->info);
   channels = GST_AUDIO_INFO_CHANNELS (&spec->info);
 
-  if (width != 16 && width != 8)
+  if (width != 32 && width != 24 && width != 16 && width != 8)
     goto dodgy_width;
 
   SET_PARAM (oss, SNDCTL_DSP_SETFMT, tmp, "SETFMT");


[FILE:2448:dragonfly/patch-sys_oss_gstosssrc.c]
--- sys/oss/gstosssrc.c.orig	2017-05-15 15:46:26 UTC
+++ sys/oss/gstosssrc.c
@@ -100,7 +100,10 @@ static guint gst_oss_src_read (GstAudioS
 static guint gst_oss_src_delay (GstAudioSrc * asrc);
 static void gst_oss_src_reset (GstAudioSrc * asrc);
 
-#define FORMATS "{" GST_AUDIO_NE(S16)","GST_AUDIO_NE(U16)", S8, U8 }"
+#define FORMATS "{" GST_AUDIO_NE(S32)","GST_AUDIO_NE(U32)"," \
+                    GST_AUDIO_NE(S24)","GST_AUDIO_NE(U24)"," \
+                    GST_AUDIO_NE(S16)","GST_AUDIO_NE(U16)"," \
+                    "S8, U8 }"
 
 static GstStaticPadTemplate osssrc_src_factory = GST_STATIC_PAD_TEMPLATE ("src",
     GST_PAD_SRC,
@@ -313,6 +316,9 @@ gst_oss_src_get_format (GstAudioRingBuff
     case GST_AUDIO_RING_BUFFER_FORMAT_TYPE_RAW:
     {
       switch (rfmt) {
+        case GST_AUDIO_FORMAT_S8:
+          result = AFMT_S8;
+          break;
         case GST_AUDIO_FORMAT_U8:
           result = AFMT_U8;
           break;
@@ -322,15 +328,36 @@ gst_oss_src_get_format (GstAudioRingBuff
         case GST_AUDIO_FORMAT_S16BE:
           result = AFMT_S16_BE;
           break;
-        case GST_AUDIO_FORMAT_S8:
-          result = AFMT_S8;
-          break;
         case GST_AUDIO_FORMAT_U16LE:
           result = AFMT_U16_LE;
           break;
         case GST_AUDIO_FORMAT_U16BE:
           result = AFMT_U16_BE;
           break;
+        case GST_AUDIO_FORMAT_S24LE:
+          result = AFMT_S24_LE;
+          break;
+        case GST_AUDIO_FORMAT_S24BE:
+          result = AFMT_S24_BE;
+          break;
+        case GST_AUDIO_FORMAT_U24LE:
+          result = AFMT_U24_LE;
+          break;
+        case GST_AUDIO_FORMAT_U24BE:
+          result = AFMT_U24_BE;
+          break;
+        case GST_AUDIO_FORMAT_S32LE:
+          result = AFMT_S32_LE;
+          break;
+        case GST_AUDIO_FORMAT_S32BE:
+          result = AFMT_S32_BE;
+          break;
+        case GST_AUDIO_FORMAT_U32LE:
+          result = AFMT_U32_LE;
+          break;
+        case GST_AUDIO_FORMAT_U32BE:
+          result = AFMT_U32_BE;
+          break;
         default:
           result = 0;
           break;
@@ -427,7 +454,7 @@ gst_oss_src_prepare (GstAudioSrc * asrc,
   rate = GST_AUDIO_INFO_RATE (&spec->info);
   channels = GST_AUDIO_INFO_CHANNELS (&spec->info);
 
-  if (width != 16 && width != 8)
+  if (width != 32 && width != 24 && width != 16 && width != 8)
     goto dodgy_width;
 
   tmp = ilog2 (spec->segsize);


[FILE:2373:freebsd/patch-sys_oss_gstosshelper.c]
--- sys/oss/gstosshelper.c.orig	2017-05-15 15:46:26 UTC
+++ sys/oss/gstosshelper.c
@@ -82,9 +82,9 @@ GstCaps *
 gst_oss_helper_probe_caps (gint fd)
 {
 #if G_BYTE_ORDER == G_LITTLE_ENDIAN
-  const guint probe_formats[] = { AFMT_S16_LE, AFMT_U16_LE, AFMT_U8, AFMT_S8 };
+  const guint probe_formats[] = { AFMT_U32_LE, AFMT_S32_LE, AFMT_U24_LE, AFMT_S24_LE, AFMT_S16_LE, AFMT_U16_LE, AFMT_U8, AFMT_S8 };
 #else
-  const guint probe_formats[] = { AFMT_S16_BE, AFMT_U16_BE, AFMT_U8, AFMT_S8 };
+  const guint probe_formats[] = { AFMT_U32_BE, AFMT_S32_BE, AFMT_U24_BE, AFMT_S24_BE, AFMT_S16_BE, AFMT_U16_BE, AFMT_U8, AFMT_S8 };
 #endif
   GstOssProbe *probe;
   int i, f;
@@ -165,6 +165,9 @@ gst_oss_helper_get_format_structure (uns
   const gchar *format;
 
   switch (format_bit) {
+    case AFMT_S8:
+      format = "S8";
+      break;
     case AFMT_U8:
       format = "U8";
       break;
@@ -174,15 +177,36 @@ gst_oss_helper_get_format_structure (uns
     case AFMT_S16_BE:
       format = "S16BE";
       break;
-    case AFMT_S8:
-      format = "S8";
-      break;
     case AFMT_U16_LE:
       format = "U16LE";
       break;
     case AFMT_U16_BE:
       format = "U16BE";
       break;
+    case AFMT_S24_LE:
+      format = "S24LE";
+      break;
+    case AFMT_S24_BE:
+      format = "S24BE";
+      break;
+    case AFMT_U24_LE:
+      format = "U24LE";
+      break;
+    case AFMT_U24_BE:
+      format = "U24BE";
+      break;
+    case AFMT_S32_LE:
+      format = "S32LE";
+      break;
+    case AFMT_S32_BE:
+      format = "S32BE";
+      break;
+    case AFMT_U32_LE:
+      format = "U32LE";
+      break;
+    case AFMT_U32_BE:
+      format = "U32BE";
+      break;
     default:
       g_assert_not_reached ();
       return NULL;
@@ -320,13 +344,17 @@ gst_oss_helper_rate_check_rate (GstOssPr
   int format;
   int n_channels;
   int ret;
+  int rst;
 
   rate = irate;
   format = probe->format;
   n_channels = probe->n_channels;
+  rst = 4000; /* XXX Lowest supported rate for FreeBSD. */
 
   GST_LOG ("checking format %d, channels %d, rate %d",
       format, n_channels, rate);
+  /* Reset rate to lowest supported rate. */
+  ioctl (probe->fd, SNDCTL_DSP_SPEED, &rst);
   ret = ioctl (probe->fd, SNDCTL_DSP_SETFMT, &format);
   if (ret < 0 || format != probe->format) {
     GST_DEBUG ("unsupported format: %d (%d)", probe->format, format);


[FILE:2339:freebsd/patch-sys_oss_gstosssink.c]
--- sys/oss/gstosssink.c.orig	2017-05-15 15:46:26 UTC
+++ sys/oss/gstosssink.c
@@ -106,7 +106,10 @@ enum
   PROP_DEVICE,
 };
 
-#define FORMATS "{" GST_AUDIO_NE(S16)","GST_AUDIO_NE(U16)", S8, U8 }"
+#define FORMATS "{" GST_AUDIO_NE(S32)","GST_AUDIO_NE(U32)"," \
+                    GST_AUDIO_NE(S24)","GST_AUDIO_NE(U24)"," \
+                    GST_AUDIO_NE(S16)","GST_AUDIO_NE(U16)"," \
+                    "S8, U8 }"
 
 static GstStaticPadTemplate osssink_sink_factory =
     GST_STATIC_PAD_TEMPLATE ("sink",
@@ -321,6 +324,9 @@ gst_oss_sink_get_format (GstAudioRingBuf
     case GST_AUDIO_RING_BUFFER_FORMAT_TYPE_RAW:
     {
       switch (rfmt) {
+        case GST_AUDIO_FORMAT_S8:
+          result = AFMT_S8;
+          break;
         case GST_AUDIO_FORMAT_U8:
           result = AFMT_U8;
           break;
@@ -330,15 +336,36 @@ gst_oss_sink_get_format (GstAudioRingBuf
         case GST_AUDIO_FORMAT_S16BE:
           result = AFMT_S16_BE;
           break;
-        case GST_AUDIO_FORMAT_S8:
-          result = AFMT_S8;
-          break;
         case GST_AUDIO_FORMAT_U16LE:
           result = AFMT_U16_LE;
           break;
         case GST_AUDIO_FORMAT_U16BE:
           result = AFMT_U16_BE;
           break;
+        case GST_AUDIO_FORMAT_S24LE:
+          result = AFMT_S24_LE;
+          break;
+        case GST_AUDIO_FORMAT_S24BE:
+          result = AFMT_S24_BE;
+          break;
+        case GST_AUDIO_FORMAT_U24LE:
+          result = AFMT_U24_LE;
+          break;
+        case GST_AUDIO_FORMAT_U24BE:
+          result = AFMT_U24_BE;
+          break;
+        case GST_AUDIO_FORMAT_S32LE:
+          result = AFMT_S32_LE;
+          break;
+        case GST_AUDIO_FORMAT_S32BE:
+          result = AFMT_S32_BE;
+          break;
+        case GST_AUDIO_FORMAT_U32LE:
+          result = AFMT_U32_LE;
+          break;
+        case GST_AUDIO_FORMAT_U32BE:
+          result = AFMT_U32_BE;
+          break;
         default:
           result = 0;
           break;
@@ -441,7 +468,7 @@ gst_oss_sink_prepare (GstAudioSink * asi
   rate = GST_AUDIO_INFO_RATE (&spec->info);
   channels = GST_AUDIO_INFO_CHANNELS (&spec->info);
 
-  if (width != 16 && width != 8)
+  if (width != 32 && width != 24 && width != 16 && width != 8)
     goto dodgy_width;
 
   SET_PARAM (oss, SNDCTL_DSP_SETFMT, tmp, "SETFMT");


[FILE:2448:freebsd/patch-sys_oss_gstosssrc.c]
--- sys/oss/gstosssrc.c.orig	2017-05-15 15:46:26 UTC
+++ sys/oss/gstosssrc.c
@@ -100,7 +100,10 @@ static guint gst_oss_src_read (GstAudioS
 static guint gst_oss_src_delay (GstAudioSrc * asrc);
 static void gst_oss_src_reset (GstAudioSrc * asrc);
 
-#define FORMATS "{" GST_AUDIO_NE(S16)","GST_AUDIO_NE(U16)", S8, U8 }"
+#define FORMATS "{" GST_AUDIO_NE(S32)","GST_AUDIO_NE(U32)"," \
+                    GST_AUDIO_NE(S24)","GST_AUDIO_NE(U24)"," \
+                    GST_AUDIO_NE(S16)","GST_AUDIO_NE(U16)"," \
+                    "S8, U8 }"
 
 static GstStaticPadTemplate osssrc_src_factory = GST_STATIC_PAD_TEMPLATE ("src",
     GST_PAD_SRC,
@@ -313,6 +316,9 @@ gst_oss_src_get_format (GstAudioRingBuff
     case GST_AUDIO_RING_BUFFER_FORMAT_TYPE_RAW:
     {
       switch (rfmt) {
+        case GST_AUDIO_FORMAT_S8:
+          result = AFMT_S8;
+          break;
         case GST_AUDIO_FORMAT_U8:
           result = AFMT_U8;
           break;
@@ -322,15 +328,36 @@ gst_oss_src_get_format (GstAudioRingBuff
         case GST_AUDIO_FORMAT_S16BE:
           result = AFMT_S16_BE;
           break;
-        case GST_AUDIO_FORMAT_S8:
-          result = AFMT_S8;
-          break;
         case GST_AUDIO_FORMAT_U16LE:
           result = AFMT_U16_LE;
           break;
         case GST_AUDIO_FORMAT_U16BE:
           result = AFMT_U16_BE;
           break;
+        case GST_AUDIO_FORMAT_S24LE:
+          result = AFMT_S24_LE;
+          break;
+        case GST_AUDIO_FORMAT_S24BE:
+          result = AFMT_S24_BE;
+          break;
+        case GST_AUDIO_FORMAT_U24LE:
+          result = AFMT_U24_LE;
+          break;
+        case GST_AUDIO_FORMAT_U24BE:
+          result = AFMT_U24_BE;
+          break;
+        case GST_AUDIO_FORMAT_S32LE:
+          result = AFMT_S32_LE;
+          break;
+        case GST_AUDIO_FORMAT_S32BE:
+          result = AFMT_S32_BE;
+          break;
+        case GST_AUDIO_FORMAT_U32LE:
+          result = AFMT_U32_LE;
+          break;
+        case GST_AUDIO_FORMAT_U32BE:
+          result = AFMT_U32_BE;
+          break;
         default:
           result = 0;
           break;
@@ -427,7 +454,7 @@ gst_oss_src_prepare (GstAudioSrc * asrc,
   rate = GST_AUDIO_INFO_RATE (&spec->info);
   channels = GST_AUDIO_INFO_CHANNELS (&spec->info);
 
-  if (width != 16 && width != 8)
+  if (width != 32 && width != 24 && width != 16 && width != 8)
     goto dodgy_width;
 
   tmp = ilog2 (spec->segsize);

