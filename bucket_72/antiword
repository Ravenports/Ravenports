# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		antiword
VERSION=		0.37
KEYWORDS=		converters
VARIANTS=		std
SDESC[std]=		MS Word reader/converter (to text or postscript)
HOMEPAGE=		https://web.archive.org/web/20221207132720/http://www.winfield.demon.nl/
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://leaf.dragonflybsd.org/~marino/orphaned-distfiles/
DISTFILE[1]=		antiword-0.37.tar.gz:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	gsfonts:single:std

USES=			cpe

LICENSE=		GPLv2:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv2:{{WRKSRC}}/Docs/COPYING
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/antiword.h
LICENSE_SCHEME=		solo

CPE_VENDOR=		antiword_project
FPC_EQUIVALENT=		textproc/antiword

INSTALL_TARGET=		"global_install"

post-patch:
	${REINPLACE_CMD} -e 's|__PREFIX__|${PREFIX}|g' \
		${WRKSRC}/Makefile ${WRKSRC}/antiword.h

post-install:
	# Useless KDE 1 script
	${RM} ${STAGEDIR}${PREFIX}/bin/kantiword
	${INSTALL_MAN} ${WRKSRC}/Docs/antiword.1 \
		${STAGEDIR}${PREFIX}/share/man/man1/antiword.1
	${MKDIR} -p ${STAGEDIR}${PREFIX}/share/doc/antiword
	${INSTALL_DATA} ${WRKSRC}/Docs/ReadMe \
		${STAGEDIR}${PREFIX}/share/doc/antiword/ReadMe
	${INSTALL_DATA} ${WRKSRC}/Docs/FAQ \
		${STAGEDIR}${PREFIX}/share/doc/antiword/FAQ
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/antiword

[FILE:146:descriptions/desc.primary]
Antiword is a free MS Word reader. It converts the binary files from Word 
versions 2, 6, 7, 97, 2000, 2002 and 2003 to plain text or PostScript.


[FILE:99:distinfo]
8e2c000fcbc6d641b0e6ff95e13c846da3ff31097801e86702124a206888f5ac       317884 antiword-0.37.tar.gz


[FILE:434:manifests/plist.primary]
bin/antiword
share/antiword/
 8859-1.txt
 8859-10.txt
 8859-11.txt
 8859-13.txt
 8859-14.txt
 8859-15.txt
 8859-16.txt
 8859-2.txt
 8859-3.txt
 8859-4.txt
 8859-5.txt
 8859-6.txt
 8859-7.txt
 8859-8.txt
 8859-9.txt
 MacCyrillic.txt
 MacRoman.txt
 UTF-8.txt
 cp1250.txt
 cp1251.txt
 cp1252.txt
 cp437.txt
 cp850.txt
 cp852.txt
 cp862.txt
 cp864.txt
 cp866.txt
 fontnames
 koi8-r.txt
 koi8-u.txt
 roman.txt
share/man/man1/antiword.1.gz


[FILE:33:manifests/plist.docs]
share/doc/antiword/
 FAQ
 ReadMe


[FILE:385:patches/patch-Makefile]
--- Makefile.orig	2020-06-07 12:09:23.185908000 +0200
+++ Makefile	2020-06-07 12:10:26.512111000 +0200
@@ -36,8 +36,8 @@
 LOCAL_INSTALL_DIR = $(HOME)/bin
 LOCAL_RESOURCES_DIR = $(HOME)/.antiword
 
-GLOBAL_INSTALL_DIR = /usr/local/bin
-GLOBAL_RESOURCES_DIR = /usr/share/antiword
+GLOBAL_INSTALL_DIR = __PREFIX__/bin
+GLOBAL_RESOURCES_DIR = __PREFIX__/share/antiword
 
 all:		$(PROGS)
 


[FILE:423:patches/patch-antiword.h]
--- antiword.h.orig	2020-06-07 12:18:53.435545000 +0200
+++ antiword.h	2020-06-07 12:19:57.130061000 +0200
@@ -224,7 +224,7 @@
 #define ANTIWORD_DIR		".antiword"
 #define FONTNAMES_FILE		"fontnames"
 #else	/* All others */
-#define GLOBAL_ANTIWORD_DIR	"/usr/share/antiword"
+#define GLOBAL_ANTIWORD_DIR	"__PREFIX__/share/antiword"
 #define ANTIWORD_DIR		".antiword"
 #define FONTNAMES_FILE		"fontnames"
 #endif /* __dos */


[FILE:647:patches/patch-main__u.c]
--- main_u.c.orig	2005-01-15 21:08:51.000000000 +0100
+++ main_u.c	2020-06-07 12:05:48.186319000 +0200
@@ -252,7 +252,7 @@
 
 #if !defined(__dos)
 	if (is_locale_utf8()) {
-#if defined(__STDC_ISO_10646__)
+#if defined(__STDC_ISO_10646__) || defined(__APPLE_CC__)
 		/*
 		 * If the user wants UTF-8 and the envirionment variables
 		 * support UTF-8, than set the locale accordingly
@@ -266,7 +266,7 @@
 		} else {
 			(void)setlocale(LC_CTYPE, "C");
 		}
-#endif /* __STDC_ISO_10646__ */
+#endif /* __STDC_ISO_10646__ || __APPLE_CC__ */
 	} else {
 		if (setlocale(LC_CTYPE, "") == NULL) {
 			werr(0, "Can't set the locale! Will use defaults");


[FILE:540:patches/patch-wordole.c]
--- wordole.c.orig	2005-08-26 21:49:57.000000000 +0200
+++ wordole.c	2020-06-07 12:25:28.344416000 +0200
@@ -259,6 +259,11 @@
 		}
 		tNameSize = (size_t)usGetWord(0x40, aucBytes);
 		tNameSize = (tNameSize + 1) / 2;
+		if (tNameSize >= sizeof(atPPSlist[0].szName)) {
+			werr(0, "PPS %d appears to be invalid.", iIndex);
+			atPPSlist = xfree(atPPSlist);
+			return FALSE;
+		}
 		vName2String(atPPSlist[iIndex].szName, aucBytes, tNameSize);
 		atPPSlist[iIndex].ucType = ucGetByte(0x42, aucBytes);
 		if (atPPSlist[iIndex].ucType == 5) {

