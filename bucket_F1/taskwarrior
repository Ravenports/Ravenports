# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		taskwarrior
VERSION=		2.5.2
KEYWORDS=		deskutils
VARIANTS=		standard
SDESC[standard]=	Feature-rich command-line todo list manager
HOMEPAGE=		https://taskwarrior.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/GothenburgBitFactory/taskwarrior/releases/download/v2.5.2/
DISTFILE[1]=		task-2.5.2.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	gnutls:primary:standard
			ossp-uuid:single:standard

USES=			cmake shebangfix

DISTNAME=		task-2.5.2

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		deskutils/taskwarrior
SHEBANG_FILES=		scripts/*/*.pl
			doc/rc/refresh

CMAKE_ARGS=		-DTASK_DOCDIR:STRING=share/doc/taskwarrior
VAR_OPSYS[sunos]=	LDFLAGS=-lsocket

post-patch:
	# Fix ambiguity with OSSP-UUID object name
	${REINPLACE_CMD} -e 's|uuid ())|make_uuid ())|' \
		${WRKSRC}/src/Task.cpp \
		${WRKSRC}/src/commands/CmdDuplicate.cpp \
		${WRKSRC}/src/recur.cpp

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/task

[FILE:178:descriptions/desc.primary]
Taskwarrior is Free and Open Source Software that manages your TODO list
from the command line. It is flexible, fast, and unobtrusive. It does its
job then gets out of your way.


[FILE:96:distinfo]
63fe45caf2b9bd4a6f00bb817d61500c19eedc762d12b30fd074274a66a2ee46       790210 task-2.5.2.tar.gz


[FILE:1427:manifests/plist.primary]
bin/task
share/man/man1/task.1.gz
share/man/man5/
 task-color.5.gz
 task-sync.5.gz
 taskrc.5.gz
share/taskwarrior/rc/
 dark-16.theme
 dark-256.theme
 dark-blue-256.theme
 dark-gray-256.theme
 dark-gray-blue-256.theme
 dark-green-256.theme
 dark-red-256.theme
 dark-violets-256.theme
 dark-yellow-green.theme
 holidays.cs-CZ.rc
 holidays.da-DK.rc
 holidays.de-AT.rc
 holidays.de-BE.rc
 holidays.de-CH.rc
 holidays.de-DE.rc
 holidays.el-GR.rc
 holidays.en-CA.rc
 holidays.en-GB.rc
 holidays.en-NZ.rc
 holidays.en-US.rc
 holidays.es-CO.rc
 holidays.es-ES.rc
 holidays.es-US.rc
 holidays.fi-FI.rc
 holidays.fr-BE.rc
 holidays.fr-FR.rc
 holidays.hr-HR.rc
 holidays.is-IS.rc
 holidays.it-IT.rc
 holidays.nb-NO.rc
 holidays.nl-BE.rc
 holidays.nl-NL.rc
 holidays.pl-PL.rc
 holidays.por-PRT.rc
 holidays.pt-PT.rc
 holidays.ru-RU.rc
 holidays.sv-SE.rc
 holidays.tr-TR.rc
 light-16.theme
 light-256.theme
 no-color.theme
 refresh
 solarized-dark-256.theme
 solarized-light-256.theme
share/taskwarrior/scripts/add-ons/
 README
 update-holidays.pl
share/taskwarrior/scripts/bash/task.sh
share/taskwarrior/scripts/fish/task.fish
share/taskwarrior/scripts/hooks/
 README
 on-add
 on-add.the
 on-exit
 on-exit.shadow-file
 on-launch
 on-modify
share/taskwarrior/scripts/vim/README
share/taskwarrior/scripts/vim/ftdetect/task.vim
share/taskwarrior/scripts/vim/syntax/
 taskdata.vim
 taskedit.vim
 taskrc.vim
share/taskwarrior/scripts/zsh/_task


[FILE:2216:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2020-12-05 21:59:14 UTC
+++ CMakeLists.txt
@@ -54,15 +54,15 @@ set (PACKAGE_TARNAME "${PACKAGE}")
 set (PACKAGE_VERSION "${VERSION}")
 set (PACKAGE_STRING "${PACKAGE} ${VERSION}")
 
-if (FREEBSD OR DRAGONFLY)
+if (0)
 SET (TASK_MAN1DIR man/man1 CACHE STRING "Installation directory for man pages, section 1")
 SET (TASK_MAN5DIR man/man5 CACHE STRING "Installation directory for man pages, section 5")
-else (FREEBSD OR DRAGONFLY)
+else ()
 SET (TASK_MAN1DIR share/man/man1 CACHE STRING "Installation directory for man pages, section 1")
 SET (TASK_MAN5DIR share/man/man5 CACHE STRING "Installation directory for man pages, section 5")
-endif (FREEBSD OR DRAGONFLY)
+endif ()
 SET (TASK_DOCDIR  share/doc/task CACHE STRING "Installation directory for doc files")
-SET (TASK_RCDIR "${TASK_DOCDIR}/rc" CACHE STRING "Installation directory for configuration files")
+SET (TASK_RCDIR "share/taskwarrior/rc" CACHE STRING "Installation directory for configuration files")
 SET (TASK_BINDIR  bin            CACHE STRING "Installation directory for the binary")
 
 if (USE_GNUTLS)
@@ -87,12 +87,12 @@ check_struct_has_member ("struct tm" tm_
 check_struct_has_member ("struct stat" st_birthtime "sys/types.h;sys/stat.h" HAVE_ST_BIRTHTIME)
 
 message ("-- Looking for libuuid")
-if (DARWIN OR FREEBSD OR OPENBSD)
+if (0)
   # Apple and FreeBSD include the uuid functions in their libc, rather than libuuid
   check_function_exists (uuid_unparse_lower HAVE_UUID_UNPARSE_LOWER)
-else (DARWIN OR FREEBSD OR OPENBSD)
-  find_path    (UUID_INCLUDE_DIR   uuid/uuid.h)
-  find_library (UUID_LIBRARY NAMES uuid)
+else (0)
+  find_path    (UUID_INCLUDE_DIR   ossp/uuid++.hh)
+  find_library (UUID_LIBRARY NAMES ossp-uuid++)
   if (UUID_INCLUDE_DIR AND UUID_LIBRARY)
     set (TASK_INCLUDE_DIRS ${TASK_INCLUDE_DIRS} ${UUID_INCLUDE_DIR})
     set (TASK_LIBRARIES    ${TASK_LIBRARIES}    ${UUID_LIBRARY})
@@ -103,7 +103,7 @@ else (DARWIN OR FREEBSD OR OPENBSD)
   else (UUID_INCLUDE_DIR AND UUID_LIBRARY)
     message (FATAL_ERROR "-- libuuid not found.")
   endif (UUID_INCLUDE_DIR AND UUID_LIBRARY)
-endif (DARWIN OR FREEBSD OR OPENBSD)
+endif (0)
 
 if (HAVE_UUID_UNPARSE_LOWER)
   message ("-- Found libuuid")


[FILE:590:patches/patch-scripts_CMakeLists.txt]
--- scripts/CMakeLists.txt.orig	2020-12-05 20:26:03 UTC
+++ scripts/CMakeLists.txt
@@ -1,8 +1,8 @@
 cmake_minimum_required (VERSION 3.0)
 install (DIRECTORY bash fish vim zsh hooks
-         DESTINATION ${TASK_DOCDIR}/scripts)
+         DESTINATION share/taskwarrior/scripts)
 install (DIRECTORY add-ons
-         DESTINATION ${TASK_DOCDIR}/scripts
+         DESTINATION share/taskwarrior/scripts
          FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
                           GROUP_READ             GROUP_EXECUTE
                           WORLD_READ             WORLD_EXECUTE)


[FILE:1801:patches/patch-src_util.cpp]
--- src/util.cpp.orig	2020-11-30 06:30:26 UTC
+++ src/util.cpp
@@ -125,53 +125,16 @@ int confirm4 (const std::string& questio
   return 0;
 }
 
-// Handle the generation of UUIDs on FreeBSD in a separate implementation
-// of the uuid () function, since the API is quite different from Linux's.
-// Also, uuid_unparse_lower is not needed on FreeBSD, because the string
-// representation is always lowercase anyway.
-// For the implementation details, refer to
-// http://svnweb.freebsd.org/base/head/sys/kern/kern_uuid.c
-#if defined(FREEBSD) || defined(OPENBSD)
-const std::string uuid ()
-{
-  uuid_t id;
-  uint32_t status;
-  char *buffer (0);
-  uuid_create (&id, &status);
-  uuid_to_string (&id, &buffer, &status);
-
-  std::string res (buffer);
-  free (buffer);
-
-  return res;
-}
-#else
-
-////////////////////////////////////////////////////////////////////////////////
-#ifndef HAVE_UUID_UNPARSE_LOWER
-// Older versions of libuuid don't have uuid_unparse_lower(), only uuid_unparse()
-void uuid_unparse_lower (uuid_t uu, char *out)
-{
-    uuid_unparse (uu, out);
-    // Characters in out are either 0-9, a-z, '-', or A-Z.  A-Z is mapped to
-    // a-z by bitwise or with 0x20, and the others already have this bit set
-    for (size_t i = 0; i < 36; ++i) out[i] |= 0x20;
-}
-#endif
-
-const std::string uuid ()
-{
-  uuid_t id;
-  uuid_generate (id);
-  char buffer[100] {};
-  uuid_unparse_lower (id, buffer);
-
-  // Bug found by Steven de Brouwer.
-  buffer[36] = '\0';
-
-  return std::string (buffer);
-}
-#endif
+ // call to OSSP-UUID
+ const std::string make_uuid ()
+ {
+   uuid id;
+   id.make(UUID_MAKE_V4);
+   const char * idstr = id.string();
+   std::string res (idstr);
+   delete idstr;
+   return res; 
+ }
 
 // Collides with std::numeric_limits methods
 #undef max


[FILE:490:patches/patch-src_util.h]
--- src/util.h.orig	2020-11-30 06:30:26 UTC
+++ src/util.h
@@ -35,17 +35,14 @@
 #if defined(FREEBSD) || defined(OPENBSD)
 #include <uuid.h>
 #else
-#include <uuid/uuid.h>
+#include <ossp/uuid++.hh>
 #endif
 #include <Table.h>
 
 // util.cpp
 int confirm4 (const std::string&);
 
-#ifndef HAVE_UUID_UNPARSE_LOWER
-void uuid_unparse_lower (uuid_t uu, char *out);
-#endif
-const std::string uuid ();
+const std::string make_uuid ();
 
 const std::string indentProject (
   const std::string&,

