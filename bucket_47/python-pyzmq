# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pyzmq
VERSION=		26.0.2
KEYWORDS=		python
VARIANTS=		v11 v12
SDESC[v11]=		Python bindings for 0MQ (3.11)
SDESC[v12]=		Python bindings for 0MQ (3.12)
HOMEPAGE=		https://pyzmq.readthedocs.org
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/p/pyzmq
DISTFILE[1]=		pyzmq-26.0.2.tar.gz:main
DF_INDEX=		1
SPKGS[v11]=		single
SPKGS[v12]=		single

OPTIONS_AVAILABLE=	PY311 PY312
OPTIONS_STANDARD=	none
VOPTS[v11]=		PY311=ON PY312=OFF
VOPTS[v12]=		PY311=OFF PY312=ON

BUILD_DEPENDS=		zeromq:dev:standard
			python-wheel:single:python_used
			python-pip:single:python_used
			python-Cython:single:python_used
			python-packaging:single:python_used
			python-scikit-build-core:single:python_used
			python-pyproject-metadata:single:python_used
			python-pathspec:single:python_used
			cmake:primary:standard
BUILDRUN_DEPENDS=	zeromq:primary:standard

DISTNAME=		pyzmq-26.0.2

LICENSE=		BSD3CLAUSE:single
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/LICENSE.md
LICENSE_SCHEME=		solo

PLIST_SUB=		SOEXTENSION={{SOEXTENSION}}
			ZMQVER=26.0.2

VAR_OPSYS[linux]=	MAKEFILE_LINE=SOEXTENSION=-x86_64-linux-gnu

[PY311].USES_ON=			python:v11

[PY312].USES_ON=			python:v12

do-build:
	(cd ${WRKSRC} && ${SETENV} ZQM_PREFIX=${LOCALBASE}\
		pip install --no-build-isolation --verbose .)

do-install:
	whl=$$(find /root/.cache/pip/wheels -name "*.whl");\
	pip install \
		--verbose \
		--no-index \
		--no-compile \
		--force-reinstall \
		--progress-bar off \
		--root=${STAGEDIR} \
		--root-user-action=ignore \
		--disable-pip-version-check \
		--no-deps $$whl
	${FIND} ${STAGEDIR}${PREFIX}/lib -name "*.so" | xargs ${STRIP_CMD}

[FILE:2661:descriptions/desc.single]
# PyZMQ: Python bindings for ØMQ

This package contains Python bindings for [ZeroMQ].
ØMQ is a lightweight and fast messaging implementation.

PyZMQ should work with any reasonable version of Python (≥ 3.7), as well
as PyPy.
The Cython backend used by CPython supports libzmq ≥ 2.1.4 (including
3.2.x and 4.x),
but the CFFI backend used by PyPy only supports libzmq ≥ 3.2.2 (including
4.x).

For a summary of changes to pyzmq, see our
[changelog].

### ØMQ 3.x, 4.x

PyZMQ fully supports the 3.x and 4.x APIs of libzmq,
developed at [zeromq/libzmq].
No code to change, no flags to pass,
just build pyzmq against the latest and it should work.

PyZMQ does not support the old libzmq 2 API on PyPy.

## Documentation

See PyZMQ's Sphinx-generated
documentation [on Read the Docs] for API
details, and some notes on Python and Cython development. If you want to
learn about using ØMQ in general, the excellent [ØMQ
Guide] is the place to start, which has a
Python version of every example. We also have some information on our
[wiki].

## Downloading

Unless you specifically want to develop PyZMQ, we recommend downloading
the PyZMQ source code or wheels from
[PyPI],
or install with conda.

You can also get the latest source code from our GitHub repository, but
building from the repository will require that you install recent Cython.

## Building and installation

For more detail on building pyzmq, see [our docs].

We build wheels for macOS, Windows, and Linux, so you can get a binary on
those platforms with:

`
pip install pyzmq
`

but compiling from source with `pip install pyzmq` should work in most
environments.
Make sure you are using the latest pip, or it may not find the right
wheels.

If the wheel doesn't work for some reason, or you want to force pyzmq to be
compiled
(this is often preferable if you already have libzmq installed and
configured the way you want it),
you can force installation from source with:

```
pip install --no-binary=pyzmq pyzmq
```

## Old versions

pyzmq 16 drops support Python 2.6 and 3.2.
If you need to use one of those Python versions, you can pin your pyzmq
version to before 16:

```
pip install 'pyzmq<16'
```

For libzmq 2.0.x, use 'pyzmq\<2.1'

pyzmq-2.1.11 was the last version of pyzmq to support Python 2.5,
and pyzmq ≥ 2.2.0 requires Python ≥ 2.6.
pyzmq-13.0.0 introduces PyPy support via CFFI, which only supports
libzmq-3.2.2 and newer.

PyZMQ releases ≤ 2.2.0 matched libzmq versioning, but this is no longer
the case,
starting with PyZMQ 13.0.0 (it was the thirteenth release, so why not?).
PyZMQ ≥ 13.0 follows semantic versioning conventions accounting only for
PyZMQ itself.


[FILE:98:distinfo]
f0f9bb370449158359bb72a3e12c658327670c0ffe6fbcd1af083152b64f9df0       266712 pyzmq-26.0.2.tar.gz


[FILE:2440:manifests/plist.single]
%%PYTHON_SITELIBDIR%%/pyzmq-%%ZMQVER%%.dist-info/
 INSTALLER
 METADATA
 RECORD
 REQUESTED
 WHEEL
 direct_url.json
 entry_points.txt
%%PYTHON_SITELIBDIR%%/pyzmq-%%ZMQVER%%.dist-info/licenses/LICENSE.md
%%PYTHON_SITELIBDIR%%/zmq/
 __init__.pxd
 __init__.py
 __init__.pyi
 _future.py
 _typing.py
 asyncio.py
 constants.py
 decorators.py
 error.py
 py.typed
%%PYTHON_SITELIBDIR%%/zmq/auth/
 __init__.py
 asyncio.py
 base.py
 certs.py
 ioloop.py
 thread.py
%%PYTHON_SITELIBDIR%%/zmq/backend/
 __init__.py
 __init__.pyi
 select.py
%%PYTHON_SITELIBDIR%%/zmq/backend/cffi/
 README.md
 __init__.py
 _cdefs.h
 _cffi_src.c
 _poll.py
 context.py
 devices.py
 error.py
 message.py
 socket.py
 utils.py
%%PYTHON_SITELIBDIR%%/zmq/backend/cython/
 __init__.pxd
 __init__.py
 _externs.pxd
 _zmq.cpython-%%PYTHON_SUFFIX%%%%SOEXTENSION%%.so
 _zmq.pxd
 _zmq.py
 constant_enums.pxi
 libzmq.pxd
%%PYTHON_SITELIBDIR%%/zmq/devices/
 __init__.py
 basedevice.py
 monitoredqueue.py
 monitoredqueuedevice.py
 proxydevice.py
 proxysteerabledevice.py
%%PYTHON_SITELIBDIR%%/zmq/eventloop/
 __init__.py
 _deprecated.py
 future.py
 ioloop.py
 zmqstream.py
%%PYTHON_SITELIBDIR%%/zmq/green/
 __init__.py
 core.py
 device.py
 poll.py
%%PYTHON_SITELIBDIR%%/zmq/green/eventloop/
 __init__.py
 ioloop.py
 zmqstream.py
%%PYTHON_SITELIBDIR%%/zmq/log/
 __init__.py
 __main__.py
 handlers.py
%%PYTHON_SITELIBDIR%%/zmq/ssh/
 __init__.py
 forward.py
 tunnel.py
%%PYTHON_SITELIBDIR%%/zmq/sugar/
 __init__.py
 __init__.pyi
 attrsettr.py
 context.py
 frame.py
 poll.py
 socket.py
 stopwatch.py
 tracker.py
 version.py
%%PYTHON_SITELIBDIR%%/zmq/tests/
 __init__.py
 conftest.py
 cython_ext.pyx
 test_asyncio.py
 test_auth.py
 test_cffi_backend.py
 test_constants.py
 test_context.py
 test_cython.py
 test_decorators.py
 test_device.py
 test_draft.py
 test_error.py
 test_etc.py
 test_ext.py
 test_future.py
 test_imports.py
 test_includes.py
 test_ioloop.py
 test_log.py
 test_message.py
 test_monitor.py
 test_monqueue.py
 test_multipart.py
 test_mypy.py
 test_pair.py
 test_poll.py
 test_proxy_steerable.py
 test_pubsub.py
 test_reqrep.py
 test_retry_eintr.py
 test_security.py
 test_socket.py
 test_ssh.py
 test_version.py
 test_win32_shim.py
 test_z85.py
 test_zmqstream.py
%%PYTHON_SITELIBDIR%%/zmq/utils/
 __init__.py
 buffers.pxd
 garbage.py
 getpid_compat.h
 interop.py
 ipcmaxlen.h
 jsonapi.py
 monitor.py
 mutex.h
 pyversion_compat.h
 strtypes.py
 win32.py
 z85.py
 zmq_compat.h

