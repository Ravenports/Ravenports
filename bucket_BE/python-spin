# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-spin
VERSION=		0.7
KEYWORDS=		python
VARIANTS=		v11 v12
SDESC[v11]=		Developer tool for scientific libraries (3.11)
SDESC[v12]=		Developer tool for scientific libraries (3.12)
HOMEPAGE=		https://github.com/scientific-python/spin
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/ed/99/d64c6a14fd902d16db1afc89d652eab1a9b5abd06568d490d7e9665c4053
DISTFILE[1]=		spin-0.7-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v11]=		single
SPKGS[v12]=		single

OPTIONS_AVAILABLE=	PY311 PY312
OPTIONS_STANDARD=	none
VOPTS[v11]=		PY311=ON PY312=OFF
VOPTS[v12]=		PY311=OFF PY312=ON

DISTNAME=		spin-0.7.dist-info

GENERATED=		yes

[PY311].RUN_DEPENDS_ON=			python-click:single:v11
[PY311].USES_ON=			python:v11,wheel

[PY312].RUN_DEPENDS_ON=			python-click:single:v12
[PY312].USES_ON=			python:v12,wheel

[FILE:2356:descriptions/desc.single]
# üí´ Scientific Python INcantations (`spin`)

## A developer tool for scientific Python libraries

**NOTE:** If you are looking for `devpy`, this is it! We had to rename
the package to publish it on PyPi.

Developers need to memorize a whole bunch of magic command-line
incantations.
And these incantations change from time to time!
Typically, their lives are made simpler by a Makefile, but Makefiles can be
convoluted, are not written in Python, and are hard to extend.
The rationale behind `spin` is therefore to provide a simple interface for
common development tasks.
It comes with a few common build commands out the box, but can easily be
customized per project.

As a curiosity: the impetus behind developing the tool was the mass
migration of scientific Python libraries (SciPy, scikit-image, and NumPy,
etc.) to Meson, after distutils was deprecated.
When many of the build and installation commands changed, it made sense to
abstract away the nuisance of having to re-learn them.

## Installation

`
pip install spin
`

## Configuration

Settings are in your project's `pyproject.toml`.
As an example, see the `[tool.spin]` section of [an example
`pyproject.toml`].

The `[tool.spin]` section should contain:

```
package = "pkg_importname"  # name of your package
commands = [
  "spin.cmds.meson.build",
  "spin.cmds.meson.test"
]
```

See [the command selection] below.

### Command sections

Once you have several commands, it may be useful to organize them into
sections.
In `pyproject.toml`, instead of specifying the commands as a list, use the
following structure:

```toml
[tool.spin.commands]
"Build" = [
  "spin.cmds.meson.build",
  "spin.cmds.meson.test"
]
"Environments" = [
  "spin.cmds.meson.ipython",
  "spin.cmds.meson.run"
]
```

These commands will then be rendered as:

```
Build:
  build  üîß Build package with Meson/ninja and install
  test   üîß Run tests

Environments:
  ipython  üíª Launch IPython shell with PYTHONPATH set
  run      üèÅ Run a shell command with PYTHONPATH set
```

## Running

`
spin
`

or

```
python -m spin
```

## Built-in commands

### [Meson]

```
  build    üîß Build package with Meson/ninja and install to
`build-install`
  ipython  üíª Launch IPython shell with PYTHONPATH set
  python   üêç Launch Python shell with PYTHONPATH set
  shell    üíª Launch shell with PYTHONPATH set


[FILE:104:distinfo]
6f7e0eee8fcccf70921dc2de83d17d93eba8770b2e5d1571c1fed005421bce07        17600 spin-0.7-py3-none-any.whl

