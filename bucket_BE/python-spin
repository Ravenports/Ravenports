# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-spin
VERSION=		0.14
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Developer tool for scientific libraries (3.12)
SDESC[v13]=		Developer tool for scientific libraries (3.13)
HOMEPAGE=		https://github.com/scientific-python/spin
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/eb/49/eced0f0f6d4ad2311061e73564d427ec4b67d9b6abc37903b7ce1aa650cc
DISTFILE[1]=		spin-0.14-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		spin-0.14.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-click:single:v12
					python-importlib-metadata:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-click:single:v13
					python-importlib-metadata:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:2491:descriptions/desc.single]
# ðŸ’« Scientific Python INcantations (`spin`)

## A developer tool for scientific Python libraries

Developers need to memorize a whole bunch of magic command-line
incantations.
These incantations may also change over time.
Often, Makefiles are used to provide aliases, but Makefiles can be
convoluted, are not written in Python, and are hard to extend.
The goal of `spin` is therefore to provide a simple, user-friendly,
extendable interface for common development tasks.
It comes with a few common build commands out the box, but can easily be
customized per project.

As a curiosity: the impetus behind developing the tool was the mass
migration of scientific Python libraries (SciPy, scikit-image, and NumPy,
etc.) to Meson, after distutils was deprecated.
When many of the build and installation commands changed, it made sense to
abstract away the nuisance of having to re-learn them.

_Note:_ We now have experimental builds for editable installs.
Most of the Meson commands listed below should work "out of the box" for
those.

<!--TOC-->

- [Installation]
- [Configuration]
  - [Command sections]
- [Running]
- [Built-in commands]
  - [Meson]
  - [Build (PEP 517 builder)]
  - [pip (Package Installer for Python)]
  - [Meta (commands that operate on commands)]
- [ðŸ§ª Custom commands]
  - [Configuration]
  - [Argument overrides]
  - [Advanced: adding arguments to built-in commands]
  - [Advanced: override Meson CLI]
- [Auto-completion]
- [FAQ]
- [For contributors]
- [History]

<!--TOC-->

## Installation

`
pip install spin
`

## Configuration

Settings are stored in `.spin.toml`, `spin.toml`, or your project's
`pyproject.toml`.
As an example, see the `[tool.spin]` section of [an example
`pyproject.toml`].

The `[project]` section should contain `name`.
The `[tool.spin]` section should contain:

```
package = "pkg_importname"  # name of your package
commands = [
  "spin.cmds.meson.build",
  "spin.cmds.meson.test"
]
```

See [the command selection] below.

### Command sections

Once you have several commands, it may be useful to organize them into
sections.
In `pyproject.toml`, instead of specifying the commands as a list, use the
following structure:

```toml
[tool.spin.commands]
"Build" = [
  "spin.cmds.meson.build",
  "spin.cmds.meson.test"
]
"Environments" = [
  "spin.cmds.meson.ipython",
  "spin.cmds.meson.run"
]
```

These commands will then be rendered as:

```
Build:
  build  ðŸ”§ Build package with Meson/ninja
  test   ðŸ”§ Run tests

Environments:


[FILE:116:distinfo]
cc56f0593e7697a7e04dc621ebd4da765b49a46f5ef7cab22ea5cb3a0743321a        31053 python-src/spin-0.14-py3-none-any.whl

