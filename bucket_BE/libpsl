# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libpsl
VERSION=		0.20.2
KEYWORDS=		dns
VARIANTS=		standard
SDESC[standard]=	Library to handle the Public Suffix List
HOMEPAGE=		https://github.com/rockdaboot/libpsl
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/rockdaboot:libpsl:libpsl-0.20.2
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		publicsuffix-list:single:standard
BUILDRUN_DEPENDS=	libidn2:primary:standard
			libunistring:primary:standard

USES=			autoreconf libtool pkgconfig python:build shebangfix
			iconv gettext-runtime gettext-tools
GNOME_COMPONENTS=	libxslt

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		dns/libpsl
SHEBANG_FILES=		src/psl-make-dafsa

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--with-psl-file={{LOCALBASE}}/share/publicsuffix-list/public_suffix_list.dat
			--with-psl-testfile={{LOCALBASE}}/share/publicsuffix-list/test_psl.txt
			--enable-nls
			--enable-man
			--enable-builtin=libidn2
			--enable-runtime=libidn2

INSTALL_TARGET=		install-strip

[FILE:758:descriptions/desc.single]
A "public suffix" is a domain name under which Internet users can directly
register own names.

Browsers and other web clients can use it to
- avoid privacy-leaking "supercookies"
- avoid privacy-leaking "super domain" certificates
- domain highlighting parts of the domain in a user interface
- sorting domain lists by site

Libpsl...
- has built-in PSL data for fast access
- allows to load PSL data from files
- checks if a given domain is a "public suffix"
- provides immediate cookie domain verification
- finds the longest public part of a given domain
- finds the shortest private part of a given domain
- works with international domains (UTF-8 and IDNA2008 Punycode)
- is thread-safe
- handles IDNA2008 UTS#46 (libicu is used by psl2c if installed)


[FILE:117:distinfo]
7aa949fd3fdba61b0dc7b3f4c2520263b942c189746e157f48436386eca3398e      8589843 rockdaboot-libpsl-libpsl-0.20.2.tar.gz


[FILE:152:manifests/plist.single]
bin/psl
include/libpsl.h
lib/
 libpsl.a
 libpsl.so
 libpsl.so.5
 libpsl.so.5.3.1
lib/pkgconfig/libpsl.pc
share/man/man1/
 psl-make-dafsa.1.gz
 psl.1.gz


[FILE:374:patches/patch-Makefile.am]
--- Makefile.am.orig	2018-04-26 18:18:39 UTC
+++ Makefile.am
@@ -1,13 +1,6 @@
 # got some hints from https://gitorious.org/openismus-playground/examplelib/source
 
 SUBDIRS = po include src tools
-if ENABLE_GTK_DOC
-  SUBDIRS += docs/libpsl
-else
-if ENABLE_MAN
-  SUBDIRS += docs/libpsl
-endif
-endif
 SUBDIRS += fuzz tests msvc
 
 ACLOCAL_AMFLAGS = -I m4 ${ACLOCAL_FLAGS}


[FILE:938:patches/patch-configure.ac]
--- configure.ac.orig	2018-04-26 18:18:39 UTC
+++ configure.ac
@@ -37,23 +37,6 @@ AM_GNU_GETTEXT([external],[need-ngettext
 AM_GNU_GETTEXT_VERSION([0.18.1])
 
 #
-# check for gtk-doc
-#
-m4_ifdef([GTK_DOC_CHECK], [
-GTK_DOC_CHECK([1.15],[--flavour no-tmpl])
-],[
-AM_CONDITIONAL([ENABLE_GTK_DOC], false)
-])
-# needed for some older versions of gtk-doc
-m4_ifdef([GTK_DOC_USE_LIBTOOL], [], [
-AM_CONDITIONAL([GTK_DOC_USE_LIBTOOL], false)
-])
-
-if test x"$have_gtk_doc" = xyes -a x"$enable_gtk_doc" = xyes; then
-  AC_SUBST([LIBPSL_DOCS], [docs/libpsl])
-fi
-
-#
 # enable creation of man pages
 #
 AC_ARG_ENABLE([man],
@@ -372,7 +355,6 @@ AC_CONFIG_FILES([Makefile
                  po/Makefile.in
                  fuzz/Makefile
                  tests/Makefile
-                 docs/libpsl/Makefile docs/libpsl/version.xml
                  libpsl.pc:libpsl.pc.in
                  msvc/Makefile
                  msvc/config.h.win32

