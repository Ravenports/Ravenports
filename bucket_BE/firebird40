# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		firebird40
VERSION=		4.0.2
KEYWORDS=		databases
VARIANTS=		standard
SDESC[standard]=	Firebird-4 relational SQL database
HOMEPAGE=		https://firebirdsql.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/FirebirdSQL/firebird/releases/download/v4.0.2/
DISTFILE[1]=		Firebird-4.0.2.2816-0.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			server
			client
			docs
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BROKEN[all]=		message file /raven/share/firebird/firebird.msg not found

BUILD_DEPENDS=		icu:dev:standard
BUILDRUN_DEPENDS=	icu:primary:standard
			libtomcrypt:single:standard
			re2:single:standard

USERS=			firebird
GROUPS=			firebird
USERGROUP_SPKG=		server

USES=			cpe gmake pkgconfig readline zlib clang

DISTNAME=		Firebird-4.0.2.2816-0

CPE_PRODUCT=		firebird
CPE_VENDOR=		firebirdsql
FPC_EQUIVALENT=		databases/firebird40-client

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--prefix=/var/db/firebird
			--exec-prefix={{PREFIX}}
			--with-fbbin={{PREFIX}}/bin
			--with-fblib={{PREFIX}}/lib
			--with-fbconf={{PREFIX}}/etc/firebird
			--with-fbglock=/var/db/firebird
			--with-fbhelp={{LOCALSTATEDIR}}/help
			--with-fbintl={{PREFIX}}/libexec/firebird/intl
			--with-fblog=/var/db/firebird
			--with-fbmsg={{PREFIX}}/share/firebird
			--with-fbplugins={{PREFIX}}/libexec/firebird/plugins
			--with-fbtzdata={{PREFIX}}/libexec/firebird/tzdata
			--with-fbsbin={{PREFIX}}/sbin
			--with-fbsecure-db=/var/db/firebird
			--with-fbsample-db={{STD_EXAMPLESDIR}}/empbuild
			--with-system-editline
CONFIGURE_ENV=		PTHREAD_LIBS="-lpthread"
			ac_cv_lib_atomic_main=no

SINGLE_JOB=		yes

CXXFLAGS=		-Wno-varargs
			-Wno-deprecated-declarations
			-Wno-format
CMAKE_ARGS=		-DFB_TZDATADIR="{{PREFIX}}/libexec/firebird/tzdata"
			-DFB_BINDIR="{{PREFIX}}/bin"
			-DFB_SBINDIR="{{PREFIX}}/sbin"
			-DFB_CONFDIR="{{PREFIX}}/etc/firebird"
			-DFB_LIBDIR="{{PREFIX}}/lib"
			-DFB_INCDIR="{{PREFIX}}/include"
			-DFB_DOCDIR="{{STD_DOCDIR}}"
			-DFB_SAMPLEDIR="{{STD_EXAMPLESDIR}}"
			-DFB_SAMPLEDBDIR="{{STD_EXAMPLESDIR}}/empbuild"
			-DFB_INTLDIR="{{LIBEXECDIR}}/intl"
			-DFB_MISCDIR="{{PREFIX}}/share/firebird/misc"
			-DFB_SECDBDIR="/var/db/firebird"
			-DFB_MSGDIR="{{PREFIX}}/share/firebird"
			-DFB_LOGDIR="/var/db/firebird"
			-DFB_GUARDDIR="/var/db/firebird"
			-DFB_PLUGDIR="{{PREFIX}}/libexec/firebird/plugins"
VAR_OPSYS[freebsd]=	CONFIGURE_ENV=ac_cv_search_libiconv_open=no

post-extract:
.for extern in libtocrypt libtommath editline re2
	${RM} -r ${WRKSRC}/extern/${extern}
.endfor
	# remove
	# ${MKDIR} ${LOCALBASE}/share/firebird
	# cp ${FILESDIR}/firebird.msg ${LOCALBASE}/share/firebird/

[FILE:568:descriptions/desc.server]
Firebird is a relational database offering many ANSI SQL-99 features
that runs on Linux, Windows, and a variety of Unix platforms.  Firebird
offers excellent concurrency, high performance, and powerful language
support for stored procedures and triggers.  It has been used in
production systems, under a variety of names since 1981.

Firebird is completely free of any registration, licensing or deployment
fees.  It may be deployed freely for use with any third-party software,
whether commercial or not.

This package contains the Firebird server and related files.


[FILE:193:descriptions/desc.client]
Firebird is a relational database offering many ANSI SQL-99 features
that runs on Linux, Windows, and a variety of Unix platforms.

This package contains the Firebird client and related files.


[FILE:107:distinfo]
fb28140cec1eb32ea683bdf552dd1d6b7d455db61282fcf96fae18b3103af6c6     30665764 Firebird-4.0.2.2816-0.tar.xz


[FILE:2405:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2022-08-10 09:04:28 UTC
+++ CMakeLists.txt
@@ -147,7 +147,7 @@ endif()
 
 include(Configure)
 
-if (FREEBSD)
+if (FALSE)
     # temporary
     set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR})
 endif()
@@ -174,7 +174,6 @@ configure_file(${AUTOCONFIG_SRC} ${AUTOC
 #
 ################################################################################
 
-add_definitions(-DDEV_BUILD)
 
 if (WIN32)
     set(OS_DIR win32)
@@ -218,7 +217,7 @@ if (UNIX)
     if (NOT CMAKE_CROSSCOMPILING)
         set(LIB_readline readline)
     endif()
-    if (NOT FREEBSD)
+    if (NOT (FREEBSD OR DRAGONFLY))
         set(LIB_dl dl)
     endif()
 endif()
@@ -227,7 +226,7 @@ if (NOT LINUX AND (CLANG OR IOS))
     set(LIB_iconv iconv)
 endif()
 
-if (FREEBSD OR APPLE)
+if (APPLE)
     include_directories(/usr/local/include)
     link_directories(/usr/local/lib)
 endif()
@@ -329,11 +328,8 @@ endif() # if (NOT CMAKE_CROSSCOMPILING)
 
 crosscompile_prebuild_steps()
 
-include_directories("extern/libtommath")
-include_directories("extern/libtomcrypt/src/headers")
 include_directories("extern/decNumber")
 include_directories("extern/icu/include")
-include_directories("extern/zlib")
 
 include_directories("src/include")
 include_directories("src/include/gen")
@@ -344,24 +340,20 @@ include_directories("${CMAKE_CURRENT_BIN
 # LIBRARY libtommath
 ########################################
 
-file(GLOB libtommath_src "extern/libtommath/*.c" "extern/libtommath/*.h")
-
-add_library             (libtommath ${libtommath_src})
-project_group           (libtommath Extern)
+find_library(LIB_tommath tommath)
+if(NOT LIB_tommath)
+  message(FATAL_ERROR "tommath library not found")
+endif()
 
 
 ########################################
 # LIBRARY libtomcrypt
 ########################################
 
-file(GLOB_RECURSE libtomcrypt_src "extern/libtomcrypt/src/*")
-list(FILTER libtomcrypt_src EXCLUDE REGEX ".*aes_tab.c")
-list(FILTER libtomcrypt_src EXCLUDE REGEX ".*whirltab.c")
-list(FILTER libtomcrypt_src EXCLUDE REGEX ".*sober128tab.c")
-
-add_library                 (libtomcrypt ${libtomcrypt_src})
-target_compile_definitions  (libtomcrypt PRIVATE LTC_NO_ROLC LTC_SOURCE)
-project_group               (libtomcrypt Extern)
+find_library(LIB_tomcrypt NAMES tomcrypt)
+if(NOT LIB_tomcrypt)
+  message(FATAL_ERROR "tomcrypt library not found")
+endif()
 
 
 ########################################


[FILE:953:patches/patch-builds-posix-prefix.freebsd_amd64]
--- builds/posix/prefix.freebsd_amd64.orig	2022-08-10 09:04:28 UTC
+++ builds/posix/prefix.freebsd_amd64
@@ -20,8 +20,16 @@
 
 EXE_LINK_OPTIONS := $(LDFLAGS) $(THR_FLAGS) $(UNDEF_FLAGS) $(LIB_PATH_OPTS) -Wl,-rpath,../gen/firebird/lib
 
-PROD_FLAGS=-O -fno-builtin -DFREEBSD -DAMD64 -pipe -MMD -fPIC
-DEV_FLAGS=-ggdb -DFREEBSD -DAMD64 -pipe -MMD -p -fPIC -Wall -Wno-non-virtual-dtor
+COMMON_FLAGS=-DFREEBSD -DAMD64 -pipe -MMD -fPIC 
+PROD_FLAGS=$(COMMON_FLAGS) -O0 -g -fno-builtin -Wno-deprecated
+DEV_FLAGS=$(COMMON_FLAGS) -ggdb -p -Wall -Wno-non-virtual-dtor
+
+# This file must be compiled with SSE4.2 support
+%/CRC32C.o: COMMON_FLAGS += -msse4
+
+# These files are generated incorrectly (e.g. array.epp => array.cpp)
+%/array.o %/blob.o %/alice_meta.o %/restore.o %/backup.o: COMMON_FLAGS += -Wno-narrowing
+%/OdsDetection.o %/dba.o: COMMON_FLAGS += -Wno-narrowing
 
 # This file must be compiled with SSE4.2 support
 %/CRC32C.o: CXXFLAGS += -msse4


[FILE:403:patches/patch-builds-posix_Makefile.in.plugins_examples]
--- builds/posix/Makefile.in.plugins_examples.orig	2022-08-10 09:04:28 UTC
+++ builds/posix/Makefile.in.plugins_examples
@@ -101,7 +101,7 @@ AllObjects += $(CA_Objects)
 crypt_app: $(CRYPT_APP)
 
 $(CRYPT_APP):	$(CA_Objects)
-	$(EXE_LINK) $(LSB_UNDEF) $^ -o $@ $(FIREBIRD_LIBRARY_LINK)
+	$(EXE_LINK) $(LSB_UNDEF) $^ -o $@ $(LDFLAGS) $(FIREBIRD_LIBRARY_LINK)
 
 
 include $(ROOT)/gen/make.shared.targets


[FILE:883:patches/patch-builds_cmake_BuildFunctions.cmake]
--- builds/cmake/BuildFunctions.cmake.orig	2022-08-10 09:04:28 UTC
+++ builds/cmake/BuildFunctions.cmake
@@ -73,7 +73,7 @@ if (UNIX)
             if (APPLE)
                 set(wl_option "-exported_symbols_list")
             endif()
-            set_target_properties(${target} PROPERTIES LINK_FLAGS -Wl,${wl_option},${CMAKE_BINARY_DIR}/builds/posix/${def_file})
+            #set_target_properties(${target} PROPERTIES LINK_FLAGS -Wl,${wl_option},${CMAKE_BINARY_DIR}/builds/posix/${def_file})
         endif()
     endfunction(set_exported_symbols)
 endif(UNIX)
@@ -289,7 +289,7 @@ function(create_command command type out
     set(cmd_name ${cmd_name}${conf}${ext})
     set(cmd_name ${CMAKE_BINARY_DIR}/src/${cmd_name})
     
-    set(content)
+    set(content "#!/bin/sh\n")
     foreach(e ${env})
         set(content "${content}${pre_cmd}${export} ${e}\n")
     endforeach()


[FILE:333:patches/patch-builds_make.new_config_config.h.in]
--- builds/make.new/config/config.h.in.orig	2022-08-10 10:48:53 UTC
+++ builds/make.new/config/config.h.in
@@ -105,6 +105,9 @@
 /* Define this if OS is FreeBSD */
 #undef FREEBSD
 
+/* Define this if OS is DragonFly */
+#undef DRAGONFLY
+
 /* Define this if getmntent needs second argument */
 #undef GETMNTENT_TAKES_TWO_ARGUMENTS
 


[FILE:433:patches/patch-builds_posix_Makefile.in]
--- builds/posix/Makefile.in.orig	2022-08-10 09:04:28 UTC
+++ builds/posix/Makefile.in
@@ -180,9 +180,6 @@ ifeq ($(ABSEIL_BUILD_FLG),Y)
 	ln -sf $(ROOT)/extern/int128/absl/numeric/libi128.a $(LIB)
 endif
 
-	CXXFLAGS="-O3 -g -fPIC" $(MAKE) -C $(ROOT)/extern/re2
-	ln -sf $(ROOT)/extern/re2/obj/libre2.a $(LIB)
-
 ifeq ($(TOMMATH_BUILD_FLG),Y)
 	CFLAGS="$(CFLAGS)" $(MAKE) -C $(ROOT)/extern/libtommath -f makefile.shared GCC=$(GCC)
 


[FILE:1386:patches/patch-builds_posix_make.defaults]
--- builds/posix/make.defaults.orig	2022-08-10 09:04:28 UTC
+++ builds/posix/make.defaults
@@ -154,7 +154,7 @@ ifeq ($(LSB_FLG), Y)
 endif
 
 # switch to make sed edit files inplace
-INLINE_EDIT_SED:= -i
+INLINE_EDIT_SED:= -i""
 
 # Default programs and tools to be used in the build process
 
@@ -164,7 +164,7 @@ RM_R=		rm -rf
 CHMOD=			chmod
 CHMOD_6=		chmod 666
 CHMOD_7=		chmod 777
-CHMOD_S7=		chmod 06777
+CHMOD_S7=		chmod 04555
 MV=			mv -f
 TOUCH=			touch
 CP=			cp
@@ -391,7 +391,7 @@ CREATE_DB	= $(RBIN)/create_db$(EXEC_EXT)
 GDS_DROP	= $(BIN)/gds_drop$(EXEC_EXT)
 FBSVCMGR	= $(BIN)/fbsvcmgr$(EXEC_EXT)
 FBTRACEMGR	= $(BIN)/fbtracemgr$(EXEC_EXT)
-GSTAT		= $(BIN)/gstat$(EXEC_EXT)
+GSTAT		= $(BIN)/fbstat$(EXEC_EXT)
 NBACKUP		= $(BIN)/nbackup$(EXEC_EXT)
 LOCKPRINT	= $(BIN)/fb_lock_print$(EXEC_EXT)
 GSEC		= $(BIN)/gsec$(EXEC_EXT)
@@ -412,13 +412,13 @@ SECURITY_FDB	= $(FIREBIRD)/security4.fdb
 QLI            = $(BIN)/qli$(EXEC_EXT)
 
 # From isql
-ISQL            = $(BIN)/isql$(EXEC_EXT)
-RUN_ISQL        = $(RBIN)/isql$(EXEC_EXT)
+ISQL            = $(BIN)/isql-fb$(EXEC_EXT)
+RUN_ISQL        = $(RBIN)/isql-fb$(EXEC_EXT)
 
 # From burp
 GBAK            = $(BIN)/gbak$(EXEC_EXT)
 RUN_GBAK        = $(RBIN)/gbak$(EXEC_EXT)
-GSPLIT          = $(BIN)/gsplit$(EXEC_EXT)
+GSPLIT          = $(BIN)/fbsplit$(EXEC_EXT)
 
 # From gpre
 # (gpre current is a link to one of the others)


[FILE:696:patches/patch-configure]
--- configure.orig	2022-08-10 10:57:02 UTC
+++ configure
@@ -2983,13 +2983,18 @@ $as_echo "#define AIX 1" >>confdefs.h
 	EXPORT_SYMBOLS_STYLE=aix
     ;;
 
-  amd64-*-freebsd* | x86_64*-*-freebsd* | x86_64*-*-k*bsd*-gnu)
+  amd64-*-freebsd* | x86_64*-*-freebsd* | x86_64-*-dragonfly*)
     MAKEFILE_PREFIX=freebsd_amd64
     case "$build" in
         x86_64*-*-k*bsd-gnu)      # Debian/kFreeBSD
             PLATFORM=GENTOOFREEBSD
             INSTALL_PREFIX=linux
             ;;
+	x86_64-*-dragonfly*)
+            PLATFORM=FREEBSD
+            INSTALL_PREFIX=freebsd
+$as_echo "#define DRAGONFLY 1" >>confdefs.h
+	    ;;
 		*)
             PLATFORM=FREEBSD
             INSTALL_PREFIX=freebsd


[FILE:577:patches/patch-examples-exauth_Makefile]
--- examples/extauth/Makefile.orig	2022-08-10 09:04:28 UTC
+++ examples/extauth/Makefile
@@ -61,8 +61,8 @@ KEYGEN_objects=$(INTERMED)/keygen.o
 TCWRAP_objects=$(INTERMED)/TcWrapper.o
 KEY_AUTH_objects=$(INTERMED)/ExtAuth.o
 
-CXXFLAGS=-std=c++11 -pthread -I$(ROOT)/include -fPIC $(TOMCRYPT_COMPILE)
-LDFLAGS=-pthread -L$(LIB) -Wl,-rpath,'$$ORIGIN/../lib' $(TOMCRYPT_LINK)
+CXXFLAGS=-std=c++11 -pthread -I$(ROOT)/include -fPIC $(TOMCRYPT_COMPILE) ${CFLAGS}
+LDFLAGS+=-pthread -L$(LIB) -Wl,-rpath,'$$ORIGIN/../lib' $(TOMCRYPT_LINK)
 
 LINK_LIBS=-lfbclient -ltomcrypt -ltommath
 


[FILE:329:patches/patch-extern_btyacc_Makefile]
--- extern/btyacc/Makefile.orig	2022-08-10 09:04:28 UTC
+++ extern/btyacc/Makefile
@@ -42,7 +42,7 @@ OTHERS	      = README README.BYACC \
 all:		$(PROGRAM)
 
 $(PROGRAM):     $(OBJS) $(LIBS)
-		$(CC) $(LDFLAGS) -o $(PROGRAM) $(OBJS) $(LIBS)
+		$(CC) $(CFLAGS) $(LDFLAGS) -o $(PROGRAM) $(OBJS) $(LIBS)
 
 clean:;		rm -f $(OBJS)
 


[FILE:742:patches/patch-extern_cloop_Makefile]
--- extern/cloop/Makefile.orig	2022-08-10 09:04:28 UTC
+++ extern/cloop/Makefile
@@ -6,7 +6,7 @@ TARGET	:= release
 
 CC	:= $(CC)
 CXX	:= $(CXX)
-LD	:= $(CXX)
+LD	:= $(CXX) $(LDFLAGS)
 
 SRC_DIR		:= src
 BUILD_DIR	:= build
@@ -27,8 +27,9 @@ SRCS_CPP := $(foreach sdir,$(SRC_DIRS),$
 OBJS_C := $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SRCS_C))
 OBJS_CPP := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(SRCS_CPP))
 
-C_FLAGS := -ggdb -fPIC -MMD -MP -W -Wall -Wno-unused-parameter
-CXX_FLAGS := $(C_FLAGS) -std=c++11
+COMMON_C_FLAGS := -ggdb -fPIC -MMD -MP -W -Wall -Wno-unused-parameter
+C_FLAGS := $(COMMON_C_FLAGS) $(CFLAGS) $(CPPFLAGS)
+CXX_FLAGS := $(COMMON_C_FLAGS) -std=c++11
 FPC_FLAGS := -Mdelphi -Cg
 
 ifeq ($(shell uname),FreeBSD)


[FILE:2839:patches/patch-src_CMakeLists.txt]
--- src/CMakeLists.txt.orig	2022-08-10 09:04:28 UTC
+++ src/CMakeLists.txt
@@ -118,9 +118,9 @@ add_custom_command(
     COMMAND ${CMAKE_COMMAND} -E remove security.fdb
     COMMAND ${CMAKE_COMMAND} -E remove security_.fdb
     COMMAND ${CMAKE_COMMAND} -E echo "create database 'security_.fdb';" > create_db_security.sql
-    COMMAND ${BOOT_ISQL_CMD} -q -i create_db_security.sql
+    COMMAND ${BOOT_ISQL_CMD} -i create_db_security.sql
     COMMAND ${BOOT_GFIX_CMD} -write async security_.fdb
-    COMMAND ${BOOT_ISQL_CMD} -q security_.fdb -i ${CMAKE_CURRENT_SOURCE_DIR}/dbs/security.sql
+    COMMAND ${BOOT_ISQL_CMD} security_.fdb -i ${CMAKE_CURRENT_SOURCE_DIR}/dbs/security.sql
     COMMAND ${CMAKE_COMMAND} -E copy_if_different security_.fdb security.fdb
     COMMAND ${BOOT_GFIX_CMD} -write sync security.fdb
 )
@@ -179,7 +179,6 @@ add_custom_command(
     OUTPUT codes_headers.dummy
     DEPENDS
         codes
-        msg_fdb
     COMMENT ""
     #
     COMMAND ${CMAKE_COMMAND} -E echo "" > codes_headers.dummy
@@ -194,7 +193,7 @@ project_group(messages "Boot/Custom buil
 # BUILD STEP msg_fdb
 ########################################
 
-set(isql_exec_msg ${BOOT_ISQL_CMD} -q msg_.fdb -i ${CMAKE_CURRENT_SOURCE_DIR}/msgs)
+set(isql_exec_msg ${BOOT_ISQL_CMD} msg_.fdb -i ${CMAKE_CURRENT_SOURCE_DIR}/msgs)
 
 add_custom_command(
     OUTPUT msg.fdb
@@ -207,7 +206,7 @@ add_custom_command(
     COMMAND ${CMAKE_COMMAND} -E remove msg.fdb
     COMMAND ${CMAKE_COMMAND} -E remove msg_.fdb
     COMMAND ${CMAKE_COMMAND} -E echo "create database 'msg_.fdb';" > create_db_msg.sql
-    COMMAND ${BOOT_ISQL_CMD} -q -i create_db_msg.sql
+    COMMAND ${BOOT_ISQL_CMD} -i create_db_msg.sql
     COMMAND ${BOOT_GFIX_CMD} -write async msg_.fdb
     COMMAND ${isql_exec_msg}/msg.sql
     #
@@ -373,10 +372,10 @@ if (APPLE)
 endif()
 
 add_library                 (common ${common_src} ${common_os_src} ${common_include})
-target_link_libraries       (common ${LIB_mpr} libtommath libtomcrypt decNumber)
+target_link_libraries       (common re2 ${LIB_mpr} tommath tomcrypt decNumber)
 add_dependencies_cc         (common UpdateCloopInterfaces)
 if (UNIX)
-target_link_libraries       (common dl)
+target_link_libraries       (common ${LIB_dl})
 endif()
 
 
@@ -939,7 +938,6 @@ add_custom_target(copy_files
     COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_SOURCE_DIR}/src/yvalve/perf.h ${output_dir}/include/perf.h
 )
 add_dependencies_cc     (copy_files databases)
-add_dependencies_unix_cc(copy_files makeHeader)
 project_group(copy_files "Custom build steps")
 
 # headers
@@ -1018,7 +1016,7 @@ if (WIN32)
 endif()
 
 
-if (UNIX)
+if (False)
     add_custom_command(TARGET copy_files POST_BUILD
         # examples
         COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_SOURCE_DIR}/examples/readme ${output_dir}/examples/README


[FILE:977:patches/patch-src_common_SimilarToRegex.cpp]
--- src/common/SimilarToRegex.cpp.orig	2022-08-10 09:04:28 UTC
+++ src/common/SimilarToRegex.cpp
@@ -110,7 +110,8 @@ namespace
 			options.set_log_errors(false);
 			options.set_dot_nl(true);
 			options.set_case_sensitive(!(flags & COMP_FLAG_CASE_INSENSITIVE));
-			options.set_utf8(!(flags & COMP_FLAG_LATIN));
+			if (!(flags & COMP_FLAG_LATIN))
+				options.set_encoding(options.EncodingUTF8);
 
 			re2::StringPiece sp((const char*) re2PatternStr.c_str(), re2PatternStr.length());
 			regexp = FB_NEW_POOL(pool) RE2(sp, options);
@@ -761,7 +762,8 @@ namespace
 			options.set_log_errors(false);
 			options.set_dot_nl(true);
 			options.set_case_sensitive(!(flags & COMP_FLAG_CASE_INSENSITIVE));
-			options.set_utf8(!(flags & COMP_FLAG_LATIN));
+			if (!(flags & COMP_FLAG_LATIN))
+				options.set_encoding(options.EncodingUTF8);
 
 			re2::StringPiece sp((const char*) finalRe2Pattern.c_str(), finalRe2Pattern.length());
 			regexp = FB_NEW_POOL(pool) RE2(sp, options);


[FILE:530:patches/patch-src_common_common.h]
--- src/common/common.h.orig	2022-08-10 09:04:28 UTC
+++ src/common/common.h
@@ -264,7 +264,7 @@
 /*****************************************************
 * FreeBSD for Intel platforms
 *****************************************************/
-#ifdef FREEBSD
+#if defined(FREEBSD) || defined(DRAGONFLY)
 
 #define FB_OS OsFreeBsd
 #define FB_CC CcGcc
@@ -288,7 +288,7 @@
 #define USE_POSIX_THREADS
 #endif
 
-#endif /* FREEBSD */
+#endif /* FREEBSD or DRAGONFLY */
 
 /*****************************************************
 * NetBSD


[FILE:697:patches/patch-src_gpre_languages_cob.cpp]
--- src/gpre/languages/cob.cpp.orig	2022-08-10 09:04:28 UTC
+++ src/gpre/languages/cob.cpp
@@ -60,7 +60,7 @@
 static const char* const COMMIT			= "commit";
 static const char* const ROLLBACK		= "rollback";
 
-#if defined AIX || defined AIX_PPC || defined SOLARIS || defined HP11 || defined LINUX || defined DARWIN || defined FREEBSD || defined NETBSD || defined WIN_NT
+#if defined AIX || defined AIX_PPC || defined SOLARIS || defined HP11 || defined LINUX || defined DARWIN || defined FREEBSD || defined NETBSD || defined WIN_NT || defined DRAGONFLY
 static const char* const OMITTED 		= "BY VALUE 0";
 static const char* const BY_VALUE		= "BY VALUE ";
 static const char* const END_VALUE		= "";


[FILE:557:patches/patch-src_gpre_languages_ftn.cpp]
--- src/gpre/languages/ftn.cpp.orig	2022-08-10 09:04:28 UTC
+++ src/gpre/languages/ftn.cpp
@@ -225,7 +225,7 @@ const char* const I4CONST_2			= "";
 const char* const COMMENT			= "*     ";
 const char* const INLINE_COMMENT	= "\n*                ";
 const char* const COMMA				= ",";
-#elif (defined FREEBSD || defined NETBSD)
+#elif (defined FREEBSD || defined NETBSD || defined DRAGONFLY)
 const char* const INCLUDE_ISC_FTN	= "       INCLUDE  \'%s\' \n\n";
 const char* const INCLUDE_FTN_FILE	= "gds.f";
 const char* const DOUBLE_DCL		= "DOUBLE PRECISION";


[FILE:560:patches/patch-src_include_gen_autoconfig.h.in]
--- src/include/gen/autoconfig.h.in.orig	2022-08-10 09:04:28 UTC
+++ src/include/gen/autoconfig.h.in
@@ -54,6 +54,9 @@
 /* Define this if OS is FreeBSD */
 #cmakedefine FREEBSD 1
 
+/* Define this if OS is DragonFly */
+#cmakedefine DRAGONFLY 1
+
 /* Define this if OS is HP-UX */
 #cmakedefine HPUX 1
 
@@ -161,6 +164,9 @@
 /* security database DIR (PREFIX) */
 #define FB_SECDBDIR "@FB_SECDBDIR@"
 
+/* Timezone data directory */
+#define FB_TZDATADIR "@FB_TZDATADIR@"
+
 
 /******************************************************************************
  *


[FILE:267:patches/patch-src_jrd_license.h]
--- src/jrd/license.h.orig	2022-08-10 09:04:28 UTC
+++ src/jrd/license.h
@@ -110,7 +110,7 @@
 #define FB_PLATFORM     "LI"	// Linux on Intel
 #endif
 
-#ifdef FREEBSD
+#if defined(FREEBSD) || defined(DRAGONFLY)
 #define FB_PLATFORM     "FB"	// FreeBSD/i386
 #endif
 


[FILE:945:patches/patch-src_jrd_os_posix_unix.cpp]
--- src/jrd/os/posix/unix.cpp.orig	2022-08-10 09:04:28 UTC
+++ src/jrd/os/posix/unix.cpp
@@ -56,6 +56,15 @@
 #include <linux/fs.h>
 #endif
 
+#if defined DRAGONFLY
+#include <sys/diskslice.h>
+#elif defined FREEBSD
+#include <sys/disk.h>
+#define BLKGETSIZE64 DIOCGMEDIASIZE
+#define BLKGETSIZE DIOCGMEDIASIZE
+#define BLKSSZGET DIOCGSECTORSIZE
+#endif
+
 #endif //SUPPORT_RAW_DEVICES
 
 #include "../jrd/jrd.h"
@@ -495,7 +504,15 @@ ULONG PIO_get_number_of_pages(const jrd_
 // Looks like any OS needs own ioctl() to determine raw device size
 #undef HAS_RAW_SIZE
 
-#ifdef LINUX
+#if defined DRAGONFLY
+		{
+			struct partinfo pi;
+			if (ioctl(file->fil_desc, DIOCGPART, &pi) != 0)
+				unix_error("ioctl(DIOCGPART)", file, isc_io_access_err);
+			length = pi.media_size;
+		}
+#define HAS_RAW_SIZE
+#elif defined LINUX || defined FREEBSD
 #ifdef BLKGETSIZE64
 		if (ioctl(file->fil_desc, BLKGETSIZE64, &length) != 0)
 #endif /*BLKGETSIZE64*/


[FILE:777:patches/patch-src_remote_inet.cpp]
--- src/remote/inet.cpp.orig	2022-08-10 09:04:28 UTC
+++ src/remote/inet.cpp
@@ -960,7 +960,7 @@ rem_port* INET_connect(const TEXT* name,
 		gai_hints.ai_family = ((host.hasData() || !ipv6) ? AF_UNSPEC : AF_INET6);
 	gai_hints.ai_socktype = SOCK_STREAM;
 
-#if !defined(WIN_NT) && !defined(__clang__)
+#if !defined(WIN_NT) && !defined(FREEBSD) && !defined(DRAGONFLY)
 	gai_hints.ai_protocol = SOL_TCP;
 #else
 	gai_hints.ai_protocol = IPPROTO_TCP;
@@ -1168,6 +1168,12 @@ static rem_port* listener_socket(rem_por
 
 	inet_ports->registerPort(port);
 
+	char *parent_pid;
+	if (parent_pid = getenv("FB_SIGNAL_PROCESS"))
+	{
+		kill(atoi(parent_pid), SIGUSR1);
+	}
+
 	if (flag & SRVR_multi_client)
 	{
 		// Prevent the generation of dummy keepalive packets on the connect port.

