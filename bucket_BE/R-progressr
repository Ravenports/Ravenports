# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		R-progressr
VERSION=		0.8.0
KEYWORDS=		cran
VARIANTS=		standard
SDESC[standard]=	Inclusive, Unifying API for Progress Updates
HOMEPAGE=		https://progressr.futureverse.org
CONTACT=		CRAN_Automaton[cran@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		CRAN/src/contrib
DISTFILE[1]=		progressr_0.8.0.tar.gz:main
DIST_SUBDIR=		CRAN
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	R-digest:single:standard

USES=			cran gmake

DISTNAME=		progressr

GENERATED=		yes

INSTALL_REQ_TOOLCHAIN=	yes

[FILE:1259:descriptions/desc.single]
progressr: An Inclusive, Unifying API for Progress Updates

A minimal, unifying API for scripts and packages to report progress updates
from anywhere including when using parallel processing. The package is
designed such that the developer can to focus on what progress should be
reported on without having to worry about how to present it. The end user
has full control of how, where, and when to render these progress updates,
e.g. in the terminal using utils::txtProgressBar() or
progress::progress_bar(), in a graphical user interface using
utils::winProgressBar(), tcltk::tkProgressBar() or shiny::withProgress(),
via the speakers using beep::beepr(), or on a file system via the size of a
file. Anyone can add additional, customized, progression handlers. The
'progressr' package uses R's condition framework for signaling progress
updated. Because of this, progress can be reported from almost anywhere in
R, e.g. from classical for and while loops, from map-reduce APIs like the
lapply() family of functions, 'purrr', 'plyr', and 'foreach'. It will also
work with parallel processing via the 'future' framework, e.g.
future.apply::future_lapply(), furrr::future_map(), and 'foreach' with
'doFuture'. The package is compatible with Shiny applications.


[FILE:106:distinfo]
8224d397cea450d97a08ed94ecc76f6e46fd46faa89882834e71b654ba07f7d4       105785 CRAN/progressr_0.8.0.tar.gz

