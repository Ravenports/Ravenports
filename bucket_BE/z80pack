# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		z80pack
VERSION=		1.38
KEYWORDS=		emulators
VARIANTS=		std
SDESC[std]=		8080 and Z80 emulator with CP/M
HOMEPAGE=		https://www.icl1900.co.uk/unix4fun/z80pack/
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/udo-munk:z80pack:1.38
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			docs
			images

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		libglvnd:dev:std
			libGLU:dev:std
BUILDRUN_DEPENDS=	libGLU:primary:std

USES=			gmake jpeg
XORG_COMPONENTS=	x11

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		emulators/z80pack

post-patch:
	${REINPLACE_CMD} -i'' -e 's|__PREFIX__|${PREFIX}|g' \
		${FILESDIR}/runcpm

do-build:
	(cd ${WRKSRC}/cpmsim/srcsim && \
		gmake PREFIX=${PREFIX} && \
		cd ../srctools && \
		gmake PREFIX=${PREFIX})

do-install:
.for p in bin2hex cpmrecv cpmsend mkdskimg ptp2bin
	${INSTALL_PROGRAM} ${WRKSRC}/cpmsim/srctools/${p} ${STAGEDIR}${PREFIX}/bin
.endfor
	${INSTALL_PROGRAM} ${WRKSRC}/cpmsim/cpmsim ${STAGEDIR}${PREFIX}/bin
	(cd ${WRKSRC}/cpmsim/disks/library && \
		${COPYTREE_SHARE} . ${STAGEDIR}${PREFIX}/share/z80pack/disks)
	${INSTALL_SCRIPT} ${FILESDIR}/runcpm ${STAGEDIR}${PREFIX}/bin
	(cd ${WRKSRC}/doc && \
		${COPYTREE_SHARE} . ${STAGEDIR}${PREFIX}/share/docs/z80pack)
	ln ${STAGEDIR}${PREFIX}/bin/runcpm ${STAGEDIR}${PREFIX}/bin/cpm13
	ln ${STAGEDIR}${PREFIX}/bin/runcpm ${STAGEDIR}${PREFIX}/bin/cpm14
	ln ${STAGEDIR}${PREFIX}/bin/runcpm ${STAGEDIR}${PREFIX}/bin/cpm1975
	ln ${STAGEDIR}${PREFIX}/bin/runcpm ${STAGEDIR}${PREFIX}/bin/cpm22
	ln ${STAGEDIR}${PREFIX}/bin/runcpm ${STAGEDIR}${PREFIX}/bin/cpm3
	ln ${STAGEDIR}${PREFIX}/bin/runcpm ${STAGEDIR}${PREFIX}/bin/cpm3-8080
	ln ${STAGEDIR}${PREFIX}/bin/runcpm ${STAGEDIR}${PREFIX}/bin/mpm

[FILE:2076:descriptions/desc.primary]
z80pack is a Zilog Z80 and Intel 8080 cross development package for UNIX 
and Windows systems distributed with all sources under a BSD style 
license. Included are:

* z80sim - Generic Z80/8080 CPU emulation with ICE like user interface, 
similar to hardware emulators from Zilog and Mostek and others
* z80asm - Z80 cross assembler to bootstrap a Z80 or 8080 system from an 
UNIX or Windows host
* cpmsim - Emulation of a complete system for running CP/M 1, CP/M 2, CPM 
3 and MP/M 2 (bootable OS disk images included)
* altairsim - Emulation of an Altair 8800 system with 8080 or Z80 CPU, 
64KB RAM, Cromemco Dazzler graphics, Tarbell SD disk controller with four 
8" SD disk drives, front panel, 88SIO-2 connected to the host terminal, 
line printer connected to host file
* imsaisim - Emulation of an IMSAI 8080 system with 8080 or Z80 CPU, 64KB 
RAM, Cromemco Dazzler graphics, IMSAI FIF disk controller with four 8" SD 
disk drives, front panel, SIO-2 connected to the host terminal, line 
printer connected to host file
* cromemcosim - Emulation of a Cromemco Z-1 with Z80 CPU, 7 x 64KB banked 
memory, Cromemco Dazzler graphics, Cromemco 4FDC/16FDC disk controller 
with four 5.25" and 8" disk drives with support for DS and DD, front 
panel, UART on FDC card connected to the host terminal, additional TU-ART 
for more serial terminals and parallel printers

The CPU emulations are generic and can be used to emulate any Z80 or 8080 
based system, the I/O hardware abstraction is well isolated. Originally 
the software was written for emulation of proprietary Z80 controllers, to 
support development and testing. In 1987 this emulated Z80 was the fastest 
Z80 on the planet, at least if run on a Nixdorf/Pyradmid TARGON/35 system. 
It also was used to preconfigure very large Z80 based host systems, 
because the emulation on the TARGON machine ran the configuration programs 
multiple times faster than any existing Z80 system at this time. 

NOTE: Currently only cpmsim is packaged, but other components could 
probably be added if anybody is interested in them.


[FILE:114:descriptions/desc.images]
This subpackage contains the disk images with pre-installed CP/M and 
programs that are distributed with z80pack.


[FILE:107:distinfo]
dfed4f0c7721fb16f077aa33001962dde91548ae7ed56b1667218ec4baf5a6fc     33151943 udo-munk-z80pack-1.38.tar.gz


[FILE:119:manifests/plist.primary]
bin/
 bin2hex
 cpm13
 cpm14
 cpm1975
 cpm22
 cpm3
 cpm3-8080
 cpmrecv
 cpmsend
 cpmsim
 mkdskimg
 mpm
 ptp2bin
 runcpm


[FILE:249:manifests/plist.docs]
share/docs/z80pack/
 CREDITS
 FrontPanel_User_Manual_2.0.pdf
 README-asm.txt
 README-cpm.txt
 README-frontpanel.txt
 README-ice.txt
 README-osx.txt
 README-pico.txt
 README-wsl.txt
 picoboard1.jpg
 picoboard2.jpg
 picoboard3.jpg
 z80-documented.pdf


[FILE:289:manifests/plist.images]
share/z80pack/disks/
 cpm13.dsk
 cpm14.dsk
 cpm1975.dsk
 cpm22-1.dsk
 cpm22-2.dsk
 cpm22-62khd.dsk
 cpm3-1.dsk
 cpm3-2.dsk
 cpm3-8080-1.dsk
 cpm3-8080-2.dsk
 hd-tools.dsk
 hd-toolsrc.dsk
 i8080tests.dsk
 mpm-1.dsk
 mpm-2.dsk
 ucsd-iv-1.dsk
 ucsd-iv-2.dsk
 ucsd-iv-interp.dsk
 z80tests.dsk


[FILE:158:files/messages-primary.ucl]
z80pack: {
  type: "install"
  message: <<EOM
Ravenports' z80pack comes with a friendly helper script called 'runcpm'. 
Just execute it to get started.
EOM
}


[FILE:5045:files/runcpm]
#!/bin/sh
# A trivial cpmsim start script for Ravenports.

PREFIX=__PREFIX__

help_function() {
    echo ""
    echo "runcpm: Running this script directly only displays this help text. Simply"
    echo "execute one its alternative names below to actually start the emulator:"
    echo ""
    echo "  cpm1975   - run CP/M 1975 (pre-1.3)"
    echo "  cpm13     - run CP/M 1.3"
    echo "  cpm14     - run CP/M 1.4"
    echo "  cpm22     - run CP/M 2.2"
    echo "  cpm3      - run CP/M 3.0"
    echo "  cpm3-8080 - run CP/M 3.0 for i8080"
    echo "  mpm       - run MP/M 2"
    echo ""
    echo "This script automatically manages disk images in ~/.cpmsim/disks. If you"
    echo 'want to "reset" a disk, just delete it from ~/.cpmsim/disks/library.'
    echo "Running the script the next time will restore a fresh image."
    echo ""
    echo "The script only shuffles around  drivea.dsk and driveb.dsk in"
    echo "~/.cpmsim/disks (depending on the OS you want to start). You can create"
    echo "your own drivec.dsk and drived.dsk (use the mkdskimg command for this)"
    echo "if you wish and they will be left alone."
    echo ""
    exit 0
}

copy_disk_image() {
    disk_file="$1"
    
    # Check if the disk file already exists in library
    if [ ! -e "$HOME/.cpmsim/disks/library/$disk_file" ]; then
        src_file="$PREFIX/share/z80pack/disks/$disk_file"
        dst_file="$HOME/.cpmsim/disks/library/$disk_file"
        
        if [ -e "$src_file" ]; then
            cp "$src_file" "$dst_file"
            if [ $? -ne 0 ]; then
                echo "Error: Failed to copy $src_file to $dst_file." >&2
                exit 1
            fi
        else
            echo "Error: Source file $src_file does not exist!" >&2
            echo "(Did you install the 'images' subpackage?)" >&2
            exit 1
        fi
    fi
}

cpm13() {
    copy_disk_image "cpm13.dsk"
    rm -f "$HOME/.cpmsim/disks"/drive[ab].dsk
    ln -sf "$HOME/.cpmsim/disks/library/cpm13.dsk" "$HOME/.cpmsim/disks/drivea.dsk"
    cpmsim -d "$HOME/.cpmsim/disks/" "$@"
    exit 0
}

cpm14() {
    copy_disk_image "cpm14.dsk"
    rm -f "$HOME/.cpmsim/disks"/drive[ab].dsk
    ln -sf "$HOME/.cpmsim/disks/library/cpm14.dsk" "$HOME/.cpmsim/disks/drivea.dsk"
    cpmsim -d "$HOME/.cpmsim/disks/" "$@"
    exit 0
}

cpm1975() {
    copy_disk_image "cpm1975.dsk"
    rm -f "$HOME/.cpmsim/disks"/drive[ab].dsk
    ln -sf "$HOME/.cpmsim/disks/library/cpm1975.dsk" "$HOME/.cpmsim/disks/drivea.dsk"
    cpmsim -d "$HOME/.cpmsim/disks/" "$@"
    exit 0
}

cpm22() {
    copy_disk_image "cpm22-1.dsk"
    copy_disk_image "cpm22-2.dsk"
    rm -f "$HOME/.cpmsim/disks"/drive[ab].dsk
    ln -sf "$HOME/.cpmsim/disks/library/cpm22-1.dsk" "$HOME/.cpmsim/disks/drivea.dsk"
    ln -sf "$HOME/.cpmsim/disks/library/cpm22-2.dsk" "$HOME/.cpmsim/disks/driveb.dsk"
    cpmsim -d "$HOME/.cpmsim/disks/" "$@"
    exit 0
}

cpm3() {
    copy_disk_image "cpm3-1.dsk"
    copy_disk_image "cpm3-2.dsk"
    rm -f "$HOME/.cpmsim/disks"/drive[ab].dsk
    ln -sf "$HOME/.cpmsim/disks/library/cpm3-1.dsk" "$HOME/.cpmsim/disks/drivea.dsk"
    ln -sf "$HOME/.cpmsim/disks/library/cpm3-2.dsk" "$HOME/.cpmsim/disks/driveb.dsk"
    cpmsim -d "$HOME/.cpmsim/disks/" "$@"
    exit 0
}

cpm3_8080() {
    copy_disk_image "cpm3-8080-1.dsk"
    copy_disk_image "cpm3-8080-2.dsk"
    rm -f "$HOME/.cpmsim/disks"/drive[ab].dsk
    ln -sf "$HOME/.cpmsim/disks/library/cpm3-8080-1.dsk" "$HOME/.cpmsim/disks/drivea.dsk"
    ln -sf "$HOME/.cpmsim/disks/library/cpm3-8080-2.dsk" "$HOME/.cpmsim/disks/driveb.dsk"
    cpmsim -d "$HOME/.cpmsim/disks/" "$@"
    exit 0
}

mpm() {
    copy_disk_image "mpm-1.dsk"
    copy_disk_image "mpm-2.dsk"
    rm -f "$HOME/.cpmsim/disks"/drive[ab].dsk
    ln -sf "$HOME/.cpmsim/disks/library/mpm-1.dsk" "$HOME/.cpmsim/disks/drivea.dsk"
    ln -sf "$HOME/.cpmsim/disks/library/mpm-2.dsk" "$HOME/.cpmsim/disks/driveb.dsk"
    cpmsim -d "$HOME/.cpmsim/disks/" "$@"
    exit 0
}

# Check if running as root
if [ "$(id -u)" = "0" ]; then
    echo "Error: This script must not be run as root." >&2
    exit 1
fi

# Check if HOME is set
if [ -z "$HOME" ]; then
    echo "Error: HOME environment variable is not set." >&2
    exit 1
fi

# Check if .cpmsim exists in home directory
if [ -e "$HOME/.cpmsim" ]; then
    # If it exists, check if it's a directory and writable
    if [ ! -d "$HOME/.cpmsim" ] || [ ! -w "$HOME/.cpmsim" ]; then
        echo "Error: $HOME/.cpmsim exists but is not a writable directory." >&2
        exit 1
    fi
else
    # Ensure .cpmsim/disks/library directory exists
    mkdir -p "$HOME/.cpmsim/disks/library"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to create $HOME/.cpmsim/disks/library directory." >&2
        exit 1
    fi
fi

MYNAME=`basename $0`

case $MYNAME in
    cpm13)
        cpm13
        ;;
    cpm14)
        cpm14
        ;;
    cpm1975)
        cpm1975
        ;;
    cpm22)
        cpm22
        ;;
    cpm3)
        cpm3
        ;;
    cpm3-8080)
        cpm3_8080
        ;;
    *)
        help_function
        ;;
esac

