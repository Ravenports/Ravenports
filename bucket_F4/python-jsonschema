# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-jsonschema
VERSION=		2.6.0
KEYWORDS=		python
VARIANTS=		py27 py35 py36
SDESC[py35]=		Implementation of JSON Schema validation f (PY 35)
SDESC[py36]=		Implementation of JSON Schema validation f (PY 36)
SDESC[py27]=		Implementation of JSON Schema validation f (PY 27)
HOMEPAGE=		https://github.com/Julian/jsonschema
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/j/jsonschema
DISTFILE[1]=		jsonschema-2.6.0.tar.gz:main
DF_INDEX=		1
SPKGS[py35]=		single
SPKGS[py36]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY35 PY36
OPTIONS_STANDARD=	none
VOPTS[py35]=		PY27=OFF PY35=ON PY36=OFF
VOPTS[py36]=		PY27=OFF PY35=OFF PY36=ON
VOPTS[py27]=		PY27=ON PY35=OFF PY36=OFF

DISTNAME=		jsonschema-2.6.0

GENERATED=		yes

[PY35].BUILDRUN_DEPENDS_ON=		python-vcversioner:single:py35
[PY35].USES_ON=				python:py35

[PY36].BUILDRUN_DEPENDS_ON=		python-vcversioner:single:py36
[PY36].USES_ON=				python:py36

[PY27].BUILDRUN_DEPENDS_ON=		python-vcversioner:single:py27
[PY27].USES_ON=				python:py27

[FILE:3221:descriptions/desc.single]
.. image:: https://img.shields.io/pypi/v/jsonschema.svg
    :target: https://pypi.python.org/pypi/jsonschema
.. image:: https://travis-ci.org/Julian/jsonschema.svg?branch=master
    :target: https://travis-ci.org/Julian/jsonschema
.. image:: https://img.shields.io/pypi/l/jsonschema.svg
    :target: https://pypi.python.org/pypi/jsonschema

==========
jsonschema
==========

``jsonschema`` is an implementation of `JSON Schema
<http://json-schema.org>`_
for Python (supporting 2.7+ including Python 3).

.. code-block:: python

    >>> from jsonschema import validate

    >>> # A sample schema, like what we'd get from json.load()
    >>> schema = {
    ...     "type" : "object",
    ...     "properties" : {
    ...         "price" : {"type" : "number"},
    ...         "name" : {"type" : "string"},
    ...     },
    ... }

    >>> # If no exception is raised by validate(), the instance is valid.
    >>> validate({"name" : "Eggs", "price" : 34.99}, schema)

    >>> validate(
    ...     {"name" : "Eggs", "price" : "Invalid"}, schema
    ... )                                   # doctest:
+IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    ValidationError: 'Invalid' is not of type 'number'

It can also be used from console:

.. code-block:: bash

    $ jsonschema -i sample.json sample.schema

Features
--------

* Full support for
  `Draft 3
<https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Dr
aft3Validator>`_
  **and** `Draft 4
<https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Dr
aft4Validator>`_
  of the schema.

* `Lazy validation
<https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IV
alidator.iter_errors>`_
  that can iteratively report *all* validation errors.

* Small and extensible

* `Programmatic querying
<https://python-jsonschema.readthedocs.io/en/latest/errors/#module-jsonsche
ma>`_
  of which properties or items failed validation.


Release Notes
-------------

Version 2.5.0 is mainly a performance release. The interface for
`RefResolver`
was extended to add methods that improve performance on CPython.

Support for custom `RefResolver` objects with the legacy interface should
*not*
be affected. If you notice something amiss please file an issue ticket.


Running the Test Suite
----------------------

If you have ``tox`` installed (perhaps via ``pip install tox`` or your
package manager), running``tox`` in the directory of your source checkout
will
run ``jsonschema``'s test suite on all of the versions of Python
``jsonschema``
supports. Note that you'll need to have all of those versions installed in
order to run the tests on each of them, otherwise ``tox`` will skip (and
fail)
the tests on that version.

Of course you're also free to just run the tests on a single version with
your
favorite test runner. The tests live in the ``jsonschema.tests`` package.


Community
---------

There's a `mailing list
<https://groups.google.com/forum/#!forum/jsonschema>`_
for this implementation on Google Groups.

Please join, and feel free to send questions there.


Contributing
------------

I'm Julian Berman.

``jsonschema`` is on `GitHub <http://github.com/Julian/jsonschema>`_.



[FILE:102:distinfo]
6ff5f3180870836cae40f06fa10419f557208175f13ad7bc26caa77beb1f6e02        53252 jsonschema-2.6.0.tar.gz

