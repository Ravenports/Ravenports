# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-jsonschema
VERSION=		4.15.0
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Alternate implementation of JSON Schema (3.10)
SDESC[py39]=		Alternate implementation of JSON Schema (3.9)
HOMEPAGE=		none
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/11/fe/20cbff273341943e6f9f1c5b5f7a09be9eb51cc7e169e53980292ce273a4
DISTFILE[1]=		jsonschema-4.15.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		jsonschema-4.15.0.dist-info

GENERATED=		yes

[PY39].RUN_DEPENDS_ON=			python-attrs:single:py39
					python-pyrsistent:single:py39
[PY39].USES_ON=				python:py39,wheel

[PY310].RUN_DEPENDS_ON=			python-attrs:single:py310
					python-pyrsistent:single:py310
[PY310].USES_ON=			python:py310,wheel

[FILE:2350:descriptions/desc.single]
==========
jsonschema
==========

|PyPI| |Pythons| |CI| |ReadTheDocs| |Precommit| |Zenodo|

jsonschema is an implementation of the [JSON Schema
] specification for Python.

.. code-block:: python

    >>> from jsonschema import validate

    >>> # A sample schema, like what we'd get from json.load()
    >>> schema = {
    ...     "type" : "object",
    ...     "properties" : {
    ...         "price" : {"type" : "number"},
    ...         "name" : {"type" : "string"},
    ...     },
    ... }

    >>> # If no exception is raised by validate(), the instance is valid.
    >>> validate(instance={"name" : "Eggs", "price" : 34.99},
schema=schema)

    >>> validate(
    ...     instance={"name" : "Eggs", "price" : "Invalid"}, schema=schema,
    ... )                                   # doctest:
+IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    ValidationError: 'Invalid' is not of type 'number'

It can also be used from console:

.. code-block:: bash

    $ jsonschema --instance sample.json sample.schema

Features
--------

* Partial support for
  `Draft 2020-12
<https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft202012Validator>`_
and
  `Draft 2019-09
<https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft201909Validator>`_,
  except for dynamicRef / recursiveRef and ``$vocabulary`` (in-progress).
  Full support for
  [Draft 7],
  [Draft 6],
  [Draft 4]
  and
  [Draft 3]

* [Lazy validation]
  that can iteratively report *all* validation errors.

* [Programmatic querying]
  of which properties or items failed validation.

Installation
------------

jsonschema is available on [PyPI]. You can install using [pip]:

.. code-block:: bash

    $ pip install jsonschema

Extras
======

Two extras are available when installing the package, both currently
related to format validation:

    * format
    * ``format-nongpl``

They can be used when installing in order to include additional
dependencies, e.g.:

.. code-block:: bash

    $ pip install jsonschema'[format]'

About
-----

I'm Julian Berman.

jsonschema is on [GitHub].

Get in touch, via GitHub or otherwise, if you've got something to
contribute,
it'd be most welcome!

You can also generally find me on Libera (nick: Julian) in various


[FILE:113:distinfo]
2df0fab225abb3b41967bb3a46fd37dc74b1536b5296d0b1c2078cd072adf0f7        82655 jsonschema-4.15.0-py3-none-any.whl

