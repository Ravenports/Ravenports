# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-jsonschema
VERSION=		3.0.1
KEYWORDS=		python
VARIANTS=		py27 py36 py37
SDESC[py36]=		Alternate implementation of JSON Schema (PY 36)
SDESC[py37]=		Alternate implementation of JSON Schema (PY 37)
SDESC[py27]=		Alternate implementation of JSON Schema (PY 27)
HOMEPAGE=		https://github.com/Julian/jsonschema
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/j/jsonschema
DISTFILE[1]=		jsonschema-3.0.1.tar.gz:main
DF_INDEX=		1
SPKGS[py36]=		single
SPKGS[py37]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY36 PY37
OPTIONS_STANDARD=	none
VOPTS[py36]=		PY27=OFF PY36=ON PY37=OFF
VOPTS[py37]=		PY27=OFF PY36=OFF PY37=ON
VOPTS[py27]=		PY27=ON PY36=OFF PY37=OFF

BUILDRUN_DEPENDS=	python-setuptools_scm:single:python_used

DISTNAME=		jsonschema-3.0.1

GENERATED=		yes

[PY36].USES_ON=				python:py36

[PY37].USES_ON=				python:py37

[PY27].USES_ON=				python:py27

[FILE:3324:descriptions/desc.single]
==========
jsonschema
==========

|PyPI| |Pythons| |Travis| |AppVeyor|

.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg
   :alt: PyPI version
   :target: https://pypi.org/project/jsonschema/

.. |Pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg
   :alt: Supported Python versions
   :target: https://pypi.org/project/jsonschema/

.. |Travis| image::
https://travis-ci.org/Julian/jsonschema.svg?branch=master
   :alt: Travis build status
   :target: https://travis-ci.org/Julian/jsonschema

.. |AppVeyor| image::
https://ci.appveyor.com/api/projects/status/adtt0aiaihy6muyn?svg=true
   :alt: AppVeyor build status
   :target: https://ci.appveyor.com/project/Julian/jsonschema


``jsonschema`` is an implementation of `JSON Schema
<https://json-schema.org>`_
for Python (supporting 2.7+ including Python 3).

.. code-block:: python

    >>> from jsonschema import validate

    >>> # A sample schema, like what we'd get from json.load()
    >>> schema = {
    ...     "type" : "object",
    ...     "properties" : {
    ...         "price" : {"type" : "number"},
    ...         "name" : {"type" : "string"},
    ...     },
    ... }

    >>> # If no exception is raised by validate(), the instance is valid.
    >>> validate(instance={"name" : "Eggs", "price" : 34.99},
schema=schema)

    >>> validate(
    ...     instance={"name" : "Eggs", "price" : "Invalid"}, schema=schema,
    ... )                                   # doctest:
+IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    ValidationError: 'Invalid' is not of type 'number'

It can also be used from console:

.. code-block:: bash

    $ jsonschema -i sample.json sample.schema

Features
--------

* Full support for
  `Draft 7
<https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Dr
aft7Validator>`_,
  `Draft 6
<https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Dr
aft6Validator>`_,
  `Draft 4
<https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Dr
aft4Validator>`_
  and
  `Draft 3
<https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Dr
aft3Validator>`_

* `Lazy validation
<https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IV
alidator.iter_errors>`_
  that can iteratively report *all* validation errors.

* `Programmatic querying
<https://python-jsonschema.readthedocs.io/en/latest/errors/#module-jsonsche
ma>`_
  of which properties or items failed validation.


Installation
------------

``jsonschema`` is available on `PyPI
<https://pypi.org/project/jsonschema/>`_. You can install using `pip
<https://pip.pypa.io/en/stable/>`_:

.. code-block:: bash

    $ pip install jsonschema


Release Notes
-------------

Version 3.0 brings support for Draft 7 (and 6). The interface for
redefining
types has also been majorly overhauled to support easier redefinition of
the
types a Validator will accept or allow.

jsonschema is also now tested under Windows via AppVeyor.

Thanks to all who contributed pull requests along the way.


Running the Test Suite
----------------------

If you have ``tox`` installed (perhaps via ``pip install tox`` or your
package manager), running ``tox`` in the directory of your source
checkout will run ``jsonschema``'s test suite on all of the versions


[FILE:102:distinfo]
0c0a81564f181de3212efa2d17de1910f8732fa1b71c42266d983cd74304e20d       120834 jsonschema-3.0.1.tar.gz

