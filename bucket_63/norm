# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		norm
VERSION=		1.5.7
KEYWORDS=		net
VARIANTS=		standard
SDESC[standard]=	NACK-Oriented Reliable Multicast (NORM)
HOMEPAGE=		https://www.nrl.navy.mil/itd/ncs/products/norm
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://downloads.pf.itd.nrl.navy.mil/norm/
			https://downloads.pf.itd.nrl.navy.mil/norm/archive/
DISTFILE[1]=		src-norm-1.5.7.tgz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			libtool c++:single python:py27,build

FPC_EQUIVALENT=		net/norm

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--prefix="{{PREFIX}}"
			-j{{MAKE_JOBS_NUMBER}}

BUILD_TARGET=		build
DESTDIRNAME=		--destdir
SINGLE_JOB=		yes

SOVERSION=		1.0.0

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/normApi.h \
		${STAGEDIR}${PREFIX}/include/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libnorm.so

[FILE:1185:descriptions/desc.single]
This a port of NACK-Oriented Reliable Multicast (N.O.R.M.), as specified 
in RFC5740.

The NORM protocol is designed to provide end-to-end reliable transport of 
bulk data objects or streams over generic IP multicast routing and 
forwarding services. NORM uses a selective, negative acknowledgement 
(NACK) mechanism for transport reliability and offers additional protocol 
mechanisms to conduct reliable multicast sessions with limited "a priori" 
coordination among senders and receivers. A congestion control scheme is 
specified to allow the NORM protocol fairly share available network 
bandwidth with other transport protocols such as Transmission Control 
Protocol (TCP). It is capable of operating with both reciprocal multicast 
routing among senders and receivers and with asymmetric connectivity 
(possibly a unicast return path) from the senders to receivers. The 
protocol offers a number of features to allow different types of 
applications or possibly other higher level transport protocols to utilize 
its service in different ways. The protocol leverages the use of FEC-based 
repair and other IETF reliable multicast transport (RMT) building blocks 
in its design.


[FILE:97:distinfo]
dd41d0dfd3720ba19e09c23f07a36ce7f32d2e3e2afe447a436a24de9e59d8fd      2568546 src-norm-1.5.7.tgz


[FILE:85:manifests/plist.single]
include/normApi.h
lib/
 libnorm.so
 libnorm.so.%%SOMAJOR%%
 libnorm.so.%%SOVERSION%%


[FILE:720:patches/patch-protolib_include_protoSocket.h]
--- protolib/include/protoSocket.h.orig	2018-04-30 17:33:49 UTC
+++ protolib/include/protoSocket.h
@@ -106,7 +106,7 @@ class ProtoSocket : public ProtoNotify
 // On Mac OSX, only version 10.7 and later support IGMPv3 
 // and the "MCAST_JOIN_GROUP" macro definition is a "tell" for this
 // (we _reallly_ need to go to a more sophisticated build system!)
-#if (!defined(WIN32) && !defined(ANDROID) && (!defined(MACOSX))) || (defined(MACOSX) && defined(MCAST_JOIN_GROUP))
+#if (!defined(WIN32) && !defined(ANDROID) && !defined(__DragonFly__) &&(!defined(MACOSX))) || (defined(MACOSX) && defined(MCAST_JOIN_GROUP)) 
 #define _PROTOSOCKET_IGMPV3_SSM
 #endif // !WIN32 && !ANDROID && (!MACOSX || MCAST_JOIN_GROUP)
         


[FILE:444:patches/patch-protolib_setup.py]
--- protolib/setup.py.orig	2014-03-01 16:17:04 UTC
+++ protolib/setup.py
@@ -23,7 +23,7 @@ system = platform.system().lower()
 sys_macros = [('HAVE_ASSERT',None), ('HAVE_IPV6',None), ('PROTO_DEBUG', None)]
 sys_libs = ['protokit']
 
-if system in ('linux', 'darwin', 'freebsd'):
+if system in ('linux', 'darwin', 'freebsd', 'dragonfly'):
     sys_macros.append(('UNIX',None))
 elif system in ('windows'):
     sys_macros.append(('WIN32',None))


[FILE:1728:patches/patch-protolib_wscript]
--- protolib/wscript.orig	2018-06-24 23:17:27 UTC
+++ protolib/wscript
@@ -57,7 +57,7 @@ def configure(ctx):
     # Use this USE variable to add flags to protolib's compilation
     ctx.env.USE_BUILD_PROTOLIB += ['BUILD_PROTOLIB']
 
-    if system in ('linux', 'darwin', 'freebsd', 'gnu', 'gnu/kfreebsd'):
+    if system in ('linux', 'darwin', 'dragonfly', 'freebsd', 'gnu', 'gnu/kfreebsd'):
         ctx.env.DEFINES_BUILD_PROTOLIB += ['UNIX', 'HAVE_DIRFD', 'HAVE_IPV6',
                 'HAVE_ASSERT', 'HAVE_GETLOGIN']
 
@@ -85,7 +85,7 @@ def configure(ctx):
         ctx.check_cxx(lib='resolv')
         ctx.env.USE_BUILD_PROTOLIB += ['RESOLV']
 
-    if system in ('freebsd', 'gnu/kfreebsd'):
+    if system in ('dragonfly', 'freebsd', 'gnu/kfreebsd'):
         ctx.env.DEFINES_BUILD_PROTOLIB += ['HAVE_FLOCK', '_FILE_OFFSET_BITS=64', 
                                            'HAVE_PSELECT', 'USE_SELECT']
 
@@ -184,7 +184,7 @@ def build(ctx):
         install_path = '${LIBDIR}' if ctx.options.enable_static_library else '',
     )
 
-    if system in ('linux', 'darwin', 'freebsd', 'gnu', 'gnu/kfreebsd'):
+    if system in ('linux', 'darwin', 'dragonfly', 'freebsd', 'gnu', 'gnu/kfreebsd'):
         protolib.source.extend(['src/unix/{0}.cpp'.format(x) for x in [
             'unixNet',
             'unixSerial',
@@ -206,7 +206,7 @@ def build(ctx):
             protolib.source.append('src/linux/linuxDetour.cpp')
             protolib.use.append('NETFILTER_QUEUE')
 
-    if system in ('darwin', 'freebsd', 'gnu/kfreebsd'):
+    if system in ('darwin', 'dragonfly', 'freebsd', 'gnu/kfreebsd'):
         protolib.source.extend(['src/bsd/{0}.cpp'.format(x) for x in [
             'bsdDetour',
             'bsdNet',


[FILE:460:patches/patch-wscript]
--- wscript.orig	2018-06-18 03:16:11 UTC
+++ wscript
@@ -58,7 +58,7 @@ def configure(ctx):
     # Use this USE variable to add flags to NORM's compilation
     ctx.env.USE_BUILD_NORM += ['BUILD_NORM', 'protolib']
 
-    if system in ('linux', 'darwin', 'freebsd', 'gnu', 'gnu/kfreebsd'):
+    if system in ('linux', 'darwin', 'dragonfly', 'freebsd', 'gnu', 'gnu/kfreebsd'):
         ctx.env.DEFINES_BUILD_NORM += ['ECN_SUPPORT']
 
     if system == 'windows':


[FILE:164:files/special.mk]
# Emulate USES=waf
MAKE_CMD=	${LOCALBASE}/bin/python2.7 ./waf
CONFIGURE_CMD=	${LOCALBASE}/bin/python2.7 ./waf configure
MAKEFILE=
MAKE_FLAGS=
MAKE_ARGS+=	--verbose

