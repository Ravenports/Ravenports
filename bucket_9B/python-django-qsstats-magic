# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-django-qsstats-magic
VERSION=		1.0.0
KEYWORDS=		python devel
VARIANTS=		py35 py36
SDESC[py35]=		Django generator of aggregate statistics (PY 35)
SDESC[py36]=		Django generator of aggregate statistics (PY 36)
HOMEPAGE=		https://bitbucket.org/kmike/django-qsstats-magic/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/d/django-qsstats-magic
DISTFILE[1]=		django-qsstats-magic-1.0.0.tar.gz:main
DF_INDEX=		1
SPKGS[py35]=		single
SPKGS[py36]=		single

OPTIONS_AVAILABLE=	PY35 PY36
OPTIONS_STANDARD=	none
VOPTS[py35]=		PY35=ON PY36=OFF
VOPTS[py36]=		PY35=OFF PY36=ON

DISTNAME=		django-qsstats-magic-1.0.0

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"UNKNOWN"
LICENSE_SCHEME=		solo
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE

GENERATED=		yes

[PY35].USES_ON=				python:py35

[PY36].USES_ON=				python:py36

[FILE:2732:descriptions/desc.single]
====================================================
django-qsstats-magic: QuerySet statistics for Django
====================================================

The goal of django-qsstats is to be a microframework to make
repetitive tasks such as generating aggregate statistics of querysets
over time easier.  It's probably overkill for the task at hand, but yay
microframeworks!

django-qsstats-magic is a refactoring of django-qsstats app with slightly
changed API, simplified internals and faster time_series implementation.


Requirements
============

* `python-dateutil <http://labix.org/python-dateutil>`_ > 1.4, < 2.0
* `django <http://www.djangoproject.com/>`_ 1.8+

License
=======

Liensed under a BSD-style license.

Examples
========

How many users signed up today? this month? this year?
------------------------------------------------------

::

    from django.contrib.auth.models import User
    import qsstats

    qs = User.objects.all()
    qss = qsstats.QuerySetStats(qs, 'date_joined')

    print '%s new accounts today.' % qss.this_day()
    print '%s new accounts this week.' % qss.this_week()
    print '%s new accounts this month.' % qss.this_month()
    print '%s new accounts this year.' % qss.this_year()
    print '%s new accounts until now.' % qss.until_now()

This might print something like::

    5 new accounts today.
    11 new accounts this week.
    27 new accounts this month.
    377 new accounts this year.
    409 new accounts until now.

Aggregating time-series data suitable for graphing
--------------------------------------------------

::

    from django.contrib.auth.models import User
    import datetime, qsstats

    qs = User.objects.all()
    qss = qsstats.QuerySetStats(qs, 'date_joined')

    today = datetime.date.today()
    seven_days_ago = today - datetime.timedelta(days=7)

    time_series = qss.time_series(seven_days_ago, today)
    print 'New users in the last 7 days: %s' % [t[1] for t in time_series]

This might print something like::

    New users in the last 7 days: [3, 10, 7, 4, 12, 9, 11]


Please see qsstats/tests.py for similar usage examples.

API
===

The ``QuerySetStats`` object
----------------------------

In order to provide maximum flexibility, the ``QuerySetStats`` object
can be instantiated with as little or as much information as you like.
All keword arguments are optional but ``DateFieldMissing`` and
``QuerySetMissing`` will be raised if you try to use ``QuerySetStats``
without providing enough information.

``qs``
    The queryset to operate on.

    Default: ``None``

``date_field``
    The date field within the queryset to use.

    Default: ``None``

``aggregate``
    The django aggregation instance. Can be set also set when


[FILE:112:distinfo]
b26cbd320b6303778d95ed333d3f18bc24dacd9d97a27e20973d038b5b565805         9090 django-qsstats-magic-1.0.0.tar.gz

