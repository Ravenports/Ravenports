# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libuv
VERSION=		1.11.0
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Multi-platform support for asynchronous I/O
HOMEPAGE=		https://github.com/libuv/libuv
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/libuv:libuv:v1.11.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			autoreconf libtool pkgconfig

LICENSE=		MIT:single
LICENSE_SCHEME=		solo
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE

MUST_CONFIGURE=		gnu

INSTALL_TARGET=		install-strip

pre-configure:
	${ECHO_CMD} "m4_define([UV_EXTRA_AUTOMAKE_FLAGS], [ serial-tests])" \
		> ${WRKSRC}/m4/libuv-extra-automake-flags.m4

[FILE:463:descriptions/desc.single]
libuv is a multi-platform support library with a focus on asynchronous I/O.

Feature highlights:
 + Full-featured event loop backed by epoll, kqueue, IOCP, event ports.
 + Asynchronous TCP and UDP sockets
 + Asynchronous DNS resolution
 + Asynchronous file and file system operations
 + File system events
 + ANSI escape code controlled TTY
 + Child processes
 + Thread pool
 + Signal handling
 + High resolution clock
 + Threading and synchronization primitives


[FILE:104:distinfo]
6ec7eec6ecc24b1a8ffedebedb2fe9313fffb5410de89aaf784dd01080411c7a      1083067 libuv-libuv-1.11.0.tar.gz


[FILE:154:manifests/plist.single]
include/
 uv-bsd.h
 uv-errno.h
 uv-threadpool.h
 uv-unix.h
 uv-version.h
 uv.h
lib/
 libuv.a
 libuv.so
 libuv.so.1
 libuv.so.1.0.0
lib/pkgconfig/libuv.pc


[FILE:725:dragonfly/patch-src_unix_freebsd.c]
--- src/unix/freebsd.c.orig	2016-11-16 20:03:50.000000000 +0200
+++ src/unix/freebsd.c
@@ -75,7 +75,8 @@ uint64_t uv__hrtime(uv_clocktype_t type)
 
 
 #ifdef __DragonFly__
-int uv_exepath(char* buffer, size_t* size) {
+/* deprecated long ago, use KERN_PROC_PATHNAME sysctl */
+int uv_exepath_procfs(char* buffer, size_t* size) {
   char abspath[PATH_MAX * 2 + 1];
   ssize_t abspath_size;
 
@@ -97,7 +98,8 @@ int uv_exepath(char* buffer, size_t* siz
 
   return 0;
 }
-#else
+#endif
+
 int uv_exepath(char* buffer, size_t* size) {
   char abspath[PATH_MAX * 2 + 1];
   int mib[4];
@@ -127,7 +129,6 @@ int uv_exepath(char* buffer, size_t* siz
 
   return 0;
 }
-#endif
 
 uint64_t uv_get_free_memory(void) {
   int freecount;

