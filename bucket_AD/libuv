# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libuv
VERSION=		1.51.0
KEYWORDS=		devel
VARIANTS=		std
SDESC[std]=		Multi-platform support for asynchronous I/O
HOMEPAGE=		https://github.com/libuv/libuv
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/libuv:libuv:v1.51.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			autoreconf libtool pkgconfig solaris-funcs cpe gmake

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

CPE_VENDOR=		libuv_project
FPC_EQUIVALENT=		devel/libuv
SOL_FUNCTIONS=		mkdtemp:src/unix/fs.c
			strnlen:src/unix/getaddrinfo.c

MUST_CONFIGURE=		gnu

INSTALL_TARGET=		install-strip
SOVERSION=		1.0.0

VAR_OPSYS[sunos]=	CFLAGS=-DSUNOS_NO_IFADDRS

pre-configure:
	${ECHO_CMD} "m4_define([UV_EXTRA_AUTOMAKE_FLAGS], [ serial-tests])" \
		> ${WRKSRC}/m4/libuv-extra-automake-flags.m4

[FILE:463:descriptions/desc.primary]
libuv is a multi-platform support library with a focus on asynchronous I/O.

Feature highlights:
 + Full-featured event loop backed by epoll, kqueue, IOCP, event ports.
 + Asynchronous TCP and UDP sockets
 + Asynchronous DNS resolution
 + Asynchronous file and file system operations
 + File system events
 + ANSI escape code controlled TTY
 + Child processes
 + Thread pool
 + Signal handling
 + High resolution clock
 + Threading and synchronization primitives


[FILE:104:distinfo]
27e55cf7083913bfb6826ca78cde9de7647cded648d35f24163f2d31bb9f51cd      1352232 libuv-libuv-1.51.0.tar.gz


[FILE:51:manifests/plist.primary]
lib/
 libuv.so.%%SOMAJOR%%
 libuv.so.%%SOVERSION%%


[FILE:352:manifests/plist.dev]
%%ONLY-DARWIN%%include/uv/darwin.h
%%ONLY-DRAGONFLY%%include/uv/bsd.h
%%ONLY-FREEBSD%%include/uv/bsd.h
%%ONLY-LINUX%%include/uv/linux.h
%%ONLY-MIDNIGHTBSD%%include/uv/bsd.h
%%ONLY-NETBSD%%include/uv/bsd.h
%%ONLY-SUNOS%%include/uv/sunos.h
include/uv.h
include/uv/
 errno.h
 threadpool.h
 unix.h
 version.h
lib/
 libuv.a
 libuv.so
lib/pkgconfig/libuv.pc


[FILE:620:patches/patch-Makefile.am]
--- Makefile.am.orig	2025-01-15 18:05:29 UTC
+++ Makefile.am
@@ -461,6 +461,17 @@ libuv_la_SOURCES += src/unix/bsd-ifaddrs
 test_run_tests_LDFLAGS += -lutil
 endif
 
+if MIDNIGHT 
+uvinclude_HEADERS += include/uv/bsd.h
+libuv_la_SOURCES += src/unix/bsd-ifaddrs.c \
+                    src/unix/bsd-proctitle.c \
+                    src/unix/freebsd.c \
+                    src/unix/kqueue.c \
+                    src/unix/posix-hrtime.c \
+                    src/unix/random-getrandom.c
+test_run_tests_LDFLAGS += -lutil
+endif
+
 if HAIKU
 uvinclude_HEADERS += include/uv/posix.h
 libuv_la_CFLAGS += -D_BSD_SOURCE


[FILE:1102:patches/patch-configure.ac]
Dragonfly is getting counted as FreeBSD too so we're linking statically twice.
Just disable dragonfly and use the freebsd config for now.
--- configure.ac.orig	2025-01-15 18:05:29 UTC
+++ configure.ac
@@ -61,8 +61,9 @@ AM_CONDITIONAL([AIX],      [AS_CASE([$ho
 AM_CONDITIONAL([ANDROID],  [AS_CASE([$host_os],[linux-android*],[true], [false])])
 AM_CONDITIONAL([CYGWIN],   [AS_CASE([$host_os],[cygwin*],       [true], [false])])
 AM_CONDITIONAL([DARWIN],   [AS_CASE([$host_os],[darwin*],       [true], [false])])
-AM_CONDITIONAL([DRAGONFLY],[AS_CASE([$host_os],[dragonfly*],    [true], [false])])
+AM_CONDITIONAL([DRAGONFLY],[AS_CASE([$host_os],[xxdragonfly*],    [true], [false])])
 AM_CONDITIONAL([FREEBSD],  [AS_CASE([$host_os],[freebsd*],      [true], [false])])
+AM_CONDITIONAL([MIDNIGHT], [AS_CASE([$host_os],[midnightbsd*],  [true], [false])])
 AM_CONDITIONAL([HAIKU],    [AS_CASE([$host_os],[haiku],         [true], [false])])
 AM_CONDITIONAL([HURD],     [AS_CASE([$host_os],[gnu*],          [true], [false])])
 AM_CONDITIONAL([LINUX],    [AS_CASE([$host_os],[linux*],        [true], [false])])

