# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libuv
VERSION=		1.42.0
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Multi-platform support for asynchronous I/O
HOMEPAGE=		https://github.com/libuv/libuv
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/libuv:libuv:v1.42.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			autoreconf libtool pkgconfig solaris-funcs cpe

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

CPE_VENDOR=		libuv_project
FPC_EQUIVALENT=		devel/libuv
SOL_FUNCTIONS=		mkdtemp:src/unix/fs.c
			strnlen:src/unix/getaddrinfo.c

MUST_CONFIGURE=		gnu

INSTALL_TARGET=		install-strip
SOVERSION=		1.0.0

VAR_OPSYS[sunos]=	CFLAGS=-DSUNOS_NO_IFADDRS

pre-configure:
	${ECHO_CMD} "m4_define([UV_EXTRA_AUTOMAKE_FLAGS], [ serial-tests])" \
		> ${WRKSRC}/m4/libuv-extra-automake-flags.m4

[FILE:463:descriptions/desc.single]
libuv is a multi-platform support library with a focus on asynchronous I/O.

Feature highlights:
 + Full-featured event loop backed by epoll, kqueue, IOCP, event ports.
 + Asynchronous TCP and UDP sockets
 + Asynchronous DNS resolution
 + Asynchronous file and file system operations
 + File system events
 + ANSI escape code controlled TTY
 + Child processes
 + Thread pool
 + Signal handling
 + High resolution clock
 + Threading and synchronization primitives


[FILE:104:distinfo]
371e5419708f6aaeb8656671f89400b92a9bba6443369af1bb70bcd6e4b3c764      1293478 libuv-libuv-1.42.0.tar.gz


[FILE:329:manifests/plist.single]
%%ONLY-DRAGONFLY%%include/uv/bsd.h
%%ONLY-FREEBSD%%include/uv/bsd.h
%%ONLY-LINUX%%include/uv/linux.h
%%ONLY-SUNOS%%include/uv/sunos.h
%%ONLY-DARWIN%%include/uv/darwin.h
include/uv.h
include/uv/
 errno.h
 threadpool.h
 unix.h
 version.h
lib/
 libuv.a
 libuv.so
 libuv.so.%%SOMAJOR%%
 libuv.so.%%SOVERSION%%
lib/pkgconfig/libuv.pc


[FILE:1425:patches/patch-src_unix_fs.c]
--- src/unix/fs.c.orig	2021-07-07 16:45:36 UTC
+++ src/unix/fs.c
@@ -1028,13 +1028,13 @@ ok:
 static ssize_t uv__fs_utime(uv_fs_t* req) {
 #if defined(__linux__)                                                         \
     || defined(_AIX71)                                                         \
-    || defined(__sun)                                                          \
     || defined(__HAIKU__)
   struct timespec ts[2];
   ts[0] = uv__fs_to_timespec(req->atime);
   ts[1] = uv__fs_to_timespec(req->mtime);
   return utimensat(AT_FDCWD, req->path, ts, 0);
 #elif defined(__APPLE__)                                                      \
+    || defined(__sun)                                                         \
     || defined(__DragonFly__)                                                 \
     || defined(__FreeBSD__)                                                   \
     || defined(__FreeBSD_kernel__)                                            \
@@ -1068,7 +1068,6 @@ static ssize_t uv__fs_utime(uv_fs_t* req
 static ssize_t uv__fs_lutime(uv_fs_t* req) {
 #if defined(__linux__)            ||                                           \
     defined(_AIX71)               ||                                           \
-    defined(__sun)                ||                                           \
     defined(__HAIKU__)
   struct timespec ts[2];
   ts[0] = uv__fs_to_timespec(req->atime);

