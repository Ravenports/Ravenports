# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		shiboken6
VERSION=		6.9.1
KEYWORDS=		devel python
VARIANTS=		std
SDESC[std]=		Python binding generator for C++ libraries
HOMEPAGE=		https://doc.qt.io/qtforpython-6/shiboken6/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://download.qt.io/official_releases/QtForPython/pyside6/PySide6-6.9.1-src/
DISTFILE[1]=		pyside-setup-everywhere-src-6.9.1.tar.xz:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		qt6-qtbase:dev:std
			llvm:dev:std
			llvm:tools:std
BUILDRUN_DEPENDS=	qt6-qtbase:primary:std
			clang:compiler:std
			python-numpy:single:python_used

USES=			clang execinfo python cmake zlib:build shebangfix
GNOME_COMPONENTS=	libxml2 libxslt

DISTNAME=		pyside-setup-everywhere-src-6.9.1/sources/shiboken6

FPC_EQUIVALENT=		devel/shiboken6
SHEBANG_FILES=		shiboken_tool.py

CONFIGURE_ENV=		LLVM_INSTALL_DIR={{LOCALBASE}}

SOVERSION=		6.9.1
PLIST_SUB=		SOMAXMIN=6.9

CXXFLAGS=		-Wno-unused-lambda-capture
LDFLAGS=		-L{{LOCALBASE}}/lib
			-Wl,-rpath,{{LOCALBASE}/lib
CMAKE_ARGS=		-DCMAKE_CXX_STANDARD_LIBRARIES=-lexecinfo
			-DUSE_PYTHON_VERSION={{PYTHON_VER}}
			-DBUILD_TESTS:BOOL=false
			-DCMAKE_PREFIX_PATH:PATH={{LOCALBASE}}/lib/qt6/cmake
			-DClang_DIR:PATH="{{LOCALBASE}}/lib/cmake/clang"
			-DLLVM_DIR:PATH="{{LOCALBASE}}/lib/cmake/llvm"
			-DNUMPY_INCLUDE_DIR:PATH="{{PYTHON_SITELIBDIR}}/numpy/_core/include"

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/shiboken6
	# create python cache files
	(cd ${STAGEDIR} && python -m compileall -f -d / . ||:)

[FILE:479:descriptions/desc.primary]
Shiboken is a fundamental piece on the Qt for Python project that serves
two purposes:

Generator: Extract information from C or C++ headers and generate CPython
code that allow to bring C or C++ projects to Python. This process uses a
library called ApiExtractor which internally uses Clang.

Module: An utility Python module that exposed new Python types, functions
to handle pointers, among other things, that is written in CPython and can
use independently of the generator.


[FILE:119:distinfo]
04c712c5b9234add0d9b5aa3c01a0caede64a55b496127751f5d52a230cff748     16669448 pyside-setup-everywhere-src-6.9.1.tar.xz


[FILE:845:manifests/plist.primary]
%%PYTHON_SITELIBDIR%%/shiboken6/
 Shiboken.abi%%PYTHON_MAJOR_VER%%.so
 Shiboken.pyi
 __init__.py
 _config.py
 _git_shiboken_module_version.py
 py.typed
%%PYTHON_SITELIBDIR%%/shiboken6/__pycache__/
 __init__.cpython-%%PYTHON_SUFFIX%%.pyc
 _config.cpython-%%PYTHON_SUFFIX%%.pyc
 _git_shiboken_module_version.cpython-%%PYTHON_SUFFIX%%.pyc
%%PYTHON_SITELIBDIR%%/shiboken6_generator/
 __init__.py
 _config.py
 _git_shiboken_generator_version.py
%%PYTHON_SITELIBDIR%%/shiboken6_generator/__pycache__/
 __init__.cpython-%%PYTHON_SUFFIX%%.pyc
 _config.cpython-%%PYTHON_SUFFIX%%.pyc
 _git_shiboken_generator_version.cpython-%%PYTHON_SUFFIX%%.pyc
bin/
 shiboken6
 shiboken_tool.py
bin/__pycache__/shiboken_tool.cpython-%%PYTHON_SUFFIX%%.pyc
lib/
 libshiboken6.abi%%PYTHON_MAJOR_VER%%.so.%%SOMAXMIN%%
 libshiboken6.abi%%PYTHON_MAJOR_VER%%.so.%%SOVERSION%%


[FILE:1034:manifests/plist.dev]
include/shiboken6/
 autodecref.h
 basewrapper.h
 basewrapper_p.h
 bindingmanager.h
 bufferprocs_py37.h
 gilstate.h
 helper.h
 pep384ext.h
 pep384impl.h
 pyobjectholder.h
 sbkarrayconverter.h
 sbkbindingutils.h
 sbkcontainer.h
 sbkconverter.h
 sbkcppstring.h
 sbkcpptonumpy.h
 sbkenum.h
 sbkerrors.h
 sbkfeature_base.h
 sbkmodule.h
 sbknumpycheck.h
 sbknumpyview.h
 sbkpython.h
 sbksmartpointer.h
 sbkstaticstrings.h
 sbkstring.h
 sbktypefactory.h
 sbkversion.h
 sbkwindows.h
 shiboken.h
 shibokenbuffer.h
 shibokenmacros.h
 signature.h
 signature_p.h
 threadstatesaver.h
 voidptr.h
lib/libshiboken6.abi%%PYTHON_MAJOR_VER%%.so
lib/cmake/Shiboken6/
 Shiboken6Config.abi%%PYTHON_MAJOR_VER%%.cmake
 Shiboken6Config.cmake
 Shiboken6ConfigVersion.cmake
 Shiboken6Targets-%%CMAKE_BUILD_TYPE%%.cmake
 Shiboken6Targets.cmake
 ShibokenHelpers.cmake
lib/cmake/Shiboken6Tools/
 Shiboken6ToolsConfig.cmake
 Shiboken6ToolsConfigVersion.cmake
 Shiboken6ToolsTargets-%%CMAKE_BUILD_TYPE%%.cmake
 Shiboken6ToolsTargets.cmake
lib/pkgconfig/shiboken6.pc


[FILE:840:patches/patch-cmake_ShibokenHelpers.cmake]
--- cmake/ShibokenHelpers.cmake.orig	2025-05-30 11:57:51 UTC
+++ cmake/ShibokenHelpers.cmake
@@ -55,7 +55,7 @@ if(MSVC)
 else()
     set (gcc_warnings_options "-Wall -Wextra -Wno-strict-aliasing")
     # Clang has -Wno-bad-function-cast, but does not need it.
-    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL  "GNU")
+    if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU|Clang")
         set (gcc_warnings_options "${gcc_warnings_options} -Wno-cast-function-type")
     endif()
     if(CMAKE_HOST_UNIX AND NOT CYGWIN)
@@ -791,7 +791,7 @@ export DYLD_FRAMEWORK_PATH=${path_dirs_n
 $@")
     else()
         string(REPLACE ";" ":" path_dirs_native "${path_dirs_native}")
-        file(WRITE "${wrapper_path}" "#!/bin/bash
+        file(WRITE "${wrapper_path}" "#!/bin/sh
 export LD_LIBRARY_PATH=${path_dirs_native}:$LD_LIBRARY_PATH
 $@")
     endif()


[FILE:646:patches/patch-data_shiboken6.pc.in]
--- data/shiboken6.pc.in.orig	2025-05-30 11:57:51 UTC
+++ data/shiboken6.pc.in
@@ -8,5 +8,5 @@ python_include_dir=@Python_INCLUDE_DIRS@
 Name: shiboken6
 Description: Support library for Python bindings created with the Shiboken6 generator.
 Version: @shiboken6_VERSION@
-Libs: @SHIBOKEN_PYTHON_LIBRARIES@ -L${libdir} -lshiboken6@shiboken6_SUFFIX@@PYTHON_SHARED_LIBRARY_SUFFIX@@LIBRARY_OUTPUT_SUFFIX@
+Libs: @SHIBOKEN_PYTHON_LIBRARIES@ -L${libdir} -lshiboken6@shiboken6_SUFFIX@@PYTHON_SHARED_LIBRARY_SUFFIX@@LIBRARY_OUTPUT_SUFFIX@ -lexecinfo
 Cflags: -I@Python_INCLUDE_DIRS@ -I${includedir}/@shiboken6_SUFFIX@@SBK_PKG_CONFIG_PY_DEBUG_DEFINITION@


[FILE:784:patches/patch-libshiboken_helper.cpp]
--- libshiboken/helper.cpp.orig	2025-05-30 11:57:51 UTC
+++ libshiboken/helper.cpp
@@ -22,6 +22,14 @@
 #  include <pthread.h>
 #endif
 
+#if defined(__DragonFly__)
+#  include <sys/syscall.h>
+#endif
+
+#if defined(__NetBSD__)
+#  include <lwp.h>
+#endif
+
 static std::optional<std::string> getStringAttr(PyObject *obj, const char *what)
 {
     if (PyObject_HasAttrString(obj, what) != 0) { // Check first to suppress error.
@@ -586,6 +594,10 @@ ThreadId currentThreadId()
     return GetCurrentThreadId();
 #elif defined(__APPLE_CC__)
     return reinterpret_cast<ThreadId>(pthread_self());
+#elif defined(__DragonFly__)
+    return syscall(SYS_lwp_gettid);
+#elif defined(__NetBSD__)
+    return reinterpret_cast<ThreadId>(_lwp_self());
 #else
     return pthread_self();
 #endif


[FILE:393:patches/patch-libshiboken_helper.h]
--- libshiboken/helper.h.orig	2025-05-30 11:57:51 UTC
+++ libshiboken/helper.h
@@ -70,7 +70,11 @@ class ArrayPointer
 template <class T>
 using AutoArrayPointer = ArrayPointer<T>; // deprecated
 
+#if defined(__FreeBSD__)
+using ThreadId = pthread_t;
+#else
 using ThreadId = unsigned long long;
+#endif
 LIBSHIBOKEN_API ThreadId currentThreadId();
 LIBSHIBOKEN_API ThreadId mainThreadId();
 


[FILE:835:patches/patch-libshiboken_signature_signature__globals.cpp]
--- libshiboken/signature/signature_globals.cpp.orig	2025-05-30 11:57:51 UTC
+++ libshiboken/signature/signature_globals.cpp
@@ -208,25 +208,19 @@ static int init_phase_2(safe_globals_str
 ////////////////////////////////////////////////////////////////////////////
 // a stack trace for linux-like platforms
 #include <cstdio>
-#if defined(__GLIBC__)
 #  include <execinfo.h>
-#endif
 #include <signal.h>
 #include <cstdlib>
 #include <unistd.h>
 
 static void handler(int sig) {
-#if defined(__GLIBC__)
     void *array[30];
     // get void *'s for all entries on the stack
     const int size = backtrace(array, 30);
 
     // print out all the frames to stderr
-#endif
     std::fprintf(stderr, "Error: signal %d:\n", sig);
-#if defined(__GLIBC__)
     backtrace_symbols_fd(array, size, STDERR_FILENO);
-#endif
     exit(1);
 }
 

