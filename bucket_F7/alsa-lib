# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		alsa-lib
VERSION=		1.2.14
KEYWORDS=		audio
VARIANTS=		std
SDESC[std]=		Advanced Linux Sound Architecture (ALSA)
HOMEPAGE=		https://www.alsa-project.org/main/index.php/Main_Page
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/alsa-project:alsa-lib:v1.2.14
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			tools
			dev

OPTIONS_AVAILABLE=	LINUX
OPTIONS_STANDARD=	LINUX
OPT_ON[linux]=		LINUX

EXRUN[tools]=		alsa-lib:primary:std

USES=			autoreconf cpe libtool python:build gmake

LICENSE=		LGPL21+:primary
LICENSE_TERMS=		primary:{{WRKSRC}}/TERMS
LICENSE_FILE=		LGPL21+:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"^\#include"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/src/input.c
LICENSE_SCHEME=		solo

CPE_PRODUCT=		alsa
CPE_VENDOR=		alsa-project
FPC_EQUIVALENT=		audio/alsa-lib

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--with-pkgconfdir="{{PREFIX}}/lib/pkgconfig"

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		2.0.0

VAR_OPSYS[freebsd]=	CONFIGURE_ARGS=	ac_cv_header_endian_h=no
VAR_OPSYS[dragonfly]=	CONFIGURE_ARGS=	ac_cv_header_endian_h=no

[LINUX].DESCRIPTION=			Indicates built for Linux

post-patch:
	${REINPLACE_CMD} 's|/etc|${PREFIX}&|g' ${WRKSRC}/src/conf/alsa.conf

post-patch-LINUX-OFF:
	${MKDIR} ${WRKSRC}/include/linux
	${CP} ${FILESDIR}/byteswap.h ${WRKSRC}/include/
	${CP} ${FILESDIR}/endian.h ${WRKSRC}/include/
	${CP} ${FILESDIR}/malloc.h ${WRKSRC}/include/
	${CP} ${FILESDIR}/ioctl.h ${WRKSRC}/include/linux/
	${CP} ${FILESDIR}/types.h ${WRKSRC}/include/linux/
	${REINPLACE_CMD} -E -e 's/__s([[:digit:]]+)/int\1_t/g' \
		-e 's/__kernel_long_t/long/g' \
		${WRKSRC}/include/sound/uapi/asound.h

[FILE:574:descriptions/desc.primary]
The Advanced Linux Sound Architecture (ALSA) provides audio and MIDI
functionality to the Linux operating system. ALSA has the following
significant features:

* Efficient support for all types of audio interfaces, from consumer
  sound cards to professional multichannel audio interfaces.
* Fully modularized sound drivers.
* SMP and thread-safe design.
* User space library (alsa-lib) to simplify application programming
  and provide higher level functionality.
* Support for the older Open Sound System (OSS) API, providing binary
  compatibility for most OSS programs.


[FILE:54:descriptions/desc.tools]
This package contains the aserver tool based on ALSA.


[FILE:114:distinfo]
a7bc6c09f0e5a622ebc8afb63a194aa1396145b5c6433d3445363201d96c23c4       852654 alsa-project-alsa-lib-1.2.14.tar.gz


[FILE:119:manifests/plist.primary]
lib/
 libasound.so.%%SOMAJOR%%
 libasound.so.%%SOVERSION%%
 libatopology.so.%%SOMAJOR%%
 libatopology.so.%%SOVERSION%%


[FILE:1194:manifests/plist.tools]
bin/aserver
share/alsa/alsa.conf
share/alsa/cards/
 AACI.conf
 ATIIXP-MODEM.conf
 ATIIXP-SPDMA.conf
 ATIIXP.conf
 AU8810.conf
 AU8820.conf
 AU8830.conf
 Audigy.conf
 Audigy2.conf
 Aureon51.conf
 Aureon71.conf
 CA0106.conf
 CMI8338-SWIEC.conf
 CMI8338.conf
 CMI8738-MC6.conf
 CMI8738-MC8.conf
 CMI8788.conf
 CS46xx.conf
 EMU10K1.conf
 EMU10K1X.conf
 ENS1370.conf
 ENS1371.conf
 ES1968.conf
 Echo_Echo3G.conf
 FM801.conf
 FWSpeakers.conf
 FireWave.conf
 GUS.conf
 HDA-Intel.conf
 HdmiLpeAudio.conf
 ICE1712.conf
 ICE1724.conf
 ICH-MODEM.conf
 ICH.conf
 ICH4.conf
 Loopback.conf
 Maestro3.conf
 NFORCE.conf
 PC-Speaker.conf
 PMac.conf
 PMacToonie.conf
 PS3.conf
 RME9636.conf
 RME9652.conf
 SB-XFi.conf
 SI7018.conf
 TRID4DWAVENX.conf
 USB-Audio.conf
 VIA686A.conf
 VIA8233.conf
 VIA8233A.conf
 VIA8237.conf
 VX222.conf
 VXPocket.conf
 VXPocket440.conf
 YMF744.conf
 aliases.conf
 pistachio-card.conf
 vc4-hdmi.conf
share/alsa/ctl/default.conf
share/alsa/pcm/
 center_lfe.conf
 default.conf
 dmix.conf
 dpl.conf
 dsnoop.conf
 front.conf
 hdmi.conf
 iec958.conf
 modem.conf
 rear.conf
 side.conf
 surround21.conf
 surround40.conf
 surround41.conf
 surround50.conf
 surround51.conf
 surround71.conf


[FILE:748:manifests/plist.dev]
include/asoundlib.h
include/alsa/
 asoundef.h
 asoundlib.h
 conf.h
 control.h
 control_external.h
 control_plugin.h
 error.h
 global.h
 hwdep.h
 input.h
 mixer.h
 mixer_abst.h
 output.h
 pcm.h
 pcm_external.h
 pcm_extplug.h
 pcm_ioplug.h
 pcm_old.h
 pcm_plugin.h
 pcm_rate.h
 rawmidi.h
 seq.h
 seq_event.h
 seq_midi_event.h
 seqmid.h
 timer.h
 topology.h
 ump.h
 ump_msg.h
 use-case.h
 version.h
include/alsa/sound/
 asoc.h
 asound_fm.h
 emu10k1.h
 hdsp.h
 hdspm.h
 sb16_csp.h
 sscape_ioctl.h
 tlv.h
 type_compat.h
include/alsa/sound/uapi/
 asoc.h
 asound_fm.h
 emu10k1.h
 hdsp.h
 hdspm.h
 sb16_csp.h
 sscape_ioctl.h
 tlv.h
include/sys/asoundlib.h
lib/
 libasound.so
 libatopology.so
lib/pkgconfig/
 alsa-topology.pc
 alsa.pc
share/aclocal/alsa.m4


[FILE:507:patches/patch-include_global.h]
--- include/global.h.orig	2025-04-14 16:42:04 UTC
+++ include/global.h
@@ -107,7 +107,7 @@ int snd_dlclose(void *handle);
 
 
 /** \brief alloca helper macro. */
-#define __snd_alloca(ptr,type) do { *ptr = (type##_t *) alloca(type##_sizeof()); memset(*ptr, 0, type##_sizeof()); } while (0)
+#define __snd_alloca(ptr,type) do { *ptr = (type##_t *) __builtin_alloca(type##_sizeof()); memset(*ptr, 0, type##_sizeof()); } while (0)
 
 /**
  * \brief Internal structure for an async notification client handler.


[FILE:270:patches/patch-include_pcm.h]
--- include/pcm.h.orig	2025-04-14 16:42:04 UTC
+++ include/pcm.h
@@ -35,6 +35,13 @@
 #ifndef __ALSA_PCM_H
 #define __ALSA_PCM_H
 
+#ifndef ESTRPIPE
+#define ESTRPIPE EPIPE
+#endif
+#ifndef EBADFD
+#define EBADFD EBADF
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif


[FILE:331:patches/patch-src_ucm_main.c]
--- src/ucm/main.c.orig	2025-04-14 16:42:04 UTC
+++ src/ucm/main.c
@@ -176,7 +176,11 @@ static int read_tlv_file(unsigned int **
 		err = -errno;
 		return err;
 	}
+#if defined(__FreeBSD__) || defined(__DragonFly__)
+	if (fstat(fd, &st) == -1) {
+#else
 	if (fstat64(fd, &st) == -1) {
+#endif
 		err = -errno;
 		goto __fail;
 	}


[FILE:413:patches/patch-src_ucm_ucm__exec.c]
--- src/ucm/ucm_exec.c.orig	2025-04-14 16:42:04 UTC
+++ src/ucm/ucm_exec.c
@@ -35,8 +35,9 @@
 
 #if defined(__NetBSD__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <signal.h>
-#if defined(__DragonFly__)
-#define environ NULL /* XXX */
+#include <unistd.h>
+#if defined(__FreeBSD__) || defined(__DragonFly__)
+char *environ[] = { 0 };
 #else
 extern char **environ;
 #endif


[FILE:281:files/byteswap.h]
#ifndef _BYTESWAP_H
#define _BYTESWAP_H

#ifdef __OpenBSD__
#define bswap_16(x)	swap16(x)
#define bswap_32(x)	swap32(x)
#define bswap_64(x)	swap64(x)
#else
#define bswap_16(x)	bswap16(x)
#define bswap_32(x)	bswap32(x)
#define bswap_64(x)	bswap64(x)
#endif
#endif /* _BYTESWAP_H */


[FILE:84:files/endian.h]
#ifndef _ENDIAN_H
#define	_ENDIAN_H
#include <linux/types.h>
#endif /* _ENDIAN_H */


[FILE:98:files/ioctl.h]
#ifndef _LINUX_IOCTL_H
#define _LINUX_IOCTL_H
#include <sys/ioccom.h>
#endif /* _LINUX_IOCTL_H */


[FILE:79:files/malloc.h]
#ifndef _MALLOC_H
#define	_MALLOC_H
#include <stdlib.h>
#endif /* _MALLOC_H */


[FILE:225:files/types.h]
#ifndef _LINUX_TYPES_H
#define _LINUX_TYPES_H

#include <sys/types.h>

#define __bitwise
#define __u8 u_int8_t

typedef pid_t __kernel_pid_t;
typedef off_t __kernel_off_t;

typedef uint64_t __u64;
#endif /* _LINUX_TYPES_H */

