# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ocl-icd
VERSION=		2.2.12
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Utility to regenerate the GNU info page index
HOMEPAGE=		https://github.com/OCL-dev/ocl-icd
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://forge.imag.fr/frs/download.php/836/
			http://ravenports.elderlinux.org/distcache/
DISTFILE[1]=		ocl-icd-2.2.12.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs
			examples

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		opencl:single:standard
			asciidoc:single:py27
			xmlto:single:standard

USES=			gmake libtool ruby:build,v24

FPC_EQUIVALENT=		devel/ocl-icd

INVALID_RPATH=		yes
MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-official-khronos-headers
			--enable-custom-vendordir

MAKE_ARGS=		RUBY=ruby{{RUBY_SUFFIX}}

INSTALL_TARGET=		install-strip

post-patch:
	${REINPLACE_CMD} -e 's|/etc/|${LOCALBASE}/etc/|g' \
		${WRKSRC}/doc/libOpenCL.7.txt.in
	${REINPLACE_CMD} -e 's|--destination-dir=$$(CURDIR)|--no-xmllint|' \
		${WRKSRC}/doc/Makefile.in

[FILE:232:descriptions/desc.primary]
OpenCL implementations are provided as ICD (Installable Client Driver). An
OpenCL program can use several ICD thanks to the use of an ICD Loader as
provided by this project. This free ICD Loader can load any (free or non
free) ICD.


[FILE:100:distinfo]
7665f368354e3d2b7787ba4a23c6f061db1181195ba1914dd1cdcd462eca4df4       456646 ocl-icd-2.2.12.tar.gz


[FILE:162:manifests/plist.primary]
include/ocl_icd.h
lib/
 libOpenCL.so
 libOpenCL.so.1
 libOpenCL.so.1.0.0
lib/pkgconfig/
 OpenCL.pc
 ocl-icd.pc
share/man/man7/
 libOpenCL.7.gz
 libOpenCL.so.7.gz


[FILE:38:manifests/plist.docs]
share/doc/ocl-icd/html/libOpenCL.html


[FILE:46:manifests/plist.examples]
share/doc/ocl-icd/examples/ocl_icd_bindings.c


[FILE:366:patches/patch-icd__generator.rb]
--- icd_generator.rb.orig	2015-12-16 14:59:05 UTC
+++ icd_generator.rb
@@ -441,7 +441,7 @@ EOF
   end
 
   def self.generate_ocl_icd_loader_map
-    ocl_icd_loader_map = "/**\n#{$license}\n*/\n\n"
+    ocl_icd_loader_map = "\n"
     prev_version=""
     $versions_entries.keys.sort.each { |version|
       ocl_icd_loader_map += "OPENCL_#{version.sub('_','.')} {\n";


[FILE:469:patches/patch-ocl__icd__debug.h]
--- ocl_icd_debug.h.orig	2016-04-24 12:11:57 UTC
+++ ocl_icd_debug.h
@@ -61,9 +61,9 @@ extern int debug_ocl_icd_mask;
 	return ret; \
    } while(0)
 #  define RETURN_STR(val) do { \
-	char* _ret=(char*)(val);		\
-	debug(D_TRACE, "return: %s", _ret);	\
-	return _ret; \
+	char* _return_str=(char*)(val);		\
+	debug(D_TRACE, "return: %s", _return_str);	\
+	return _return_str; \
    } while(0)
 #  ifdef DEBUG_OCL_ICD_PROVIDE_DUMP_FIELD
 #    pragma GCC diagnostic push


[FILE:744:patches/patch-ocl__icd__loader.c]
--- ocl_icd_loader.c.orig	2017-01-19 13:55:12 UTC
+++ ocl_icd_loader.c
@@ -53,11 +53,23 @@ int debug_ocl_icd_mask=0;
 
 typedef __typeof__(clGetPlatformInfo) *clGetPlatformInfo_fn;
 
-inline void dump_vendor_icd(const char* info, const struct vendor_icd *v) {
+static inline void dump_vendor_icd(const char* info, const struct vendor_icd *v) {
   debug(D_DUMP, "%s %p={ num=%i, handle=%p, f=%p}\n", info,
 	v, v->num_platforms, v->dl_handle, v->ext_fn_ptr);
 }
 
+#ifdef __sun__
+static size_t
+strnlen(const char *s, size_t maxlen)
+{
+	size_t len;
+	for (len = 0; len < maxlen; len++, s++) {
+		if (!*s) break;
+	}
+	return (len);
+}
+#endif
+
 struct vendor_icd *_icds=NULL;
 struct platform_icd *_picds=NULL;
 static cl_uint _num_icds = 0;

