# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		i3status
VERSION=		2.11
KEYWORDS=		x11
VARIANTS=		standard
SDESC[standard]=	Status bar for i3bar, dzen2, xmobar or similar
HOMEPAGE=		https://i3wm.org/i3status/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://i3wm.org/i3status/
DISTFILE[1]=		i3status-2.11.tar.bz2:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BROKEN[linux]=		Assumes netlink and alsa headers present

BUILDRUN_DEPENDS=	libconfuse:single:standard
			yajl:single:standard

USES=			gmake pkgconfig

FPC_EQUIVALENT=		x11/i3status

post-patch:
	${REINPLACE_CMD} -e 's|/etc|${PREFIX}/etc|g' ${WRKSRC}/i3status.c

do-install:
	${INSTALL_PROGRAM} ${WRKSRC}/i3status ${STAGEDIR}${PREFIX}/bin
	${INSTALL_DATA} ${WRKSRC}/man/i3status.1 \
		${STAGEDIR}${MANPREFIX}/man/man1
	${INSTALL_MAN} ${WRKSRC}/i3status.conf \
		${STAGEDIR}${PREFIX}/etc/i3status.conf.sample

[FILE:466:descriptions/desc.single]
i3status is a small program (about 1500 SLOC) for generating a status bar
for dzen2, xmobar or similar programs. It is designed to be very efficient
by issuing a very small number of system calls, as one generally wants to
update such a status line every second. This ensures that even under high
load, your status bar is updated correctly. Also, it saves a bit of energy
by not hogging your CPU as much as spawning the corresponding amount of
shell commands would.


[FILE:100:distinfo]
98db7e730f0ce908eb656ac10d713ae6a885676621391d54f00b719752f18c5f        54970 i3status-2.11.tar.bz2


[FILE:75:manifests/plist.single]
@sample etc/i3status.conf.sample
bin/i3status
share/man/man1/i3status.1.gz


[FILE:383:patches/patch-Makefile]
--- Makefile.orig	2017-01-21 15:00:31 UTC
+++ Makefile
@@ -84,6 +84,11 @@ OBJS:=$(filter-out src/pulse.o, $(OBJS))
 LIBS:=$(filter-out -lpulse, $(LIBS))
 endif
 
+# ifeq ($(OS),FreeBSD)
+OBJS:=$(filter-out src/pulse.o, $(OBJS))
+LIBS:=$(filter-out -lpulse, $(LIBS)) -lpthread
+# endif
+
 src/%.o: src/%.c include/i3status.h
 	$(CC) $(CPPFLAGS) $(CFLAGS) -c -o $@ $<
 	@echo " CC $<"


[FILE:342:patches/patch-src_print__cpu__temperature.c]
--- src/print_cpu_temperature.c.orig	2017-01-21 15:00:31 UTC
+++ src/print_cpu_temperature.c
@@ -13,7 +13,7 @@
 #include <err.h>
 #include <sys/types.h>
 #include <sys/sysctl.h>
-#define TZ_ZEROC 2732
+#define TZ_ZEROC 2731
 #define TZ_KELVTOC(x) (((x)-TZ_ZEROC) / 10), abs(((x)-TZ_ZEROC) % 10)
 #define TZ_AVG(x) ((x)-TZ_ZEROC) / 10
 #endif


[FILE:2109:patches/patch-src_print__cpu__usage.c]
On DragonFly use long type for metrics to avoid having "CPU -4%" for
cpu_usage { format = "CPU %usage"  }

Likely applies to all *BSD

--- src/print_cpu_usage.c.orig	2017-01-21 15:00:31 UTC
+++ src/print_cpu_usage.c
@@ -33,8 +33,13 @@
 
 #include "i3status.h"
 
+#if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__DragonFly__)
+static long prev_total = 0;
+static long prev_idle = 0;
+#else
 static int prev_total = 0;
 static int prev_idle = 0;
+#endif
 
 /*
  * Reads the CPU utilization from /proc/stat and returns the usage as a
@@ -45,11 +50,11 @@ void print_cpu_usage(yajl_gen json_gen,
     const char *selected_format = format;
     const char *walk;
     char *outwalk = buffer;
-    int curr_user = 0, curr_nice = 0, curr_system = 0, curr_idle = 0, curr_total;
-    int diff_idle, diff_total, diff_usage;
     bool colorful_output = false;
 
 #if defined(LINUX)
+    int curr_user = 0, curr_nice = 0, curr_system = 0, curr_idle = 0, curr_total;
+    int diff_idle, diff_total, diff_usage;
     static char statpath[512];
     char buf[1024];
     strcpy(statpath, "/proc/stat");
@@ -64,7 +69,9 @@ void print_cpu_usage(yajl_gen json_gen,
     prev_total = curr_total;
     prev_idle = curr_idle;
 #elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__DragonFly__)
-
+    long curr_user = 0, curr_nice = 0, curr_system = 0, curr_idle = 0, curr_total;
+    long diff_idle, diff_total, diff_usagel;
+    int diff_usage;
 #if defined(__FreeBSD__) || defined(__DragonFly__) || defined(__NetBSD__)
     size_t size;
     long cp_time[CPUSTATES];
@@ -91,7 +98,8 @@ void print_cpu_usage(yajl_gen json_gen,
     curr_total = curr_user + curr_nice + curr_system + curr_idle;
     diff_idle = curr_idle - prev_idle;
     diff_total = curr_total - prev_total;
-    diff_usage = (diff_total ? (1000 * (diff_total - diff_idle) / diff_total + 5) / 10 : 0);
+    diff_usagel = (diff_total ? (1000 * (diff_total - diff_idle) / diff_total + 5) / 10 : 0);
+    diff_usage = diff_usagel;
     prev_total = curr_total;
     prev_idle = curr_idle;
 #else


[FILE:370:patches/patch-src_print__volume.c]
--- src/print_volume.c.orig	2017-01-21 15:00:31 UTC
+++ src/print_volume.c
@@ -61,7 +61,7 @@ void print_volume(yajl_gen json_gen, cha
         free(instance);
     }
 
-#ifndef __OpenBSD__
+#if ! (defined __OPENBSD__  || defined __FreeBSD__ || defined __DragonFly__)
     /* Try PulseAudio first */
 
     /* If the device name has the format "pulse[:N]" where N is the

