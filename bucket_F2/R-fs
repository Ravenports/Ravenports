# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		R-fs
VERSION=		1.5.0
KEYWORDS=		cran
VARIANTS=		standard
SDESC[standard]=	Cross-platform File system operations
HOMEPAGE=		https://fs.r-lib.org
CONTACT=		CRAN_Automaton[cran@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		CRAN/src/contrib
DISTFILE[1]=		fs_1.5.0.tar.gz:main
DIST_SUBDIR=		CRAN
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cran gmake

DISTNAME=		fs

GENERATED=		yes

INSTALL_REQ_TOOLCHAIN=	yes

[FILE:153:descriptions/desc.single]
fs: Cross-Platform File System Operations Based on 'libuv'

A cross-platform interface to file system operations, built on top of the
'libuv' C library.


[FILE:99:distinfo]
36df1653571de3c628a4f769c4627f6ac53d0f9e4106d9d476afb22ae9603897       796244 CRAN/fs_1.5.0.tar.gz


[FILE:806:patches/patch-src_Makevars]
--- src/Makevars.orig	2020-07-29 15:12:05 UTC
+++ src/Makevars
@@ -10,6 +10,7 @@ OBJECTS = $(SOURCES:.cc=.o)
 ifeq ($(UNAME), SunOS)
 PKG_LIBS += -lkstat -lsendfile -lsocket -lxnet
 OBJECTS +=  bsd/setmode.o bsd/strmode.o bsd/reallocarray.o
+CONFTGT = --build=i86-pc-solaris2.10
 endif
 ifeq ($(UNAME), FreeBSD)
 PKG_LIBS += -lkvm
@@ -29,7 +30,7 @@ $(SHLIB): $(LIBUV)/.libs/libuv.a
 
 $(LIBUV)/Makefile:
 	(cd $(LIBUV) \
-	&& CC="$(CC)" CFLAGS="$(CFLAGS) $(CPPFLAGS) $(CPICFLAGS) $(C_VISIBILITY)" AR="$(AR)" RANLIB="$(RANLIB)" LDFLAGS="$(LDFLAGS)" ./configure --quiet)
+	&& CC="$(CC)" CFLAGS="$(CFLAGS) $(CPPFLAGS) $(CPICFLAGS) $(C_VISIBILITY)" AR="$(AR)" RANLIB="$(RANLIB)" LDFLAGS="$(LDFLAGS)" ./configure --quiet $(CONFTGT))
 
 $(LIBUV)/.libs/libuv.a: $(LIBUV)/Makefile
 	$(MAKE) --directory=$(LIBUV) \


[FILE:1611:patches/patch-src_libuv-1.38.1_src_unix_fs.c]
--- src/libuv-1.38.1/src/unix/fs.c.orig	2020-07-03 16:51:27 UTC
+++ src/libuv-1.38.1/src/unix/fs.c
@@ -972,7 +972,6 @@ static ssize_t uv__fs_sendfile(uv_fs_t*
 static ssize_t uv__fs_utime(uv_fs_t* req) {
 #if defined(__linux__)                                                         \
     || defined(_AIX71)                                                         \
-    || defined(__sun)                                                          \
     || defined(__HAIKU__)
   /* utimesat() has nanosecond resolution but we stick to microseconds
    * for the sake of consistency with other platforms.
@@ -982,6 +981,7 @@ static ssize_t uv__fs_utime(uv_fs_t* req
   ts[1] = uv__fs_to_timespec(req->mtime);
   return utimensat(AT_FDCWD, req->path, ts, 0);
 #elif defined(__APPLE__)                                                      \
+    || defined(__sun)                                                         \
     || defined(__DragonFly__)                                                 \
     || defined(__FreeBSD__)                                                   \
     || defined(__FreeBSD_kernel__)                                            \
@@ -1015,7 +1015,6 @@ static ssize_t uv__fs_utime(uv_fs_t* req
 static ssize_t uv__fs_lutime(uv_fs_t* req) {
 #if defined(__linux__)            ||                                           \
     defined(_AIX71)               ||                                           \
-    defined(__sun)                ||                                           \
     defined(__HAIKU__)
   struct timespec ts[2];
   ts[0] = uv__fs_to_timespec(req->atime);


[FILE:1068:patches/patch-src_libuv-1.38.1_src_unix_udp.c]
--- src/libuv-1.38.1/src/unix/udp.c.orig	2020-07-31 20:15:23 UTC
+++ src/libuv-1.38.1/src/unix/udp.c
@@ -854,7 +854,7 @@ static int uv__udp_set_membership6(uv_ud
 }
 
 
-#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__)
+#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__) && !defined(__DragonFly__)
 static int uv__udp_set_source_membership4(uv_udp_t* handle,
                                           const struct sockaddr_in* multicast_addr,
                                           const char* interface_addr,
@@ -1033,7 +1033,7 @@ int uv_udp_set_source_membership(uv_udp_
                                  const char* interface_addr,
                                  const char* source_addr,
                                  uv_membership membership) {
-#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__)
+#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__) && !defined(__DragonFly__)
   int err;
   union uv__sockaddr mcast_addr;
   union uv__sockaddr src_addr;


[FILE:367:patches/patch-src_unix_getmode.cc]
--- src/unix/getmode.cc.orig	2020-03-30 12:54:20 UTC
+++ src/unix/getmode.cc
@@ -2,6 +2,7 @@
 #include "utils.h"
 
 #if (defined(__APPLE__) && defined(__MACH__)) || defined(__OpenBSD__) ||       \
+    defined(__DragonFly__) || \
     defined(__FreeBSD__) || defined(__NetBSD__)
 #include <string.h> /* for strmode */
 #include <unistd.h> /* for getmode / setmode */

