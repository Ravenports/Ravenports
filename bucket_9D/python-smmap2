# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-smmap2
VERSION=		2.0.4
KEYWORDS=		python
VARIANTS=		py27 py36 py37
SDESC[py36]=		Sliding memory map manager (PY 36)
SDESC[py37]=		Sliding memory map manager (PY 37)
SDESC[py27]=		Sliding memory map manager (PY 27)
HOMEPAGE=		https://github.com/gitpython-developers/smmap
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/s/smmap2
DISTFILE[1]=		smmap2-2.0.4.tar.gz:main
DF_INDEX=		1
SPKGS[py36]=		single
SPKGS[py37]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY36 PY37
OPTIONS_STANDARD=	none
VOPTS[py36]=		PY27=OFF PY36=ON PY37=OFF
VOPTS[py37]=		PY27=OFF PY36=OFF PY37=ON
VOPTS[py27]=		PY27=ON PY36=OFF PY37=OFF

DISTNAME=		smmap2-2.0.4

GENERATED=		yes

[PY36].USES_ON=				python:py36

[PY37].USES_ON=				python:py37

[PY27].USES_ON=				python:py27

[FILE:3986:descriptions/desc.single]
## Motivation

When reading from many possibly large files in a fashion similar to random
access, it is usually the fastest and most efficient to use memory maps.

Although memory maps have many advantages, they represent a very limited
system resource as every map uses one file descriptor, whose amount is
limited per process. On 32 bit systems, the amount of memory you can have
mapped at a time is naturally limited to theoretical 4GB of memory, which
may not be enough for some applications.


## Limitations

* **System resources (file-handles) are likely to be leaked!** This is due
to the library authors reliance on a deterministic `__del__()` destructor.
* The memory access is read-only by design.
* In python below 2.6, memory maps will be created in compatibility mode
which works, but creates inefficient memory mappings as they always start
at offset 0.


## Overview

[![Build
Status](https://travis-ci.org/gitpython-developers/smmap.svg?branch=master)
](https://travis-ci.org/gitpython-developers/smmap)
[![Build
status](https://ci.appveyor.com/api/projects/status/kuws846av5lvmugo?svg=tr
ue&passingText=windows%20OK&failingText=windows%20failed)](https://ci.appve
yor.com/project/Byron/smmap)
[![Coverage
Status](https://coveralls.io/repos/gitpython-developers/smmap/badge.png)](h
ttps://coveralls.io/r/gitpython-developers/smmap)
[![Issue
Stats](http://www.issuestats.com/github/gitpython-developers/smmap/badge/pr
)](http://www.issuestats.com/github/gitpython-developers/smmap)
[![Issue
Stats](http://www.issuestats.com/github/gitpython-developers/smmap/badge/is
sue)](http://www.issuestats.com/github/gitpython-developers/smmap)

Smmap wraps an interface around mmap and tracks the mapped files as well
as the amount of clients who use it. If the system runs out of resources,
or if a memory limit is reached, it will automatically unload unused maps
to allow continued operation.

To allow processing large files even on 32 bit systems, it allows only
portions of the file to be mapped. Once the user reads beyond the mapped
region, smmap will automatically map the next required region, unloading
unused regions using a LRU algorithm.

The interface also works around the missing offset parameter in python
implementations up to python 2.5.

Although the library can be used most efficiently with its native
interface, a Buffer implementation is provided to hide these details
behind a simple string-like interface.

For performance critical 64 bit applications, a simplified version of
memory mapping is provided which always maps the whole file, but still
provides the benefit of unloading unused mappings on demand.



## Prerequisites

* Python 2.4, 2.5, 2.6, 2.7 or 3.3
* OSX, Windows or Linux

The package was tested on all of the previously mentioned configurations.

## Installing smmap

[![Documentation
Status](https://readthedocs.org/projects/smmap/badge/?version=latest)](http
s://readthedocs.org/projects/smmap/?badge=latest)

Its easiest to install smmap using the
[pip](http://www.pip-installer.org/en/latest) program:

```bash
$ pip install smmap
```

As the command will install smmap in your respective python distribution,
you will most likely need root permissions to authorize the required
changes.

If you have downloaded the source archive, the package can be installed by
running the `setup.py` script:

```bash
$ python setup.py install
```

It is advised to have a look at the **Usage Guide** for a brief
introduction on the different database implementations.



## Homepage and Links

The project is home on github at
https://github.com/gitpython-developers/smmap .

The latest source can be cloned from github as well:

* git://github.com/gitpython-developers/smmap.git


For support, please use the git-python mailing list:

* http://groups.google.com/group/git-python


Issues can be filed on github:

* https://github.com/gitpython-developers/smmap/issues


## License Information

*smmap* is licensed under the New BSD License.




[FILE:98:distinfo]
dc216005e529d57007ace27048eb336dcecb7fc413cfb3b2f402bb25972b69c6        23261 smmap2-2.0.4.tar.gz

