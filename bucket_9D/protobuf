# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		protobuf
VERSION=		3.18.0
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Google's data interchange format
HOMEPAGE=		https://github.com/google/protobuf
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/google:protobuf:v3.18.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cpe cmake pkgconfig zlib c++:single

DISTNAME=		protobuf-3.18.0/cmake

LICENSE=		BSD3CLAUSE:single
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/../LICENSE
LICENSE_SCHEME=		solo

CPE_VENDOR=		google
FPC_EQUIVALENT=		devel/protobuf

PLIST_SUB=		PROTOCVER=3.18.0.0

CMAKE_ARGS=		-Dprotobuf_BUILD_TESTS:BOOL=OFF
			-DBUILD_SHARED_LIBS:BOOL=ON

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/*.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/protoc

[FILE:186:descriptions/desc.single]
Protocol Buffers are a way of encoding structured data in an efficient yet
extensible format. Google uses Protocol Buffers for almost all of its
internal RPC protocols and file formats.


[FILE:108:distinfo]
14e8042b5da37652c92ef6a2759e7d2979d295f60afd7767825e3de68c856c54      5271994 google-protobuf-3.18.0.tar.gz


[FILE:2919:manifests/plist.single]
bin/
 protoc
 protoc-%%PROTOCVER%%
include/google/protobuf/
 any.h
 any.pb.h
 any.proto
 api.pb.h
 api.proto
 arena.h
 arena_impl.h
 arenastring.h
 descriptor.h
 descriptor.pb.h
 descriptor.proto
 descriptor_database.h
 duration.pb.h
 duration.proto
 dynamic_message.h
 empty.pb.h
 empty.proto
 extension_set.h
 extension_set_inl.h
 field_access_listener.h
 field_mask.pb.h
 field_mask.proto
 generated_enum_reflection.h
 generated_enum_util.h
 generated_message_bases.h
 generated_message_reflection.h
 generated_message_table_driven.h
 generated_message_tctable_decl.h
 generated_message_tctable_impl.h
 generated_message_tctable_impl.inc
 generated_message_util.h
 has_bits.h
 implicit_weak_message.h
 inlined_string_field.h
 map.h
 map_entry.h
 map_entry_lite.h
 map_field.h
 map_field_inl.h
 map_field_lite.h
 map_type_handler.h
 message.h
 message_lite.h
 metadata.h
 metadata_lite.h
 parse_context.h
 port.h
 port_def.inc
 port_undef.inc
 reflection.h
 reflection_ops.h
 repeated_field.h
 service.h
 source_context.pb.h
 source_context.proto
 string_member_robber.h
 struct.pb.h
 struct.proto
 text_format.h
 timestamp.pb.h
 timestamp.proto
 type.pb.h
 type.proto
 unknown_field_set.h
 wire_format.h
 wire_format_lite.h
 wrappers.pb.h
 wrappers.proto
include/google/protobuf/compiler/
 code_generator.h
 command_line_interface.h
 importer.h
 parser.h
 plugin.h
 plugin.pb.h
 plugin.proto
include/google/protobuf/compiler/cpp/cpp_generator.h
include/google/protobuf/compiler/csharp/
 csharp_generator.h
 csharp_names.h
include/google/protobuf/compiler/java/
 java_generator.h
 java_kotlin_generator.h
 java_names.h
include/google/protobuf/compiler/js/
 js_generator.h
 well_known_types_embed.h
include/google/protobuf/compiler/objectivec/
 objectivec_generator.h
 objectivec_helpers.h
include/google/protobuf/compiler/php/php_generator.h
include/google/protobuf/compiler/python/python_generator.h
include/google/protobuf/compiler/ruby/ruby_generator.h
include/google/protobuf/io/
 coded_stream.h
 gzip_stream.h
 io_win32.h
 printer.h
 strtod.h
 tokenizer.h
 zero_copy_stream.h
 zero_copy_stream_impl.h
 zero_copy_stream_impl_lite.h
include/google/protobuf/stubs/
 bytestream.h
 callback.h
 casts.h
 common.h
 hash.h
 logging.h
 macros.h
 map_util.h
 mutex.h
 once.h
 platform_macros.h
 port.h
 status.h
 stl_util.h
 stringpiece.h
 strutil.h
 template_util.h
include/google/protobuf/util/
 delimited_message_util.h
 field_comparator.h
 field_mask_util.h
 json_util.h
 message_differencer.h
 time_util.h
 type_resolver.h
 type_resolver_util.h
lib/
 libprotobuf-lite.so
 libprotobuf-lite.so.%%PROTOCVER%%
 libprotobuf.so
 libprotobuf.so.%%PROTOCVER%%
 libprotoc.so
 libprotoc.so.%%PROTOCVER%%
lib/cmake/protobuf/
 protobuf-config-version.cmake
 protobuf-config.cmake
 protobuf-module.cmake
 protobuf-options.cmake
 protobuf-targets-release.cmake
 protobuf-targets.cmake
lib/pkgconfig/
 protobuf-lite.pc
 protobuf.pc


[FILE:454:patches/patch-src_google_protobuf_io_coded__stream.h]
--- ../src/google/protobuf/io/coded_stream.h.orig	2021-09-14 16:48:28 UTC
+++ ../src/google/protobuf/io/coded_stream.h
@@ -133,8 +133,10 @@
 #else
 #ifdef __APPLE__
 #include <machine/endian.h>  // __BYTE_ORDER
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/endian.h>  // __BYTE_ORDER
+#elif defined(__sun__)
+#define __LITTLE_ENDIAN__
 #else
 #if !defined(__QNX__)
 #include <endian.h>  // __BYTE_ORDER


[FILE:668:patches/patch-src_google_protobuf_port__def.inc]
$NetBSD: patch-src_google_protobuf_port__def.inc,v 1.3 2021/06/09 04:57:10 adam Exp $

SunOS does not support init_priority.

--- ../src/google/protobuf/port_def.inc.orig	2021-09-14 16:48:28 UTC
+++ ../src/google/protobuf/port_def.inc
@@ -590,7 +590,7 @@
 #ifdef PROTOBUF_ATTRIBUTE_INIT_PRIORITY
 #error PROTOBUF_ATTRIBUTE_INIT_PRIORITY was previously defined
 #endif
-#if PROTOBUF_GNUC_MIN(3, 0) && (!defined(__APPLE__) || defined(__clang__))
+#if PROTOBUF_GNUC_MIN(3, 0) && !defined(__sun) && (!defined(__APPLE__) || defined(__clang__))
 #define PROTOBUF_ATTRIBUTE_INIT_PRIORITY __attribute__((init_priority((102))))
 #else
 #define PROTOBUF_ATTRIBUTE_INIT_PRIORITY


[FILE:1093:patches/patch-src_google_protobuf_stubs_port.h]
--- ../src/google/protobuf/stubs/port.h.orig	2021-09-14 16:48:28 UTC
+++ ../src/google/protobuf/stubs/port.h
@@ -59,8 +59,10 @@
 #else
 #ifdef __APPLE__
 #include <machine/endian.h>  // __BYTE_ORDER
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/endian.h>  // __BYTE_ORDER
+#elif defined(__sun__)
+#define __LITTLE_ENDIAN__
 #else
 #if !defined(__QNX__)
 #include <endian.h>  // __BYTE_ORDER
@@ -78,6 +80,8 @@
 #ifdef _MSC_VER
 #include <stdlib.h>  // NOLINT(build/include)
 #include <intrin.h>
+#elif defined(__sun__)
+#include <sys/byteorder.h>
 #elif defined(__APPLE__)
 #include <libkern/OSByteOrder.h>
 #elif defined(__linux__) || defined(__ANDROID__) || defined(__CYGWIN__)
@@ -238,6 +242,11 @@ inline void GOOGLE_UNALIGNED_STORE64(voi
 #define bswap_32(x) _byteswap_ulong(x)
 #define bswap_64(x) _byteswap_uint64(x)
 
+#elif defined(__sun__)
+#define bswap_16(x) BSWAP_16(x)
+#define bswap_32(x) BSWAP_32(x)
+#define bswap_64(x) BSWAP_64(x)
+
 #elif defined(__APPLE__)
 // Mac OS X / Darwin features
 #define bswap_16(x) OSSwapInt16(x)

