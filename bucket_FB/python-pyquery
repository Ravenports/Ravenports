# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pyquery
VERSION=		2.0.0
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Jquery-like library for python (3.10)
SDESC[v11]=		Jquery-like library for python (3.11)
HOMEPAGE=		https://github.com/gawel/pyquery
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/36/b7/f7ccf9e52e2817e1265d3719c600fa4ef33c07de4d5ef0ced3f43ab1cef2
DISTFILE[1]=		pyquery-2.0.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		pyquery-2.0.0.dist-info

GENERATED=		yes

[PY310].RUN_DEPENDS_ON=			python-lxml:single:py310
					python-cssselect:single:py310
[PY310].USES_ON=			python:py310,wheel

[PY311].RUN_DEPENDS_ON=			python-lxml:single:v11
					python-cssselect:single:v11
[PY311].USES_ON=			python:v11,wheel

[FILE:2767:descriptions/desc.single]

pyquery: a jquery-like library for python
=========================================

pyquery allows you to make jquery queries on xml documents.
The API is as much as possible similar to jquery. pyquery uses lxml for
fast
xml and html manipulation.

This is not (or at least not yet) a library to produce or interact with
javascript code. I just liked the jquery API and I missed it in python so I
told myself "Hey let's make jquery in python". This is the result.

The `project`_ is being actively developed on a git repository on Github. I
have the policy of giving push access to anyone who wants it and then
reviewing
what they do. So if you want to contribute just email me.

Please report bugs on the [github
] issue
tracker.

.. _deliverance:
http://www.gawel.org/weblog/en/2008/12/skinning-with-pyquery-and-deliverance
.. _project: https://github.com/gawel/pyquery/

I've spent hours maintaining this software, with love.
Please consider tipping if you like it:

BTC: 1PruQAwByDndFZ7vTeJhyWefAghaZx9RZg

ETH: 0xb6418036d8E06c60C4D91c17d72Df6e1e5b15CE6

LTC: LY6CdZcDbxnBX9GFBJ45TqVj8NykBBqsmT

..
   >>> (urlopen, your_url, path_to_html_file) = getfixture('readme_fixt')

Quickstart
==========

You can use the PyQuery class to load an xml document from a string, a lxml
document, from a file or from an url::

    >>> from pyquery import PyQuery as pq
    >>> from lxml import etree
    >>> import urllib
    >>> d = pq("<html></html>")
    >>> d = pq(etree.fromstring("<html></html>"))
    >>> d = pq(url=your_url)
    >>> d = pq(url=your_url,
    ...        opener=lambda url, **kw: urlopen(url).read())
    >>> d = pq(filename=path_to_html_file)

Now d is like the $ in jquery::

    >>> d("#hello")
    [<p#hello.hello>]
    >>> p = d("#hello")
    >>> print(p.html())
    Hello world !
    >>> p.html("you know Python rocks")
    [<p#hello.hello>]
    >>> print(p.html())
    you know Python rocks
    >>> print(p.text())
    you know Python rocks

You can use some of the pseudo classes that are available in jQuery but
that
are not standard in css such as :first :last :even :odd :eq :lt :gt
:checked
:selected :file::

    >>> d('p:first')
    [<p#hello.hello>]

See http://pyquery.rtfd.org/ for the full documentation

News
====

2.0.0 (2022-12-28)
------------------

- Breaking change: inputs starting with ``"http://" or "https://" like
  PyQuery("http://example.com")`` will no longer fetch the contents of the
URL.
  Users desiring the old behavior should switch to
``PyQuery(url="http://example.com")``.

- Add nextUntil method

- ``.remove()`` no longer inserts a space in place of the removed element

- Fix escaping of top-level element text in ``.html()`` output

- Support (and require) cssselect 1.2+

- Drop support for python 3.5/3.6


[FILE:109:distinfo]
8dfc9b4b7c5f877d619bbae74b1898d5743f6ca248cfd5d72b504dd614da312f        22721 pyquery-2.0.0-py3-none-any.whl

