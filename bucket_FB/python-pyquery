# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pyquery
VERSION=		2.0.1
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Jquery-like library for python (3.12)
SDESC[v13]=		Jquery-like library for python (3.13)
HOMEPAGE=		https://github.com/gawel/pyquery
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/76/f5/5067b48012967ea166b9bd0a015b69e0560e4c6e7c06f28d9bab8f9dd10b
DISTFILE[1]=		pyquery-2.0.1-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		pyquery-2.0.1.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-lxml:single:v12
					python-cssselect:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-lxml:single:v13
					python-cssselect:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:2723:descriptions/desc.single]

pyquery: a jquery-like library for python
=========================================

pyquery allows you to make jquery queries on xml documents.
The API is as much as possible similar to jquery. pyquery uses lxml for
fast
xml and html manipulation.

This is not (or at least not yet) a library to produce or interact with
javascript code. I just liked the jquery API and I missed it in python so I
told myself "Hey let's make jquery in python". This is the result.

The `project`_ is being actively developed on a git repository on Github. I
have the policy of giving push access to anyone who wants it and then
reviewing
what they do. So if you want to contribute just email me.

Please report bugs on the [github
] issue
tracker.

.. _deliverance:
http://www.gawel.org/weblog/en/2008/12/skinning-with-pyquery-and-deliverance
.. _project: https://github.com/gawel/pyquery/

..
   >>> (urlopen, your_url, path_to_html_file) = getfixture('readme_fixt')

Quickstart
==========

You can use the PyQuery class to load an xml document from a string, a lxml
document, from a file or from an url::

    >>> from pyquery import PyQuery as pq
    >>> from lxml import etree
    >>> import urllib
    >>> d = pq("<html></html>")
    >>> d = pq(etree.fromstring("<html></html>"))
    >>> d = pq(url=your_url)
    >>> d = pq(url=your_url,
    ...        opener=lambda url, **kw: urlopen(url).read())
    >>> d = pq(filename=path_to_html_file)

Now d is like the $ in jquery::

    >>> d("#hello")
    [<p#hello.hello>]
    >>> p = d("#hello")
    >>> print(p.html())
    Hello world !
    >>> p.html("you know Python rocks")
    [<p#hello.hello>]
    >>> print(p.html())
    you know Python rocks
    >>> print(p.text())
    you know Python rocks

You can use some of the pseudo classes that are available in jQuery but
that
are not standard in css such as :first :last :even :odd :eq :lt :gt
:checked
:selected :file::

    >>> d('p:first')
    [<p#hello.hello>]

See http://pyquery.rtfd.org/ for the full documentation

News
====

2.0.1 (2024-08-30)
------------------

- Breaking change: its seems no longer possible to use the html parser with
a xml file so its no longer tested

- Drop support for python 3.7

2.0.0 (2022-12-28)
------------------

- Breaking change: inputs starting with ``"http://" or "https://" like
  PyQuery("http://example.com")`` will no longer fetch the contents of the
URL.
  Users desiring the old behavior should switch to
``PyQuery(url="http://example.com")``.

- Add nextUntil method

- ``.remove()`` no longer inserts a space in place of the removed element

- Fix escaping of top-level element text in ``.html()`` output

- Support (and require) cssselect 1.2+

- Drop support for python 3.5/3.6



[FILE:120:distinfo]
aedfa0bd0eb9afc94b3ddbec8f375a6362b32bc9662f46e3e0d866483f4771b0        22573 python-src/pyquery-2.0.1-py3-none-any.whl

