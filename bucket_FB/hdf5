# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		hdf5
VERSION=		1.14.4.3
KEYWORDS=		archivers science
VARIANTS=		standard
SDESC[standard]=	General purpose file format for scientific data
HOMEPAGE=		https://www.hdfgroup.org/solutions/hdf5/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/HDFGroup/hdf5/releases/download/hdf5_1.14.4.3/
DISTFILE[1]=		hdf5-1.14.4-3.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			cxx
			fort
			tools
			dev
			examples

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

EXRUN[cxx]=		hdf5:primary:standard
EXRUN[tools]=		hdf5:dev:standard
EXRUN[fort]=		hdf5:primary:standard

USES=			cpe libtool c++:cxx fortran:fort mbsdfix

DISTNAME=		hdf5-1.14.4-3

LICENSE=		BSD3CLAUSE:primary
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

CPE_VENDOR=		hdfgroup
FPC_EQUIVALENT=		science/hdf5

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--enable-instrument
			--enable-cxx
			--enable-fortran
			--enable-build-mode=production
			--disable-tests
			--with-examplesdir={{STD_EXAMPLESDIR}}

SINGLE_JOB=		yes

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		310.4.0
PLIST_SUB=		HL_SOVER=310.0.4
			HL_SOMAJOR=310
			HDF5_FORT_SOVER=310.3.0
			HDF5_FORT_SOMAJOR=310
			HL_FORT_SOVER=310.0.4
			HL_FORT_SOMAJOR=310
			CPP_SOVERSION=310.0.4
			CPP_SOMAJOR=310

CFLAGS=			-Wno-missing-include-dirs

post-patch:
	${REINPLACE_CMD} -e 's|-O3||g' ${WRKSRC}/config/gnu-flags
	${FIND} ${WRKSRC} -regex '.*/examples/Makefile.in' | ${XARGS} \
		${REINPLACE_CMD} \
		-e '/LD_LIBRARY_PATH/ s|^|#|' \
		-e 's|(INSTALL)|(BSD_INSTALL_DATA)|'
	${FIND} ${WRKSRC} -name \*.sh\* | ${XARGS} \
		${REINPLACE_CMD} -e 's|\[ -a|\[ -f|g'

[FILE:827:descriptions/desc.primary]
HDF5 is a completely new Hierarchical Data Format product consisting of a
data format specification and a supporting library implementation. HDF5 is
designed to address some of the limitations of the older HDF product and to
address current and anticipated requirements of modern systems and
applications.

HDF5 includes the following improvements:
- A new file format designed to address some of the deficiencies of HDF4.x,
  particularly the need to store larger files and more objects per file.
- A simpler, more comprehensive data model that includes only two basic
  structures: a multidimensional array of record structures, and a grouping
  structure.
- A simpler, better-engineered library and API, with improved support for
  parallel I/O, threads, and other requirements imposed by modern systems
  and applications.


[FILE:46:descriptions/desc.cxx]
This package contains the HDF5 C++ libraries.


[FILE:50:descriptions/desc.fort]
This package contains the HDF5 fortran libraries.


[FILE:35:descriptions/desc.tools]
This packages contains HDF5 tools.


[FILE:99:distinfo]
019ac451d9e1cf89c0482ba2a06f07a46166caf23f60fea5ef3c37724a318e03     37007795 hdf5-1.14.4-3.tar.gz


[FILE:113:manifests/plist.primary]
lib/
 libhdf5.so.%%SOMAJOR%%
 libhdf5.so.%%SOVERSION%%
 libhdf5_hl.so.%%HL_SOMAJOR%%
 libhdf5_hl.so.%%HL_SOVER%%


[FILE:137:manifests/plist.cxx]
lib/
 libhdf5_cpp.so.%%CPP_SOMAJOR%%
 libhdf5_cpp.so.%%CPP_SOVERSION%%
 libhdf5_hl_cpp.so.%%HL_SOMAJOR%%
 libhdf5_hl_cpp.so.%%HL_SOVER%%


[FILE:169:manifests/plist.fort]
lib/
 libhdf5_fortran.so.%%HDF5_FORT_SOMAJOR%%
 libhdf5_fortran.so.%%HDF5_FORT_SOVER%%
 libhdf5hl_fortran.so.%%HL_FORT_SOMAJOR%%
 libhdf5hl_fortran.so.%%HL_FORT_SOVER%%


[FILE:207:manifests/plist.tools]
bin/
 h5c++
 h5cc
 h5clear
 h5copy
 h5debug
 h5delete
 h5diff
 h5dump
 h5fc
 h5format_convert
 h5fuse
 h5import
 h5jam
 h5ls
 h5mkgrp
 h5perf_serial
 h5redeploy
 h5repack
 h5repart
 h5stat
 h5unjam
 h5watch


[FILE:2012:manifests/plist.dev]
include/
 H5ACpublic.h
 H5AbstractDs.h
 H5Apublic.h
 H5ArrayType.h
 H5AtomType.h
 H5Attribute.h
 H5Classes.h
 H5CommonFG.h
 H5CompType.h
 H5Cpp.h
 H5CppDoc.h
 H5Cpublic.h
 H5DOpublic.h
 H5DSpublic.h
 H5DaccProp.h
 H5DataSet.h
 H5DataSpace.h
 H5DataType.h
 H5DcreatProp.h
 H5Dpublic.h
 H5DxferProp.h
 H5ESdevelop.h
 H5ESpublic.h
 H5EnumType.h
 H5Epubgen.h
 H5Epublic.h
 H5Exception.h
 H5FDcore.h
 H5FDdevelop.h
 H5FDdirect.h
 H5FDfamily.h
 H5FDhdfs.h
 H5FDioc.h
 H5FDlog.h
 H5FDmirror.h
 H5FDmpi.h
 H5FDmpio.h
 H5FDmulti.h
 H5FDonion.h
 H5FDpublic.h
 H5FDros3.h
 H5FDsec2.h
 H5FDsplitter.h
 H5FDstdio.h
 H5FDsubfiling.h
 H5FDwindows.h
 H5FaccProp.h
 H5FcreatProp.h
 H5File.h
 H5FloatType.h
 H5Fpublic.h
 H5Gpublic.h
 H5Group.h
 H5IMpublic.h
 H5IdComponent.h
 H5Idevelop.h
 H5Include.h
 H5IntType.h
 H5Ipublic.h
 H5LDpublic.h
 H5LTpublic.h
 H5LaccProp.h
 H5LcreatProp.h
 H5Ldevelop.h
 H5Library.h
 H5Location.h
 H5Lpublic.h
 H5MMpublic.h
 H5Mpublic.h
 H5Object.h
 H5OcreatProp.h
 H5Opublic.h
 H5PLextern.h
 H5PLpublic.h
 H5PTpublic.h
 H5PacketTable.h
 H5Ppublic.h
 H5PredType.h
 H5PropList.h
 H5Rpublic.h
 H5Spublic.h
 H5StrType.h
 H5TBpublic.h
 H5TSdevelop.h
 H5Tdevelop.h
 H5Tpublic.h
 H5VLconnector.h
 H5VLconnector_passthru.h
 H5VLnative.h
 H5VLpassthru.h
 H5VLpublic.h
 H5VarLenType.h
 H5Zdevelop.h
 H5Zpublic.h
 H5api_adpt.h
 H5config_f.inc
 H5f90i.h
 H5f90i_gen.h
 H5overflow.h
 H5pubconf.h
 H5public.h
 H5version.h
 h5_gen.mod
 h5a.mod
 h5d.mod
 h5do.mod
 h5ds.mod
 h5e.mod
 h5es.mod
 h5f.mod
 h5fortkit.mod
 h5fortran_types.mod
 h5g.mod
 h5global.mod
 h5i.mod
 h5im.mod
 h5l.mod
 h5lib.mod
 h5lt.mod
 h5lt_const.mod
 h5o.mod
 h5p.mod
 h5r.mod
 h5s.mod
 h5t.mod
 h5tb.mod
 h5tb_const.mod
 h5vl.mod
 h5z.mod
 hdf5.h
 hdf5.mod
 hdf5_hl.h
lib/
 libhdf5.a
 libhdf5.settings
 libhdf5.so
 libhdf5_cpp.a
 libhdf5_cpp.so
 libhdf5_fortran.a
 libhdf5_fortran.so
 libhdf5_hl.a
 libhdf5_hl.so
 libhdf5_hl_cpp.a
 libhdf5_hl_cpp.so
 libhdf5_hl_fortran.a
 libhdf5_hl_fortran.so
 libhdf5hl_fortran.a
 libhdf5hl_fortran.so


[FILE:1728:manifests/plist.examples]
share/examples/hdf5/
 README
 run-all-ex.sh
share/examples/hdf5/c/
 h5_attribute.c
 h5_chunk_read.c
 h5_cmprss.c
 h5_compound.c
 h5_crtatt.c
 h5_crtdat.c
 h5_crtgrp.c
 h5_crtgrpar.c
 h5_crtgrpd.c
 h5_debug_trace.c
 h5_drivers.c
 h5_elink_unix2win.c
 h5_extend.c
 h5_extend_write.c
 h5_extlink.c
 h5_group.c
 h5_mount.c
 h5_rdwt.c
 h5_read.c
 h5_ref2reg_deprec.c
 h5_ref_compat.c
 h5_ref_extern.c
 h5_reference_deprec.c
 h5_select.c
 h5_shared_mesg.c
 h5_subset.c
 h5_write.c
 run-c-ex.sh
share/examples/hdf5/c++/
 chunks.cpp
 compound.cpp
 create.cpp
 extend_ds.cpp
 h5group.cpp
 h5tutr_cmprss.cpp
 h5tutr_crtatt.cpp
 h5tutr_crtdat.cpp
 h5tutr_crtgrp.cpp
 h5tutr_crtgrpar.cpp
 h5tutr_crtgrpd.cpp
 h5tutr_extend.cpp
 h5tutr_rdwt.cpp
 h5tutr_subset.cpp
 readdata.cpp
 run-c++-ex.sh
 writedata.cpp
share/examples/hdf5/fortran/
 compound.f90
 compound_complex_fortran2003.f90
 compound_fortran2003.f90
 h5_cmprss.f90
 h5_crtatt.f90
 h5_crtdat.f90
 h5_crtgrp.f90
 h5_crtgrpar.f90
 h5_crtgrpd.f90
 h5_extend.f90
 h5_rdwt.f90
 h5_subset.f90
 hyperslab.f90
 mountexample.f90
 nested_derived_type.f90
 ph5example.f90
 refobjexample.f90
 refregexample.f90
 run-fortran-ex.sh
 rwdset_fortran2003.f90
 selectele.f90
share/examples/hdf5/hl/run-hl-ex.sh
share/examples/hdf5/hl/c/
 ex_ds1.c
 ex_image1.c
 ex_image2.c
 ex_lite1.c
 ex_lite2.c
 ex_lite3.c
 ex_table_01.c
 ex_table_02.c
 ex_table_03.c
 ex_table_04.c
 ex_table_05.c
 ex_table_06.c
 ex_table_07.c
 ex_table_08.c
 ex_table_09.c
 ex_table_10.c
 ex_table_11.c
 ex_table_12.c
 image24pixel.txt
 image8.txt
 pal_rgb.h
 ptExampleFL.c
 run-hlc-ex.sh
share/examples/hdf5/hl/c++/
 ptExampleFL.cpp
 run-hlc++-ex.sh
share/examples/hdf5/hl/fortran/
 ex_ds1.f90
 exlite.f90
 run-hlfortran-ex.sh


[FILE:6979:patches/patch-tools_lib_h5diff__array.c]
--- tools/lib/h5diff_array.c.orig	2024-04-15 19:47:31 UTC
+++ tools/lib/h5diff_array.c
@@ -1718,8 +1718,8 @@ diff_float_element(unsigned char *mem1,
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_float);
-            isnan2 = isnan(temp2_float);
+            isnan1 = __builtin_isnan(temp1_float);
+            isnan2 = __builtin_isnan(temp2_float);
         }
 
         /* both not NaN, do the comparison */
@@ -1755,8 +1755,8 @@ diff_float_element(unsigned char *mem1,
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_float);
-            isnan2 = isnan(temp2_float);
+            isnan1 = __builtin_isnan(temp1_float);
+            isnan2 = __builtin_isnan(temp2_float);
         }
         /* both not NaN, do the comparison */
         if ((!isnan1 && !isnan2)) {
@@ -1803,8 +1803,8 @@ diff_float_element(unsigned char *mem1,
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_float);
-            isnan2 = isnan(temp2_float);
+            isnan1 = __builtin_isnan(temp1_float);
+            isnan2 = __builtin_isnan(temp2_float);
         }
 
         /* both not NaN, do the comparison */
@@ -1896,8 +1896,8 @@ diff_double_element(unsigned char *mem1,
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_double);
-            isnan2 = isnan(temp2_double);
+            isnan1 = __builtin_isnan(temp1_double);
+            isnan2 = __builtin_isnan(temp2_double);
         }
 
         /* both not NaN, do the comparison */
@@ -1932,8 +1932,8 @@ diff_double_element(unsigned char *mem1,
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_double);
-            isnan2 = isnan(temp2_double);
+            isnan1 = __builtin_isnan(temp1_double);
+            isnan2 = __builtin_isnan(temp2_double);
         }
         /* both not NaN, do the comparison */
         if (!isnan1 && !isnan2) {
@@ -1978,8 +1978,8 @@ diff_double_element(unsigned char *mem1,
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_double);
-            isnan2 = isnan(temp2_double);
+            isnan1 = __builtin_isnan(temp1_double);
+            isnan2 = __builtin_isnan(temp2_double);
         }
 
         /* both not NaN, do the comparison */
@@ -2071,8 +2071,8 @@ diff_ldouble_element(unsigned char *mem1
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_double);
-            isnan2 = isnan(temp2_double);
+            isnan1 = __builtin_isnan(temp1_double);
+            isnan2 = __builtin_isnan(temp2_double);
         }
 
         /* both not NaN, do the comparison */
@@ -2106,8 +2106,8 @@ diff_ldouble_element(unsigned char *mem1
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_double);
-            isnan2 = isnan(temp2_double);
+            isnan1 = __builtin_isnan(temp1_double);
+            isnan2 = __builtin_isnan(temp2_double);
         }
 
         /* both not NaN, do the comparison */
@@ -2153,8 +2153,8 @@ diff_ldouble_element(unsigned char *mem1
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_double);
-            isnan2 = isnan(temp2_double);
+            isnan1 = __builtin_isnan(temp1_double);
+            isnan2 = __builtin_isnan(temp2_double);
         }
 
         /* both not NaN, do the comparison */
@@ -2246,8 +2246,8 @@ diff_float16_element(unsigned char *mem1
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_float16);
-            isnan2 = isnan(temp2_float16);
+            isnan1 = __builtin_isnan(temp1_float16);
+            isnan2 = __builtin_isnan(temp2_float16);
         }
 
         /* both not NaN, do the comparison */
@@ -2283,8 +2283,8 @@ diff_float16_element(unsigned char *mem1
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_float16);
-            isnan2 = isnan(temp2_float16);
+            isnan1 = __builtin_isnan(temp1_float16);
+            isnan2 = __builtin_isnan(temp2_float16);
         }
         /* both not NaN, do the comparison */
         if ((!isnan1 && !isnan2)) {
@@ -2331,8 +2331,8 @@ diff_float16_element(unsigned char *mem1
          *-------------------------------------------------------------------------
          */
         if (opts->do_nans) {
-            isnan1 = isnan(temp1_float16);
-            isnan2 = isnan(temp2_float16);
+            isnan1 = __builtin_isnan(temp1_float16);
+            isnan2 = __builtin_isnan(temp2_float16);
         }
 
         /* both not NaN, do the comparison */
@@ -3353,8 +3353,8 @@ equal_double(double value, double expect
          * detect NaNs
          *-------------------------------------------------------------------------
          */
-        bool isnan1 = isnan(value);
-        bool isnan2 = isnan(expected);
+        bool isnan1 = __builtin_isnan(value);
+        bool isnan2 = __builtin_isnan(expected);
 
         /*-------------------------------------------------------------------------
          * we consider NaN == NaN to be true
@@ -3400,8 +3400,8 @@ equal_ldouble(long double value, long do
          * detect NaNs
          *-------------------------------------------------------------------------
          */
-        bool isnan1 = isnan(value);
-        bool isnan2 = isnan(expected);
+        bool isnan1 = __builtin_isnan(value);
+        bool isnan2 = __builtin_isnan(expected);
 
         /*-------------------------------------------------------------------------
          * we consider NaN == NaN to be true
@@ -3446,8 +3446,8 @@ equal_float(float value, float expected,
          * detect NaNs
          *-------------------------------------------------------------------------
          */
-        bool isnan1 = isnan(value);
-        bool isnan2 = isnan(expected);
+        bool isnan1 = __builtin_isnan(value);
+        bool isnan2 = __builtin_isnan(expected);
 
         /*-------------------------------------------------------------------------
          * we consider NaN == NaN to be true

