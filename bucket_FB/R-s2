# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		R-s2
VERSION=		1.1.1
KEYWORDS=		cran
VARIANTS=		standard
SDESC[standard]=	Spherical Geometry Operators from S2 library
HOMEPAGE=		https://r-spatial.github.io/s2/
CONTACT=		CRAN_Automaton[cran@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		CRAN/src/contrib
DISTFILE[1]=		s2_1.1.1.tar.gz:main
DIST_SUBDIR=		CRAN
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	R-Rcpp:single:standard
			R-wk:single:standard

USES=			cran gmake

DISTNAME=		s2

GENERATED=		yes

INSTALL_REQ_TOOLCHAIN=	yes

[FILE:449:descriptions/desc.single]
s2: Spherical Geometry Operators Using the S2 Geometry Library

Provides R bindings for Google's s2 library for geometric calculations on
the sphere. High-performance constructors and exporters provide high
compatibility with existing spatial packages, transformers construct new
geometries from existing geometries, predicates provide a means to select
geometries based on spatial relationships, and accessors extract
information about geometries.


[FILE:99:distinfo]
1ce0c996df95e4ae39bb7b28d238ab552f8b24f1c32f5038930d4b071f72891d      2283477 CRAN/s2_1.1.1.tar.gz


[FILE:280:patches/patch-configure]
--- configure.orig	2021-06-16 16:15:16 UTC
+++ configure
@@ -1,3 +1,4 @@
+#!/bin/sh
 # Anticonf (tm) script by Jeroen Ooms (2020)
 # This script will query 'pkg-config' for the required cflags and ldflags.
 # If pkg-config is unavailable or does not find the library, try setting


[FILE:915:patches/patch-src_absl_base_config.h]
--- src/absl/base/config.h.orig	2021-09-21 13:18:13 UTC
+++ src/absl/base/config.h
@@ -374,6 +374,7 @@ static_assert(ABSL_INTERNAL_INLINE_NAMES
 #ifdef ABSL_HAVE_MMAP
 #error ABSL_HAVE_MMAP cannot be directly set
 #elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) ||   \
+    defined(__DragonFly__) || defined(__NetBSD__) || \
     defined(__ros__) || defined(__native_client__) || defined(__asmjs__) || \
     defined(__wasm__) || defined(__Fuchsia__) || defined(__sun) || \
     defined(__ASYLO__) || defined(__myriad2__)
@@ -387,6 +388,7 @@ static_assert(ABSL_INTERNAL_INLINE_NAMES
 #ifdef ABSL_HAVE_PTHREAD_GETSCHEDPARAM
 #error ABSL_HAVE_PTHREAD_GETSCHEDPARAM cannot be directly set
 #elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
+    defined(__DragonFly__) || defined(__NetBSD__) || \
     defined(__ros__)
 #define ABSL_HAVE_PTHREAD_GETSCHEDPARAM 1
 #endif


[FILE:454:patches/patch-src_absl_base_internal_endian.h]
--- src/absl/base/internal/endian.h.orig	2021-09-21 13:18:13 UTC
+++ src/absl/base/internal/endian.h
@@ -19,7 +19,7 @@
 // The following guarantees declaration of the byte swap functions
 #ifdef _MSC_VER
 #include <stdlib.h>  // NOLINT(build/include)
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__) || defined(__NetBSD__)
 #include <sys/endian.h>
 #elif defined(__GLIBC__)
 #include <byteswap.h>  // IWYU pragma: export


[FILE:484:patches/patch-src_absl_base_internal_raw__logging.cc]
--- src/absl/base/internal/raw_logging.cc.orig	2021-09-21 13:18:13 UTC
+++ src/absl/base/internal/raw_logging.cc
@@ -37,6 +37,7 @@
 // This preprocessor token is also defined in raw_io.cc.  If you need to copy
 // this, consider moving both to config.h instead.
 #if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
+    defined(__DragonFly__) || \
     defined(__Fuchsia__) || defined(__native_client__) || \
     defined(__EMSCRIPTEN__) || defined(__ASYLO__)
 


[FILE:316:patches/patch-src_absl_base_internal_sysinfo.cc]
--- src/absl/base/internal/sysinfo.cc.orig	2021-09-21 13:18:13 UTC
+++ src/absl/base/internal/sysinfo.cc
@@ -31,7 +31,7 @@
 #include <sys/syscall.h>
 #endif
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/sysctl.h>
 #endif
 


[FILE:379:patches/patch-src_absl_base_internal_unscaledcycleclock.cc]
--- src/absl/base/internal/unscaledcycleclock.cc.orig	2021-09-21 13:18:13 UTC
+++ src/absl/base/internal/unscaledcycleclock.cc
@@ -23,7 +23,7 @@
 #if defined(__powerpc__) || defined(__ppc__)
 #ifdef __GLIBC__
 #include <sys/platform/ppc.h>
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/sysctl.h>
 #include <sys/types.h>
 #endif


[FILE:399:patches/patch-src_absl_time_internal_cctz_include_cctz_time__zone.h]
--- src/absl/time/internal/cctz/include/cctz/time_zone.h.orig	2021-09-21 13:18:13 UTC
+++ src/absl/time/internal/cctz/include/cctz/time_zone.h
@@ -20,6 +20,10 @@
 #ifndef ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_H_
 #define ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_H_
 
+#if defined __NetBSD__ && !defined _NETBSD_SOURCE
+#define _NETBSD_SOURCE
+#endif
+
 #include <chrono>
 #include <cstdint>
 #include <string>


[FILE:442:patches/patch-src_s2_util_math_exactfloat_exactfloat.cc]
--- src/s2/util/math/exactfloat/exactfloat.cc.orig	2021-01-04 12:00:17 UTC
+++ src/s2/util/math/exactfloat/exactfloat.cc
@@ -108,7 +108,7 @@ inline static uint64 BN_ext_get_uint64(c
 #endif
 }
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
 // Count the number of low-order zero bits in the given BIGNUM (ignoring its
 // sign).  Returns 0 if the argument is zero.

