# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		R-s2
VERSION=		1.1.4
KEYWORDS=		cran
VARIANTS=		standard
SDESC[standard]=	Spherical Geometry Operators from S2 library
HOMEPAGE=		https://r-spatial.github.io/s2/
CONTACT=		CRAN_Automaton[cran@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		CRAN/src/contrib
			https://loki.dragonflybsd.org/cranfiles/
DISTFILE[1]=		s2_1.1.4.tar.gz:main
DIST_SUBDIR=		CRAN
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	R-Rcpp:single:standard
			R-wk:single:standard

USES=			cran gmake ssl

DISTNAME=		s2

GENERATED=		yes

INSTALL_REQ_TOOLCHAIN=	yes

[FILE:449:descriptions/desc.single]
s2: Spherical Geometry Operators Using the S2 Geometry Library

Provides R bindings for Google's s2 library for geometric calculations on
the sphere. High-performance constructors and exporters provide high
compatibility with existing spatial packages, transformers construct new
geometries from existing geometries, predicates provide a means to select
geometries based on spatial relationships, and accessors extract
information about geometries.


[FILE:99:distinfo]
be0b4925eaade52cf85b1cb6e851430bd4fe6ca30722dffcc3f9107e7a4e404c      2375830 CRAN/s2_1.1.4.tar.gz


[FILE:280:patches/patch-configure]
--- configure.orig	2023-01-11 14:23:27 UTC
+++ configure
@@ -1,3 +1,4 @@
+#!/bin/sh
 # Anticonf (tm) script by Jeroen Ooms (2020)
 # This script will query 'pkg-config' for the required cflags and ldflags.
 # If pkg-config is unavailable or does not find the library, try setting


[FILE:973:patches/patch-src_absl_base_config.h]
--- src/absl/base/config.h.orig	2023-01-11 14:22:54 UTC
+++ src/absl/base/config.h
@@ -414,6 +414,7 @@ static_assert(ABSL_INTERNAL_INLINE_NAMES
 #ifdef ABSL_HAVE_MMAP
 #error ABSL_HAVE_MMAP cannot be directly set
 #elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
+    defined(__DragonFly__) || \
     defined(_AIX) || defined(__ros__) || defined(__native_client__) ||    \
     defined(__asmjs__) || defined(__wasm__) || defined(__Fuchsia__) ||    \
     defined(__sun) || defined(__ASYLO__) || defined(__myriad2__) ||       \
@@ -429,6 +430,7 @@ static_assert(ABSL_INTERNAL_INLINE_NAMES
 #ifdef ABSL_HAVE_PTHREAD_GETSCHEDPARAM
 #error ABSL_HAVE_PTHREAD_GETSCHEDPARAM cannot be directly set
 #elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
+    defined(__DragonFly__) || \
     defined(_AIX) || defined(__ros__) || defined(__OpenBSD__) ||          \
     defined(__NetBSD__)
 #define ABSL_HAVE_PTHREAD_GETSCHEDPARAM 1


[FILE:522:patches/patch-src_absl_base_internal_raw__logging.cc]
--- src/absl/base/internal/raw_logging.cc.orig	2023-01-11 14:22:54 UTC
+++ src/absl/base/internal/raw_logging.cc
@@ -38,6 +38,7 @@
 // This preprocessor token is also defined in raw_io.cc.  If you need to copy
 // this, consider moving both to config.h instead.
 #if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
+    defined(__DragonFly__) || \
     defined(__Fuchsia__) || defined(__native_client__) ||               \
     defined(__OpenBSD__) || defined(__EMSCRIPTEN__) || defined(__ASYLO__)
 


[FILE:316:patches/patch-src_absl_base_internal_sysinfo.cc]
--- src/absl/base/internal/sysinfo.cc.orig	2023-01-11 14:22:54 UTC
+++ src/absl/base/internal/sysinfo.cc
@@ -30,7 +30,7 @@
 #include <sys/syscall.h>
 #endif
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/sysctl.h>
 #endif
 


[FILE:407:patches/patch-src_absl_base_internal_unscaledcycleclock.cc]
--- src/absl/base/internal/unscaledcycleclock.cc.orig	2023-01-11 14:22:54 UTC
+++ src/absl/base/internal/unscaledcycleclock.cc
@@ -23,7 +23,7 @@
 #if defined(__powerpc__) || defined(__ppc__)
 #ifdef __GLIBC__
 #include <sys/platform/ppc.h>
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 // clang-format off
 // This order does actually matter =(.
 #include <sys/types.h>


[FILE:395:patches/patch-src_absl_debugging_internal_vdso__support.cc]
--- src/absl/debugging/internal/vdso_support.cc.orig	2023-01-11 14:22:54 UTC
+++ src/absl/debugging/internal/vdso_support.cc
@@ -54,7 +54,7 @@
 using Elf32_auxv_t = Aux32Info;
 using Elf64_auxv_t = Aux64Info;
 #endif
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD__) || defined(__DragonFly__)
 #if defined(__ELF_WORD_SIZE) && __ELF_WORD_SIZE == 64
 using Elf64_auxv_t = Elf64_Auxinfo;
 #endif


[FILE:399:patches/patch-src_absl_time_internal_cctz_include_cctz_time__zone.h]
--- src/absl/time/internal/cctz/include/cctz/time_zone.h.orig	2023-01-11 14:22:54 UTC
+++ src/absl/time/internal/cctz/include/cctz/time_zone.h
@@ -20,6 +20,10 @@
 #ifndef ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_H_
 #define ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_H_
 
+#if defined __NetBSD__ && !defined _NETBSD_SOURCE
+#define _NETBSD_SOURCE
+#endif
+
 #include <chrono>
 #include <cstdint>
 #include <limits>

