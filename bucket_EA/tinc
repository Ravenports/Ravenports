# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		tinc
VERSION=		1.0.36
REVISION=		1
KEYWORDS=		net security
VARIANTS=		std
SDESC[std]=		Virtual Private Network (VPN) daemon
HOMEPAGE=		https://tinc-vpn.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://tinc-vpn.org/packages/
DISTFILE[1]=		tinc-1.0.36.tar.gz:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			man
			info

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USERS=			tinc
GROUPS=			tinc
USERGROUP_SPKG=		primary

USES=			cpe makeinfo ssl zlib lzo

LICENSE=		GPLv3+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv3+:stock
LICENSE_AWK=		TERMS:"^\#include"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/src/bsd/tunemu.c
LICENSE_SCHEME=		solo

INFO=			info:tinc
CPE_VENDOR=		tinc-vpn
FPC_EQUIVALENT=		security/tinc
INFO_SUBDIR=		.

MUST_CONFIGURE=		gnu

RC_SUBR=		tincd:primary

post-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/etc/tinc

[FILE:865:descriptions/desc.primary]
tinc is a Virtual Private Network (VPN) daemon that uses tunnelling and
encryption to create a secure private network between hosts on the 
Internet.

Because the tunnel appears to the IP level network code as a normal network
device, there is no need to adapt any existing software.  This tunnelling
allows VPN sites to share information with each other over the Internet
without exposing any information to others.

A single tinc daemon can accept more than one connection at a time, thus
making it possible to create larger virtual networks, because some
limitations are circumvented.

Instead of most other VPN implementations, tinc encapsulates each network
packet in its own UDP packet, instead of encapsulating all into one TCP or
even PPP over TCP stream. This results in lower latencies, less overhead,
and in general better responsiveness and throughput.


[FILE:97:distinfo]
40f73bb3facc480effe0e771442a706ff0488edea7a5f2505d4ccb2aa8163108       500320 tinc-1.0.36.tar.gz


[FILE:40:manifests/plist.primary]
sbin/tincd
@dir(root,tinc,750) etc/tinc


[FILE:50:manifests/plist.man]
share/man/man5/tinc.conf.5
share/man/man8/tincd.8


[FILE:1740:files/tincd.in]
#!/bin/sh

# $FreeBSD$
#
# PROVIDE: tincd
# REQUIRE: ipfilter FILESYSTEMS sysctl netif
# BEFORE:  SERVERS routing
#
# Define these tincd_* variables in one of these files:
#	/etc/rc.conf
#	/etc/rc.conf.local
#	/etc/rc.conf.d/tincd
#
# tincd_enable (bool):	Set to "NO" by default.
#			Set it to "YES" to enable tincd.
# tincd_cfg (str):	Set to "" by default.
#			Set it to NETNAMEs to use (ex.: "vpn1 vpn2").
# tincd_flags (str):	Set to "" by default.
#			Set it to flags to use (ex.: "-d 1 --logfile").
#
# DO NOT CHANGE THESE DEFAULT VALUES HERE

tincd_enable=${tincd_enable:-"NO"}

. /etc/rc.subr

name="tincd"
rcvar="tincd_enable"
command="%%PREFIX%%/sbin/tincd"
start_cmd="tincd_start"
stop_cmd="tincd_stop"
reload_cmd="tincd_reload"
extra_commands="reload"
procname=${command:-tincd}
ldconfig_command="/sbin/ldconfig"

load_rc_config $name

tincd_start()
{
	${ldconfig_command} -elf -m %%LOCALBASE%%/lib
	if test -z "${tincd_cfg}"
	then
		echo "Starting tincd"
		$command -RU tinc $tincd_flags
	else
		for cfg in ${tincd_cfg}
		do
			echo "Starting tincd for: ${cfg}"
			$command -RU tinc -n $cfg $tincd_flags
		done
	fi
# code deliberately borrowed from /etc/rc.d/netif
	if [ -f /etc/rc.d/ipfilter ] ; then
		# Resync ipfilter
		/etc/rc.d/ipfilter quietresync
	fi
}
tincd_stop()
{
	if test -z "${tincd_cfg}"
	then
		echo "Stopping tincd"
		$command -k
	else
		for cfg in $tincd_cfg
		do
			echo "Stopping tincd for: ${cfg}"
			$command -n $cfg -k
		done
	fi
	wait_for_pids $rc_pid
}
tincd_reload()
{
	if test -z "${tincd_cfg}"
	then
		echo "Sending HUP to tincd"
		$command --kill=HUP
	else
		for cfg in $tincd_cfg
		do
			echo "Sending HUP to tincd for: ${cfg}"
			$command -n $cfg --kill=HUP
		done
	fi
}

run_rc_command "$1"
# eof

