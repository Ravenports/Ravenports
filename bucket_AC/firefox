# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		firefox
VERSION=		65.0.2
KEYWORDS=		www
VARIANTS=		standard
SDESC[standard]=	Mozilla web browser
HOMEPAGE=		https://www.mozilla.org/en-US/firefox/
CONTACT=		Leonid_Bobrov[mazocomp@disroot.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		MOZILLA/firefox/releases/65.0.2/source
DISTFILE[1]=		firefox-65.0.2.source.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		autoconf213:single:standard
			bzip2:static:standard
			cbindgen:single:standard
			nodejs:primary:standard
			python-sqlite3:single:py27
			rust:single:standard
			video4linux:headers:standard
			yasm:single:standard
			zip:single:standard
			clang:compiler:standard
			llvm:single:standard
BUILDRUN_DEPENDS=	bzip2:shared:standard
			dbus-glib:primary:standard
			ffmpeg:primary:standard
			harfbuzz:primary:standard
			icu:single:standard
			libcanberra:primary:standard
			libevent:single:standard
			libffi:single:standard
			libnotify:primary:standard
			libproxy:single:standard
			nss:primary:standard
			sqlite:single:standard
			startup-notification:single:standard
			video4linux:primary:standard

USES=			cpe desktop-utils:single gmake jpeg perl:build
			pkgconfig png python:py27 zlib
GNOME_COMPONENTS=	gconf gdkpixbuf gtk2 gtk3
XORG_COMPONENTS=	pixman xcb

LICENSE=		MPL:single
LICENSE_TERMS=		single:{{WRKSRC}}/toolkit/content/license.html
LICENSE_FILE=		MPL:stock
LICENSE_SCHEME=		solo

CPE_VENDOR=		mozilla
FPC_EQUIVALENT=		www/firefox

MUST_CONFIGURE=		yes
CONFIGURE_OUTSOURCE=	yes

SUB_FILES=		pkg-install-single
			pkg-deinstall-single
SUB_LIST=		MOZILLA=firefox
			MOZILLA_BIN=firefox-bin
			MOZILLA_NAME=Firefox
			MOZDIR={{PREFIX}}/lib/firefox

QMAKE_ARGS=		--enable-application=browser
			--enable-chrome-format=omni
			--enable-default-toolkit=cairo-gtk3
			--enable-gconf
			--enable-install-strip
			--enable-official-branding
			--enable-optimize
			--enable-release
			--enable-startup-notification
			--enable-strip
			--enable-libproxy
			--enable-system-ffi
			--enable-system-pixman
			--enable-system-sqlite
			--disable-alsa
			--disable-debug
			--disable-debug-symbols
			--disable-dtrace
			--disable-jack
			--disable-profiling
			--disable-pulseaudio
			--disable-tests
			--disable-updater
			--disable-webrtc
			--disable-hardening
			--prefix="{{PREFIX}}"
			--with-intl-api
			--with-system-bz2
			--with-system-graphite2
			--with-system-harfbuzz
			--with-system-icu
			--with-system-jpeg="{{LOCALBASE}}"
			--with-system-libevent
			--with-system-nspr
			--with-system-nss
			--with-system-png="{{LOCALBASE}}"
			--with-system-zlib
VAR_OPSYS[freebsd]=	CONFIGURE_ARGS=--enable-jemalloc=4
VAR_OPSYS[linux]=	QMAKE_ARGS=--disable-elf-hack

post-patch:
	${REINPLACE_CMD} -e 's|%%LOCALBASE%%|${LOCALBASE}|g' \
		${WRKSRC}/browser/app/nsBrowserApp.cpp
	${REINPLACE_CMD} -e 's/%u/%U/' -e '/X-MultipleArgs/d' \
		-e '/^Icon/s/=.*/=firefox/' \
		${WRKSRC}/taskcluster/docker/firefox-snap/firefox.desktop
	(cd ${WRKSRC}/gfx/angle/checkout/src/compiler/translator && \
		${REINPLACE_CMD} -e 's|<math.h>|<cmath>|' \
		InfoSink.h IntermNode.cpp)
	# disable SCTP
	${REINPLACE_CMD} -e 's|MOZ_SCTP|MOZ_DISABLE_SCTP|' \
		${WRKSRC}/netwerk/moz.build
	# Set mozilla options
	@${ECHO_CMD} "--=> Setting configuration <=--"
	@for arg in ${QMAKE_ARGS}; do \
		${ECHO_CMD} ".mozconfig <<  $$arg" ;\
		${ECHO_CMD} ac_add_options $$arg >> ${WRKSRC}/.mozconfig ;\
	done
	@${ECHO_CMD} LDFLAGS=\"-Wl,-rpath,${PREFIX}/lib/firefox\" \
		>> ${WRKSRC}/.mozconfig

post-install:
	@${MKDIR} ${STAGEDIR}${PREFIX}/share/pixmaps \
		${STAGEDIR}${PREFIX}/share/applications
	${INSTALL_DATA} ${WRKSRC}/taskcluster/docker/firefox-snap/firefox.desktop \
		${STAGEDIR}${PREFIX}/share/applications/
	${LN} -sf ${PREFIX}/lib/firefox/browser/chrome/icons/default/default48.png \
		${STAGEDIR}${PREFIX}/share/pixmaps/firefox.png

pre-configure:
	(cd ${WRKSRC} && ${LOCALBASE}/bin/autoconf-2.13)
	(cd ${WRKSRC}/js/src/ && ${LOCALBASE}/bin/autoconf-2.13)

[FILE:527:descriptions/desc.single]
Firefox is a full-featured standard-compliant web browser, built on the
Mozilla codebase by thousands of contributors around the world.
It is extensible through thousands of user-contributed extensions, and
features:
 * Improved Security;
 * Improved Tabbed Browsing, with tab grouping;
 * Private Browsing;
 * Spell Checking;
 * Search Suggestions;
 * Session Restore;
 * Web Feeds (RSS);
 * Live Titles;
 * Integrated Search;
 * Live Bookmarks;
 * Pop-up Blocker;
 * Phishing Protection;
 * Themes;
 * Search Engine Manager.


[FILE:107:distinfo]
7d856a681fd8959f492679d0db3c3b787102665670f57cd9739ba9065702059f    279607324 firefox-65.0.2.source.tar.xz


[FILE:1003:manifests/plist.single]
%%ONLY-LINUX%%lib/firefox/
 Throbber-small.gif
 crashreporter
 crashreporter.ini
 libmozsandbox.so
 minidump-analyzer
%%ONLY-LINUX%%lib/firefox/browser/crashreporter-override.ini
%%ONLY-LINUX%%lib/firefox/fonts/EmojiOneMozilla.ttf
bin/firefox
lib/firefox/
 application.ini
 chrome.manifest
 dependentlibs.list
 firefox
 firefox-bin
 liblgpllibs.so
 libmozavcodec.so
 libmozavutil.so
 libmozgtk.so
 libxul.so
 omni.ja
 pingsender
 platform.ini
 plugin-container
 removed-files
lib/firefox/browser/
 blocklist.xml
 chrome.manifest
 omni.ja
lib/firefox/browser/chrome/icons/default/
 default128.png
 default16.png
 default32.png
 default48.png
 default64.png
lib/firefox/browser/features/
 formautofill@mozilla.org.xpi
 screenshots@mozilla.org.xpi
 webcompat-reporter@mozilla.org.xpi
 webcompat@mozilla.org.xpi
lib/firefox/defaults/pref/channel-prefs.js
lib/firefox/gmp-clearkey/0.1/
 libclearkey.so
 manifest.json
lib/firefox/gtk2/libmozgtk.so
share/applications/firefox.desktop
share/pixmaps/firefox.png


[FILE:4614:patches/patch-addon-search]
https://github.com/mozilla/addons/issues/708
https://github.com/mozilla/addons-frontend/issues/4610

diff --git browser/app/profile/firefox.js browser/app/profile/firefox.js
index 75c2c5e435e35..4d8c09c02759b 100644
--- browser/app/profile/firefox.js.orig	2019-02-27 22:18:20 UTC
+++ browser/app/profile/firefox.js
@@ -40,8 +40,8 @@ pref("extensions.webextOptionalPermissio
 pref("extensions.getAddons.cache.enabled", true);
 pref("extensions.getAddons.get.url", "https://services.addons.mozilla.org/api/v3/addons/search/?guid=%IDS%&lang=%LOCALE%");
 pref("extensions.getAddons.compatOverides.url", "https://services.addons.mozilla.org/api/v3/addons/compat-override/?guid=%IDS%&lang=%LOCALE%");
-pref("extensions.getAddons.search.browseURL", "https://addons.mozilla.org/%LOCALE%/firefox/search?q=%TERMS%&platform=%OS%&appver=%VERSION%");
-pref("extensions.webservice.discoverURL", "https://discovery.addons.mozilla.org/%LOCALE%/firefox/discovery/pane/%VERSION%/%OS%/%COMPATIBILITY_MODE%");
+pref("extensions.getAddons.search.browseURL", "https://addons.mozilla.org/%LOCALE%/firefox/search?q=%TERMS%&platform=Linux&appver=%VERSION%");
+pref("extensions.webservice.discoverURL", "https://discovery.addons.mozilla.org/%LOCALE%/firefox/discovery/pane/%VERSION%/Linux/%COMPATIBILITY_MODE%");
 pref("extensions.getAddons.link.url", "https://addons.mozilla.org/%LOCALE%/firefox/");
 pref("extensions.getAddons.langpacks.url", "https://services.addons.mozilla.org/api/v3/addons/language-tools/?app=firefox&type=language&appversion=%VERSION%");
 
@@ -175,8 +175,8 @@ pref("app.update.service.enabled", true)
 //  .. etc ..
 //
 pref("extensions.update.enabled", true);
-pref("extensions.update.url", "https://versioncheck.addons.mozilla.org/update/VersionCheck.php?reqVersion=%REQ_VERSION%&id=%ITEM_ID%&version=%ITEM_VERSION%&maxAppVersion=%ITEM_MAXAPPVERSION%&status=%ITEM_STATUS%&appID=%APP_ID%&appVersion=%APP_VERSION%&appOS=%APP_OS%&appABI=%APP_ABI%&locale=%APP_LOCALE%&currentAppVersion=%CURRENT_APP_VERSION%&updateType=%UPDATE_TYPE%&compatMode=%COMPATIBILITY_MODE%");
-pref("extensions.update.background.url", "https://versioncheck-bg.addons.mozilla.org/update/VersionCheck.php?reqVersion=%REQ_VERSION%&id=%ITEM_ID%&version=%ITEM_VERSION%&maxAppVersion=%ITEM_MAXAPPVERSION%&status=%ITEM_STATUS%&appID=%APP_ID%&appVersion=%APP_VERSION%&appOS=%APP_OS%&appABI=%APP_ABI%&locale=%APP_LOCALE%&currentAppVersion=%CURRENT_APP_VERSION%&updateType=%UPDATE_TYPE%&compatMode=%COMPATIBILITY_MODE%");
+pref("extensions.update.url", "https://versioncheck.addons.mozilla.org/update/VersionCheck.php?reqVersion=%REQ_VERSION%&id=%ITEM_ID%&version=%ITEM_VERSION%&maxAppVersion=%ITEM_MAXAPPVERSION%&status=%ITEM_STATUS%&appID=%APP_ID%&appVersion=%APP_VERSION%&appOS=Linux&appABI=%APP_ABI%&locale=%APP_LOCALE%&currentAppVersion=%CURRENT_APP_VERSION%&updateType=%UPDATE_TYPE%&compatMode=%COMPATIBILITY_MODE%");
+pref("extensions.update.background.url", "https://versioncheck-bg.addons.mozilla.org/update/VersionCheck.php?reqVersion=%REQ_VERSION%&id=%ITEM_ID%&version=%ITEM_VERSION%&maxAppVersion=%ITEM_MAXAPPVERSION%&status=%ITEM_STATUS%&appID=%APP_ID%&appVersion=%APP_VERSION%&appOS=Linux&appABI=%APP_ABI%&locale=%APP_LOCALE%&currentAppVersion=%CURRENT_APP_VERSION%&updateType=%UPDATE_TYPE%&compatMode=%COMPATIBILITY_MODE%");
 pref("extensions.update.interval", 86400);  // Check for updates to Extensions and
                                             // Themes every day
 
--- toolkit/mozapps/extensions/internal/AddonRepository.jsm.orig	2019-02-27 22:18:32 UTC
+++ toolkit/mozapps/extensions/internal/AddonRepository.jsm
@@ -604,7 +604,7 @@ var AddonRepository = {
       addon.version = String(aEntry.current_version.version);
       if (Array.isArray(aEntry.current_version.files)) {
         for (let file of aEntry.current_version.files) {
-          if (file.platform == "all" || file.platform == PLATFORM) {
+          if (file.platform == "all" || file.platform == "linux" || file.platform == PLATFORM) {
             if (file.url) {
               addon.sourceURI = NetUtil.newURI(file.url);
             }
--- toolkit/mozapps/extensions/internal/XPIDatabase.jsm.orig	2019-02-27 22:18:32 UTC
+++ toolkit/mozapps/extensions/internal/XPIDatabase.jsm
@@ -397,7 +397,7 @@ class AddonInternal {
     // Something is causing errors in here
     try {
       for (let platform of this.targetPlatforms) {
-        if (platform.os == Services.appinfo.OS) {
+        if (platform.os == "Linux" || platform.os == Services.appinfo.OS) {
           if (platform.abi) {
             needsABI = true;
             if (platform.abi === abi)


[FILE:423:patches/patch-browser-app-nsBrowserApp.cpp]
--- browser/app/nsBrowserApp.cpp.orig	2019-02-27 22:18:20 UTC
+++ browser/app/nsBrowserApp.cpp
@@ -275,6 +275,9 @@ int main(int argc, char* argv[], char* e
   }
 #endif
 
+  setenv("MOZ_GMP_PATH", "%%LOCALBASE%%/lib/browser_plugins/symlinks/gecko", 0);
+  setenv("MOZ_PLUGIN_PATH", "%%LOCALBASE%%/lib/browser_plugins/symlinks/gecko", 0);
+
 #ifdef HAS_DLL_BLOCKLIST
   DllBlocklist_Initialize(gBlocklistInitFlags);
 #endif


[FILE:1704:patches/patch-bug1288587]
diff --git a/build/moz.configure/init.configure b/build/moz.configure/init.configure
index 855214a..1e91d51 100644
--- build/moz.configure/init.configure.orig	2019-02-27 22:18:21 UTC
+++ build/moz.configure/init.configure
@@ -204,6 +204,7 @@ option(env='PYTHON', nargs=1, help='Pyth
 @imports(_from='mozbuild.configure.util', _import='LineIO')
 @imports(_from='mozbuild.virtualenv', _import='VirtualenvManager')
 @imports(_from='mozbuild.virtualenv', _import='verify_python_version')
+@imports(_from='__builtin__', _import='KeyError')
 @imports('distutils.sysconfig')
 def virtualenv_python(env_python, build_env, mozconfig, help):
     if help:
@@ -223,6 +224,12 @@ def virtualenv_python(env_python, build_
             python = mozconfig['vars']['added']['PYTHON']
         elif 'PYTHON' in mozconfig['vars']['modified']:
             python = mozconfig['vars']['modified']['PYTHON'][1]
+        for i in ('env', 'vars'):
+            for j in ('added', 'modified'):
+                try:
+                    del mozconfig[i][j]['PYTHON']
+                except KeyError:
+                    pass
 
     with LineIO(lambda l: log.error(l)) as out:
         verify_python_version(out)
@@ -260,7 +267,10 @@ def virtualenv_python(env_python, build_
     if not normsep(sys.executable).startswith(normsep(virtualenvs_root)):
         log.info('Reexecuting in the virtualenv')
         if env_python:
-            del os.environ['PYTHON']
+            try:
+                del os.environ['PYTHON']
+            except KeyError:
+                pass
         # One would prefer to use os.execl, but that's completely borked on
         # Windows.
         sys.exit(subprocess.call([python] + sys.argv))


[FILE:1349:patches/patch-bug1507655]
Revert bug 1497976 as close_fds on Python 2 is too slow

diff --git build/moz.configure/util.configure build/moz.configure/util.configure
index 25862fee7c32..3fc725a5124e 100644
--- build/moz.configure/util.configure.orig	2019-02-27 22:18:21 UTC
+++ build/moz.configure/util.configure
@@ -22,7 +22,6 @@ def configure_error(message):
 
 # A wrapper to obtain a process' output and return code.
 # Returns a tuple (retcode, stdout, stderr).
-@imports('os')
 @imports(_from='__builtin__', _import='unicode')
 @imports('subprocess')
 @imports(_from='mozbuild.shellutil', _import='quote')
@@ -45,13 +44,7 @@ def get_cmd_output(*args, **kwargs):
 
     log.debug('Executing: `%s`', quote(*args))
     proc = subprocess.Popen(args, stdout=subprocess.PIPE,
-                            stderr=subprocess.PIPE,
-                            # On Python 2 on Windows, close_fds prevents the
-                            # process from inheriting stdout/stderr.
-                            # Elsewhere, it simply prevents it from inheriting
-                            # extra file descriptors, which is what we want.
-                            close_fds=os.name != 'nt',
-                            **kwargs)
+                            stderr=subprocess.PIPE, **kwargs)
     stdout, stderr = proc.communicate()
     return proc.wait(), stdout, stderr
 


[FILE:1120:patches/patch-bug1511726]
Don't try to use shader disk cache if disabled

diff --git gfx/webrender_bindings/RenderThread.cpp gfx/webrender_bindings/RenderThread.cpp
index 1e60a900ff5a..92dc857b8390 100644
--- gfx/webrender_bindings/RenderThread.cpp.orig	2019-02-27 22:18:23 UTC
+++ gfx/webrender_bindings/RenderThread.cpp
@@ -764,7 +764,9 @@ WebRenderProgramCache::WebRenderProgramC
     path.Append(gfx::gfxVars::ProfDirectory());
   }
   mProgramCache = wr_program_cache_new(&path, aThreadPool);
-  wr_try_load_shader_from_disk(mProgramCache);
+  if (gfxVars::UseWebRenderProgramBinaryDisk()) {
+    wr_try_load_shader_from_disk(mProgramCache);
+  }
 }
 
 WebRenderProgramCache::~WebRenderProgramCache() {
--- gfx/webrender_bindings/src/bindings.rs.orig	2019-02-27 22:18:23 UTC
+++ gfx/webrender_bindings/src/bindings.rs
@@ -914,9 +914,7 @@ pub unsafe extern "C" fn wr_program_cach
 
 #[no_mangle]
 pub unsafe extern "C" fn wr_try_load_shader_from_disk(program_cache: *mut WrProgramCache) {
-    if !program_cache.is_null() {
-        (*program_cache).try_load_from_disk();
-    }
+    (*program_cache).try_load_from_disk();
 }
 
 #[no_mangle]


[FILE:17341:patches/patch-bug1514156]
commit 9b55d8d04f4b
Author: Sotaro Ikeda <sotaro.ikeda.g@gmail.com>
Date:   Thu Jan 3 22:36:09 2019 -0800

    Bug 1514156 - Add RenderCompositorEGL for Wayland
---
 gfx/gl/GLContextEGL.h                          |   4 +
 gfx/gl/GLContextProviderEGL.cpp                |  29 ++++++
 gfx/webrender_bindings/RenderCompositor.cpp    |  12 +++
 gfx/webrender_bindings/RenderCompositorEGL.cpp | 135 +++++++++++++++++++++++++
 gfx/webrender_bindings/RenderCompositorEGL.h   |  54 ++++++++++
 gfx/webrender_bindings/moz.build               |  10 ++
 widget/gtk/CompositorWidgetChild.cpp           |   6 ++
 widget/gtk/CompositorWidgetChild.h             |   4 +-
 widget/gtk/CompositorWidgetParent.cpp          |   6 ++
 widget/gtk/CompositorWidgetParent.h            |   2 +
 widget/gtk/GtkCompositorWidget.cpp             |  15 ++-
 widget/gtk/GtkCompositorWidget.h               |   9 ++
 widget/gtk/PCompositorWidget.ipdl              |   1 +
 widget/gtk/mozcontainer.cpp                    |  11 ++
 widget/gtk/mozcontainer.h                      |   2 +
 widget/gtk/nsWindow.cpp                        |  16 +++
 widget/gtk/nsWindow.h                          |   1 +
 17 files changed, 315 insertions(+), 2 deletions(-)

diff --git gfx/gl/GLContextEGL.h gfx/gl/GLContextEGL.h
index 95d5e0c02e23..adb37e59a9f7 100644
--- gfx/gl/GLContextEGL.h.orig	2019-02-27 22:18:23 UTC
+++ gfx/gl/GLContextEGL.h
@@ -91,6 +91,10 @@ class GLContextEGL : public GLContext {
       CreateContextFlags flags, const gfx::IntSize& size,
       const SurfaceCaps& minCaps, nsACString* const out_FailureId);
 
+#if defined(MOZ_WAYLAND)
+  static EGLSurface CreateEGLSurfaceForCompositorWidget(
+      widget::CompositorWidget* aCompositorWidget, bool aForceAccelerated);
+#endif
  protected:
   friend class GLContextProviderEGL;
   friend class GLContextEGLFactory;
--- gfx/gl/GLContextProviderEGL.cpp.orig	2019-02-27 22:18:23 UTC
+++ gfx/gl/GLContextProviderEGL.cpp
@@ -295,6 +295,36 @@ already_AddRefed<GLContext> GLContextEGL
   return gl.forget();
 }
 
+#if defined(MOZ_WAYLAND)
+/* static */ EGLSurface GLContextEGL::CreateEGLSurfaceForCompositorWidget(
+    widget::CompositorWidget* aCompositorWidget, bool aForceAccelerated) {
+  nsCString discardFailureId;
+  if (!GLLibraryEGL::EnsureInitialized(false, &discardFailureId)) {
+    gfxCriticalNote << "Failed to load EGL library 6!";
+    return EGL_NO_SURFACE;
+  }
+
+  MOZ_ASSERT(aCompositorWidget);
+  EGLNativeWindowType window = GET_NATIVE_WINDOW_FROM_COMPOSITOR_WIDGET(aCompositorWidget);
+  if (!window) {
+    gfxCriticalNote << "window is null";
+    return EGL_NO_SURFACE;
+  }
+  const bool useWebRender = aCompositorWidget->GetCompositorOptions().UseWebRender();
+
+  EGLConfig config;
+  if (!CreateConfig(&config, useWebRender)) {
+    gfxCriticalNote << "Failed to create EGLConfig!";
+    return EGL_NO_SURFACE;
+  }
+
+  EGLSurface surface = EGL_NO_SURFACE;
+  surface = mozilla::gl::CreateSurfaceFromNativeWindow(window, config);
+
+  return surface;
+}
+#endif
+
 GLContextEGL::GLContextEGL(CreateContextFlags flags, const SurfaceCaps& caps,
                            bool isOffscreen, EGLConfig config,
                            EGLSurface surface, EGLContext context)
--- gfx/webrender_bindings/RenderCompositor.cpp.orig	2019-02-27 22:18:23 UTC
+++ gfx/webrender_bindings/RenderCompositor.cpp
@@ -16,6 +16,10 @@
 #include "mozilla/webrender/RenderCompositorANGLE.h"
 #endif
 
+#ifdef MOZ_WAYLAND
+#include "mozilla/webrender/RenderCompositorEGL.h"
+#endif
+
 namespace mozilla {
 namespace wr {
 
@@ -26,6 +30,14 @@ namespace wr {
     return RenderCompositorANGLE::Create(std::move(aWidget));
   }
 #endif
+
+#ifdef MOZ_WAYLAND
+  UniquePtr<RenderCompositor> eglCompositor = RenderCompositorEGL::Create(aWidget);
+  if (eglCompositor) {
+    return eglCompositor;
+  }
+#endif
+
   return RenderCompositorOGL::Create(std::move(aWidget));
 }
 
--- /dev/null	2019-03-05 04:43:25 UTC
+++ gfx/webrender_bindings/RenderCompositorEGL.cpp
@@ -0,0 +1,132 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "RenderCompositorEGL.h"
+
+#include "GLContext.h"
+#include "GLContextEGL.h"
+#include "GLContextProvider.h"
+#include "GLLibraryEGL.h"
+#include "mozilla/widget/CompositorWidget.h"
+#include "mozilla/widget/GtkCompositorWidget.h"
+
+#include <gdk/gdk.h>
+#include <gdk/gdkx.h>
+
+namespace mozilla {
+namespace wr {
+
+/* static */ UniquePtr<RenderCompositor> RenderCompositorEGL::Create(
+    RefPtr<widget::CompositorWidget> aWidget) {
+
+  if (GDK_IS_X11_DISPLAY(gdk_display_get_default())) {
+    return nullptr;
+  }
+
+  RefPtr<gl::GLContext> gl;
+  gl = CreateGLContext(aWidget);
+  if (!gl) {
+    return nullptr;
+  }
+  return MakeUnique<RenderCompositorEGL>(std::move(gl), std::move(aWidget));
+}
+
+/* static */ already_AddRefed<gl::GLContext>
+RenderCompositorEGL::CreateGLContext(RefPtr<widget::CompositorWidget> aWidget) {
+  nsCString discardFailureId;
+
+  // Create GLContext with dummy EGLSurface.
+  RefPtr<gl::GLContext> gl =
+      //XXX headless context did not work.
+      gl::GLContextProviderEGL::CreateForCompositorWidget(aWidget, true);
+  if (!gl) {
+    gfxCriticalNote << "Failed GL context creation for WebRender: "
+                    << gfx::hexa(gl.get());
+    return nullptr;
+  }
+
+  if (!gl->MakeCurrent()) {
+    gfxCriticalNote << "Failed GL context creation for WebRender: "
+                    << gfx::hexa(gl.get());
+    return nullptr;
+  }
+
+  return gl.forget();
+}
+
+/* static */ EGLSurface RenderCompositorEGL::CreateEGLSurface(
+    widget::CompositorWidget* aWidget) {
+  EGLSurface surface = EGL_NO_SURFACE;
+  surface = gl::GLContextEGL::CreateEGLSurfaceForCompositorWidget(
+      aWidget, /* aForceAccelerated */ true);
+  if (surface == EGL_NO_SURFACE) {
+    gfxCriticalNote << "Failed to create EGLSurface";
+  }
+  return surface;
+}
+
+RenderCompositorEGL::RenderCompositorEGL(
+    RefPtr<gl::GLContext>&& aGL, RefPtr<widget::CompositorWidget>&& aWidget)
+    : RenderCompositor(std::move(aWidget)), mGL(aGL), mEGLSurface(EGL_NO_SURFACE) {
+  MOZ_ASSERT(mGL);
+}
+
+RenderCompositorEGL::~RenderCompositorEGL() {
+  DestroyEGLSurface();
+}
+
+bool RenderCompositorEGL::BeginFrame() {
+
+  if (mWidget->AsX11() && mWidget->AsX11()->WaylandRequestsUpdatingEGLSurface()) {
+    mEGLSurface = CreateEGLSurface(mWidget);
+    gl::GLContextEGL::Cast(gl())->SetEGLSurfaceOverride(mEGLSurface);
+  }
+
+  if (!mGL->MakeCurrent()) {
+    gfxCriticalNote << "Failed to make render context current, can't draw.";
+    return false;
+  }
+
+  return true;
+}
+
+void RenderCompositorEGL::EndFrame()
+{
+  if (mEGLSurface != EGL_NO_SURFACE) {
+    mGL->SwapBuffers();
+  }
+}
+
+void RenderCompositorEGL::WaitForGPU() {}
+
+void RenderCompositorEGL::Pause() {}
+
+bool RenderCompositorEGL::Resume() {
+  return true;
+}
+
+bool RenderCompositorEGL::MakeCurrent() {
+  gl::GLContextEGL::Cast(gl())->SetEGLSurfaceOverride(mEGLSurface);
+  return gl()->MakeCurrent();
+}
+
+void RenderCompositorEGL::DestroyEGLSurface() {
+  auto* egl = gl::GLLibraryEGL::Get();
+
+  // Release EGLSurface of back buffer before calling ResizeBuffers().
+  if (mEGLSurface) {
+    gl::GLContextEGL::Cast(gl())->SetEGLSurfaceOverride(EGL_NO_SURFACE);
+    egl->fDestroySurface(egl->Display(), mEGLSurface);
+    mEGLSurface = nullptr;
+  }
+}
+
+LayoutDeviceIntSize RenderCompositorEGL::GetBufferSize() {
+  return mWidget->GetClientSize();
+}
+
+}  // namespace wr
+}  // namespace mozilla
--- /dev/null	2019-03-05 04:43:25 UTC
+++ gfx/webrender_bindings/RenderCompositorEGL.h
@@ -0,0 +1,54 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef MOZILLA_GFX_RENDERCOMPOSITOR_EGL_H
+#define MOZILLA_GFX_RENDERCOMPOSITOR_EGL_H
+
+#include "GLTypes.h"
+#include "mozilla/webrender/RenderCompositor.h"
+
+namespace mozilla {
+
+namespace wr {
+
+class RenderCompositorEGL : public RenderCompositor {
+ public:
+  static UniquePtr<RenderCompositor> Create(
+      RefPtr<widget::CompositorWidget> aWidget);
+
+  RenderCompositorEGL(RefPtr<gl::GLContext>&& aGL,
+                      RefPtr<widget::CompositorWidget>&& aWidget);
+  virtual ~RenderCompositorEGL();
+
+  bool BeginFrame() override;
+  void EndFrame() override;
+  void WaitForGPU() override;
+  void Pause() override;
+  bool Resume() override;
+
+  gl::GLContext* gl() const override { return mGL; }
+
+  bool MakeCurrent() override;
+
+  bool UseANGLE() const override { return false; }
+
+  LayoutDeviceIntSize GetBufferSize() override;
+
+ protected:
+   static already_AddRefed<gl::GLContext> CreateGLContext(
+      RefPtr<widget::CompositorWidget> aWidget);
+   static EGLSurface CreateEGLSurface(widget::CompositorWidget* aWidget);
+
+  void DestroyEGLSurface();
+
+  RefPtr<gl::GLContext> mGL;
+  EGLSurface mEGLSurface;
+};
+
+}  // namespace wr
+}  // namespace mozilla
+
+#endif  // MOZILLA_GFX_RENDERCOMPOSITOR_EGL_H
--- gfx/webrender_bindings/moz.build.orig	2019-02-27 22:18:23 UTC
+++ gfx/webrender_bindings/moz.build
@@ -67,6 +67,14 @@ if CONFIG['MOZ_ENABLE_D3D10_LAYER']:
         'RenderCompositorANGLE.cpp',
     ]
 
+if CONFIG['MOZ_WAYLAND']:
+    EXPORTS.mozilla.webrender += [
+        'RenderCompositorEGL.h',
+    ]
+    SOURCES += [
+        'RenderCompositorEGL.cpp',
+    ]
+
 if CONFIG['MOZ_WIDGET_TOOLKIT'] in ('android', 'gtk3'):
     CXXFLAGS += CONFIG['MOZ_CAIRO_CFLAGS']
     CXXFLAGS += CONFIG['CAIRO_FT_CFLAGS']
@@ -75,5 +83,7 @@ include('/ipc/chromium/chromium-config.m
 
 FINAL_LIBRARY = 'xul'
 
+CXXFLAGS += CONFIG['TK_CFLAGS']
+
 if CONFIG['CC_TYPE'] == 'clang-cl':
     AllowCompilerWarnings()  # workaround for bug 1090497
--- widget/gtk/CompositorWidgetChild.cpp.orig	2019-02-27 22:18:32 UTC
+++ widget/gtk/CompositorWidgetChild.cpp
@@ -35,5 +35,11 @@ void CompositorWidgetChild::NotifyClient
   Unused << SendNotifyClientSizeChanged(aClientSize);
 }
 
+#ifdef MOZ_WAYLAND
+void CompositorWidgetChild::RequestsUpdatingEGLSurface() {
+  Unused << SendRequestsUpdatingEGLSurface();
+}
+#endif
+
 }  // namespace widget
 }  // namespace mozilla
--- widget/gtk/CompositorWidgetChild.h.orig	2019-02-27 22:18:32 UTC
+++ widget/gtk/CompositorWidgetChild.h
@@ -24,7 +24,9 @@ class CompositorWidgetChild final : publ
   mozilla::ipc::IPCResult RecvUnobserveVsync() override;
 
   void NotifyClientSizeChanged(const LayoutDeviceIntSize& aClientSize) override;
-
+#ifdef MOZ_WAYLAND
+  void RequestsUpdatingEGLSurface() override;
+#endif
  private:
   RefPtr<CompositorVsyncDispatcher> mVsyncDispatcher;
   RefPtr<CompositorWidgetVsyncObserver> mVsyncObserver;
--- widget/gtk/CompositorWidgetParent.cpp.orig	2019-02-27 22:18:32 UTC
+++ widget/gtk/CompositorWidgetParent.cpp
@@ -40,5 +40,13 @@ mozilla::ipc::IPCResult CompositorWidget
   return IPC_OK();
 }
 
+mozilla::ipc::IPCResult CompositorWidgetParent::RecvRequestsUpdatingEGLSurface()
+{
+#ifdef MOZ_WAYLAND
+  RequestsUpdatingEGLSurface();
+#endif
+  return IPC_OK();
+}
+
 }  // namespace widget
 }  // namespace mozilla
--- widget/gtk/CompositorWidgetParent.h.orig	2019-02-27 22:18:32 UTC
+++ widget/gtk/CompositorWidgetParent.h
@@ -27,6 +27,8 @@ class CompositorWidgetParent final : pub
   mozilla::ipc::IPCResult RecvNotifyClientSizeChanged(
       const LayoutDeviceIntSize& aClientSize) override;
 
+  mozilla::ipc::IPCResult RecvRequestsUpdatingEGLSurface() override;
+
  private:
   RefPtr<VsyncObserver> mVsyncObserver;
 };
--- widget/gtk/GtkCompositorWidget.cpp.orig	2019-02-27 22:18:32 UTC
+++ widget/gtk/GtkCompositorWidget.cpp
@@ -85,6 +85,18 @@ void GtkCompositorWidget::NotifyClientSi
   mClientSize = aClientSize;
 }
 
+#ifdef MOZ_WAYLAND
+void GtkCompositorWidget::RequestsUpdatingEGLSurface() {
+  mWaylandRequestsUpdatingEGLSurface = true;
+}
+
+bool GtkCompositorWidget::WaylandRequestsUpdatingEGLSurface() {
+  bool ret = mWaylandRequestsUpdatingEGLSurface;
+  mWaylandRequestsUpdatingEGLSurface = false;
+  return ret;
+}
+#endif
+
 LayoutDeviceIntSize GtkCompositorWidget::GetClientSize() { return mClientSize; }
 
 uintptr_t GtkCompositorWidget::GetWidgetKey() {
--- widget/gtk/GtkCompositorWidget.h.orig	2019-02-27 22:18:32 UTC
+++ widget/gtk/GtkCompositorWidget.h
@@ -20,6 +20,10 @@ class PlatformCompositorWidgetDelegate :
   virtual void NotifyClientSizeChanged(
       const LayoutDeviceIntSize& aClientSize) = 0;
 
+#ifdef MOZ_WAYLAND
+  virtual void RequestsUpdatingEGLSurface() = 0;
+#endif
+
   // CompositorWidgetDelegate Overrides
 
   PlatformCompositorWidgetDelegate* AsPlatformSpecificDelegate() override {
@@ -62,11 +66,18 @@ class GtkCompositorWidget : public Compo
 
   void NotifyClientSizeChanged(const LayoutDeviceIntSize& aClientSize) override;
 
+#ifdef MOZ_WAYLAND
+  void RequestsUpdatingEGLSurface() override;
+  bool WaylandRequestsUpdatingEGLSurface();
+#endif
  protected:
   nsWindow* mWidget;
 
  private:
   LayoutDeviceIntSize mClientSize;
+#ifdef MOZ_WAYLAND
+  bool mWaylandRequestsUpdatingEGLSurface = false;
+#endif
 
   Display* mXDisplay;
   Window mXWindow;
--- widget/gtk/PCompositorWidget.ipdl.orig	2019-02-27 22:18:32 UTC
+++ widget/gtk/PCompositorWidget.ipdl
@@ -19,6 +19,7 @@ parent:
   async __delete__();
 
   async NotifyClientSizeChanged(LayoutDeviceIntSize aClientSize);
+  async RequestsUpdatingEGLSurface();
 
 child:
 
--- widget/gtk/mozcontainer.cpp.orig	2019-02-27 22:18:32 UTC
+++ widget/gtk/mozcontainer.cpp
@@ -159,6 +159,7 @@ void moz_container_init(MozContainer *co
   // We can draw to x11 window any time.
   container->ready_to_draw = GDK_IS_X11_DISPLAY(gdk_display_get_default());
   container->surface_needs_clear = true;
+  container->egl_surface_needs_update = false;
 #endif
 }
 
@@ -176,6 +177,9 @@ static void frame_callback_handler(void
                                    uint32_t time) {
   MozContainer *container = MOZ_CONTAINER(data);
   g_clear_pointer(&container->frame_callback_handler, wl_callback_destroy);
+  if (!container->ready_to_draw) {
+    container->egl_surface_needs_update = true;
+  }
   container->ready_to_draw = true;
 }
 
@@ -208,6 +212,7 @@ static void moz_container_unmap_wayland(
   g_clear_pointer(&container->frame_callback_handler, wl_callback_destroy);
 
   container->surface_needs_clear = true;
+  container->egl_surface_needs_update = false;
   container->ready_to_draw = false;
 }
 
@@ -523,4 +528,10 @@ gboolean moz_container_surface_needs_cle
   container->surface_needs_clear = false;
   return state;
 }
+
+gboolean moz_container_egl_surface_needs_update(MozContainer *container){
+  gboolean state = container->egl_surface_needs_update;
+  container->egl_surface_needs_update = false;
+  return state;
+}
 #endif
--- widget/gtk/mozcontainer.h.orig	2019-02-27 22:18:33 UTC
+++ widget/gtk/mozcontainer.h
@@ -77,6 +77,7 @@ struct _MozContainer {
   struct wl_egl_window *eglwindow;
   struct wl_callback *frame_callback_handler;
   gboolean surface_needs_clear;
+  gboolean egl_surface_needs_update;
   gboolean ready_to_draw;
 #endif
 };
@@ -96,6 +97,7 @@ struct wl_egl_window *moz_container_get_
 
 gboolean moz_container_has_wl_egl_window(MozContainer *container);
 gboolean moz_container_surface_needs_clear(MozContainer *container);
+gboolean moz_container_egl_surface_needs_update(MozContainer *container);
 #endif
 
 #endif /* __MOZ_CONTAINER_H__ */
--- widget/gtk/nsWindow.cpp.orig	2019-02-27 22:18:32 UTC
+++ widget/gtk/nsWindow.cpp
@@ -1886,6 +1886,11 @@ gboolean nsWindow::OnExposeEvent(cairo_t
   region.ScaleRoundOut(scale, scale);
 
   if (GetLayerManager()->AsKnowsCompositor() && mCompositorSession) {
+#ifdef MOZ_WAYLAND
+    if(mCompositorWidgetDelegate && WaylandRequestsUpdatingEGLSurface()) {
+      mCompositorWidgetDelegate->RequestsUpdatingEGLSurface();
+    }
+#endif
     // We need to paint to the screen even if nothing changed, since if we
     // don't have a compositing window manager, our pixels could be stale.
     GetLayerManager()->SetNeedsComposite(true);
@@ -6599,6 +6604,17 @@ bool nsWindow::WaylandSurfaceNeedsClear(
       "nsWindow::WaylandSurfaceNeedsClear(): We don't have any mContainer!");
   return false;
 }
+
+bool nsWindow::WaylandRequestsUpdatingEGLSurface() {
+  if (mContainer) {
+    return moz_container_egl_surface_needs_update(MOZ_CONTAINER(mContainer));
+  }
+
+  NS_WARNING(
+      "nsWindow::WaylandSurfaceNeedsClear(): We don't have any mContainer!");
+  return false;
+}
+
 #endif
 
 #ifdef MOZ_X11
--- widget/gtk/nsWindow.h.orig	2019-02-27 22:18:32 UTC
+++ widget/gtk/nsWindow.h
@@ -373,6 +373,7 @@ class nsWindow final : public nsBaseWidg
   wl_display* GetWaylandDisplay();
   wl_surface* GetWaylandSurface();
   bool WaylandSurfaceNeedsClear();
+  bool WaylandRequestsUpdatingEGLSurface();
 #endif
   virtual void GetCompositorWidgetInitData(
       mozilla::widget::CompositorWidgetInitData* aInitData) override;


[FILE:8116:patches/patch-bug847568]
# Allow building against system-wide graphite2/harfbuzz.

diff --git config/system-headers.mozbuild config/system-headers.mozbuild
index 7620b4d00623..09d3db5ca8c0 100644
--- config/system-headers.mozbuild.orig	2019-02-27 22:18:21 UTC
+++ config/system-headers.mozbuild
@@ -1304,6 +1304,19 @@ if CONFIG['MOZ_ENABLE_CONTENTMANAGER']:
         'SelectSingleContentItemPage.h',
     ]
 
+if CONFIG['MOZ_SYSTEM_GRAPHITE2']:
+    system_headers += [
+        'graphite2/Font.h',
+        'graphite2/Segment.h',
+    ]
+
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    system_headers += [
+        'harfbuzz/hb-glib.h',
+        'harfbuzz/hb-ot.h',
+        'harfbuzz/hb.h',
+    ]
+
 if CONFIG['MOZ_SYSTEM_LIBVPX']:
     system_headers += [
         'vpx_mem/vpx_mem.h',
--- dom/base/moz.build.orig	2019-02-27 22:18:22 UTC
+++ dom/base/moz.build
@@ -506,6 +506,9 @@ if CONFIG['MOZ_BUILD_APP'] in ['browser'
 if CONFIG['MOZ_X11']:
     CXXFLAGS += CONFIG['TK_CFLAGS']
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
+
 GENERATED_FILES += [
     'PropertyUseCounterMap.inc',
     'UseCounterList.h',
--- gfx/graphite2/moz-gr-update.sh.orig	2019-02-27 22:18:23 UTC
+++ gfx/graphite2/moz-gr-update.sh
@@ -1,6 +1,7 @@
 #!/bin/bash
 
 # Script used to update the Graphite2 library in the mozilla source tree
+# and bump version for --with-system-graphite2
 
 # This script lives in gfx/graphite2, along with the library source,
 # but must be run from the top level of the mozilla-central tree.
@@ -37,12 +38,16 @@ echo "See" $0 "for update procedure." >>
 #find gfx/graphite2/ -name "*.cpp" -exec perl -p -i -e "s/<cstdio>/<stdio.h>/;s/Windows.h/windows.h/;" {} \;
 #find gfx/graphite2/ -name "*.h" -exec perl -p -i -e "s/<cstdio>/<stdio.h>/;s/Windows.h/windows.h/;" {} \;
 
+# chase version for --with-system-graphite2
+perl -p -i -e "s/[0-9]+\,[0-9]+\,[0-9]+/$RELEASE/ and tr/./,/ \
+  if /GR2_VERSION_REQUIRE/" old-configure.in
+
 # summarize what's been touched
 echo Updated to $RELEASE.
 echo Here is what changed in the gfx/graphite2 directory:
 echo
 
-hg stat gfx/graphite2
+hg stat old-configure.in gfx/graphite2
 
 echo
 echo If gfx/graphite2/src/files.mk has changed, please make corresponding
--- gfx/harfbuzz/README-mozilla.orig	2019-02-27 22:18:23 UTC
+++ gfx/harfbuzz/README-mozilla
@@ -15,3 +15,8 @@ from within the gfx/harfbuzz directory.
 
 If the collection of source files changes, manual updates to moz.build may be
 needed as we don't use the upstream makefiles.
+
+The in-tree copy may be omitted during build by --with-system-harfbuzz.
+Make sure to keep pkg-config version check within toolkit/moz.configure in sync
+with checkout version or increment latest tag by one if it's not based
+on upstream release.
--- gfx/moz.build.orig	2019-02-27 22:18:23 UTC
+++ gfx/moz.build
@@ -10,6 +10,12 @@ with Files('**'):
 if CONFIG['MOZ_TREE_CAIRO']:
     DIRS += ['cairo']
 
+if not CONFIG['MOZ_SYSTEM_GRAPHITE2']:
+    DIRS += ['graphite2/src' ]
+
+if not CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    DIRS += ['harfbuzz/src']
+
 DIRS += [
     '2d',
     'ycbcr',
@@ -18,8 +24,6 @@ DIRS += [
     'qcms',
     'gl',
     'layers',
-    'graphite2/src',
-    'harfbuzz/src',
     'ots/src',
     'thebes',
     'ipc',
--- gfx/skia/generate_mozbuild.py.orig	2019-02-27 22:18:23 UTC
+++ gfx/skia/generate_mozbuild.py
@@ -138,6 +138,9 @@ if CONFIG['CC_TYPE'] in ('clang', 'clang
         '-Wno-unused-private-field',
     ]
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
+
 if CONFIG['MOZ_WIDGET_TOOLKIT'] in ('gtk3', 'android'):
     CXXFLAGS += CONFIG['MOZ_CAIRO_CFLAGS']
     CXXFLAGS += CONFIG['CAIRO_FT_CFLAGS']
--- gfx/skia/moz.build.orig	2019-02-27 22:18:23 UTC
+++ gfx/skia/moz.build
@@ -818,6 +818,9 @@ if CONFIG['CC_TYPE'] in ('clang', 'clang
         '-Wno-unused-private-field',
     ]
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
+
 if CONFIG['MOZ_WIDGET_TOOLKIT'] in ('gtk3', 'android'):
     CXXFLAGS += CONFIG['MOZ_CAIRO_CFLAGS']
     CXXFLAGS += CONFIG['CAIRO_FT_CFLAGS']
--- gfx/thebes/moz.build.orig	2019-02-27 22:18:23 UTC
+++ gfx/thebes/moz.build
@@ -276,7 +276,13 @@ if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gtk3
 
 LOCAL_INCLUDES += CONFIG['SKIA_INCLUDES']
 
-DEFINES['GRAPHITE2_STATIC'] = True
+if CONFIG['MOZ_SYSTEM_GRAPHITE2']:
+    CXXFLAGS += CONFIG['MOZ_GRAPHITE2_CFLAGS']
+else:
+    DEFINES['GRAPHITE2_STATIC'] = True
+
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
 
 if CONFIG['CC_TYPE'] == 'clang':
     # Suppress warnings from Skia header files.
--- intl/unicharutil/util/moz.build.orig	2019-02-27 22:18:23 UTC
+++ intl/unicharutil/util/moz.build
@@ -25,4 +25,7 @@ UNIFIED_SOURCES += [
     'nsUnicodeProperties.cpp',
 ]
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
+
 FINAL_LIBRARY = 'xul'
--- netwerk/dns/moz.build.orig	2019-02-27 22:18:28 UTC
+++ netwerk/dns/moz.build
@@ -79,3 +79,6 @@ USE_LIBS += ['icu']
 
 if CONFIG['CC_TYPE'] in ('clang', 'gcc'):
     CXXFLAGS += ['-Wno-error=shadow']
+
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
--- old-configure.in.orig	2019-02-27 22:18:27 UTC
+++ old-configure.in
@@ -3652,6 +3652,27 @@ dnl ====================================
 AC_SUBST(MOZ_LINUX_32_SSE2_STARTUP_ERROR)
 
 dnl ========================================================
+dnl Check for graphite2
+dnl ========================================================
+if test -n "$MOZ_SYSTEM_GRAPHITE2"; then
+    dnl graphite2.pc has bogus version, check manually
+    _SAVE_CFLAGS=$CFLAGS
+    CFLAGS="$CFLAGS $MOZ_GRAPHITE2_CFLAGS"
+    AC_TRY_COMPILE([ #include <graphite2/Font.h>
+                     #define GR2_VERSION_REQUIRE(major,minor,bugfix)  \
+                             ( GR2_VERSION_MAJOR * 10000 + GR2_VERSION_MINOR \
+                               * 100 + GR2_VERSION_BUGFIX >= \
+                               (major) * 10000 + (minor) * 100 + (bugfix) )
+                   ], [
+                     #if !GR2_VERSION_REQUIRE(1,3,12)
+                     #error "Insufficient graphite2 version."
+                     #endif
+                   ], [],
+                   [AC_MSG_ERROR([--with-system-graphite2 requested but no working libgraphite2 found])])
+    CFLAGS=$_SAVE_CFLAGS
+fi
+
+dnl ========================================================
 dnl Check for pixman and cairo
 dnl ========================================================
 
--- toolkit/library/moz.build.orig	2019-02-27 22:18:32 UTC
+++ toolkit/library/moz.build
@@ -226,6 +226,12 @@ if CONFIG['MOZ_SYSTEM_PNG']:
 if CONFIG['MOZ_SYSTEM_WEBP']:
     OS_LIBS += CONFIG['MOZ_WEBP_LIBS']
 
+if CONFIG['MOZ_SYSTEM_GRAPHITE2']:
+    OS_LIBS += CONFIG['MOZ_GRAPHITE2_LIBS']
+
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    OS_LIBS += CONFIG['MOZ_HARFBUZZ_LIBS']
+
 if CONFIG['MOZ_SYSTEM_LIBEVENT']:
     OS_LIBS += CONFIG['MOZ_LIBEVENT_LIBS']
 
--- toolkit/moz.configure.orig	2019-02-27 22:18:32 UTC
+++ toolkit/moz.configure
@@ -870,6 +870,26 @@ add_old_configure_assignment('FT2_LIBS',
 add_old_configure_assignment('FT2_CFLAGS',
                              ft2_info.cflags)
 
+# Graphite2
+# ==============================================================
+option('--with-system-graphite2',
+       help="Use system graphite2 (located with pkgconfig)")
+
+system_graphite2 = pkg_check_modules('MOZ_GRAPHITE2', 'graphite2',
+                                     when='--with-system-graphite2')
+
+set_config('MOZ_SYSTEM_GRAPHITE2', depends_if(system_graphite2)(lambda _: True))
+
+# HarfBuzz
+# ==============================================================
+option('--with-system-harfbuzz',
+       help="Use system harfbuzz (located with pkgconfig)")
+
+system_harfbuzz = pkg_check_modules('MOZ_HARFBUZZ', 'harfbuzz >= 1.9.0',
+                                    when='--with-system-harfbuzz')
+
+set_config('MOZ_SYSTEM_HARFBUZZ', depends_if(system_harfbuzz)(lambda _: True))
+
 # Marionette remote protocol
 # ==============================================================
 #


[FILE:893:patches/patch-env-api-keys]
# Accept API keys from environment like before bug 1294585

--- build/moz.configure/keyfiles.configure.orig	2019-02-27 22:18:21 UTC
+++ build/moz.configure/keyfiles.configure
@@ -18,6 +18,7 @@ def keyfile(desc, default=None, help=Non
     @checking('for the %s key' % desc, lambda x: x and x is not no_key)
     @imports(_from='__builtin__', _import='open')
     @imports(_from='__builtin__', _import='IOError')
+    @imports(_from='os', _import='environ')
     def keyfile(value):
         if value:
             try:
@@ -28,7 +29,7 @@ def keyfile(desc, default=None, help=Non
                     raise FatalCheckError("'%s' is empty." % value[0])
             except IOError as e:
                 raise FatalCheckError("'%s': %s." % (value[0], e.strerror))
-        return no_key
+        return environ.get('MOZ_%s_KEY' % desc.upper().replace(' ', '_')) or no_key
 
     return keyfile
 


[FILE:310:patches/patch-ipc_chromium_src_base_platform__thread__posix.cc]
--- ipc/chromium/src/base/platform_thread_posix.cc.orig	2019-02-27 22:18:23 UTC
+++ ipc/chromium/src/base/platform_thread_posix.cc
@@ -16,6 +16,8 @@
 #elif defined(OS_LINUX)
 #include <sys/syscall.h>
 #include <sys/prctl.h>
+#elif defined(OS_DRAGONFLY)
+#include <sys/lwp.h>
 #endif
 
 #if !defined(OS_MACOSX)


[FILE:607:patches/patch-ipc_chromium_src_base_shared__memory__posix.cc]
--- ipc/chromium/src/base/shared_memory_posix.cc.orig	2019-02-27 22:18:23 UTC
+++ ipc/chromium/src/base/shared_memory_posix.cc
@@ -83,6 +83,11 @@ bool SharedMemory::AppendPosixShmPrefix(
     StringAppendF(str, "snap.%s.", kSnap);
   }
 #endif  // OS_LINUX
+#ifdef OS_DRAGONFLY
+  // DragonFly BSD has a userland IPC implementation, we need to prefix the
+  // path to shm_open(3), preferably with '/tmp'
+  StringAppendF(str, "tmp/");
+#endif
   // Hopefully the "implementation defined" name length limit is long
   // enough for this.
   StringAppendF(str, "org.mozilla.ipc.%d.", static_cast<int>(pid));


[FILE:577:patches/patch-js_src_old-configure.in]
--- js/src/old-configure.in.orig	2019-02-27 22:18:23 UTC
+++ js/src/old-configure.in
@@ -953,7 +953,7 @@ dnl Checks for header files.
 dnl ========================================================
 AC_HEADER_DIRENT
 case "$target_os" in
-freebsd*)
+freebsd*|dragonfly*)
 # for stuff like -lXshm
     CPPFLAGS="${CPPFLAGS} ${X_CFLAGS}"
     ;;
@@ -1072,7 +1072,7 @@ then
     fi
 
 	case "$target" in
-	    *-*-freebsd*)
+	    *-*-freebsd*|*-*-dragonfly*)
 			AC_DEFINE(_REENTRANT)
 			AC_DEFINE(_THREAD_SAFE)
 			dnl -pthread links in -lpthread, so don't specify it explicitly.


[FILE:297:patches/patch-media_libcubeb_src_cubeb__jack.cpp]
--- media/libcubeb/src/cubeb_jack.cpp.orig	2019-02-27 22:18:26 UTC
+++ media/libcubeb/src/cubeb_jack.cpp
@@ -8,7 +8,7 @@
  */
 #define _DEFAULT_SOURCE
 #define _BSD_SOURCE
-#ifndef __FreeBSD__
+#if !(defined __FreeBSD__ || defined __DragonFly__)
 #define _POSIX_SOURCE
 #endif
 #include <dlfcn.h>


[FILE:565:files/pkg-deinstall-single.in]
#!/bin/sh
#

umask 022
PATH=/bin:/usr/bin

[ "x$1" = "x" ] && exit 1
[ "x$2" != "xDEINSTALL" ] && exit 0

MOZDIR=%%MOZDIR%%

rm -rf ${MOZDIR}/chrome/overlayinfo
rm -f ${MOZDIR}/chrome/*.rdf
rm -f ${MOZDIR}/component.reg
rm -f ${MOZDIR}/components/*.dat
rm -f ${MOZDIR}/components.ini
rm -f ${MOZDIR}/defaults.ini
rm -f ${MOZDIR}/chrome/app-chrome.manifest
rm -rf ${MOZDIR}/updates
find %%MOZDIR%%/plugins/ -depth 1 -type l -delete > /dev/null 2>&1
find %%MOZDIR%%/extensions/ -depth 1 -type l -delete > /dev/null 2>&1
rmdir ${MOZDIR}/chrome
rmdir ${MOZDIR}

exit 0


[FILE:719:files/pkg-install-single.in]
#!/bin/sh
#

umask 022
PATH=/bin:/usr/bin

[ "x$1" = "x" ] && exit 1
[ "x$2" != "xPOST-INSTALL" ] && exit 0

MOZDIR=%%MOZDIR%%
MOZBIN=${MOZDIR}/%%MOZILLA_BIN%%
REGXPCOM=${MOZDIR}/regxpcom
REGCHROME=${MOZDIR}/regchrome

rm -rf ${MOZDIR}/chrome/overlayinfo
rm -f ${MOZDIR}/chrome/*.rdf
mkdir -p ${MOZDIR}/chrome/overlayinfo
rm -f ${MOZDIR}/component.reg

cd ${MOZDIR} || exit 1
if [ -f ${REGXPCOM} ]; then
	./run-mozilla.sh ${REGXPCOM} || true
fi
if [ -f ${REGCHROME} ]; then
	./run-mozilla.sh ${REGCHROME} || true
fi
if [ -f ${MOZBIN} -a "${1%-*}" = "nvu" ]; then
	./run-mozilla.sh ${MOZBIN} -register > /dev/null 2>&1
fi
cp -R %%LOCALBASE%%/lib/xpi/symlinks/%%MOZILLA%%/ %%MOZDIR%%/extensions/ > /dev/null 2>&1

exit 0

