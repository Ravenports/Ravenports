# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		rust
VERSION=		1.53.0
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Systems programming language from Mozilla
HOMEPAGE=		https://www.rust-lang.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main dflyboot
SITES[main]=		https://static.rust-lang.org/dist/
SITES[dflyboot]=	https://leaf.dragonflybsd.org/~marino/dports-src/rust/
DISTFILE[1]=		rustc-1.53.0-src.tar.xz:main
DISTFILE[2]=		rustc-1.52.1-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[3]=		rust-std-1.52.1-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[4]=		cargo-0.48.0-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[5]=		rustc-1.52.1-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[6]=		rust-std-1.52.1-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[7]=		cargo-0.48.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[8]=		rustc-1.52.1-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[9]=		rust-std-1.52.1-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[10]=		cargo-0.48.0-x86_64-unknown-linux-gnu.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		dragonfly freebsd linux

BUILD_DEPENDS=		bash:primary:standard
			cmake:single:standard
BUILDRUN_DEPENDS=	curl:primary:standard
			libssh2:single:standard
EXRUN[single]=		gcc9:compilers:standard

USES=			cpe gmake ssl zlib python:build shebangfix ncurses
			execinfo c++:single

DISTNAME=		rustc-1.53.0-src
EXTRACT_ONLY=		1

LICENSE=		APACHE20:single MIT:single
LICENSE_TERMS=		single:{{WRKSRC}}/COPYRIGHT
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE-APACHE
			MIT:{{WRKSRC}}/LICENSE-MIT
LICENSE_SCHEME=		dual

CPE_VENDOR=		rust-lang
FPC_EQUIVALENT=		lang/rust
SHEBANG_FILES=		src/llvm-project/compiler-rt/lib/sanitizer_common/symbolizer/scripts/*.sh
			src/llvm-project/compiler-rt/lib/asan/scripts/asan_device_setup
			src/llvm-project/compiler-rt/lib/tsan/*.sh
			src/llvm-project/compiler-rt/lib/fuzzer/scripts/*.py
			src/llvm-project/compiler-rt/lib/dfsan/scripts/build-libc-list.py
			src/llvm-project/compiler-rt/lib/sanitizer_common/scripts/*.py
			src/llvm-project/compiler-rt/lib/asan/scripts/asan_symbolize.py
			library/core/src/unicode/printable.py

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--release-channel=stable
			--enable-rpath
			--enable-extended
			--enable-vendor
			--enable-locked-deps
			--local-rust-root={{WRKDIR}}/bootstrap
			--prefix={{PREFIX}}
			--disable-ninja
			--default-linker={{LOCALBASE}}/toolchain/gcc9/bin/cc

MAKE_ENV=		LD_LIBRARY_PATH={{WRKDIR}}/bootstrap/lib
			LIBSSH2_SYS_USE_PKG_CONFIG=1
			OPENSSL_NO_PKG_CONFIG=1
			RUST_BACKTRACE=1
			PROFILE=release
			OPENSSL_DIR="{{OPENSSLBASE}}"
			HOME="{{WRKDIR}}"

INSTALL_REQ_TOOLCHAIN=	yes

VAR_OPSYS[freebsd]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.52.1
			MAKEFILE_LINE=BOOTSTRAP_CARGO=0.48.0
VAR_OPSYS[linux]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.52.1
			MAKEFILE_LINE=BOOTSTRAP_CARGO=0.48.0
VAR_OPSYS[dragonfly]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.52.1
			MAKEFILE_LINE=BOOTSTRAP_CARGO=0.48.0

post-patch:
	# Use rpath suitable for libz et al.
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|g' \
		-e 's|@OPENSSLLIB@|${OPENSSLLIB}|g' \
		${WRKSRC}/src/bootstrap/builder.rs
	# Disable vendor checksums
	${REINPLACE_CMD} -e 's/"files":{[^}]*}/"files":{}/' \
		 ${WRKSRC}/vendor/*/.cargo-checksum.json
	# for rust 1.43 bootstrap built with libressl 3.0
	(cd ${LOCALBASE}/libressl/lib && \
		${LN} -s libssl.so libssl.so.47 && \
		${LN} -s libcrypto.so libcrypto.so.45)

post-configure-linux:
	${LN} -s ${LOCALBASE}/lib/libz.so.1 ${WRKDIR}/bootstrap/lib

post-configure-freebsd:
	${LN} -s ${LOCALBASE}/toolchain/gcc9/lib/libstdc++.so \
	${LOCALBASE}/lib/libc++.so

post-configure-dragonfly:
	${LN} -s ${LOCALBASE}/toolchain/gcc9/lib/libgcc_s.so \
	${WRKDIR}/bootstrap/lib/rustlib/${SFX}/lib/libgcc_pic.so

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} x.py build --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

post-install:
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/install.log
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/uninstall.sh
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc/rust
	# Taken from FreeBSD Ports
	# In post-install, we use the manifests generated during Rust install
	# to in turn generate the PLIST. We do that because several libraries
	# have a computed filename based on the absolute path of the source
	# files. As it is user-specific, we can't know the filename in advance.
	#
	# Both rustc and Cargo components install the same README.md and
	# LICENSE files. The install process backs up the first copy to
	# install the second. Thus here, we need to remove those backups.
	# Actually we remove the entire share/doc/rust contents.
	# We also need to dedup the entries in the generated PLIST, because
	# both components manifests list them.
	#
	# We fix manpage entries in the generated manifests because Rust
	# installs them uncompressed but the Ports framework compresses them.
	for f in ${STAGEDIR}${PREFIX}/lib/rustlib/manifest-*; do \
	    ${SED} -i'' -E \
		-e '/share\/doc\/rust/d' \
	        -e 's|:${STAGEDIR}|:|' \
	        -e 's|(man/man[1-9]/.*\.[0-9])|\1.gz|' \
	        $$f; \
	    ${AWK} '\
	        /^file:/ { \
	            file=$$0; \
	            sub(/^file:/, "", file); \
	            print file; \
	        } \
	        /^dir:/ { \
	            dir=$$0; \
	            sub(/^dir:/, "", dir); \
	            system("find ${STAGEDIR}" dir " -type f | ${SED} -E -e \"s|${STAGEDIR}||\""); \
	        }' \
	        $$f >> ${WRKDIR}/.manifest.gen.unsorted; \
	    ${RM} $$f; \
	done
	${SORT} -u ${WRKDIR}/.manifest.gen.unsorted > ${WRKDIR}/.manifest.gen.sorted
	${CAT} ${WRKDIR}/.manifest.gen.sorted >> ${WRKDIR}/.manifest.single.mktmp
	# Strip binaries and libraries
	${STRIP_CMD} \
		${STAGEDIR}${PREFIX}/bin/cargo \
		${STAGEDIR}${PREFIX}/bin/cargo-clippy \
		${STAGEDIR}${PREFIX}/bin/cargo-fmt \
		${STAGEDIR}${PREFIX}/bin/clippy-driver \
		${STAGEDIR}${PREFIX}/bin/rls \
		${STAGEDIR}${PREFIX}/bin/rustc \
		${STAGEDIR}${PREFIX}/bin/rustdoc \
		${STAGEDIR}${PREFIX}/bin/rustfmt \
		${STAGEDIR}${PREFIX}/bin/rust-analyzer \
		${STAGEDIR}${PREFIX}/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/lib/*.so

post-build-freebsd:
	${RM} ${LOCALBASE}/lib/libc++.so

post-configure:
	${MKDIR} ${WRKDIR}/bootstrap
	# Extract OS-specific bootstrap components
	# then install bootstrap components
	for F in ${SRC_RUSTC} ${SRC_RUSTSTD} ${SRC_CARGO}; do\
	   ${TAR} -C ${WRKDIR} -xf ${DISTDIR}/$$F.tar.${COMPEXT}\
	     --no-same-owner --no-same-permissions;\
	   ${LOCALBASE}/bin/bash ${WRKDIR}/$$F/install.sh\
	     --prefix=${WRKDIR}/bootstrap;\
	done

do-install:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} DESTDIR=${STAGEDIR} \
		${PYTHON_CMD} x.py install --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

[FILE:753:descriptions/desc.single]
Rust is a systems programming language that runs blazingly fast, prevents
segfaults, and guarantees thread safety.

Performance
Rust is blazingly fast and memory-efficient: with no runtime or garbage
collector, it can power performance-critical services, run on embedded
devices, and easily integrate with other languages.

Reliability
Rust's rich type system and ownership model guarantee memory-safety and
thread-safety -- and enable you to eliminate many classes of bugs at
compile-time.

Productivity
Rust has great documentation, a friendly compiler with useful error
messages, and top-notch tooling -- an integrated package manager and
build tool, smart multi-editor support with auto-completion and type
inspections, an auto-formatter, and more.


[FILE:1215:distinfo]
e53a2df2c2c26f8929d551852eeae242b9a6167fba34481f92010b30def32dec    115686332 rustc-1.53.0-src.tar.xz
4b7432aa52b630513795f9c14c97ca708a76b98445bfdd7194e10d497f4df878     49474226 rustc-1.52.1-x86_64-unknown-dragonfly.tar.zst
51e47af45b4d43fe6e964921082ea3344277dbd0a0aac46f20d021a540963007     30014868 rust-std-1.52.1-x86_64-unknown-dragonfly.tar.zst
81a63b6aa41cda8f3f7bea564d4cb66000caa7f4aa3ae2745a5cbb00a8dfb955      4372605 cargo-0.48.0-x86_64-unknown-dragonfly.tar.zst
2de1df845045a8c6dc3832e7d615c9124c52eb5626b1aff1219e66fd3116623b    121503139 rustc-1.52.1-x86_64-unknown-freebsd.tar.gz
5ac8a9dc61421dc4f39380a5d4380130fa176047eef48b3aba205103363b9774     41610379 rust-std-1.52.1-x86_64-unknown-freebsd.tar.gz
9bc3b1eaf4f8b2116e75a169bf03238f69eee04508c8f148f763e737260da77a      7563343 cargo-0.48.0-x86_64-unknown-freebsd.tar.gz
52002b050485674e87fdd72c7b49dac8783dfa36575be7e6265a69b4e66f8570     73958226 rustc-1.52.1-x86_64-unknown-linux-gnu.tar.gz
ba9cf6570d509b3e4c4d821db4caf304f2ffacf5377b7ca55dc1ef9788ae5b58     43129817 rust-std-1.52.1-x86_64-unknown-linux-gnu.tar.gz
e53b8bf28603a28c09c6e8dd4d0045adefe86457642f1dc68c2a71b54b04f202      7593727 cargo-0.48.0-x86_64-unknown-linux-gnu.tar.gz


[FILE:96:manifests/plist.single]
@comment generated from lib/rustlib/manifest-*
lib/rustlib/
 components
 rust-installer-version


[FILE:1813:patches/patch-cargo-miri]
From 64f128c45687d18d64fc6856a30fde585b007e00 Mon Sep 17 00:00:00 2001
From: Ralf Jung <post@ralfj.de>
Date: Sat, 15 May 2021 14:17:30 +0200
Subject: [PATCH] support building Miri outside a git repo

---
 cargo-miri/bin.rs   | 14 ++++++++------
 cargo-miri/build.rs |  2 +-
 2 files changed, 9 insertions(+), 7 deletions(-)

--- src/tools/miri/cargo-miri/bin.rs.orig	2021-06-17 03:54:09 UTC
+++ src/tools/miri/cargo-miri/bin.rs
@@ -6,6 +6,7 @@ use std::io::{self, BufRead, BufReader,
 use std::ops::Not;
 use std::path::{Path, PathBuf};
 use std::process::Command;
+use std::fmt::{Write as _};
 
 use serde::{Deserialize, Serialize};
 
@@ -90,12 +91,13 @@ fn show_help() {
 }
 
 fn show_version() {
-    println!(
-        "miri {} ({} {})",
-        env!("CARGO_PKG_VERSION"),
-        env!("VERGEN_GIT_SHA_SHORT"),
-        env!("VERGEN_GIT_COMMIT_DATE")
-    );
+    let mut version = format!("miri {}", env!("CARGO_PKG_VERSION"));
+    // Only use `option_env` on vergen variables to ensure the build succeeds
+    // when vergen failed to find the git info.
+    if let Some(sha) = option_env!("VERGEN_GIT_SHA_SHORT") {
+        write!(&mut version, " ({} {})", sha, option_env!("VERGEN_GIT_COMMIT_DATE").unwrap()).unwrap();
+    }
+    println!("{}", version);
 }
 
 fn show_error(msg: String) -> ! {
--- src/tools/miri/cargo-miri/build.rs.orig	2021-06-17 03:54:09 UTC
+++ src/tools/miri/cargo-miri/build.rs
@@ -7,5 +7,5 @@ fn main() {
     let mut gen_config = vergen::Config::default();
     *gen_config.git_mut().sha_kind_mut() = vergen::ShaKind::Short;
     *gen_config.git_mut().commit_timestamp_kind_mut() = vergen::TimestampKind::DateOnly;
-    vergen(gen_config).expect("Unable to generate vergen keys!");
+    vergen(gen_config).ok(); // Ignore failure (in case we are built outside a git repo)
 }


[FILE:919:patches/patch-compiler_rustc__llvm_build.rs]
--- compiler/rustc_llvm/build.rs.orig	2021-06-17 03:53:50 UTC
+++ compiler/rustc_llvm/build.rs
@@ -257,22 +257,7 @@ fn main() {
     }
 
     let llvm_static_stdcpp = tracked_env_var_os("LLVM_STATIC_STDCPP");
-    let llvm_use_libcxx = tracked_env_var_os("LLVM_USE_LIBCXX");
-
-    let stdcppname = if target.contains("openbsd") {
-        if target.contains("sparc64") { "estdc++" } else { "c++" }
-    } else if target.contains("freebsd") {
-        "c++"
-    } else if target.contains("darwin") {
-        "c++"
-    } else if target.contains("netbsd") && llvm_static_stdcpp.is_some() {
-        // NetBSD uses a separate library when relocation is required
-        "stdc++_pic"
-    } else if llvm_use_libcxx.is_some() {
-        "c++"
-    } else {
-        "stdc++"
-    };
+    let stdcppname = "stdc++";
 
     // RISC-V requires libatomic for sub-word atomic operations
     if target.starts_with("riscv") {


[FILE:500:patches/patch-library_std_src_sys_unix_os.rs]
--- library/std/src/sys/unix/os.rs.orig	2021-06-17 03:53:51 UTC
+++ library/std/src/sys/unix/os.rs
@@ -94,18 +94,6 @@ pub fn errno() -> i32 {
     unsafe { errno as i32 }
 }
 
-#[cfg(target_os = "dragonfly")]
-pub fn set_errno(e: i32) {
-    extern "C" {
-        #[thread_local]
-        static mut errno: c_int;
-    }
-
-    unsafe {
-        errno = e;
-    }
-}
-
 /// Gets a detailed string description for the given error number.
 pub fn error_string(errno: i32) -> String {
     extern "C" {


[FILE:541:patches/patch-library_unwind_build.rs]
--- library/unwind/build.rs.orig	2021-06-17 03:53:51 UTC
+++ library/unwind/build.rs
@@ -35,7 +35,7 @@ fn main() {
     } else if target.contains("illumos") {
         println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("dragonfly") {
-        println!("cargo:rustc-link-lib=gcc_pic");
+        println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("pc-windows-gnu") {
         // This is handled in the target spec with late_link_args_[static|dynamic]
     } else if target.contains("uwp-windows-gnu") {


[FILE:757:patches/patch-src_bootstrap_builder.rs]
--- src/bootstrap/builder.rs.orig	2021-06-17 03:53:51 UTC
+++ src/bootstrap/builder.rs
@@ -1105,12 +1105,13 @@ impl<'a> Builder<'a> {
                 rustflags.arg("-Zosx-rpath-install-name");
                 Some("-Wl,-rpath,@loader_path/../lib")
             } else if !target.contains("windows") {
-                Some("-Wl,-rpath,$ORIGIN/../lib")
+                Some("-Wl,-rpath,$ORIGIN/../lib:@OPENSSLLIB@")
             } else {
                 None
             };
             if let Some(rpath) = rpath {
-                rustflags.arg(&format!("-Clink-args={}", rpath));
+                rustflags.arg(&format!("-Clink-arg={}", "-Wl,-z,origin"));
+                rustflags.arg(&format!("-Clink-arg={}", rpath));
             }
         }
 


[FILE:490:patches/patch-vendor_libc-0.2.86_src_unix_bsd_freebsdlike_dragonfly_errno.rs]
--- vendor/libc-0.2.86/src/unix/bsd/freebsdlike/dragonfly/errno.rs.orig	2021-06-17 04:34:04 UTC
+++ vendor/libc-0.2.86/src/unix/bsd/freebsdlike/dragonfly/errno.rs
@@ -1,7 +1,6 @@
 // DragonFlyBSD's __error function is declared with "static inline", so it must
 // be implemented in the libc crate, as a pointer to a static thread_local.
 f! {
-    #[deprecated(since = "0.2.77", note = "Use `__errno_location()` instead")]
     pub fn __error() -> *mut ::c_int {
         &mut errno
     }


[FILE:476:patches/patch-vendor_libc_src_unix_bsd_freebsdlike_dragonfly_errno.rs]
--- vendor/libc/src/unix/bsd/freebsdlike/dragonfly/errno.rs.orig	2021-06-17 04:34:04 UTC
+++ vendor/libc/src/unix/bsd/freebsdlike/dragonfly/errno.rs
@@ -1,7 +1,6 @@
 // DragonFlyBSD's __error function is declared with "static inline", so it must
 // be implemented in the libc crate, as a pointer to a static thread_local.
 f! {
-    #[deprecated(since = "0.2.77", note = "Use `__errno_location()` instead")]
     pub fn __error() -> *mut ::c_int {
         &mut errno
     }


[FILE:737:patches/patch-vendor_openssl-sys_build_main.rs]
--- vendor/openssl-sys/build/main.rs.orig	2021-06-17 04:34:04 UTC
+++ vendor/openssl-sys/build/main.rs
@@ -221,6 +221,7 @@ See rust-openssl README for more informa
             (3, 1, 0) => ('3', '1', '0'),
             (3, 1, _) => ('3', '1', 'x'),
             (3, 2, 0) => ('3', '2', '0'),
+            (3, 2, _) => ('3', '2', 'x'),
             _ => version_error(),
         };
 
@@ -261,7 +262,7 @@ fn version_error() -> ! {
         "
 
 This crate is only compatible with OpenSSL 1.0.1 through 1.1.1, or LibreSSL 2.5
-through 3.2.0, but a different version of OpenSSL was found. The build is now aborting
+through 3.2.x, but a different version of OpenSSL was found. The build is now aborting
 due to this version mismatch.
 
 "


[FILE:415:files/special.mk]
.if "${OPSYS}" == "DragonFly"
DF_INDEX+=		2 3 4
COMPEXT=		zst
.elif "${OPSYS}" == "FreeBSD"
DF_INDEX+=		5 6 7
COMPEXT=		gz
.elif "${OPSYS}" == "Linux"
DF_INDEX+=		8 9 10
COMPEXT=		gz
SFX=			${ARCH_STANDARD}-unknown-linux-gnu
.endif
SFX?=			${ARCH_STANDARD}-unknown-${OPSYS:tl}
SRC_RUSTC?=		rustc-${BOOTSTRAP_RUST}-${SFX}
SRC_RUSTSTD?=		rust-std-${BOOTSTRAP_RUST}-${SFX}
SRC_CARGO?=		cargo-${BOOTSTRAP_CARGO}-${SFX}

