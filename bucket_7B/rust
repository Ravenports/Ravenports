# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		rust
VERSION=		1.33.0
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Systems programming language from Mozilla
HOMEPAGE=		https://www.rust-lang.org/
CONTACT=		Michael_Neumann[mneumann@ntecs.de]

DOWNLOAD_GROUPS=	main dflyboot
SITES[dflyboot]=	https://leaf.dragonflybsd.org/~marino/dports-src/rust/
SITES[main]=		https://static.rust-lang.org/dist/
DISTFILE[1]=		rustc-1.33.0-src.tar.xz:main
DISTFILE[2]=		rustc-1.32.0-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[3]=		rust-std-1.32.0-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[4]=		cargo-0.33.0-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[5]=		rustc-1.32.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[6]=		rust-std-1.32.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[7]=		cargo-0.33.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[8]=		rustc-1.32.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[9]=		rust-std-1.32.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[10]=		cargo-0.33.0-x86_64-unknown-linux-gnu.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		dragonfly freebsd linux

BUILD_DEPENDS=		bash:primary:standard
			cmake:single:standard
BUILDRUN_DEPENDS=	curl:primary:standard
			libssh2:single:standard
			libgit2:single:standard
EXRUN[single]=		gcc8:compilers:standard

USES=			gmake ssl zlib python:py27,build shebangfix ncurses
			execinfo c++:single

DISTNAME=		rustc-1.33.0-src
EXTRACT_ONLY=		1

LICENSE=		APACHE20:single MIT:single
LICENSE_TERMS=		single:{{WRKSRC}}/COPYRIGHT
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE-APACHE
			MIT:{{WRKSRC}}/LICENSE-MIT
LICENSE_SCHEME=		dual

FPC_EQUIVALENT=		lang/rust
SHEBANG_FILES=		vendor/compiler_builtins/compiler-rt/lib/sanitizer_common/symbolizer/scripts/*.sh
			vendor/compiler_builtins/compiler-rt/lib/asan/scripts/asan_device_setup
			vendor/compiler_builtins/compiler-rt/lib/tsan/*.sh
			vendor/compiler_builtins/compiler-rt/lib/fuzzer/scripts/*.py
			vendor/compiler_builtins/compiler-rt/lib/dfsan/scripts/build-libc-list.py
			vendor/compiler_builtins/compiler-rt/lib/sanitizer_common/scripts/*.py
			vendor/compiler_builtins/compiler-rt/lib/asan/scripts/asan_symbolize.py
			src/libcore/unicode/unicode.py

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--release-channel=stable
			--enable-rpath
			--enable-extended
			--enable-vendor
			--enable-locked-deps
			--local-rust-root={{WRKDIR}}/bootstrap
			--prefix={{PREFIX}}
			--disable-ninja
			--default-linker={{LOCALBASE}}/toolchain/gcc8/bin/cc

MAKE_ENV=		LD_LIBRARY_PATH={{WRKDIR}}/bootstrap/lib
			LIBGIT2_SYS_USE_PKG_CONFIG=1
			LIBSSH2_SYS_USE_PKG_CONFIG=1
			OPENSSL_NO_PKG_CONFIG=1
			RUST_BACKTRACE=1
			PROFILE=release
			OPENSSL_DIR="{{OPENSSLBASE}}"
			HOME="{{WRKDIR}}"

INSTALL_REQ_TOOLCHAIN=	yes

BLOCK_WATCHDOG=		yes

post-patch:
	# Use rpath suitable for libz et al.
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|g' \
		-e 's|@OPENSSLLIB@|${OPENSSLLIB}|g' \
		${WRKSRC}/src/bootstrap/bin/rustc.rs
	# Disable vendor checksums
	${REINPLACE_CMD} -e 's/"files":{[^}]*}/"files":{}/' \
		 ${WRKSRC}/vendor/*/.cargo-checksum.json

post-configure-freebsd:
	${LN} -s ${LOCALBASE}/toolchain/gcc8/lib/libstdc++.so \
	${LOCALBASE}/lib/libc++.so

post-configure-dragonfly:
	${LN} -s ${LOCALBASE}/toolchain/gcc8/lib/libgcc_s.so \
	${WRKDIR}/bootstrap/lib/rustlib/${SFX}/lib/libgcc_pic.so

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} x.py build --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

post-install:
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/install.log
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/uninstall.sh
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc/rust
	# Taken from FreeBSD Ports
	# In post-install, we use the manifests generated during Rust install
	# to in turn generate the PLIST. We do that because several libraries
	# have a computed filename based on the absolute path of the source
	# files. As it is user-specific, we can't know the filename in advance.
	#
	# Both rustc and Cargo components install the same README.md and
	# LICENSE files. The install process backs up the first copy to
	# install the second. Thus here, we need to remove those backups.
	# Actually we remove the entire share/doc/rust contents.
	# We also need to dedup the entries in the generated PLIST, because
	# both components manifests list them.
	#
	# We fix manpage entries in the generated manifests because Rust
	# installs them uncompressed but the Ports framework compresses them.
	for f in ${RUST_MANIFESTS}; do \
	    ${SED} -i'' -E \
		-e '/share\/doc\/rust/d' \
	        -e 's|:${STAGEDIR}|:|' \
	        -e 's|(man/man[1-9]/.*\.[0-9])|\1.gz|' \
	        ${STAGEDIR}${PREFIX}/$$f; \
	    ${AWK} '\
	        /^file:/ { \
	            file=$$0; \
	            sub(/^file:/, "", file); \
	            print file; \
	        } \
	        /^dir:/ { \
	            dir=$$0; \
	            sub(/^dir:/, "", dir); \
	            system("find ${STAGEDIR}" dir " -type f | ${SED} -E -e \"s|${STAGEDIR}||\""); \
	        }' \
	        ${STAGEDIR}${PREFIX}/$$f >> ${WRKDIR}/.manifest.gen.unsorted; \
	done
	(cd ${STAGEDIR}${PREFIX} && ${RM} ${RUST_MANIFESTS})
	${SORT} -u ${WRKDIR}/.manifest.gen.unsorted > ${WRKDIR}/.manifest.gen.sorted
	${CAT} ${WRKDIR}/.manifest.gen.sorted >> ${WRKDIR}/.manifest.single.mktmp
	# Strip binaries and libraries
	${STRIP_CMD} \
		${STAGEDIR}${PREFIX}/bin/cargo \
		${STAGEDIR}${PREFIX}/bin/cargo-clippy \
		${STAGEDIR}${PREFIX}/bin/cargo-miri \
		${STAGEDIR}${PREFIX}/bin/cargo-fmt \
		${STAGEDIR}${PREFIX}/bin/clippy-driver \
		${STAGEDIR}${PREFIX}/bin/miri \
		${STAGEDIR}${PREFIX}/bin/rls \
		${STAGEDIR}${PREFIX}/bin/rustc \
		${STAGEDIR}${PREFIX}/bin/rustdoc \
		${STAGEDIR}${PREFIX}/bin/rustfmt \
		${STAGEDIR}${PREFIX}/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/codegen-backends/*.so

post-build-freebsd:
	${RM} ${LOCALBASE}/lib/libc++.so

post-configure:
	${MKDIR} ${WRKDIR}/bootstrap
	# Extract OS-specific bootstrap components
	# then install bootstrap components
	for F in ${SRC_RUSTC} ${SRC_RUSTSTD} ${SRC_CARGO}; do\
	   ${TAR} -C ${WRKDIR} -xf ${DISTDIR}/$$F.tar.${COMPEXT}\
	     --no-same-owner --no-same-permissions;\
	   ${LOCALBASE}/bin/bash ${WRKDIR}/$$F/install.sh\
	     --prefix=${WRKDIR}/bootstrap;\
	done

do-install:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} DESTDIR=${STAGEDIR} \
		${PYTHON_CMD} x.py install --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

[FILE:753:descriptions/desc.single]
Rust is a systems programming language that runs blazingly fast, prevents
segfaults, and guarantees thread safety.

Performance
Rust is blazingly fast and memory-efficient: with no runtime or garbage
collector, it can power performance-critical services, run on embedded
devices, and easily integrate with other languages.

Reliability
Rust's rich type system and ownership model guarantee memory-safety and
thread-safety -- and enable you to eliminate many classes of bugs at
compile-time.

Productivity
Rust has great documentation, a friendly compiler with useful error
messages, and top-notch tooling -- an integrated package manager and
build tool, smart multi-editor support with auto-completion and type
inspections, an auto-formatter, and more.


[FILE:1215:distinfo]
f4b1a72f1a29b23dcc9d7be5f60878f0434560513273906aa93dcd5c0de39b71    100635400 rustc-1.33.0-src.tar.xz
112b74cd5ecaa1527037366b479f2a4755156f402c8f2f89f70d3d78c84e10a0     55731364 rustc-1.32.0-x86_64-unknown-dragonfly.tar.zst
e0ff8d69426ea05aa80c0250c43f4cef73ebd6d7a59780d1f9f05855ce84908d     60623935 rust-std-1.32.0-x86_64-unknown-dragonfly.tar.zst
3975f4db6ebcb60e4bce213467921493418f87e3aa0b9ad6629ea5f61e981489      3550557 cargo-0.33.0-x86_64-unknown-dragonfly.tar.zst
a14a0e288be8ce894a85810151a2eb70fc86afa36e4a5fae4e903c744b888687     70385575 rustc-1.32.0-x86_64-unknown-freebsd.tar.gz
d50f674379791a93764d383153ed6533cea165ede7f233df4e17563bfdab273c     67069445 rust-std-1.32.0-x86_64-unknown-freebsd.tar.gz
e780264949c8e597191f38d4930cad8074890a7a48c04cf10e6864ff0eb4bc8a      6253970 cargo-0.33.0-x86_64-unknown-freebsd.tar.gz
75c31f32e19548c1608611d08b82b87560e02f15caac7b2663a8189a4609977c    112421620 rustc-1.32.0-x86_64-unknown-linux-gnu.tar.gz
9f2705a3ed3217c13fd55569406c52f590030752f57520312e135223ae930caf     72089617 rust-std-1.32.0-x86_64-unknown-linux-gnu.tar.gz
9dd7f79a0ab882ed7c892731514a4aed6435f7bc8a20381a8346b471c8a14209      6269892 cargo-0.33.0-x86_64-unknown-linux-gnu.tar.gz


[FILE:96:manifests/plist.single]
@comment generated from lib/rustlib/manifest-*
lib/rustlib/
 components
 rust-installer-version


[FILE:541:patches/patch-cmake_modules_HandleLLVMOptions.cmake]
--- src/llvm/cmake/modules/HandleLLVMOptions.cmake.orig	2018-12-18 09:55:21 UTC
+++ src/llvm/cmake/modules/HandleLLVMOptions.cmake
@@ -138,6 +138,7 @@ endif()
 # build might work on ELF but fail on MachO/COFF.
 if(NOT (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR WIN32 OR CYGWIN OR
         ${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD" OR
+        ${CMAKE_SYSTEM_NAME} MATCHES "DragonFly" OR
         ${CMAKE_SYSTEM_NAME} MATCHES "OpenBSD") AND
    NOT LLVM_USE_SANITIZER)
   set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-z,defs")


[FILE:500:patches/patch-src_bootstrap_bin_rustc.rs]
--- src/bootstrap/bin/rustc.rs.orig	2019-02-28 08:53:34 UTC
+++ src/bootstrap/bin/rustc.rs
@@ -227,7 +227,7 @@ fn main() {
             } else if !target.contains("windows") &&
                       !target.contains("wasm32") &&
                       !target.contains("fuchsia") {
-                Some("-Wl,-rpath,$ORIGIN/../lib")
+                Some("-Wl,-z,origin -Wl,-rpath,$ORIGIN/../lib:@PREFIX@/lib:@OPENSSLLIB@ -L@PREFIX@/lib")
             } else {
                 None
             };


[FILE:533:patches/patch-src_libunwind_build.rs]
--- src/libunwind/build.rs.orig	2019-02-28 08:53:34 UTC
+++ src/libunwind/build.rs
@@ -23,7 +23,7 @@ fn main() {
     } else if target.contains("bitrig") {
         println!("cargo:rustc-link-lib=c++abi");
     } else if target.contains("dragonfly") {
-        println!("cargo:rustc-link-lib=gcc_pic");
+        println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("windows-gnu") {
         println!("cargo:rustc-link-lib=static-nobundle=gcc_eh");
         println!("cargo:rustc-link-lib=static-nobundle=pthread");


[FILE:641:patches/patch-src_llvm_lib_Support_Unix_Path.inc]
--- src/llvm/lib/Support/Unix/Path.inc.orig	2018-12-18 09:55:21 UTC
+++ src/llvm/lib/Support/Unix/Path.inc
@@ -54,13 +54,13 @@
 
 #include <sys/types.h>
 #if !defined(__APPLE__) && !defined(__OpenBSD__) && !defined(__FreeBSD__) &&   \
-    !defined(__linux__)
+    !defined(__DragonFly__) && !defined(__linux__)
 #include <sys/statvfs.h>
 #define STATVFS statvfs
 #define FSTATVFS fstatvfs
 #define STATVFS_F_FRSIZE(vfs) vfs.f_frsize
 #else
-#if defined(__OpenBSD__) || defined(__FreeBSD__)
+#if defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/mount.h>
 #include <sys/param.h>
 #elif defined(__linux__)


[FILE:498:patches/patch-vendor_openssl-src_src_lib.rs]
--- vendor/openssl-src/src/lib.rs.orig	2019-02-28 10:22:24 UTC
+++ vendor/openssl-src/src/lib.rs
@@ -145,6 +145,7 @@ impl Build {
             "i686-linux-android" => "linux-elf",
             "i686-pc-windows-gnu" => "mingw",
             "i686-pc-windows-msvc" => "VC-WIN32",
+            "x86_64-unknown-dragonfly" => "BSD-x86_64",
             "i686-unknown-freebsd" => "BSD-x86-elf",
             "i686-unknown-linux-gnu" => "linux-elf",
             "i686-unknown-linux-musl" => "linux-elf",


[FILE:957:files/special.mk]
.if "${OPSYS}" == "DragonFly"
BOOTSTRAP_RUST=		1.32.0
BOOTSTRAP_CARGO=	0.33.0
DF_INDEX+=		2 3 4
COMPEXT=		zst
.elif "${OPSYS}" == "FreeBSD"
BOOTSTRAP_RUST=		1.32.0
BOOTSTRAP_CARGO=	0.33.0
DF_INDEX+=		5 6 7
COMPEXT=		gz
.elif "${OPSYS}" == "Linux"
BOOTSTRAP_RUST=		1.32.0
BOOTSTRAP_CARGO=	0.33.0
DF_INDEX+=		8 9 10
COMPEXT=		gz
SFX=			${ARCH_STANDARD}-unknown-linux-gnu
.endif
SFX?=			${ARCH_STANDARD}-unknown-${OPSYS:tl}
SRC_RUSTC?=		rustc-${BOOTSTRAP_RUST}-${SFX}
SRC_RUSTSTD?=		rust-std-${BOOTSTRAP_RUST}-${SFX}
SRC_CARGO?=		cargo-${BOOTSTRAP_CARGO}-${SFX}

# Manifest files
RUST_MANIFESTS= \
	lib/rustlib/manifest-cargo \
	lib/rustlib/manifest-clippy-preview \
	lib/rustlib/manifest-miri-preview \
	lib/rustlib/manifest-rls-preview \
	lib/rustlib/manifest-rustc \
	lib/rustlib/manifest-rustfmt-preview \
	lib/rustlib/manifest-rust-analysis-${SFX} \
	lib/rustlib/manifest-rust-std-${SFX} \
	lib/rustlib/manifest-rust-src \
	lib/rustlib/manifest-rust-docs

