# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		rust
VERSION=		1.44.0
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Systems programming language from Mozilla
HOMEPAGE=		https://www.rust-lang.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main dflyboot
SITES[dflyboot]=	https://leaf.dragonflybsd.org/~marino/dports-src/rust/
SITES[main]=		https://static.rust-lang.org/dist/
DISTFILE[1]=		rustc-1.44.0-src.tar.xz:main
DISTFILE[2]=		rustc-1.43.0-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[3]=		rust-std-1.43.0-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[4]=		cargo-0.44.0-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[5]=		rustc-1.43.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[6]=		rust-std-1.43.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[7]=		cargo-0.44.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[8]=		rustc-1.43.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[9]=		rust-std-1.43.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[10]=		cargo-0.44.0-x86_64-unknown-linux-gnu.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		dragonfly freebsd linux

BUILD_DEPENDS=		bash:primary:standard
			cmake:single:standard
			autoselect-python:single:standard
BUILDRUN_DEPENDS=	curl:primary:standard
			libssh2:single:standard
EXRUN[single]=		gcc9:compilers:standard

USES=			cpe gmake ssl zlib python:build shebangfix ncurses
			execinfo c++:single

DISTNAME=		rustc-1.44.0-src
EXTRACT_ONLY=		1

LICENSE=		APACHE20:single MIT:single
LICENSE_TERMS=		single:{{WRKSRC}}/COPYRIGHT
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE-APACHE
			MIT:{{WRKSRC}}/LICENSE-MIT
LICENSE_SCHEME=		dual

CPE_VENDOR=		rust-lang
FPC_EQUIVALENT=		lang/rust
SHEBANG_FILES=		src/llvm-project/compiler-rt/lib/sanitizer_common/symbolizer/scripts/*.sh
			src/llvm-project/compiler-rt/lib/asan/scripts/asan_device_setup
			src/llvm-project/compiler-rt/lib/tsan/*.sh
			src/llvm-project/compiler-rt/lib/fuzzer/scripts/*.py
			src/llvm-project/compiler-rt/lib/dfsan/scripts/build-libc-list.py
			src/llvm-project/compiler-rt/lib/sanitizer_common/scripts/*.py
			src/llvm-project/compiler-rt/lib/asan/scripts/asan_symbolize.py
			src/libcore/unicode/printable.py

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--release-channel=stable
			--enable-rpath
			--enable-extended
			--enable-vendor
			--enable-locked-deps
			--local-rust-root={{WRKDIR}}/bootstrap
			--prefix={{PREFIX}}
			--disable-ninja
			--default-linker={{LOCALBASE}}/toolchain/gcc9/bin/cc

MAKE_ENV=		LD_LIBRARY_PATH={{WRKDIR}}/bootstrap/lib
			LIBSSH2_SYS_USE_PKG_CONFIG=1
			OPENSSL_NO_PKG_CONFIG=1
			RUST_BACKTRACE=1
			PROFILE=release
			OPENSSL_DIR="{{OPENSSLBASE}}"
			HOME="{{WRKDIR}}"

INSTALL_REQ_TOOLCHAIN=	yes

BLOCK_WATCHDOG=		yes
VAR_OPSYS[freebsd]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.43.0
			MAKEFILE_LINE=BOOTSTRAP_CARGO=0.44.0
VAR_OPSYS[linux]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.43.0
			MAKEFILE_LINE=BOOTSTRAP_CARGO=0.44.0
VAR_OPSYS[dragonfly]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.43.0
			MAKEFILE_LINE=BOOTSTRAP_CARGO=0.44.0

post-patch:
	# Use rpath suitable for libz et al.
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|g' \
		-e 's|@OPENSSLLIB@|${OPENSSLLIB}|g' \
		${WRKSRC}/src/bootstrap/builder.rs
	# Disable vendor checksums
	${REINPLACE_CMD} -e 's/"files":{[^}]*}/"files":{}/' \
		 ${WRKSRC}/vendor/*/.cargo-checksum.json

post-configure-freebsd:
	${LN} -s ${LOCALBASE}/toolchain/gcc9/lib/libstdc++.so \
	${LOCALBASE}/lib/libc++.so

post-configure-dragonfly:
	${LN} -s ${LOCALBASE}/toolchain/gcc9/lib/libgcc_s.so \
	${WRKDIR}/bootstrap/lib/rustlib/${SFX}/lib/libgcc_pic.so

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} x.py build --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

post-install:
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/install.log
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/uninstall.sh
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc/rust
	# Taken from FreeBSD Ports
	# In post-install, we use the manifests generated during Rust install
	# to in turn generate the PLIST. We do that because several libraries
	# have a computed filename based on the absolute path of the source
	# files. As it is user-specific, we can't know the filename in advance.
	#
	# Both rustc and Cargo components install the same README.md and
	# LICENSE files. The install process backs up the first copy to
	# install the second. Thus here, we need to remove those backups.
	# Actually we remove the entire share/doc/rust contents.
	# We also need to dedup the entries in the generated PLIST, because
	# both components manifests list them.
	#
	# We fix manpage entries in the generated manifests because Rust
	# installs them uncompressed but the Ports framework compresses them.
	for f in ${STAGEDIR}${PREFIX}/lib/rustlib/manifest-*; do \
	    ${SED} -i'' -E \
		-e '/share\/doc\/rust/d' \
	        -e 's|:${STAGEDIR}|:|' \
	        -e 's|(man/man[1-9]/.*\.[0-9])|\1.gz|' \
	        $$f; \
	    ${AWK} '\
	        /^file:/ { \
	            file=$$0; \
	            sub(/^file:/, "", file); \
	            print file; \
	        } \
	        /^dir:/ { \
	            dir=$$0; \
	            sub(/^dir:/, "", dir); \
	            system("find ${STAGEDIR}" dir " -type f | ${SED} -E -e \"s|${STAGEDIR}||\""); \
	        }' \
	        $$f >> ${WRKDIR}/.manifest.gen.unsorted; \
	    ${RM} $$f; \
	done
	${SORT} -u ${WRKDIR}/.manifest.gen.unsorted > ${WRKDIR}/.manifest.gen.sorted
	${CAT} ${WRKDIR}/.manifest.gen.sorted >> ${WRKDIR}/.manifest.single.mktmp
	# Strip binaries and libraries
	${STRIP_CMD} \
		${STAGEDIR}${PREFIX}/bin/cargo \
		${STAGEDIR}${PREFIX}/bin/cargo-clippy \
		${STAGEDIR}${PREFIX}/bin/cargo-fmt \
		${STAGEDIR}${PREFIX}/bin/clippy-driver \
		${STAGEDIR}${PREFIX}/bin/rls \
		${STAGEDIR}${PREFIX}/bin/rustc \
		${STAGEDIR}${PREFIX}/bin/rustdoc \
		${STAGEDIR}${PREFIX}/bin/rustfmt \
		${STAGEDIR}${PREFIX}/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/lib/*.so

post-build-freebsd:
	${RM} ${LOCALBASE}/lib/libc++.so

post-configure:
	${MKDIR} ${WRKDIR}/bootstrap
	# Extract OS-specific bootstrap components
	# then install bootstrap components
	for F in ${SRC_RUSTC} ${SRC_RUSTSTD} ${SRC_CARGO}; do\
	   ${TAR} -C ${WRKDIR} -xf ${DISTDIR}/$$F.tar.${COMPEXT}\
	     --no-same-owner --no-same-permissions;\
	   ${LOCALBASE}/bin/bash ${WRKDIR}/$$F/install.sh\
	     --prefix=${WRKDIR}/bootstrap;\
	done

do-install:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} DESTDIR=${STAGEDIR} \
		${PYTHON_CMD} x.py install --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

[FILE:753:descriptions/desc.single]
Rust is a systems programming language that runs blazingly fast, prevents
segfaults, and guarantees thread safety.

Performance
Rust is blazingly fast and memory-efficient: with no runtime or garbage
collector, it can power performance-critical services, run on embedded
devices, and easily integrate with other languages.

Reliability
Rust's rich type system and ownership model guarantee memory-safety and
thread-safety -- and enable you to eliminate many classes of bugs at
compile-time.

Productivity
Rust has great documentation, a friendly compiler with useful error
messages, and top-notch tooling -- an integrated package manager and
build tool, smart multi-editor support with auto-completion and type
inspections, an auto-formatter, and more.


[FILE:1215:distinfo]
b32fa7d6bd6ff9286aab2aa7ca696d1da921614cefc10f617aef68d9bce9118a     94754392 rustc-1.44.0-src.tar.xz
6551ec72be3a2e6e1acf0474d91c36e183445f20570cd65104bc97597cffb9e0     42144349 rustc-1.43.0-x86_64-unknown-dragonfly.tar.zst
4011e029cbb5e722c422302e8d68ae90ede25b9bca8d1e938b71edd36907872b     16487064 rust-std-1.43.0-x86_64-unknown-dragonfly.tar.zst
efa24ac62e4dd4ba6f161e16b51b5b63d9d2850489bb770ae213c3ffd96f320f      4129211 cargo-0.44.0-x86_64-unknown-dragonfly.tar.zst
69d572e80e13da85599557f662ce71909823194c874eea0fe91f82da0958fa68     54470475 rustc-1.43.0-x86_64-unknown-freebsd.tar.gz
3c9b450b826874be5c3f35f7cb923f02d4769b81f763fef21c9c0d3a80532c2c     22398227 rust-std-1.43.0-x86_64-unknown-freebsd.tar.gz
83fd6190cc1c69c86f900b500752e4f8dd60ed9be28fb926a7724e8a10e9e066      7120994 cargo-0.44.0-x86_64-unknown-freebsd.tar.gz
950b323044ae9a7932b697a2e4f4f62b59248f58faa320e22dc20f8ad9521f6b     93103451 rustc-1.43.0-x86_64-unknown-linux-gnu.tar.gz
84fd8ddaaa217b82c563d4a32a690da2c399388258a3d2baf180992c21938af5     25924028 rust-std-1.43.0-x86_64-unknown-linux-gnu.tar.gz
e4c8533670a64a85ee1a367e4bb9d63a2d6b3e9949e116ec956cec15df9a67bd      7130467 cargo-0.44.0-x86_64-unknown-linux-gnu.tar.gz


[FILE:96:manifests/plist.single]
@comment generated from lib/rustlib/manifest-*
lib/rustlib/
 components
 rust-installer-version


[FILE:755:patches/patch-src_bootstrap_builder.rs]
--- src/bootstrap/builder.rs.orig	2020-06-01 15:44:15 UTC
+++ src/bootstrap/builder.rs
@@ -956,12 +956,13 @@ impl<'a> Builder<'a> {
                 rustflags.arg("-Zosx-rpath-install-name");
                 Some("-Wl,-rpath,@loader_path/../lib")
             } else if !target.contains("windows") {
-                Some("-Wl,-rpath,$ORIGIN/../lib")
+                Some("-Wl,-rpath,$ORIGIN/../lib:@OPENSSLLIB@")
             } else {
                 None
             };
             if let Some(rpath) = rpath {
-                rustflags.arg(&format!("-Clink-args={}", rpath));
+                rustflags.arg(&format!("-Clink-arg={}", "-Wl,-z,origin"));
+                rustflags.arg(&format!("-Clink-arg={}", rpath));
             }
         }
 


[FILE:533:patches/patch-src_librustc__llvm_build.rs]
--- src/librustc_llvm/build.rs.orig	2020-06-01 15:44:16 UTC
+++ src/librustc_llvm/build.rs
@@ -261,10 +261,6 @@ fn main() {
 
     let stdcppname = if target.contains("openbsd") {
         if target.contains("sparc64") { "estdc++" } else { "c++" }
-    } else if target.contains("freebsd") {
-        "c++"
-    } else if target.contains("darwin") {
-        "c++"
     } else if target.contains("netbsd") && llvm_static_stdcpp.is_some() {
         // NetBSD uses a separate library when relocation is required
         "stdc++_pic"


[FILE:489:patches/patch-src_libunwind_build.rs]
--- src/libunwind/build.rs.orig	2020-06-01 15:44:16 UTC
+++ src/libunwind/build.rs
@@ -33,7 +33,7 @@ fn main() {
     } else if target.contains("illumos") {
         println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("dragonfly") {
-        println!("cargo:rustc-link-lib=gcc_pic");
+        println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("pc-windows-gnu") {
         // This is handled in the target spec with late_link_args_[static|dynamic]
 


[FILE:436:patches/patch-vendor_libc_src_lib.rs]
--- vendor/libc/src/lib.rs.orig	2020-06-01 17:45:24 UTC
+++ vendor/libc/src/lib.rs
@@ -21,7 +21,7 @@
     feature = "rustc-dep-of-std",
     feature(cfg_target_vendor, link_cfg, no_core)
 )]
-#![cfg_attr(libc_thread_local, feature(thread_local))]
+#![feature(thread_local)]
 // Enable extra lints:
 #![cfg_attr(feature = "extra_traits", deny(missing_debug_implementations))]
 #![deny(missing_copy_implementations, safe_packed_borrows)]


[FILE:679:patches/patch-vendor_libc_src_unix_bsd_freebsdlike_dragonfly_mod.rs]
--- vendor/libc/src/unix/bsd/freebsdlike/dragonfly/mod.rs.orig	2020-06-01 17:45:24 UTC
+++ vendor/libc/src/unix/bsd/freebsdlike/dragonfly/mod.rs
@@ -1051,9 +1051,18 @@ f! {
         (_CMSG_ALIGN(::mem::size_of::<::cmsghdr>()) +
             _CMSG_ALIGN(length as usize)) as ::c_uint
     }
+
+    // DragonFlyBSD's __error function is declared with "static inline", so it must
+    // be implemented in the libc crate, as a pointer to a static thread_local.
+    pub fn __error() -> *mut ::c_int {
+        &mut errno
+    }
 }
 
 extern "C" {
+    #[thread_local]
+    pub static mut errno: ::c_int;
+
     pub fn setgrent();
     pub fn mprotect(
         addr: *mut ::c_void,


[FILE:415:files/special.mk]
.if "${OPSYS}" == "DragonFly"
DF_INDEX+=		2 3 4
COMPEXT=		zst
.elif "${OPSYS}" == "FreeBSD"
DF_INDEX+=		5 6 7
COMPEXT=		gz
.elif "${OPSYS}" == "Linux"
DF_INDEX+=		8 9 10
COMPEXT=		gz
SFX=			${ARCH_STANDARD}-unknown-linux-gnu
.endif
SFX?=			${ARCH_STANDARD}-unknown-${OPSYS:tl}
SRC_RUSTC?=		rustc-${BOOTSTRAP_RUST}-${SFX}
SRC_RUSTSTD?=		rust-std-${BOOTSTRAP_RUST}-${SFX}
SRC_CARGO?=		cargo-${BOOTSTRAP_CARGO}-${SFX}

