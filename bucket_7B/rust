# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		rust
VERSION=		1.31.0
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Systems programming language from Mozilla
HOMEPAGE=		https://www.rust-lang.org/
CONTACT=		Michael_Neumann[mneumann@ntecs.de]

DOWNLOAD_GROUPS=	main dflyboot
SITES[dflyboot]=	https://www.ntecs.de/downloads/rust/1.31.0/
SITES[main]=		https://static.rust-lang.org/dist/
DISTFILE[1]=		rustc-1.31.0-src.tar.xz:main
DISTFILE[2]=		rustc-1.31.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DISTFILE[3]=		rust-std-1.31.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DISTFILE[4]=		cargo-0.32.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BROKEN[all]=		WIP
ONLY_FOR_OPSYS=		dragonfly

BUILD_DEPENDS=		bash:primary:standard
			cmake:single:standard
			llvm:single:standard
BUILDRUN_DEPENDS=	curl:primary:standard
			libssh2:single:standard
			libgit2:single:standard

USES=			gmake ssl zlib python:py27,build

DISTNAME=		rustc-1.31.0-src
EXTRACT_ONLY=		1

LICENSE=		APACHE20:single MIT:single
LICENSE_TERMS=		single:{{WRKSRC}}/COPYRIGHT
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE-APACHE
			MIT:{{WRKSRC}}/LICENSE-MIT
LICENSE_SCHEME=		dual

FPC_EQUIVALENT=		lang/rust

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--release-channel=stable
			--enable-rpath
			--enable-extended
			--enable-vendor
			--enable-locked-deps
			--disable-jemalloc
			--local-rust-root={{WRKDIR}}/bootstrap
			--llvm-root={{LOCALBASE}}
			--prefix={{PREFIX}}
			--disable-ninja

MAKE_ENV=		LD_LIBRARY_PATH={{WRKDIR}}/bootstrap/lib
			LIBGIT2_SYS_USE_PKG_CONFIG=1
			LIBSSH2_SYS_USE_PKG_CONFIG=1
			OPENSSL_NO_PKG_CONFIG=1
			RUST_BACKTRACE=1
			PROFILE=release
			OPENSSL_DIR="{{OPENSSLBASE}}"
			HOME="{{WRKDIR}}"

INSTALL_REQ_TOOLCHAIN=	yes

post-patch:
	# Use rpath suitable for libz et al.
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|g' \
		${WRKSRC}/src/bootstrap/bin/rustc.rs
	# After patching crates, we need to update their corresponding
	# `.cargo-checksum.json` to reflect the new checksums verified by Cargo
	for vendor in openssl-src; do \
		dir=${WRKSRC}/src/vendor/$$vendor; \
		if ! test -d "$$dir"; then \
			continue; \
		fi; \
		cd "$$dir"; \
		for file in $$(${FIND} * -name "*.orig"); do \
			old_checksum=$$(${SHA256} -q "$$file"); \
			new_checksum=$$(${SHA256} -q "$${file%%.orig}"); \
			regex="$$regex -e s|\"$${file%%.orig}\":\"$$old_checksum\"|\"$${file%%.orig}\":\"$$new_checksum\"|"; \
		done; \
		if test "$$regex"; then \
			${REINPLACE_CMD} -E $$regex .cargo-checksum.json; \
		fi; \
	done

post-configure-dragonfly:
	${LN} -s /raven/toolchain/gcc8/lib/libgcc_s.so \
	${WRKDIR}/bootstrap/lib/rustlib/x86_64-unknown-dragonfly/lib/libgcc_pic.so

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} x.py build --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

post-configure:
	${MKDIR} ${WRKDIR}/bootstrap
	# Extract OS-specific bootstrap components
	# then install bootstrap components
	for F in ${SRC_RUSTC} ${SRC_RUSTSTD} ${SRC_CARGO}; do\
	   ${TAR} -C ${WRKDIR} -xf ${DISTDIR}/$$F.tar.xz\
	     --no-same-owner --no-same-permissions;\
	   ${LOCALBASE}/bin/bash ${WRKDIR}/$$F/install.sh\
	     --prefix=${WRKDIR}/bootstrap;\
	done

[FILE:753:descriptions/desc.single]
Rust is a systems programming language that runs blazingly fast, prevents
segfaults, and guarantees thread safety.

Performance
Rust is blazingly fast and memory-efficient: with no runtime or garbage
collector, it can power performance-critical services, run on embedded
devices, and easily integrate with other languages.

Reliability
Rust's rich type system and ownership model guarantee memory-safety and
thread-safety -- and enable you to eliminate many classes of bugs at
compile-time.

Productivity
Rust has great documentation, a friendly compiler with useful error
messages, and top-notch tooling -- an integrated package manager and
build tool, smart multi-editor support with auto-completion and type
inspections, an auto-formatter, and more.


[FILE:474:distinfo]
9581c5673937f8b1c3c21060ef7c1fcd3e5574a0fc0b27e1888cb37c4b2ec393     96914112 rustc-1.31.0-src.tar.xz
a57925a99f65b5b6b73d04c99be904332817af5e2bc00f24bfc7f761e4720853     55370304 rustc-1.31.0-x86_64-unknown-dragonfly.tar.xz
6885f74ebf37edf1912f277efb07d6dc46541d0d66a061abcebb565c2a9e5c96     53664404 rust-std-1.31.0-x86_64-unknown-dragonfly.tar.xz
beb20af13f3ee4e43fce49cb78f65e5a388b76191feda4373bf7174e1e693a91      4621596 cargo-0.32.0-x86_64-unknown-dragonfly.tar.xz


[FILE:37:manifests/plist.single]
@comment manifest is empty, mistake??

[FILE:541:patches/patch-cmake_modules_HandleLLVMOptions.cmake]
--- src/llvm/cmake/modules/HandleLLVMOptions.cmake.orig	2018-09-15 20:17:01 UTC
+++ src/llvm/cmake/modules/HandleLLVMOptions.cmake
@@ -138,6 +138,7 @@ endif()
 # build might work on ELF but fail on MachO/COFF.
 if(NOT (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR WIN32 OR CYGWIN OR
         ${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD" OR
+        ${CMAKE_SYSTEM_NAME} MATCHES "DragonFly" OR
         ${CMAKE_SYSTEM_NAME} MATCHES "OpenBSD") AND
    NOT LLVM_USE_SANITIZER)
   set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-z,defs")


[FILE:484:patches/patch-src_bootstrap_bin_rustc.rs]
--- src/bootstrap/bin/rustc.rs.orig	2018-12-04 23:41:40 UTC
+++ src/bootstrap/bin/rustc.rs
@@ -233,7 +233,7 @@ fn main() {
                 cmd.arg("-Z").arg("osx-rpath-install-name");
                 Some("-Wl,-rpath,@loader_path/../lib")
             } else if !target.contains("windows") && !target.contains("wasm32") {
-                Some("-Wl,-rpath,$ORIGIN/../lib")
+                Some("-Wl,-rpath,@PREFIX@/lib")
             } else {
                 None
             };


[FILE:533:patches/patch-src_libunwind_build.rs]
--- src/libunwind/build.rs.orig	2018-12-04 23:41:40 UTC
+++ src/libunwind/build.rs
@@ -33,7 +33,7 @@ fn main() {
     } else if target.contains("bitrig") {
         println!("cargo:rustc-link-lib=c++abi");
     } else if target.contains("dragonfly") {
-        println!("cargo:rustc-link-lib=gcc_pic");
+        println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("windows-gnu") {
         println!("cargo:rustc-link-lib=static-nobundle=gcc_eh");
         println!("cargo:rustc-link-lib=static-nobundle=pthread");


[FILE:641:patches/patch-src_llvm_lib_Support_Unix_Path.inc]
--- src/llvm/lib/Support/Unix/Path.inc.orig	2018-09-15 20:17:01 UTC
+++ src/llvm/lib/Support/Unix/Path.inc
@@ -53,13 +53,13 @@
 
 #include <sys/types.h>
 #if !defined(__APPLE__) && !defined(__OpenBSD__) && !defined(__FreeBSD__) &&   \
-    !defined(__linux__)
+    !defined(__DragonFly__) && !defined(__linux__)
 #include <sys/statvfs.h>
 #define STATVFS statvfs
 #define FSTATVFS fstatvfs
 #define STATVFS_F_FRSIZE(vfs) vfs.f_frsize
 #else
-#if defined(__OpenBSD__) || defined(__FreeBSD__)
+#if defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/mount.h>
 #include <sys/param.h>
 #elif defined(__linux__)


[FILE:529:patches/patch-src_vendor_openssl-src_src_lib.rs]
--- src/vendor/openssl-src/src/lib.rs.orig	2018-12-05 01:24:31 UTC
+++ src/vendor/openssl-src/src/lib.rs
@@ -160,6 +160,7 @@ impl Build {
             "x86_64-linux-android" => "linux-x86_64",
             "x86_64-pc-windows-gnu" => "mingw64",
             "x86_64-pc-windows-msvc" => "VC-WIN64A",
+            "x86_64-unknown-dragonfly" => "BSD-x86_64",
             "x86_64-unknown-freebsd" => "BSD-x86_64",
             "x86_64-unknown-linux-gnu" => "linux-x86_64",
             "x86_64-unknown-linux-musl" => "linux-x86_64",


[FILE:282:files/special.mk]
.if "${OPSYS}" == "DragonFly"
BOOTSTRAP_RUST=		1.31.0
BOOTSTRAP_CARGO=	0.32.0
DF_INDEX+=		2 3 4
SFX=			${ARCH_STANDARD}-unknown-${OPSYS:tl}
SRC_RUSTC=		rustc-${BOOTSTRAP_RUST}-${SFX}
SRC_RUSTSTD=		rust-std-${BOOTSTRAP_RUST}-${SFX}
SRC_CARGO=		cargo-${BOOTSTRAP_CARGO}-${SFX}
.endif

