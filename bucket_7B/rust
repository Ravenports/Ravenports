# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		rust
VERSION=		1.68.0
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Systems programming language from Mozilla
HOMEPAGE=		https://www.rust-lang.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main curl dflyboot
SITES[main]=		https://static.rust-lang.org/dist/
SITES[curl]=		http://curl.haxx.se/download/
SITES[dflyboot]=	https://leaf.dragonflybsd.org/~marino/dports-src/rust/
DISTFILE[1]=		rustc-1.68.0-src.tar.xz:main
DISTFILE[2]=		rustc-1.67.1-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[3]=		rust-std-1.67.1-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[4]=		cargo-1.67.1-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[5]=		rustc-1.67.1-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[6]=		rust-std-1.67.1-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[7]=		cargo-1.67.1-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[8]=		rustc-1.67.1-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[9]=		rust-std-1.67.1-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[10]=		cargo-1.67.1-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[11]=		rustc-1.67.1-x86_64-unknown-netbsd.tar.gz:main
DISTFILE[12]=		rust-std-1.67.1-x86_64-unknown-netbsd.tar.gz:main
DISTFILE[13]=		cargo-1.67.1-x86_64-unknown-netbsd.tar.gz:main
DISTFILE[14]=		curl-7.87.0.tar.xz:curl
DF_INDEX=		1 14
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		dragonfly freebsd linux netbsd

BUILD_DEPENDS=		bash:primary:standard
			cmake:primary:standard
			ncurses:primary:standard
			nss:caroot:standard
RUN_DEPENDS=		libexecinfo:dev:standard
EXRUN[single]=		ravensys-gcc:compilers:standard

USES=			cpe gmake zlib:build python:build shebangfix
			execinfo c++:single dos2unix ssl:build

DISTNAME=		rustc-1.68.0-src
EXTRACT_ONLY=		1 14

LICENSE=		APACHE20:single MIT:single
LICENSE_TERMS=		single:{{WRKSRC}}/COPYRIGHT
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE-APACHE
			MIT:{{WRKSRC}}/LICENSE-MIT
LICENSE_SCHEME=		dual

CPE_VENDOR=		rust-lang
DOS2UNIX_FILES=		vendor/openssl-probe/src/lib.rs
FPC_EQUIVALENT=		lang/rust
SHEBANG_FILES=		src/llvm-project/compiler-rt/lib/sanitizer_common/symbolizer/scripts/*.sh
			src/llvm-project/compiler-rt/lib/asan/scripts/asan_device_setup
			src/llvm-project/compiler-rt/lib/tsan/*.sh
			src/llvm-project/compiler-rt/lib/fuzzer/scripts/*.py
			src/llvm-project/compiler-rt/lib/dfsan/scripts/build-libc-list.py
			src/llvm-project/compiler-rt/lib/sanitizer_common/scripts/*.py
			src/llvm-project/compiler-rt/lib/asan/scripts/asan_symbolize.py
			library/core/src/unicode/printable.py
			library/backtrace/ci/debuglink.sh

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--release-channel=stable
			--enable-rpath
			--enable-extended
			--enable-vendor
			--enable-locked-deps
			--local-rust-root={{WRKDIR}}/bootstrap
			--prefix={{PREFIX}}
			--disable-ninja
			--default-linker={{LOCALBASE}}/toolchain/ravensys-gcc/bin/cc

MAKE_ENV=		LD_LIBRARY_PATH={{WRKDIR}}/bootstrap/lib
			LIBSSH2_SYS_USE_PKG_CONFIG=1
			OPENSSL_NO_PKG_CONFIG=1
			RUST_BACKTRACE=1
			PROFILE=release
			OPENSSL_DIR="{{OPENSSLBASE}}"
			HOME="{{WRKDIR}}"

INSTALL_REQ_TOOLCHAIN=	yes

VAR_OPSYS[freebsd]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.67.1
			MAKEFILE_LINE=BOOTSTRAP_CARGO=1.67.1
VAR_OPSYS[linux]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.67.1
			MAKEFILE_LINE=BOOTSTRAP_CARGO=1.67.1
VAR_OPSYS[netbsd]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.67.1
			MAKEFILE_LINE=BOOTSTRAP_CARGO=1.67.1
VAR_OPSYS[dragonfly]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.67.1
			MAKEFILE_LINE=BOOTSTRAP_CARGO=1.67.1

pre-build:
	${MKDIR} ${WRKDIR}/bootstrap
	# Extract OS-specific bootstrap components
	# then install bootstrap components
	for F in ${SRC_RUSTC} ${SRC_RUSTSTD} ${SRC_CARGO}; do\
	   ${TAR} -C ${WRKDIR} -xf ${DISTDIR}/$$F.tar.${COMPEXT}\
	     --no-same-owner --no-same-permissions;\
	   ${LOCALBASE}/bin/bash ${WRKDIR}/$$F/install.sh\
	     --prefix=${WRKDIR}/bootstrap;\
	done

pre-build-freebsd:
	${LN} -s ${LOCALBASE}/toolchain/ravensys-gcc/lib/libstdc++.so \
	${LOCALBASE}/lib/libc++.so

pre-build-linux:
	${LN} -s ${LOCALBASE}/lib/libz.so.1 ${WRKDIR}/bootstrap/lib

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} x.py build --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

post-install:
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/install.log
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/uninstall.sh
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc/rust
	# Taken from FreeBSD Ports
	# In post-install, we use the manifests generated during Rust install
	# to in turn generate the PLIST. We do that because several libraries
	# have a computed filename based on the absolute path of the source
	# files. As it is user-specific, we can't know the filename in advance.
	#
	# Both rustc and Cargo components install the same README.md and
	# LICENSE files. The install process backs up the first copy to
	# install the second. Thus here, we need to remove those backups.
	# Actually we remove the entire share/doc/rust contents.
	# We also need to dedup the entries in the generated PLIST, because
	# both components manifests list them.
	#
	# We fix manpage entries in the generated manifests because Rust
	# installs them uncompressed but the Ports framework compresses them.
	for f in ${STAGEDIR}${PREFIX}/lib/rustlib/manifest-*; do \
	    ${SED} -i'' -E \
		-e '/share\/doc\/rust/d' \
	        -e 's|:${STAGEDIR}|:|' \
	        -e 's|(man/man[1-9]/.*\.[0-9])|\1.gz|' \
	        $$f; \
	    ${AWK} '\
	        /^file:/ { \
	            file=$$0; \
	            sub(/^file:/, "", file); \
	            print file; \
	        } \
	        /^dir:/ { \
	            dir=$$0; \
	            sub(/^dir:/, "", dir); \
	            system("find ${STAGEDIR}" dir " -type f | ${SED} -E -e \"s|${STAGEDIR}||\""); \
	        }' \
	        $$f >> ${WRKDIR}/.manifest.gen.unsorted; \
	    ${RM} $$f; \
	done
	${SORT} -u ${WRKDIR}/.manifest.gen.unsorted > ${WRKDIR}/.manifest.gen.sorted
	${CAT} ${WRKDIR}/.manifest.gen.sorted >> ${WRKDIR}/.manifest.single.mktmp
	# Strip binaries and libraries
	${STRIP_CMD} \
		${STAGEDIR}${PREFIX}/bin/cargo \
		${STAGEDIR}${PREFIX}/bin/cargo-clippy \
		${STAGEDIR}${PREFIX}/bin/cargo-fmt \
		${STAGEDIR}${PREFIX}/bin/clippy-driver \
		${STAGEDIR}${PREFIX}/bin/rustc \
		${STAGEDIR}${PREFIX}/bin/rustdoc \
		${STAGEDIR}${PREFIX}/bin/rustfmt \
		${STAGEDIR}${PREFIX}/bin/rust-analyzer \
		${STAGEDIR}${PREFIX}/bin/rust-demangler \
		${STAGEDIR}${PREFIX}/libexec/cargo-credential-1password \
		${STAGEDIR}${PREFIX}/libexec/rust-analyzer-proc-macro-srv \
		${STAGEDIR}${PREFIX}/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/lib/*.so

pre-configure:
	# Use rpath suitable for libz et al.
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|g' \
		-e 's|@OPENSSLLIB@|${OPENSSLLIB}|g' \
		${WRKSRC}/src/bootstrap/builder.rs
	# Disable vendor checksums
	${REINPLACE_CMD} -e 's/"files":{[^}]*}/"files":{}/' \
		 ${WRKSRC}/vendor/*/.cargo-checksum.json
	# Enable rust to find certificates
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|' \
		${WRKSRC}/vendor/openssl-probe/src/lib.rs
	# remove link to shared libressl, execinfo and zlib
	# replace static versions with PIC versions
	(cd ${LOCALBASE}/libressl/lib \
		&& ${CP} libssl_pic.a libssl.a \
		&& ${CP} libcrypto_pic.a libcrypto.a \
		&& ${CP} libtls_pic.a libtls.a \
		&& ${RM} lib*.so)
	(cd ${LOCALBASE}/lib \
		&& ${CP} libexecinfo_pic.a libexecinfo.a \
		&& ${CP} libz_pic.a libz.a \
		&& ${RM} libexecinfo.so \
		&& ${RM} libz.so)
	# build curl here.
	${SH} ${FILESDIR}/build_curl.sh "${PREFIX}" "${CONFIGURE_TARGET}"
	(cd ${WRKDIR}/curl-* && ${MAKE_CMD})
	${INSTALL_DATA} ${WRKDIR}/curl-7.87.0/lib/.libs/libcurl.a \
		${LOCALBASE}/lib/

post-build-freebsd:
	${RM} ${LOCALBASE}/lib/libc++.so

pre-build-netbsd:
	${LN} -s ${LOCALBASE}/toolchain/ravensys-gcc/lib/libgcc_s.so.1 \
	${WRKDIR}/bootstrap/lib/libgcc_s.so.1

do-install:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} DESTDIR=${STAGEDIR} \
		${PYTHON_CMD} x.py install --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

pre-build-dragonfly:
	${LN} -s ${LOCALBASE}/toolchain/ravensys-gcc/lib/libgcc_s.so \
	${WRKDIR}/bootstrap/lib/rustlib/${SFX}/lib/libgcc_pic.so

[FILE:753:descriptions/desc.single]
Rust is a systems programming language that runs blazingly fast, prevents
segfaults, and guarantees thread safety.

Performance
Rust is blazingly fast and memory-efficient: with no runtime or garbage
collector, it can power performance-critical services, run on embedded
devices, and easily integrate with other languages.

Reliability
Rust's rich type system and ownership model guarantee memory-safety and
thread-safety -- and enable you to eliminate many classes of bugs at
compile-time.

Productivity
Rust has great documentation, a friendly compiler with useful error
messages, and top-notch tooling -- an integrated package manager and
build tool, smart multi-editor support with auto-completion and type
inspections, an auto-formatter, and more.


[FILE:1675:distinfo]
8651245e8708f11d0f65ba9fdb394c4b9300d603d318045664b371729da9eac4    147856584 rustc-1.68.0-src.tar.xz
99df881c1a442b4f4c2b9776cb7a4f7bcd33be53799ef4e7ba7942ef0379dccb     56604965 rustc-1.67.1-x86_64-unknown-dragonfly.tar.zst
5f1f3aa62fa9f02f80681abbf77e25882b530e5cb2dc351390f46be9f9d64012     34425031 rust-std-1.67.1-x86_64-unknown-dragonfly.tar.zst
5aa2ea445edc7c6b6a57e09ace07b4784947fc4aaa7aa85360398c1318379759      5868505 cargo-1.67.1-x86_64-unknown-dragonfly.tar.zst
bd03fa96a80a25162d1d2333a48ac31d58388f0aec52de5480eb83eb6208715d    139973705 rustc-1.67.1-x86_64-unknown-freebsd.tar.gz
aa6ac1844b06143a7533e44d129083d2c28a1d34953dc432c8c3591886cc892c     46937171 rust-std-1.67.1-x86_64-unknown-freebsd.tar.gz
042cb0af8b42f7ead9db92379988dc96ec56a1b7d3191be5d40323efa27a527d      9838271 cargo-1.67.1-x86_64-unknown-freebsd.tar.gz
11115542833004fff465fdc86994245b6446d988aebd42153203a6f9c3aeccef    105695259 rustc-1.67.1-x86_64-unknown-linux-gnu.tar.gz
31dfc19ae5821c0542975111574aa8cc7e0b2e1a95204f6cff7572f183524626     48592718 rust-std-1.67.1-x86_64-unknown-linux-gnu.tar.gz
8d9310dc1e8d36ebd8d56ccaddb0c854daddb6b750c147c141be04f0ec6e89f0      9691442 cargo-1.67.1-x86_64-unknown-linux-gnu.tar.gz
373855f45b76123ca8dfae329c744314a2e5d839006e5cec97486f784ac23e7c    111081982 rustc-1.67.1-x86_64-unknown-netbsd.tar.gz
351e4f61be6cc6cfa870d9574c02b2653def405955095d65743788b791168b72     43838682 rust-std-1.67.1-x86_64-unknown-netbsd.tar.gz
dd93dfe32780527cc29b9e3fc0be90d9015582504749245df073cc009b366ddb      9765138 cargo-1.67.1-x86_64-unknown-netbsd.tar.gz
ee5f1a1955b0ed413435ef79db28b834ea5f0fb7c8cfb1ce47175cc3bee08fff      2547932 curl-7.87.0.tar.xz


[FILE:96:manifests/plist.single]
@comment generated from lib/rustlib/manifest-*
lib/rustlib/
 components
 rust-installer-version


[FILE:970:patches/patch-compiler_rustc__llvm_build.rs]
--- compiler/rustc_llvm/build.rs.orig	2023-03-06 15:58:58 UTC
+++ compiler/rustc_llvm/build.rs
@@ -326,23 +326,7 @@ fn main() {
     }
 
     let llvm_static_stdcpp = tracked_env_var_os("LLVM_STATIC_STDCPP");
-    let llvm_use_libcxx = tracked_env_var_os("LLVM_USE_LIBCXX");
-
-    let stdcppname = if target.contains("openbsd") {
-        if target.contains("sparc64") { "estdc++" } else { "c++" }
-    } else if target.contains("darwin")
-        || target.contains("freebsd")
-        || target.contains("windows-gnullvm")
-    {
-        "c++"
-    } else if target.contains("netbsd") && llvm_static_stdcpp.is_some() {
-        // NetBSD uses a separate library when relocation is required
-        "stdc++_p"
-    } else if llvm_use_libcxx.is_some() {
-        "c++"
-    } else {
-        "stdc++"
-    };
+    let stdcppname = "stdc++";
 
     // RISC-V GCC erroneously requires libatomic for sub-word
     // atomic operations. Some BSD uses Clang as its system


[FILE:271:patches/patch-library_unwind_src_lib.rs]
--- library/unwind/src/lib.rs.orig	2023-03-06 15:58:58 UTC
+++ library/unwind/src/lib.rs
@@ -121,7 +121,7 @@ extern "C" {}
 extern "C" {}
 
 #[cfg(target_os = "dragonfly")]
-#[link(name = "gcc_pic")]
+#[link(name = "gcc_s")]
 extern "C" {}
 
 #[cfg(target_os = "haiku")]


[FILE:758:patches/patch-src_bootstrap_builder.rs]
--- src/bootstrap/builder.rs.orig	2023-03-06 15:58:58 UTC
+++ src/bootstrap/builder.rs
@@ -1545,12 +1545,13 @@ impl<'a> Builder<'a> {
                 Some("-Wl,-rpath,@loader_path/../lib")
             } else if !target.contains("windows") {
                 rustflags.arg("-Clink-args=-Wl,-z,origin");
-                Some("-Wl,-rpath,$ORIGIN/../lib")
+                Some("-Wl,-rpath,$ORIGIN/../lib:@OPENSSLLIB@")
             } else {
                 None
             };
             if let Some(rpath) = rpath {
-                rustflags.arg(&format!("-Clink-args={}", rpath));
+                rustflags.arg(&format!("-Clink-arg={}", "-Wl,-z,origin"));
+                rustflags.arg(&format!("-Clink-arg={}", rpath));
             }
         }
 


[FILE:476:patches/patch-vendor_libc_src_unix_bsd_freebsdlike_dragonfly_errno.rs]
--- vendor/libc/src/unix/bsd/freebsdlike/dragonfly/errno.rs.orig	2023-03-06 18:39:30 UTC
+++ vendor/libc/src/unix/bsd/freebsdlike/dragonfly/errno.rs
@@ -1,7 +1,6 @@
 // DragonFlyBSD's __error function is declared with "static inline", so it must
 // be implemented in the libc crate, as a pointer to a static thread_local.
 f! {
-    #[deprecated(since = "0.2.77", note = "Use `__errno_location()` instead")]
     pub fn __error() -> *mut ::c_int {
         &mut errno
     }


[FILE:424:patches/patch-vendor_libc_src_unix_bsd_freebsdlike_dragonfly_mod.rs]
--- vendor/libc/src/unix/bsd/freebsdlike/dragonfly/mod.rs.orig	2023-03-06 18:39:30 UTC
+++ vendor/libc/src/unix/bsd/freebsdlike/dragonfly/mod.rs
@@ -442,8 +442,8 @@ s_no_extra_traits! {
         pub d_fileno: ::ino_t,
         pub d_namlen: u16,
         pub d_type: u8,
-        __unused1: u8,
-        __unused2: u32,
+        pub d_unused1: u8,
+        pub d_unused2: u32,
         pub d_name: [::c_char; 256],
     }
 


[FILE:459:patches/patch-vendor_libssh2-sys_libssh2_src_openssl.h]
--- vendor/libssh2-sys/libssh2/src/openssl.h.orig	2023-03-06 18:39:30 UTC
+++ vendor/libssh2-sys/libssh2/src/openssl.h
@@ -57,8 +57,9 @@
 #include <openssl/pem.h>
 #include <openssl/rand.h>
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L && \
-    !defined(LIBRESSL_VERSION_NUMBER)
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000L && \
+    !defined(LIBRESSL_VERSION_NUMBER)) || \
+    LIBRESSL_VERSION_NUMBER >= 0x3050000fL
 # define HAVE_OPAQUE_STRUCTS 1
 #endif
 


[FILE:436:patches/patch-vendor_openssl-probe_src_lib.rs]
--- vendor/openssl-probe/src/lib.rs.orig	2023-03-06 18:39:31 UTC
+++ vendor/openssl-probe/src/lib.rs
@@ -26,10 +26,7 @@ fn cert_dirs_iter() -> impl Iterator<Ite
     [
         "/var/ssl",
         "/usr/share/ssl",
-        "/usr/local/ssl",
-        "/usr/local/openssl",
-        "/usr/local/etc/openssl",
-        "/usr/local/share",
+        "@PREFIX@/share",
         "/usr/lib/ssl",
         "/usr/ssl",
         "/etc/openssl",


[FILE:471:patches/patch-vendor_openssl-sys_build_main.rs]
--- vendor/openssl-sys/build/main.rs.orig	2023-03-06 18:39:31 UTC
+++ vendor/openssl-sys/build/main.rs
@@ -254,6 +254,9 @@ See rust-openssl README for more informa
             (3, 3, _) => ('3', '3', 'x'),
             (3, 4, 0) => ('3', '4', '0'),
             (3, 4, _) => ('3', '4', 'x'),
+            (3, 5, _) => ('3', '5', 'x'),
+            (3, 6, 0) => ('3', '6', '0'),
+            (3, 6, _) => ('3', '6', 'x'),
             _ => version_error(),
         };
 


[FILE:824:patches/patch-vendor_os__info_src_freebsd_mod.rs]
--- vendor/os_info/src/freebsd/mod.rs.orig	2023-03-06 18:39:31 UTC
+++ vendor/os_info/src/freebsd/mod.rs
@@ -30,17 +30,7 @@ fn get_os() -> Type {
         .expect("Failed to get OS");
 
     match str::from_utf8(&os.stdout) {
-        Ok("FreeBSD\n") => {
-            let check_hardening = Command::new("sysctl")
-                .arg("hardening.version")
-                .output()
-                .expect("Failed to check if is hardened");
-            match str::from_utf8(&check_hardening.stderr) {
-                Ok("0\n") => Type::HardenedBSD,
-                Ok(_) => Type::FreeBSD,
-                Err(_) => Type::FreeBSD,
-            }
-        }
+        Ok("FreeBSD\n") => Type::FreeBSD,
         Ok("MidnightBSD\n") => Type::MidnightBSD,
         Ok(_) => Type::Unknown,
         Err(_) => Type::Unknown,


[FILE:891:files/build_curl.sh]
#!/bin/sh

PREFIX="$1"
CONFIGURE_TARGET="$2"

cd /construction/rust/curl-* || exit
CONFIG_GUESS_DIRS=$(find * -name config.guess -o -name config.sub | xargs -n 1 dirname 2>/dev/null)
for _D in ${CONFIG_GUESS_DIRS}; do \
	rm "${_D}/config.guess"; \
	cp /xports/Mk/Templates/config.guess "${_D}/config.guess"; \
	chmod a+rx "${_D}/config.guess"; \
	rm "${_D}/config.sub"; \
	cp /xports/Mk/Templates/config.sub "${_D}/config.sub"; \
	chmod a+rx "${_D}/config.sub"; \
done

env MAKE=gmake \
	CONFIG_SITE=/xports/Mk/Templates/config.site \
/bin/sh configure \
	--prefix="${PREFIX}" \
	--build="${CONFIGURE_TARGET}" \
	--disable-werror \
	--disable-shared \
	--disable-imap \
	--disable-pop3 \
	--disable-smtp \
	--with-ca-bundle="${PREFIX}/share/certs/ca-root-nss.crt" \
	--enable-cookies \
	--without-nghttp2 \
	--with-ssl="${PREFIX}/libressl" \
	--enable-pthreads \
	--enable-threaded-resolver


[FILE:478:files/special.mk]
.if "${OPSYS}" == "DragonFly"
DF_INDEX+=		2 3 4
COMPEXT=		zst
.elif "${OPSYS}" == "FreeBSD"
DF_INDEX+=		5 6 7
COMPEXT=		gz
.elif "${OPSYS}" == "Linux"
DF_INDEX+=		8 9 10
COMPEXT=		gz
SFX=			${ARCH_STANDARD}-unknown-linux-gnu
.elif "${OPSYS}" == "NetBSD"
DF_INDEX+=		11 12 13
COMPEXT=		gz
.endif
SFX?=			${ARCH_STANDARD}-unknown-${OPSYS:tl}
SRC_RUSTC?=		rustc-${BOOTSTRAP_RUST}-${SFX}
SRC_RUSTSTD?=		rust-std-${BOOTSTRAP_RUST}-${SFX}
SRC_CARGO?=		cargo-${BOOTSTRAP_CARGO}-${SFX}

