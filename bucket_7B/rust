# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		rust
VERSION=		1.32.0
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Systems programming language from Mozilla
HOMEPAGE=		https://www.rust-lang.org/
CONTACT=		Michael_Neumann[mneumann@ntecs.de]

DOWNLOAD_GROUPS=	main dflyboot
SITES[dflyboot]=	https://www.ntecs.de/downloads/rust/1.31.0/
SITES[main]=		https://static.rust-lang.org/dist/
DISTFILE[1]=		rustc-1.32.0-src.tar.xz:main
DISTFILE[2]=		rustc-1.31.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DISTFILE[3]=		rust-std-1.31.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DISTFILE[4]=		cargo-0.32.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DISTFILE[5]=		rustc-1.31.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[6]=		rust-std-1.31.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[7]=		cargo-0.32.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[8]=		rustc-1.31.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[9]=		rust-std-1.31.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[10]=		cargo-0.32.0-x86_64-unknown-linux-gnu.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		dragonfly freebsd linux

BUILD_DEPENDS=		bash:primary:standard
			cmake:single:standard
BUILDRUN_DEPENDS=	curl:primary:standard
			libssh2:single:standard
			libgit2:single:standard
EXRUN[single]=		gcc8:compilers:standard

USES=			gmake ssl zlib python:py27,build shebangfix ncurses
			execinfo c++:single

DISTNAME=		rustc-1.32.0-src
EXTRACT_ONLY=		1

LICENSE=		APACHE20:single MIT:single
LICENSE_TERMS=		single:{{WRKSRC}}/COPYRIGHT
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE-APACHE
			MIT:{{WRKSRC}}/LICENSE-MIT
LICENSE_SCHEME=		dual

FPC_EQUIVALENT=		lang/rust
SHEBANG_FILES=		src/libcompiler_builtins/compiler-rt/lib/sanitizer_common/symbolizer/scripts/*.sh
			src/libcompiler_builtins/compiler-rt/lib/asan/scripts/asan_device_setup
			src/libcompiler_builtins/compiler-rt/lib/tsan/*.sh
			src/libcompiler_builtins/compiler-rt/lib/fuzzer/scripts/*.py
			src/libcompiler_builtins/compiler-rt/lib/dfsan/scripts/build-libc-list.py
			src/libcompiler_builtins/compiler-rt/lib/sanitizer_common/scripts/*.py
			src/libcompiler_builtins/compiler-rt/lib/asan/scripts/asan_symbolize.py
			src/libcore/unicode/unicode.py

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--release-channel=stable
			--enable-rpath
			--enable-extended
			--enable-vendor
			--enable-locked-deps
			--local-rust-root={{WRKDIR}}/bootstrap
			--prefix={{PREFIX}}
			--disable-ninja
			--default-linker={{LOCALBASE}}/toolchain/gcc8/bin/cc

MAKE_ENV=		LD_LIBRARY_PATH={{WRKDIR}}/bootstrap/lib
			LIBGIT2_SYS_USE_PKG_CONFIG=1
			LIBSSH2_SYS_USE_PKG_CONFIG=1
			OPENSSL_NO_PKG_CONFIG=1
			RUST_BACKTRACE=1
			PROFILE=release
			OPENSSL_DIR="{{OPENSSLBASE}}"
			HOME="{{WRKDIR}}"

INSTALL_REQ_TOOLCHAIN=	yes

BLOCK_WATCHDOG=		yes

post-patch:
	# Use rpath suitable for libz et al.
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|g' \
		${WRKSRC}/src/bootstrap/bin/rustc.rs
	# Disable vendor checksums
	${REINPLACE_CMD} -e 's/"files":{[^}]*}/"files":{}/' \
		 ${WRKSRC}/vendor/*/.cargo-checksum.json

post-configure-freebsd:
	${LN} -s ${LOCALBASE}/toolchain/gcc8/lib/libstdc++.so \
	${LOCALBASE}/lib/libc++.so

post-configure-dragonfly:
	${LN} -s ${LOCALBASE}/toolchain/gcc8/lib/libgcc_s.so \
	${WRKDIR}/bootstrap/lib/rustlib/${SFX}/lib/libgcc_pic.so

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} x.py build --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

post-install:
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/install.log
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/uninstall.sh
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc/rust
	# Taken from FreeBSD Ports
	# In post-install, we use the manifests generated during Rust install
	# to in turn generate the PLIST. We do that because several libraries
	# have a computed filename based on the absolute path of the source
	# files. As it is user-specific, we can't know the filename in advance.
	#
	# Both rustc and Cargo components install the same README.md and
	# LICENSE files. The install process backs up the first copy to
	# install the second. Thus here, we need to remove those backups.
	# Actually we remove the entire share/doc/rust contents.
	# We also need to dedup the entries in the generated PLIST, because
	# both components manifests list them.
	#
	# We fix manpage entries in the generated manifests because Rust
	# installs them uncompressed but the Ports framework compresses them.
	for f in ${RUST_MANIFESTS}; do \
	    ${SED} -i'' -E \
		-e '/share\/doc\/rust/d' \
	        -e 's|:${STAGEDIR}|:|' \
	        -e 's|(man/man[1-9]/.*\.[0-9])|\1.gz|' \
	        ${STAGEDIR}${PREFIX}/$$f; \
	    ${AWK} '\
	        /^file:/ { \
	            file=$$0; \
	            sub(/^file:/, "", file); \
	            print file; \
	        } \
	        /^dir:/ { \
	            dir=$$0; \
	            sub(/^dir:/, "", dir); \
	            system("find ${STAGEDIR}" dir " -type f | ${SED} -E -e \"s|${STAGEDIR}||\""); \
	        }' \
	        ${STAGEDIR}${PREFIX}/$$f >> ${WRKDIR}/.manifest.gen.unsorted; \
	done
	(cd ${STAGEDIR}${PREFIX} && ${RM} ${RUST_MANIFESTS})
	${SORT} -u ${WRKDIR}/.manifest.gen.unsorted > ${WRKDIR}/.manifest.gen.sorted
	${CAT} ${WRKDIR}/.manifest.gen.sorted >> ${WRKDIR}/.manifest.single.mktmp
	# Strip binaries and libraries
	${STRIP_CMD} \
		${STAGEDIR}${PREFIX}/bin/cargo \
		${STAGEDIR}${PREFIX}/bin/cargo-clippy \
		${STAGEDIR}${PREFIX}/bin/cargo-fmt \
		${STAGEDIR}${PREFIX}/bin/clippy-driver \
		${STAGEDIR}${PREFIX}/bin/rls \
		${STAGEDIR}${PREFIX}/bin/rustc \
		${STAGEDIR}${PREFIX}/bin/rustdoc \
		${STAGEDIR}${PREFIX}/bin/rustfmt \
		${STAGEDIR}${PREFIX}/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/codegen-backends/*.so

post-build-freebsd:
	${RM} ${LOCALBASE}/lib/libc++.so

post-configure:
	${MKDIR} ${WRKDIR}/bootstrap
	# Extract OS-specific bootstrap components
	# then install bootstrap components
	for F in ${SRC_RUSTC} ${SRC_RUSTSTD} ${SRC_CARGO}; do\
	   ${TAR} -C ${WRKDIR} -xf ${DISTDIR}/$$F.tar.${COMPEXT}\
	     --no-same-owner --no-same-permissions;\
	   ${LOCALBASE}/bin/bash ${WRKDIR}/$$F/install.sh\
	     --prefix=${WRKDIR}/bootstrap;\
	done

do-install:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} DESTDIR=${STAGEDIR} \
		${PYTHON_CMD} x.py install --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

[FILE:753:descriptions/desc.single]
Rust is a systems programming language that runs blazingly fast, prevents
segfaults, and guarantees thread safety.

Performance
Rust is blazingly fast and memory-efficient: with no runtime or garbage
collector, it can power performance-critical services, run on embedded
devices, and easily integrate with other languages.

Reliability
Rust's rich type system and ownership model guarantee memory-safety and
thread-safety -- and enable you to eliminate many classes of bugs at
compile-time.

Productivity
Rust has great documentation, a friendly compiler with useful error
messages, and top-notch tooling -- an integrated package manager and
build tool, smart multi-editor support with auto-completion and type
inspections, an auto-formatter, and more.


[FILE:1212:distinfo]
d617a7dc39daaafa8256320991005fc376c8ef2080593918301b24466d0067af     99602696 rustc-1.32.0-src.tar.xz
a57925a99f65b5b6b73d04c99be904332817af5e2bc00f24bfc7f761e4720853     55370304 rustc-1.31.0-x86_64-unknown-dragonfly.tar.xz
6885f74ebf37edf1912f277efb07d6dc46541d0d66a061abcebb565c2a9e5c96     53664404 rust-std-1.31.0-x86_64-unknown-dragonfly.tar.xz
beb20af13f3ee4e43fce49cb78f65e5a388b76191feda4373bf7174e1e693a91      4621596 cargo-0.32.0-x86_64-unknown-dragonfly.tar.xz
9ec40454e22e3494b9859c03e37e8851077f897845bcf838d69d4393900e7b33     69924501 rustc-1.31.0-x86_64-unknown-freebsd.tar.gz
3779f0732ee8fdc1d81663172a72219d59b716e8cc5a6b07bf1d5dd744f74b13     69322955 rust-std-1.31.0-x86_64-unknown-freebsd.tar.gz
2cc09d55f6c6dcca58d43815c4968d2349813b12e12a23eff1b8fa30548eba8f      6813542 cargo-0.32.0-x86_64-unknown-freebsd.tar.gz
5c4581f0fc05f0f5076db6231b0c1a4d27eb61c0b36bfb42d97243ad8f4e43a0    110019569 rustc-1.31.0-x86_64-unknown-linux-gnu.tar.gz
fe67a62c7a63acbf2458a36d7689ef41903187a472f0c28850f1fca7ea478da8     72914106 rust-std-1.31.0-x86_64-unknown-linux-gnu.tar.gz
b3d3dc57182fb173ecf367f7884dceb855a096d9b9b32eba994e3359ddc68cd4      6777179 cargo-0.32.0-x86_64-unknown-linux-gnu.tar.gz


[FILE:96:manifests/plist.single]
@comment generated from lib/rustlib/manifest-*
lib/rustlib/
 components
 rust-installer-version


[FILE:541:patches/patch-cmake_modules_HandleLLVMOptions.cmake]
--- src/llvm/cmake/modules/HandleLLVMOptions.cmake.orig	2018-12-13 15:33:50 UTC
+++ src/llvm/cmake/modules/HandleLLVMOptions.cmake
@@ -138,6 +138,7 @@ endif()
 # build might work on ELF but fail on MachO/COFF.
 if(NOT (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR WIN32 OR CYGWIN OR
         ${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD" OR
+        ${CMAKE_SYSTEM_NAME} MATCHES "DragonFly" OR
         ${CMAKE_SYSTEM_NAME} MATCHES "OpenBSD") AND
    NOT LLVM_USE_SANITIZER)
   set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-z,defs")


[FILE:487:patches/patch-src_bootstrap_bin_rustc.rs]
--- src/bootstrap/bin/rustc.rs.orig	2019-01-16 09:30:27 UTC
+++ src/bootstrap/bin/rustc.rs
@@ -237,7 +237,7 @@ fn main() {
             } else if !target.contains("windows") &&
                       !target.contains("wasm32") &&
                       !target.contains("fuchsia") {
-                Some("-Wl,-rpath,$ORIGIN/../lib")
+                Some("-Wl,-z,origin -Wl,-rpath,$ORIGIN/../lib:@PREFIX@/lib -L@PREFIX@/lib")
             } else {
                 None
             };


[FILE:606:patches/patch-src_libcompiler__builtins_compiler-rt_test_fuzzer_lit.cfg]
--- src/libcompiler_builtins/compiler-rt/test/fuzzer/lit.cfg.orig	2019-01-16 09:30:47 UTC
+++ src/libcompiler_builtins/compiler-rt/test/fuzzer/lit.cfg
@@ -68,7 +68,7 @@ def generate_compiler_cmd(is_cpp=True, f
   elif config.clang and config.stdlib == 'static-libc++':
     link_cmd = '-stdlib=libc++ -lc++abi -static-libstdc++ -Wl,-rpath=%s' % (
         config.runtime_library_dir)
-  elif any(x in config.target_triple for x in ('darwin', 'freebsd')):
+  elif any(x in config.target_triple for x in ('darwin')):
     link_cmd = '-lc++'
   elif 'windows-msvc' in config.target_triple:
     link_cmd = ''


[FILE:533:patches/patch-src_libunwind_build.rs]
--- src/libunwind/build.rs.orig	2019-01-16 09:30:27 UTC
+++ src/libunwind/build.rs
@@ -33,7 +33,7 @@ fn main() {
     } else if target.contains("bitrig") {
         println!("cargo:rustc-link-lib=c++abi");
     } else if target.contains("dragonfly") {
-        println!("cargo:rustc-link-lib=gcc_pic");
+        println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("windows-gnu") {
         println!("cargo:rustc-link-lib=static-nobundle=gcc_eh");
         println!("cargo:rustc-link-lib=static-nobundle=pthread");


[FILE:641:patches/patch-src_llvm_lib_Support_Unix_Path.inc]
--- src/llvm/lib/Support/Unix/Path.inc.orig	2018-12-13 15:33:50 UTC
+++ src/llvm/lib/Support/Unix/Path.inc
@@ -54,13 +54,13 @@
 
 #include <sys/types.h>
 #if !defined(__APPLE__) && !defined(__OpenBSD__) && !defined(__FreeBSD__) &&   \
-    !defined(__linux__)
+    !defined(__DragonFly__) && !defined(__linux__)
 #include <sys/statvfs.h>
 #define STATVFS statvfs
 #define FSTATVFS fstatvfs
 #define STATVFS_F_FRSIZE(vfs) vfs.f_frsize
 #else
-#if defined(__OpenBSD__) || defined(__FreeBSD__)
+#if defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/mount.h>
 #include <sys/param.h>
 #elif defined(__linux__)


[FILE:499:patches/patch-vendor_openssl-src_src_lib.rs]
--- vendor/openssl-src/src/lib.rs.orig	2019-01-16 11:06:08 UTC
+++ vendor/openssl-src/src/lib.rs
@@ -145,6 +145,7 @@ impl Build {
             "i686-linux-android" => "linux-elf",
             "i686-pc-windows-gnu" => "mingw",
             "i686-pc-windows-msvc" => "VC-WIN32",
+            ""x86_64-unknown-dragonfly" => "BSD-x86_64",
             "i686-unknown-freebsd" => "BSD-x86-elf",
             "i686-unknown-linux-gnu" => "linux-elf",
             "i686-unknown-linux-musl" => "linux-elf",


[FILE:1997:patches/patch-vendor_openssl-sys_build_main.rs]
https://github.com/sfackler/rust-openssl/commit/9fd7584a8416
https://github.com/sfackler/rust-openssl/commit/e75793e8962d

--- vendor/openssl-sys/build/main.rs.orig	2019-01-16 11:06:08 UTC
+++ vendor/openssl-sys/build/main.rs
@@ -1,9 +1,9 @@
 extern crate cc;
+#[cfg(feature = "vendored")]
+extern crate openssl_src;
 extern crate pkg_config;
 #[cfg(target_env = "msvc")]
 extern crate vcpkg;
-#[cfg(feature = "vendored")]
-extern crate openssl_src;
 
 use std::collections::HashSet;
 use std::env;
@@ -103,20 +103,23 @@ fn main() {
 
 #[cfg(feature = "vendored")]
 mod imp {
-	use std::path::PathBuf;
-	use openssl_src;
+    use openssl_src;
+    use std::path::PathBuf;
 
-	pub fn get_openssl(_target: &str) -> (PathBuf, PathBuf) {
-		let artifacts = openssl_src::Build::new().build();
-		(artifacts.lib_dir().to_path_buf(), artifacts.include_dir().to_path_buf())
-	}
+    pub fn get_openssl(_target: &str) -> (PathBuf, PathBuf) {
+        let artifacts = openssl_src::Build::new().build();
+        (
+            artifacts.lib_dir().to_path_buf(),
+            artifacts.include_dir().to_path_buf(),
+        )
+    }
 }
 
 #[cfg(not(feature = "vendored"))]
 mod imp {
     use pkg_config;
-    use std::path::{Path, PathBuf};
     use std::ffi::OsString;
+    use std::path::{Path, PathBuf};
     use std::process::{self, Command};
 
     use super::env;
@@ -500,6 +503,8 @@ See rust-openssl README for more informa
             (7, _) => ('7', 'x'),
             (8, 0) => ('8', '0'),
             (8, 1) => ('8', '1'),
+            (8, _) => ('8', 'x'),
+            (9, 0) => ('9', '0'),
             _ => version_error(),
         };
 
@@ -540,7 +545,7 @@ fn version_error() -> ! {
         "
 
 This crate is only compatible with OpenSSL 1.0.1 through 1.1.1, or LibreSSL 2.5
-through 2.8.1, but a different version of OpenSSL was found. The build is now aborting
+through 2.9.0, but a different version of OpenSSL was found. The build is now aborting
 due to this version mismatch.
 
 "


[FILE:919:files/special.mk]
.if "${OPSYS}" == "DragonFly"
BOOTSTRAP_RUST=		1.31.0
BOOTSTRAP_CARGO=	0.32.0
DF_INDEX+=		2 3 4
COMPEXT=		xz
.elif "${OPSYS}" == "FreeBSD"
BOOTSTRAP_RUST=		1.31.0
BOOTSTRAP_CARGO=	0.32.0
DF_INDEX+=		5 6 7
COMPEXT=		gz
.elif "${OPSYS}" == "Linux"
BOOTSTRAP_RUST=		1.31.0
BOOTSTRAP_CARGO=	0.32.0
DF_INDEX+=		8 9 10
COMPEXT=		gz
SFX=			${ARCH_STANDARD}-unknown-linux-gnu
.endif
SFX?=			${ARCH_STANDARD}-unknown-${OPSYS:tl}
SRC_RUSTC?=		rustc-${BOOTSTRAP_RUST}-${SFX}
SRC_RUSTSTD?=		rust-std-${BOOTSTRAP_RUST}-${SFX}
SRC_CARGO?=		cargo-${BOOTSTRAP_CARGO}-${SFX}

# Manifest files
RUST_MANIFESTS= \
	lib/rustlib/manifest-cargo \
	lib/rustlib/manifest-clippy-preview \
	lib/rustlib/manifest-rls-preview \
	lib/rustlib/manifest-rustc \
	lib/rustlib/manifest-rustfmt-preview \
	lib/rustlib/manifest-rust-analysis-${SFX} \
	lib/rustlib/manifest-rust-std-${SFX} \
	lib/rustlib/manifest-rust-src \
	lib/rustlib/manifest-rust-docs

