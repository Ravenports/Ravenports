# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		rust
VERSION=		1.61.0
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Systems programming language from Mozilla
HOMEPAGE=		https://www.rust-lang.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main dflyboot
SITES[main]=		https://static.rust-lang.org/dist/
SITES[dflyboot]=	https://leaf.dragonflybsd.org/~marino/dports-src/rust/
DISTFILE[1]=		rustc-1.61.0-src.tar.xz:main
DISTFILE[2]=		rustc-1.60.0-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[3]=		rust-std-1.60.0-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[4]=		cargo-1.60.0-x86_64-unknown-dragonfly.tar.zst:dflyboot
DISTFILE[5]=		rustc-1.60.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[6]=		rust-std-1.60.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[7]=		cargo-1.60.0-x86_64-unknown-freebsd.tar.gz:main
DISTFILE[8]=		rustc-1.60.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[9]=		rust-std-1.60.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[10]=		cargo-1.60.0-x86_64-unknown-linux-gnu.tar.gz:main
DISTFILE[11]=		rustc-1.60.0-x86_64-unknown-netbsd.tar.gz:main
DISTFILE[12]=		rust-std-1.60.0-x86_64-unknown-netbsd.tar.gz:main
DISTFILE[13]=		cargo-1.60.0-x86_64-unknown-netbsd.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		dragonfly freebsd linux netbsd

BUILD_DEPENDS=		bash:primary:standard
			cmake:single:standard
BUILDRUN_DEPENDS=	curl:primary:standard
			libssh2:single:standard
EXRUN[single]=		ravensys-gcc:compilers:standard

USES=			cpe gmake ssl zlib python:build shebangfix ncurses
			execinfo c++:single dos2unix

DISTNAME=		rustc-1.61.0-src
EXTRACT_ONLY=		1

LICENSE=		APACHE20:single MIT:single
LICENSE_TERMS=		single:{{WRKSRC}}/COPYRIGHT
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE-APACHE
			MIT:{{WRKSRC}}/LICENSE-MIT
LICENSE_SCHEME=		dual

CPE_VENDOR=		rust-lang
DOS2UNIX_FILES=		vendor/openssl-probe/src/lib.rs
FPC_EQUIVALENT=		lang/rust
SHEBANG_FILES=		src/llvm-project/compiler-rt/lib/sanitizer_common/symbolizer/scripts/*.sh
			src/llvm-project/compiler-rt/lib/asan/scripts/asan_device_setup
			src/llvm-project/compiler-rt/lib/tsan/*.sh
			src/llvm-project/compiler-rt/lib/fuzzer/scripts/*.py
			src/llvm-project/compiler-rt/lib/dfsan/scripts/build-libc-list.py
			src/llvm-project/compiler-rt/lib/sanitizer_common/scripts/*.py
			src/llvm-project/compiler-rt/lib/asan/scripts/asan_symbolize.py
			library/core/src/unicode/printable.py
			library/backtrace/ci/debuglink.sh

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--release-channel=stable
			--enable-rpath
			--enable-extended
			--enable-vendor
			--enable-locked-deps
			--local-rust-root={{WRKDIR}}/bootstrap
			--prefix={{PREFIX}}
			--disable-ninja
			--default-linker={{LOCALBASE}}/toolchain/ravensys-gcc/bin/cc

MAKE_ENV=		LD_LIBRARY_PATH={{WRKDIR}}/bootstrap/lib
			LIBSSH2_SYS_USE_PKG_CONFIG=1
			OPENSSL_NO_PKG_CONFIG=1
			RUST_BACKTRACE=1
			PROFILE=release
			OPENSSL_DIR="{{OPENSSLBASE}}"
			HOME="{{WRKDIR}}"

INSTALL_REQ_TOOLCHAIN=	yes

VAR_OPSYS[freebsd]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.60.0
			MAKEFILE_LINE=BOOTSTRAP_CARGO=1.60.0
VAR_OPSYS[linux]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.60.0
			MAKEFILE_LINE=BOOTSTRAP_CARGO=1.60.0
VAR_OPSYS[netbsd]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.60.0
			MAKEFILE_LINE=BOOTSTRAP_CARGO=1.60.0
VAR_OPSYS[dragonfly]=	MAKEFILE_LINE=BOOTSTRAP_RUST=1.60.0
			MAKEFILE_LINE=BOOTSTRAP_CARGO=1.60.0

post-patch:
	# Use rpath suitable for libz et al.
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|g' \
		-e 's|@OPENSSLLIB@|${OPENSSLLIB}|g' \
		${WRKSRC}/src/bootstrap/builder.rs
	# Disable vendor checksums
	${REINPLACE_CMD} -e 's/"files":{[^}]*}/"files":{}/' \
		 ${WRKSRC}/vendor/*/.cargo-checksum.json
	# for rust 1.43 bootstrap built with libressl 3.0
	# (cd ${LOCALBASE}/libressl/lib && \
		${LN} -s libssl.so libssl.so.47 && \
		${LN} -s libcrypto.so libcrypto.so.45)

post-configure-linux:
	${LN} -s ${LOCALBASE}/lib/libz.so.1 ${WRKDIR}/bootstrap/lib

post-configure-netbsd:
	${LN} -s ${LOCALBASE}/toolchain/ravensys-gcc/lib/libgcc_s.so.1 \
	${WRKDIR}/bootstrap/lib/libgcc_s.so.1

post-configure-freebsd:
	${LN} -s ${LOCALBASE}/toolchain/ravensys-gcc/lib/libstdc++.so \
	${LOCALBASE}/lib/libc++.so

post-configure-dragonfly:
	${LN} -s ${LOCALBASE}/toolchain/ravensys-gcc/lib/libgcc_s.so \
	${WRKDIR}/bootstrap/lib/rustlib/${SFX}/lib/libgcc_pic.so

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} x.py build --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

post-install:
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/install.log
	${RM} ${STAGEDIR}${PREFIX}/lib/rustlib/uninstall.sh
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc/rust
	# Taken from FreeBSD Ports
	# In post-install, we use the manifests generated during Rust install
	# to in turn generate the PLIST. We do that because several libraries
	# have a computed filename based on the absolute path of the source
	# files. As it is user-specific, we can't know the filename in advance.
	#
	# Both rustc and Cargo components install the same README.md and
	# LICENSE files. The install process backs up the first copy to
	# install the second. Thus here, we need to remove those backups.
	# Actually we remove the entire share/doc/rust contents.
	# We also need to dedup the entries in the generated PLIST, because
	# both components manifests list them.
	#
	# We fix manpage entries in the generated manifests because Rust
	# installs them uncompressed but the Ports framework compresses them.
	for f in ${STAGEDIR}${PREFIX}/lib/rustlib/manifest-*; do \
	    ${SED} -i'' -E \
		-e '/share\/doc\/rust/d' \
	        -e 's|:${STAGEDIR}|:|' \
	        -e 's|(man/man[1-9]/.*\.[0-9])|\1.gz|' \
	        $$f; \
	    ${AWK} '\
	        /^file:/ { \
	            file=$$0; \
	            sub(/^file:/, "", file); \
	            print file; \
	        } \
	        /^dir:/ { \
	            dir=$$0; \
	            sub(/^dir:/, "", dir); \
	            system("find ${STAGEDIR}" dir " -type f | ${SED} -E -e \"s|${STAGEDIR}||\""); \
	        }' \
	        $$f >> ${WRKDIR}/.manifest.gen.unsorted; \
	    ${RM} $$f; \
	done
	${SORT} -u ${WRKDIR}/.manifest.gen.unsorted > ${WRKDIR}/.manifest.gen.sorted
	${CAT} ${WRKDIR}/.manifest.gen.sorted >> ${WRKDIR}/.manifest.single.mktmp
	# Strip binaries and libraries
	${STRIP_CMD} \
		${STAGEDIR}${PREFIX}/bin/cargo \
		${STAGEDIR}${PREFIX}/bin/cargo-clippy \
		${STAGEDIR}${PREFIX}/bin/cargo-fmt \
		${STAGEDIR}${PREFIX}/bin/clippy-driver \
		${STAGEDIR}${PREFIX}/bin/rls \
		${STAGEDIR}${PREFIX}/bin/rustc \
		${STAGEDIR}${PREFIX}/bin/rustdoc \
		${STAGEDIR}${PREFIX}/bin/rustfmt \
		${STAGEDIR}${PREFIX}/bin/rust-demangler \
		${STAGEDIR}${PREFIX}/libexec/cargo-credential-1password \
		${STAGEDIR}${PREFIX}/lib/*.so \
		${STAGEDIR}${PREFIX}/lib/rustlib/*/lib/*.so

pre-configure:
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|' \
		${WRKSRC}/vendor/openssl-probe/src/lib.rs

post-build-freebsd:
	${RM} ${LOCALBASE}/lib/libc++.so

post-configure:
	${MKDIR} ${WRKDIR}/bootstrap
	# Extract OS-specific bootstrap components
	# then install bootstrap components
	for F in ${SRC_RUSTC} ${SRC_RUSTSTD} ${SRC_CARGO}; do\
	   ${TAR} -C ${WRKDIR} -xf ${DISTDIR}/$$F.tar.${COMPEXT}\
	     --no-same-owner --no-same-permissions;\
	   ${LOCALBASE}/bin/bash ${WRKDIR}/$$F/install.sh\
	     --prefix=${WRKDIR}/bootstrap;\
	done

do-install:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} DESTDIR=${STAGEDIR} \
		${PYTHON_CMD} x.py install --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})

[FILE:753:descriptions/desc.single]
Rust is a systems programming language that runs blazingly fast, prevents
segfaults, and guarantees thread safety.

Performance
Rust is blazingly fast and memory-efficient: with no runtime or garbage
collector, it can power performance-critical services, run on embedded
devices, and easily integrate with other languages.

Reliability
Rust's rich type system and ownership model guarantee memory-safety and
thread-safety -- and enable you to eliminate many classes of bugs at
compile-time.

Productivity
Rust has great documentation, a friendly compiler with useful error
messages, and top-notch tooling -- an integrated package manager and
build tool, smart multi-editor support with auto-completion and type
inspections, an auto-formatter, and more.


[FILE:1578:distinfo]
a63305a3ad734f170746b337a5e3d07ccaa7aa8f253dc52336b44c0a3b549d7b    136696780 rustc-1.61.0-src.tar.xz
2192176610b2ef941d23ecda1caf5ba045e34cfe01de5831650e1541d5224d33     56233394 rustc-1.60.0-x86_64-unknown-dragonfly.tar.zst
02722ea6e2a08273d68396659941c2f2fd0c98c848a6c61f0124c065cfe45128     31119758 rust-std-1.60.0-x86_64-unknown-dragonfly.tar.zst
914b5d97b2ffa9f82bfed541af386ca2d1bb4dceec2f0aa024b3ed2a79f44a8e      4703774 cargo-1.60.0-x86_64-unknown-dragonfly.tar.zst
7771457aa6f080fcc5198e9b645682e43efef5a27a66f3e9bc6d18d6c99bc1c0    118232197 rustc-1.60.0-x86_64-unknown-freebsd.tar.gz
322e5919e849ceed37377b466cede0769352c1e844dea6c685fb248d4c96aa35     42078372 rust-std-1.60.0-x86_64-unknown-freebsd.tar.gz
a3dc279bfe878d676ca901b85c53beca8f7c1c7290c955377a893325f59ac777      9151539 cargo-1.60.0-x86_64-unknown-freebsd.tar.gz
d68a0566627ea0d481ee5e57c1bfc995c10ff55ffad34b2508c747429c3bbd6e     85106208 rustc-1.60.0-x86_64-unknown-linux-gnu.tar.gz
963fd25a1f0e986a890e0f99f14902314c71e00f3b14bb587a08ca447ea7d1a6     43469578 rust-std-1.60.0-x86_64-unknown-linux-gnu.tar.gz
6dfc8b0e2d5ac2ccfc4daff66f1e4ea83af47e491edbc56c867de0227eb0cfd5      9191417 cargo-1.60.0-x86_64-unknown-linux-gnu.tar.gz
4940712a34c2ff03fab565a62f828ec5ae79492563a8ca22c85d7ec1023ac5cb     93107616 rustc-1.60.0-x86_64-unknown-netbsd.tar.gz
e876e00f694c1b707e7b35d5bd7a23677ddc353402f8d06778e4d8d4843d6c27     38891830 rust-std-1.60.0-x86_64-unknown-netbsd.tar.gz
896f409da229ff7aa7503a9771aa75a5343ea8178b79922c4494d80ae43eb941      9125396 cargo-1.60.0-x86_64-unknown-netbsd.tar.gz


[FILE:96:manifests/plist.single]
@comment generated from lib/rustlib/manifest-*
lib/rustlib/
 components
 rust-installer-version


[FILE:939:patches/patch-compiler_rustc__llvm_build.rs]
--- compiler/rustc_llvm/build.rs.orig	2022-05-18 01:29:36 UTC
+++ compiler/rustc_llvm/build.rs
@@ -320,22 +320,7 @@ fn main() {
     }
 
     let llvm_static_stdcpp = tracked_env_var_os("LLVM_STATIC_STDCPP");
-    let llvm_use_libcxx = tracked_env_var_os("LLVM_USE_LIBCXX");
-
-    let stdcppname = if target.contains("openbsd") {
-        if target.contains("sparc64") { "estdc++" } else { "c++" }
-    } else if target.contains("freebsd") {
-        "c++"
-    } else if target.contains("darwin") {
-        "c++"
-    } else if target.contains("netbsd") && llvm_static_stdcpp.is_some() {
-        // NetBSD uses a separate library when relocation is required
-        "stdc++_pic"
-    } else if llvm_use_libcxx.is_some() {
-        "c++"
-    } else {
-        "stdc++"
-    };
+    let stdcppname = "stdc++";
 
     // RISC-V GCC erroneously requires libatomic for sub-word
     // atomic operations. FreeBSD uses Clang as its system


[FILE:541:patches/patch-library_unwind_build.rs]
--- library/unwind/build.rs.orig	2022-05-18 01:29:36 UTC
+++ library/unwind/build.rs
@@ -35,7 +35,7 @@ fn main() {
     } else if target.contains("illumos") {
         println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("dragonfly") {
-        println!("cargo:rustc-link-lib=gcc_pic");
+        println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("pc-windows-gnu") {
         // This is handled in the target spec with late_link_args_[static|dynamic]
     } else if target.contains("uwp-windows-gnu") {


[FILE:758:patches/patch-src_bootstrap_builder.rs]
--- src/bootstrap/builder.rs.orig	2022-05-18 01:29:36 UTC
+++ src/bootstrap/builder.rs
@@ -1304,12 +1304,13 @@ impl<'a> Builder<'a> {
                 Some("-Wl,-rpath,@loader_path/../lib")
             } else if !target.contains("windows") {
                 rustflags.arg("-Clink-args=-Wl,-z,origin");
-                Some("-Wl,-rpath,$ORIGIN/../lib")
+                Some("-Wl,-rpath,$ORIGIN/../lib:@OPENSSLLIB@")
             } else {
                 None
             };
             if let Some(rpath) = rpath {
-                rustflags.arg(&format!("-Clink-args={}", rpath));
+                rustflags.arg(&format!("-Clink-arg={}", "-Wl,-z,origin"));
+                rustflags.arg(&format!("-Clink-arg={}", rpath));
             }
         }
 


[FILE:492:patches/patch-vendor_libc-0.2.116_src_unix_bsd_freebsdlike_dragonfly_errno.rs]
--- vendor/libc-0.2.116/src/unix/bsd/freebsdlike/dragonfly/errno.rs.orig	2022-05-18 03:01:05 UTC
+++ vendor/libc-0.2.116/src/unix/bsd/freebsdlike/dragonfly/errno.rs
@@ -1,7 +1,6 @@
 // DragonFlyBSD's __error function is declared with "static inline", so it must
 // be implemented in the libc crate, as a pointer to a static thread_local.
 f! {
-    #[deprecated(since = "0.2.77", note = "Use `__errno_location()` instead")]
     pub fn __error() -> *mut ::c_int {
         &mut errno
     }


[FILE:476:patches/patch-vendor_libc_src_unix_bsd_freebsdlike_dragonfly_errno.rs]
--- vendor/libc/src/unix/bsd/freebsdlike/dragonfly/errno.rs.orig	2022-05-18 03:01:05 UTC
+++ vendor/libc/src/unix/bsd/freebsdlike/dragonfly/errno.rs
@@ -1,7 +1,6 @@
 // DragonFlyBSD's __error function is declared with "static inline", so it must
 // be implemented in the libc crate, as a pointer to a static thread_local.
 f! {
-    #[deprecated(since = "0.2.77", note = "Use `__errno_location()` instead")]
     pub fn __error() -> *mut ::c_int {
         &mut errno
     }


[FILE:393:patches/patch-vendor_openssl-probe_src_lib.rs]
--- vendor/openssl-probe/src/lib.rs.orig	2022-06-12 22:29:12 UTC
+++ vendor/openssl-probe/src/lib.rs
@@ -16,9 +16,7 @@ pub fn find_certs_dirs() -> Vec<PathBuf>
     [
         "/var/ssl",
         "/usr/share/ssl",
-        "/usr/local/ssl",
-        "/usr/local/openssl",
-        "/usr/local/share",
+	"@PREFIX@/share",
         "/usr/lib/ssl",
         "/usr/ssl",
         "/etc/openssl",


[FILE:478:files/special.mk]
.if "${OPSYS}" == "DragonFly"
DF_INDEX+=		2 3 4
COMPEXT=		zst
.elif "${OPSYS}" == "FreeBSD"
DF_INDEX+=		5 6 7
COMPEXT=		gz
.elif "${OPSYS}" == "Linux"
DF_INDEX+=		8 9 10
COMPEXT=		gz
SFX=			${ARCH_STANDARD}-unknown-linux-gnu
.elif "${OPSYS}" == "NetBSD"
DF_INDEX+=		11 12 13
COMPEXT=		gz
.endif
SFX?=			${ARCH_STANDARD}-unknown-${OPSYS:tl}
SRC_RUSTC?=		rustc-${BOOTSTRAP_RUST}-${SFX}
SRC_RUSTSTD?=		rust-std-${BOOTSTRAP_RUST}-${SFX}
SRC_CARGO?=		cargo-${BOOTSTRAP_CARGO}-${SFX}

