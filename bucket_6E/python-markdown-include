# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-markdown-include
VERSION=		0.8.0
KEYWORDS=		python
VARIANTS=		py310 py311
SDESC[py310]=		Include extension for Markdown (3.10)
SDESC[py311]=		Include extension for Markdown (3.11)
HOMEPAGE=		none
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/14/cc/b58c19b6c7993a2f374740615defb420571dbce2cea0c0a644ed6c98261c
DISTFILE[1]=		markdown_include-0.8.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py311]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[py311]=		PY310=OFF PY311=ON

DISTNAME=		markdown_include-0.8.0.dist-info

GENERATED=		yes

[PY310].RUN_DEPENDS_ON=			python-Markdown:single:py310
[PY310].USES_ON=			python:py310,wheel

[PY311].RUN_DEPENDS_ON=			python-Markdown:single:py311
[PY311].USES_ON=			python:py311,wheel

[FILE:3201:descriptions/desc.single]
# Markdown-Include

This is an extension to [Python-Markdown]
which provides an "include" function, similar to that found in
LaTeX (and also the C pre-processor and Fortran). I originally wrote it for
my
[FORD] Fortran auto-documentation generator.

## Installation
This module can now be installed using pip.

    pip install markdown-include

## Tests
Use the unittest module
```bash
python -m unittest discover unittests/
```

## Usage
This module can be used in a program in the following way:

```python
import markdown
html = markdown.markdown(source, extensions=['markdown_include.include'])
```

Markdown-Include can also be included in MkDocs projects like below:

```yaml
markdown_extensions:
    - markdown_include.include:
        base_path: docs
`

The syntax for use within your Markdown files is {!filename!}``. This
statement will be replaced by the contents of filename. Markdown-Include
will work recursively, so any included files within filename will also be
included. This replacement is done prior to any other
Markdown processing, so any Markdown syntax that you want can be used
within
your included files. Note that this is a change from the previous version.
It was felt that this syntax was less likely to conflict with any code
fragments present in the Markdown.

By default, all file-names are evaluated relative to the location from
which
Markdown is being called. If you would like to change the directory
relative to
which paths are evaluated, then this can be done by specifying the
extension
setting base_path.

### Line Ranges

You can also define specific lines or line ranges to include by specifying
`lines`:

```Markdown
{!filename!lines=1  3 8-10  2}
```

`lines` takes a sequence of integers separated by spaces (one or more), or
it can also
take line ranges specified with a start line and an end line separated by a
dash (`-`).

In the example above, it would read the file called `filename` and include
the lines
`1`, `3`, `8`, `9`, `10`, `2`.

Notice that line `9` was not explicitly set. But it was still included as
part of the
range `8-10`.

Also, notice that line `2` is set *after* the range `8-10`. This means that
the
line `2` in `filename` will be included *after* (below) the range `8-10`.

You can use this to include lines in a different order than the original
file. But it
also means that if you want to preserve the original order, you have to pay
attention
to the order in which you specify the lines.

## Configuration

The following settings can be specified when initialising the plugin.

- __base_path__: Default location from which to evaluate relative
  paths for the include statement. (Default: the run-directory.)
- __encoding__: Encoding of the files used by the include statement.
(Default: utf-8.)
- __inheritHeadingDepth__ : If true, increases headings on include
  file by amount of previous heading. Combiens with headingOffset
  option, below. (Default: False.)
- __headingOffset__: Increases heading depth by a specific ammount, in
  addition to the inheritHeadingDepth Option. (Default: 0)
- __throwException__: When true, if the extension is unable to find an
  included file it will throw an exception which the user can


[FILE:118:distinfo]
d12fb51500c46334a53608635035c78b7d8ad7f772566f70b8a6a9b2ef2ddbf5        18869 markdown_include-0.8.0-py3-none-any.whl

