# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		c-ares
VERSION=		1.13.0
KEYWORDS=		dns net
VARIANTS=		standard
SDESC[standard]=	Asynchronous DNS resolver library
HOMEPAGE=		https://c-ares.haxx.se/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://c-ares.haxx.se/download/
DISTFILE[1]=		c-ares-1.13.0.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			libtool

LICENSE=		MIT:single
LICENSE_SCHEME=		solo
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE.md

FPC_EQUIVALENT=		dns/c-ares

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-werror
			--disable-debug
			--disable-optimize
			--enable-symbol-hiding

SINGLE_JOB=		yes

INSTALL_TARGET=		install-strip

post-install:
.for P in acountry adig ahost
	${INSTALL_PROGRAM} ${WRKSRC}/.libs/${P} ${STAGEDIR}${PREFIX}/bin/
.endfor

do-configure:
	@${MKDIR} ${CONFIGURE_WRKSRC}
	@(cd ${CONFIGURE_WRKSRC} && ${SET_LATE_CONFIGURE_ARGS} \
		${SETENV} CC="${CC}" CPP="${CPP}" CXX="${CXX}" \
		CFLAGS="${CFLAGS:N-I*}" CPPFLAGS="${CPPFLAGS}" \
		CXXFLAGS="${CXXFLAGS}" LDFLAGS="${LDFLAGS}" LIBS="${LIBS}" \
		INSTALL="/usr/bin/install -c" \
		INSTALL_DATA="${INSTALL_DATA}" \
		INSTALL_LIB="${INSTALL_LIB}" \
		INSTALL_PROGRAM="${INSTALL_PROGRAM}" \
		INSTALL_SCRIPT="${INSTALL_SCRIPT}" \
		${CONFIGURE_ENV} ${CONFIGURE_CMD} ${CONFIGURE_ARGS})

[FILE:328:descriptions/desc.single]
This is c-ares, an asynchronous resolver library.  It is intended for
applications which need to perform DNS queries without blocking, or need
to perform multiple DNS queries in parallel.  The primary examples of
such applications are servers which communicate with multiple clients
and programs with graphical user interfaces.


[FILE:99:distinfo]
03f708f1b14a26ab26c38abd51137640cb444d3ec72380b21b20f1a8d2861da7      1446797 c-ares-1.13.0.tar.gz


[FILE:1475:manifests/plist.single]
bin/
 acountry
 adig
 ahost
include/
 ares.h
 ares_build.h
 ares_rules.h
 ares_dns.h
 ares_version.h
lib/
 libcares.a
 libcares.so
 libcares.so.2
 libcares.so.2.2.0
lib/pkgconfig/libcares.pc
share/man/man3/
 ares_cancel.3.gz
 ares_create_query.3.gz
 ares_destroy.3.gz
 ares_destroy_options.3.gz
 ares_dup.3.gz
 ares_expand_name.3.gz
 ares_expand_string.3.gz
 ares_fds.3.gz
 ares_free_data.3.gz
 ares_free_hostent.3.gz
 ares_free_string.3.gz
 ares_get_servers.3.gz
 ares_get_servers_ports.3.gz
 ares_gethostbyaddr.3.gz
 ares_gethostbyname.3.gz
 ares_gethostbyname_file.3.gz
 ares_getnameinfo.3.gz
 ares_getsock.3.gz
 ares_inet_ntop.3.gz
 ares_inet_pton.3.gz
 ares_init.3.gz
 ares_init_options.3.gz
 ares_library_cleanup.3.gz
 ares_library_init.3.gz
 ares_library_initialized.3.gz
 ares_mkquery.3.gz
 ares_parse_a_reply.3.gz
 ares_parse_aaaa_reply.3.gz
 ares_parse_mx_reply.3.gz
 ares_parse_naptr_reply.3.gz
 ares_parse_ns_reply.3.gz
 ares_parse_ptr_reply.3.gz
 ares_parse_soa_reply.3.gz
 ares_parse_srv_reply.3.gz
 ares_parse_txt_reply.3.gz
 ares_process.3.gz
 ares_query.3.gz
 ares_save_options.3.gz
 ares_search.3.gz
 ares_send.3.gz
 ares_set_local_dev.3.gz
 ares_set_local_ip4.3.gz
 ares_set_local_ip6.3.gz
 ares_set_servers.3.gz
 ares_set_servers_csv.3.gz
 ares_set_servers_ports.3.gz
 ares_set_servers_ports_csv.3.gz
 ares_set_socket_callback.3.gz
 ares_set_socket_configure_callback.3.gz
 ares_set_sortlist.3.gz
 ares_strerror.3.gz
 ares_timeout.3.gz
 ares_version.3.gz


[FILE:2086:patches/patch-ares_init.c]
Description: Add the ares_get_config() routine used by Unreal IRCd.
 Originally taken from the Unreal IRCd distribution, later modified
 by me to properly support IPv6 nameserver addresses since c-ares-1.7.1.
Origin: the Unreal IRCd distribution
Author: Peter Pentchev <roam@FreeBSD.org>
Forwarded: no
Last-Update: 2010-12-19

--- ares.h.orig
+++ ares.h
@@ -260,6 +260,14 @@
   int nsort;
 };
 
+/** Public available config (readonly) interface for ares_get_config(). */
+struct ares_config_info {
+	int timeout;
+	int tries;
+	int numservers;
+	char **servers;
+};
+
 struct hostent;
 struct timeval;
 struct sockaddr;
@@ -530,6 +538,8 @@
 CARES_EXTERN int ares_get_servers(ares_channel channel,
                                   struct ares_addr_node **servers);
 
+CARES_EXTERN int ares_get_config(struct ares_config_info *d, ares_channel c);
+
 #ifdef  __cplusplus
 }
 #endif
--- ares_init.c.orig	2013-02-17 11:44:02.000000000 -0500
+++ ares_init.c	2013-05-15 13:43:31.000000000 -0400
@@ -1875,6 +1875,36 @@
 }
 #endif  /* !WIN32 & !WATT32 & !ANDROID & !__ANDROID__ */
 
+int ares_get_config(struct ares_config_info *d, ares_channel c)
+{
+	int i;
+	const char *p;
+	char tmp[sizeof("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255")];
+
+	memset(d, 0, sizeof(struct ares_config_info));
+
+	d->timeout = c->timeout;
+	d->tries = c->tries;
+	d->numservers = c->nservers;
+	d->servers = calloc(sizeof(char *), c->nservers);
+	for (i = 0; i < c->nservers; i++)
+	{
+		if (c->servers[i].addr.family == AF_INET)
+			p = ares_inet_ntop(c->servers[i].addr.family,
+			    (const char *)&c->servers[i].addr.addrV4,
+			    tmp, sizeof(tmp));
+		else if (c->servers[i].addr.family == AF_INET6)
+			p = ares_inet_ntop(c->servers[i].addr.family,
+			    (const char *)&c->servers[i].addr.addrV6,
+			    tmp, sizeof(tmp));
+		else
+			p = NULL;
+		d->servers[i] = p ? strdup(p) : NULL;
+	}
+
+	return ARES_SUCCESS;
+}
+
 /* initialize an rc4 key. If possible a cryptographically secure random key
    is generated using a suitable function (for example win32's RtlGenRandom as
    described in

