# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libatomic_ops
VERSION=		7.8.0
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Atomic operations access library
HOMEPAGE=		https://github.com/ivmai/libatomic_ops/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/ivmai:libatomic_ops:v7.8.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			dev
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			autoreconf libtool

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/libatomic_ops

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--enable-shared

INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		1.2.0

post-install:
	${RM} ${STAGEDIR}${STD_DOCDIR}/COPYING
	${RM} ${STAGEDIR}${STD_DOCDIR}/LICENSE

[FILE:588:descriptions/desc.primary]
This package provides semi-portable access to hardware provided atomic
memory operations.  These might allow you to write code:

  - That does more interesting things in signal handlers
  - Makes more effective use of multiprocessors by allowing you to write
    clever lock-free code.  Note that such code is very difficult to get
    right, and will unavoidably be less portable than lock-based code.  It
    is also not always faster than lock-based code.  But it may
    occasionally be a large performance win
  - To experiment with new and much better thread programming paradigms.


[FILE:111:distinfo]
68c5970b11297056c8e5c63a73f26621a8eb8c667a5fe9a2b3e3ff6c0fbb3177       159187 ivmai-libatomic_ops-7.8.0.tar.gz


[FILE:177:manifests/plist.primary]
lib/
 libatomic_ops.so
 libatomic_ops.so.%%SOMAJOR%%
 libatomic_ops.so.%%SOVERSION%%
 libatomic_ops_gpl.so
 libatomic_ops_gpl.so.%%SOMAJOR%%
 libatomic_ops_gpl.so.%%SOVERSION%%


[FILE:1461:manifests/plist.dev]
include/
 atomic_ops.h
 atomic_ops_malloc.h
 atomic_ops_stack.h
include/atomic_ops/
 ao_version.h
 generalize-arithm.h
 generalize-small.h
 generalize.h
include/atomic_ops/sysdeps/
 all_acquire_release_volatile.h
 all_aligned_atomic_load_store.h
 all_atomic_load_store.h
 all_atomic_only_load.h
 ao_t_is_int.h
 emul_cas.h
 generic_pthread.h
 ordered.h
 ordered_except_wr.h
 read_ordered.h
 standard_ao_double_t.h
 test_and_set_t_is_ao_t.h
 test_and_set_t_is_char.h
include/atomic_ops/sysdeps/armcc/arm_v6.h
include/atomic_ops/sysdeps/gcc/
 aarch64.h
 alpha.h
 arm.h
 avr32.h
 cris.h
 e2k.h
 generic-arithm.h
 generic-small.h
 generic.h
 hexagon.h
 hppa.h
 ia64.h
 m68k.h
 mips.h
 powerpc.h
 riscv.h
 s390.h
 sh.h
 sparc.h
 tile.h
 x86.h
include/atomic_ops/sysdeps/hpc/
 hppa.h
 ia64.h
include/atomic_ops/sysdeps/ibmc/powerpc.h
include/atomic_ops/sysdeps/icc/ia64.h
include/atomic_ops/sysdeps/loadstore/
 acquire_release_volatile.h
 atomic_load.h
 atomic_store.h
 char_acquire_release_volatile.h
 char_atomic_load.h
 char_atomic_store.h
 double_atomic_load_store.h
 int_acquire_release_volatile.h
 int_atomic_load.h
 int_atomic_store.h
 ordered_loads_only.h
 ordered_stores_only.h
 short_acquire_release_volatile.h
 short_atomic_load.h
 short_atomic_store.h
include/atomic_ops/sysdeps/msftc/
 arm.h
 arm64.h
 common32_defs.h
 x86.h
 x86_64.h
include/atomic_ops/sysdeps/sunc/
 sparc.h
 x86.h
lib/
 libatomic_ops.a
 libatomic_ops_gpl.a
lib/pkgconfig/atomic_ops.pc


[FILE:131:manifests/plist.docs]
share/doc/libatomic_ops/
 AUTHORS
 ChangeLog
 README.md
 README_details.txt
 README_win32.txt
 README_malloc.txt
 README_stack.txt

