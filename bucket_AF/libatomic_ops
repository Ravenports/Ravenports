# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libatomic_ops
VERSION=		7.6.4
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Atomic operations access library
HOMEPAGE=		https://github.com/ivmai/libatomic_ops/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/ivmai:libatomic_ops:v7.6.4
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			autoreconf libtool

LICENSE=		BSD2CLAUSE:single GPLv2:single
LICENSE_FILE=		BSD2CLAUSE:{{WRKSRC}}/doc/LICENSING.txt
			GPLv2:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		multi

FPC_EQUIVALENT=		devel/libatomic_ops

MUST_CONFIGURE=		gnu

post-patch:
	# Inhibit installation of extra copy of GPL and docs
	# If documentation is not wanted, just disable it instead of fixing
	${REINPLACE_CMD} -e '/SUBDIRS/ s| doc||' \
		-e '/dist_doc_DATA/d' ${WRKSRC}/Makefile.am
	${REINPLACE_CMD} -e '/doc\/Makefile/d' ${WRKSRC}/configure.ac

[FILE:588:descriptions/desc.single]
This package provides semi-portable access to hardware provided atomic
memory operations.  These might allow you to write code:

  - That does more interesting things in signal handlers
  - Makes more effective use of multiprocessors by allowing you to write
    clever lock-free code.  Note that such code is very difficult to get
    right, and will unavoidably be less portable than lock-based code.  It
    is also not always faster than lock-based code.  But it may
    occasionally be a large performance win
  - To experiment with new and much better thread programming paradigms.


[FILE:111:distinfo]
4b70df850e29f5a6f45b48b34920f990ff6c5aacf91f966a972265cc824e78de       136561 ivmai-libatomic_ops-7.6.4.tar.gz


[FILE:1538:manifests/plist.single]
include/
 atomic_ops.h
include/atomic_ops/
 ao_version.h
 generalize-arithm.h
 generalize-small.h
 generalize.h
include/atomic_ops/sysdeps/
 all_acquire_release_volatile.h
 all_aligned_atomic_load_store.h
 all_atomic_load_store.h
 all_atomic_only_load.h
 ao_t_is_int.h
include/atomic_ops/sysdeps/armcc/arm_v6.h
 emul_cas.h
include/atomic_ops/sysdeps/gcc/
 aarch64.h
 alpha.h
 arm.h
 avr32.h
 cris.h
 generic-arithm.h
 generic-small.h
 generic.h
 hexagon.h
 hppa.h
 ia64.h
 m68k.h
 mips.h
 powerpc.h
 riscv.h
 s390.h
 sh.h
 sparc.h
 tile.h
 x86.h
include/atomic_ops/sysdeps/
 generic_pthread.h
include/atomic_ops/sysdeps/hpc/
 hppa.h
 ia64.h
include/atomic_ops/sysdeps/ibmc/powerpc.h
include/atomic_ops/sysdeps/icc/ia64.h
include/atomic_ops/sysdeps/loadstore/
 acquire_release_volatile.h
 atomic_load.h
 atomic_store.h
 char_acquire_release_volatile.h
 char_atomic_load.h
 char_atomic_store.h
 double_atomic_load_store.h
 int_acquire_release_volatile.h
 int_atomic_load.h
 int_atomic_store.h
 ordered_loads_only.h
 ordered_stores_only.h
 short_acquire_release_volatile.h
 short_atomic_load.h
 short_atomic_store.h
include/atomic_ops/sysdeps/msftc/
 arm.h
 common32_defs.h
 x86.h
 x86_64.h
include/atomic_ops/sysdeps/
 ordered.h
 ordered_except_wr.h
 read_ordered.h
 standard_ao_double_t.h
include/atomic_ops/sysdeps/sunc/
 sparc.h
 x86.h
include/atomic_ops/sysdeps/
 test_and_set_t_is_ao_t.h
 test_and_set_t_is_char.h
include/
 atomic_ops_malloc.h
 atomic_ops_stack.h
lib/
 libatomic_ops.a
 libatomic_ops_gpl.a
lib/pkgconfig/atomic_ops.pc

