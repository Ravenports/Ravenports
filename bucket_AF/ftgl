# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ftgl
VERSION=		2.4.0
KEYWORDS=		graphics
VARIANTS=		std
SDESC[std]=		OpenGL FreeType fonts rendering library
HOMEPAGE=		https://github.com/frankheckenbach/ftgl
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/frankheckenbach:ftgl:v2.4.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		freeglut:dev:std
			libGLU:dev:std
			libglvnd:dev:std
BUILDRUN_DEPENDS=	freeglut:primary:std
			libGLU:primary:std
			libglvnd:primary:std

USES=			autoreconf libtool pkgconfig freetype
XORG_COMPONENTS=	ice x11

LICENSE=		MIT:primary
LICENSE_FILE=		MIT:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		graphics/ftgl

MUST_CONFIGURE=		gnu

INSTALL_TARGET=		install-strip
SOVERSION=		2.4.0

post-install:
		${RM} -r ${STAGEDIR}${PREFIX}/share/doc/ftgl

[FILE:237:descriptions/desc.primary]
FTGL is a free cross-platform Open Source C++ library that uses Freetype2 
to simplify rendering fonts in OpenGL applications. FTGL supports bitmaps, 
pixmaps, texture maps, outlines, polygon mesh, and extruded polygon 
rendering modes.


[FILE:112:distinfo]
aa97da1c3442a8fd3941037655df18016d70b5266381c81d81e8b5335f196ea8       630803 frankheckenbach-ftgl-2.4.0.tar.gz


[FILE:55:manifests/plist.primary]
lib/
 libftgl.so.%%SOMAJOR%%
 libftgl.so.%%SOVERSION%%


[FILE:470:manifests/plist.dev]
include/FTGL/
 FTBBox.h
 FTBitmapGlyph.h
 FTBuffer.h
 FTBufferFont.h
 FTBufferGlyph.h
 FTExtrdGlyph.h
 FTFont.h
 FTGLBitmapFont.h
 FTGLExtrdFont.h
 FTGLOutlineFont.h
 FTGLPixmapFont.h
 FTGLPolygonFont.h
 FTGLTextureFont.h
 FTGLTriangleExtractorFont.h
 FTGlyph.h
 FTLayout.h
 FTLibrary.h
 FTOutlineGlyph.h
 FTPixmapGlyph.h
 FTPoint.h
 FTPolyGlyph.h
 FTSimpleLayout.h
 FTTextureGlyph.h
 FTTriangleExtractorGlyph.h
 ftgl.h
lib/
 libftgl.a
 libftgl.so
lib/pkgconfig/ftgl.pc


[FILE:491:patches/patch-src_FTVectoriser.cpp]
cast required for Freetype 2.13

--- src/FTVectoriser.cpp.orig	2019-02-07 21:39:58 UTC
+++ src/FTVectoriser.cpp
@@ -168,7 +168,7 @@ void FTVectoriser::ProcessContours()
     for(int i = 0; i < ftContourCount; ++i)
     {
         FT_Vector* pointList = &outline.points[startIndex];
-        char* tagList = &outline.tags[startIndex];
+        char* tagList = (char*)&outline.tags[startIndex];
 
         endIndex = outline.contours[i];
         contourLength =  (endIndex - startIndex) + 1;

