# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-cssutils
VERSION=		2.4.0
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Cascading Style Sheets library (3.10)
SDESC[py39]=		Cascading Style Sheets library (3.9)
HOMEPAGE=		https://github.com/jaraco/cssutils
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/cc/ee/0f8a57df120e1003e461f014b2412278e94b1ce488b9c88464dd012ee1e7
DISTFILE[1]=		cssutils-2.4.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		cssutils-2.4.0.dist-info

GENERATED=		yes

[PY39].USES_ON=				python:py39,wheel

[PY310].USES_ON=			python:py310,wheel

[FILE:3818:descriptions/desc.single]


   :alt: tests

   :alt: Code style: Black

Overview
========
A Python package to parse and build CSS Cascading Style Sheets. DOM only,
not any rendering facilities!

Based upon and partly implementing the following specifications :

`CSS 2.1rev1 <http://www.w3.org/TR/CSS2/>`__
    General CSS rules and properties are defined here
`CSS3 Module: Syntax <http://www.w3.org/TR/css3-syntax/>`__
    Used in parts since cssutils 0.9.4. cssutils tries to use the features
from CSS 2.1 and CSS 3 with preference to CSS3 but as this is not final yet
some parts are from CSS 2.1
[CSS Fonts Module Level 3]
    Added changes and additional stuff (since cssutils v0.9.6)
[MediaQueries]
    MediaQueries are part of ``stylesheets.MediaList`` since v0.9.4, used
in @import and @media rules.
[Namespaces]
    Added in v0.9.1, updated to definition in CSSOM in v0.9.4, updated in
0.9.5 for dev version
`CSS3 Module: Pages Media <http://www.w3.org/TR/css3-page/>`__
    Most properties of this spec are implemented including MarginRules
[Selectors]
    The selector syntax defined here (and not in CSS 2.1) should be
parsable with cssutils (*should* mind though ;) )
[CSS Backgrounds and Borders Module Level 3], [CSS3 Basic User Interface
Module], [CSS Text Level 3]
    Some validation for properties included, mainly  `cursor`, `outline`,
`resize`, `box-shadow`, `text-shadow`
[Variables] / [CSS Custom Properties]
    Experimental specification of CSS Variables which cssutils implements
partly. The vars defined in the newer CSS Custom Properties spec should in
main parts be at least parsable with cssutils.

[DOM Level 2 Style CSS]
    DOM for package css. 0.9.8 removes support for CSSValue and related
API, see PropertyValue and Value API for now
[DOM Level 2 Style Stylesheets]
    DOM for package stylesheets
[CSSOM]
    A few details (mainly the NamespaceRule DOM) are taken from here. Plan
is to move implementation to the stuff defined here which is newer but
still no REC so might change anytime...

The cssutils tokenizer is a customized implementation of `CSS3 Module:
Syntax (W3C Working Draft 13 August 2003)
<http://www.w3.org/TR/css3-syntax/>`_ which itself is based on the CSS 2.1
tokenizer. It tries to be as compliant as possible but uses some (helpful)
parts of the CSS 2.1 tokenizer.

I guess cssutils is neither CSS 2.1 nor CSS 3 compliant but tries to at
least be able to parse both grammars including some more real world cases
(some CSS hacks are actually parsed and serialized). Both official grammars
are not final nor bugfree but still feasible. cssutils aim is not to be
fully compliant to any CSS specification (the specifications seem to be in
a constant flow anyway) but cssutils *should* be able to read and write as
many as possible CSS stylesheets "in the wild" while at the same time
implement the official APIs which are well documented. Some minor
extensions are provided as well.

Please visit http://cthedot.de/cssutils/ or
https://bitbucket.org/cthedot/cssutils/ for more details.

There is also a low-traffic [cssutils discussion group].

Compatibility
=============

cssutils is developed on modern Python versions. Check the package metadata
for compatibilty.

Beware, cssutils is known to be thread unsafe.

Example
=======
::

    import cssutils

    css = '''/* a comment with umlaut &auml; */
         @namespace html "http://www.w3.org/1999/xhtml";
         @variables { BG: #fff }
         html|a { color:red; background: var(BG) }'''
    sheet = cssutils.parseString(css)

    for rule in sheet:
        if rule.type == rule.STYLE_RULE:
            # find property
            for property in rule.style:
                if property.name == 'color':
                    property.value = 'green'
                    property.priority = 'IMPORTANT'
                    break


[FILE:110:distinfo]
6c7ab239b432c157cd55303993935b92be07272e694d66c75b95eb56928936f6       404954 cssutils-2.4.0-py3-none-any.whl

