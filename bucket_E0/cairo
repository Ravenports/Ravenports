# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		cairo
VERSION=		1.14.10
KEYWORDS=		graphics
VARIANTS=		standard
SDESC[standard]=	Vector graphics library with cross-device support
HOMEPAGE=		https://www.cairographics.org
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://cairographics.org/releases/
DISTFILE[1]=		cairo-1.14.10.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		libatomic_ops:single:standard
BUILDRUN_DEPENDS=	fontconfig:primary:standard
RUN_DEPENDS=		zlib:static:standard

USES=			cpe libtool mesa pkgconfig png zlib
GNOME_COMPONENTS=	glib
XORG_COMPONENTS=	glproto dri2proto pixman x11 xext xrender xcb-render-util

CPE_VENDOR=		cairographics
FPC_EQUIVALENT=		graphics/cairo

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--with-html-dir={{STD_DOCDIR}}
			--disable-directfb
			--disable-gallium
			--disable-glesv2
			--disable-wgl
			--enable-tee
			--enable-gobject
			--enable-gl
			--enable-egl
			--enable-xlib
			--enable-xcb
CONFIGURE_ENV=		cairo_cv_atomic_primitives="libatomic-ops"

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes
PLIST_SUB=		LIBVER=2.11400.10

post-patch:
	@${REINPLACE_CMD} \
		-e '/strings/s/ - / -a /' \
		-e '/test/s/==/=/g' \
		-e '/LIBS/s|-ldld||' ${WRKSRC}/configure
	@${REINPLACE_CMD} -e 's|-lcairo|-lcairo -lpthread|' \
		${WRKSRC}/src/*.pc.in
	@${REINPLACE_CMD} -e '/@CAIRO_HAS_PNG_FUNCTIONS_TRUE@.*=/d' \
		${WRKSRC}/Makefile.in
	# disable html docs (gnome referencehack)
	${FIND} ${WRKSRC} -name "Makefile.in" -type f | ${XARGS} ${REINPLACE_CMD} -e \
		"s|test \"\$$\$$installfiles\" = '\$$(srcdir)/html/\*'|:|"

post-patch-dragonfly:
	@${REINPLACE_CMD} -e '/LIBS/s/-lrt//' ${WRKSRC}/configure

post-patch-freebsd:
	@${REINPLACE_CMD} -e '/LIBS/s/-lrt//' ${WRKSRC}/configure

[FILE:637:descriptions/desc.single]
Cairo is a vector graphics library with cross-device output
support. Currently supported output targets include the X Window
System and in-memory image buffers. PostScript and PDF file output is
planned. Cairo is designed to produce identical output on all output
media while taking advantage of display hardware acceleration when
available (eg. through the X Render Extension).

Cairo provides a stateful user-level API with capabilities similar to
the PDF 1.4 imaging model. Cairo provides operations including stroking
and filling Bezier cubic splines, transforming and compositing translucent
images, and antialiased text rendering.


[FILE:99:distinfo]
7e87878658f2c9951a14fc64114d4958c0e65ac47530b8ac3078b2ce41b66a09     36251788 cairo-1.14.10.tar.xz


[FILE:1099:manifests/plist.single]
bin/
 cairo-sphinx
 cairo-trace
include/cairo/
 cairo-deprecated.h
 cairo-features.h
 cairo-ft.h
 cairo-gl.h
 cairo-gobject.h
 cairo-pdf.h
 cairo-ps.h
 cairo-script-interpreter.h
 cairo-script.h
 cairo-svg.h
 cairo-tee.h
 cairo-version.h
 cairo-xcb.h
 cairo-xlib-xrender.h
 cairo-xlib.h
 cairo.h
lib/cairo/
 cairo-fdr.a
 cairo-fdr.so
 cairo-fdr.so.0
 cairo-fdr.so.0.0.0
 cairo-sphinx.a
 cairo-sphinx.so
 cairo-sphinx.so.0
 cairo-sphinx.so.0.0.0
 libcairo-trace.a
 libcairo-trace.so
 libcairo-trace.so.0
 libcairo-trace.so.0.0.0
lib/
 libcairo-gobject.a
 libcairo-gobject.so
 libcairo-gobject.so.2
 libcairo-gobject.so.%%LIBVER%%
 libcairo-script-interpreter.a
 libcairo-script-interpreter.so
 libcairo-script-interpreter.so.2
 libcairo-script-interpreter.so.%%LIBVER%%
 libcairo.a
 libcairo.so
 libcairo.so.2
 libcairo.so.%%LIBVER%%
lib/pkgconfig/
 cairo.pc
 cairo-egl.pc
 cairo-fc.pc
 cairo-ft.pc
 cairo-gl.pc
 cairo-glx.pc
 cairo-gobject.pc
 cairo-pdf.pc
 cairo-png.pc
 cairo-ps.pc
 cairo-script.pc
 cairo-svg.pc
 cairo-tee.pc
 cairo-xcb.pc
 cairo-xcb-shm.pc
 cairo-xlib.pc
 cairo-xlib-xrender.pc


[FILE:762:patches/patch-src_cairo-gl.h]
--- src/cairo-gl.h.orig	2015-03-10 22:21:07 UTC
+++ src/cairo-gl.h
@@ -92,7 +92,7 @@ cairo_public void
 cairo_gl_device_set_thread_aware (cairo_device_t	*device,
 				  cairo_bool_t		 thread_aware);
 
-#if CAIRO_HAS_GLX_FUNCTIONS
+#if defined(CAIRO_HAS_GLX_FUNCTIONS)
 #include <GL/glx.h>
 
 cairo_public cairo_device_t *
@@ -110,7 +110,7 @@ cairo_gl_surface_create_for_window (cair
 				    int width, int height);
 #endif
 
-#if CAIRO_HAS_WGL_FUNCTIONS
+#if defined(CAIRO_HAS_WGL_FUNCTIONS)
 #include <windows.h>
 
 cairo_public cairo_device_t *
@@ -126,7 +126,7 @@ cairo_gl_surface_create_for_dc (cairo_de
 				int			 height);
 #endif
 
-#if CAIRO_HAS_EGL_FUNCTIONS
+#if defined(CAIRO_HAS_EGL_FUNCTIONS)
 #include <EGL/egl.h>
 
 cairo_public cairo_device_t *


[FILE:532:patches/patch-src_cairo-xlib-display.c]
--- src/cairo-xlib-display.c.orig	2015-03-10 22:21:07 UTC
+++ src/cairo-xlib-display.c
@@ -263,11 +263,7 @@ _cairo_xlib_device_create (Display *dpy)
     /* Prior to Render 0.10, there is no protocol support for gradients and
      * we call function stubs instead, which would silently consume the drawing.
      */
-#if RENDER_MAJOR == 0 && RENDER_MINOR < 10
     display->buggy_gradients = TRUE;
-#else
-    display->buggy_gradients = FALSE;
-#endif
     display->buggy_pad_reflect = FALSE;
     display->buggy_repeat = FALSE;
 


[FILE:291:dragonfly/patch-util_cairo-sphinx_sphinx.c]
--- util/cairo-sphinx/sphinx.c.orig	2015-03-10 22:21:07 UTC
+++ util/cairo-sphinx/sphinx.c
@@ -1337,7 +1337,7 @@ client_shm (const char *shm_path)
 
     base = mmap (NULL, DATA_SIZE,
 		 PROT_READ | PROT_WRITE,
-		 MAP_SHARED | MAP_NORESERVE,
+		 MAP_SHARED,
 		 fd, 0);
     close (fd);
 


[FILE:291:freebsd/patch-util_cairo-sphinx_sphinx.c]
--- util/cairo-sphinx/sphinx.c.orig	2015-03-10 22:21:07 UTC
+++ util/cairo-sphinx/sphinx.c
@@ -1337,7 +1337,7 @@ client_shm (const char *shm_path)
 
     base = mmap (NULL, DATA_SIZE,
 		 PROT_READ | PROT_WRITE,
-		 MAP_SHARED | MAP_NORESERVE,
+		 MAP_SHARED,
 		 fd, 0);
     close (fd);
 

