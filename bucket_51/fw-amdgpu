# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		fw-amdgpu
VERSION=		20190220
KEYWORDS=		sysutils graphics
VARIANTS=		std
SDESC[std]=		AMD Radeon Volcanic Islands GPU firmware
HOMEPAGE=		none
CONTACT=		Rimvydas_Jasinskas[zrj@ef.irc]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://leaf.dragonflybsd.org/~zrj/dports/fw/
DISTFILE[1]=		amdgpu-firmware-20190220.tar.gz:main
DF_INDEX=		1
SPKGS[std]=		single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		dragonfly

DISTNAME=		amdgpu
EXTRACT_DIRTY=		1

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"Advanced Micro Devices Fireware License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.amdgpu
LICENSE_SCHEME=		solo

BUILD_WRKSRC=		{{WRKDIR}}/_build

do-build:
	${MKDIR} ${BUILD_WRKSRC}
	for file in ${WRKSRC}/amdgpu/*; do \
	  ${SETENV} MODULEDIR=${BUILD_WRKSRC} ${SH} ${FILESDIR}/wrap-fw_module.sh $$file "AMD_" ;\
	done

do-install:
	${MKDIR} ${STAGEDIR}/boot/modules.local
	${INSTALL_DATA} ${BUILD_WRKSRC}/*.ko ${STAGEDIR}/boot/modules.local/

[FILE:107:descriptions/desc.single]
Firmware kernel modules for amdgpu(4).
Until proven otherwise, this port is exclusively for DragonFly BSD.


[FILE:110:distinfo]
6384cd3d8642b7b79bf34b740710f9a72ad11dd930bb597df7e6279dac43f469      9481641 amdgpu-firmware-20190220.tar.gz


[FILE:5771:manifests/plist.single]
/boot/modules.local/
 AMD_banks_k_2_smc.ko
 AMD_bonaire_ce.ko
 AMD_bonaire_k_smc.ko
 AMD_bonaire_mc.ko
 AMD_bonaire_me.ko
 AMD_bonaire_mec.ko
 AMD_bonaire_pfp.ko
 AMD_bonaire_rlc.ko
 AMD_bonaire_sdma.ko
 AMD_bonaire_sdma1.ko
 AMD_bonaire_smc.ko
 AMD_bonaire_uvd.ko
 AMD_bonaire_vce.ko
 AMD_carrizo_ce.ko
 AMD_carrizo_me.ko
 AMD_carrizo_mec.ko
 AMD_carrizo_mec2.ko
 AMD_carrizo_pfp.ko
 AMD_carrizo_rlc.ko
 AMD_carrizo_sdma.ko
 AMD_carrizo_sdma1.ko
 AMD_carrizo_uvd.ko
 AMD_carrizo_vce.ko
 AMD_fiji_ce.ko
 AMD_fiji_mc.ko
 AMD_fiji_me.ko
 AMD_fiji_mec.ko
 AMD_fiji_mec2.ko
 AMD_fiji_pfp.ko
 AMD_fiji_rlc.ko
 AMD_fiji_sdma.ko
 AMD_fiji_sdma1.ko
 AMD_fiji_smc.ko
 AMD_fiji_uvd.ko
 AMD_fiji_vce.ko
 AMD_hainan_ce.ko
 AMD_hainan_k_smc.ko
 AMD_hainan_mc.ko
 AMD_hainan_me.ko
 AMD_hainan_pfp.ko
 AMD_hainan_rlc.ko
 AMD_hainan_smc.ko
 AMD_hawaii_ce.ko
 AMD_hawaii_k_smc.ko
 AMD_hawaii_mc.ko
 AMD_hawaii_me.ko
 AMD_hawaii_mec.ko
 AMD_hawaii_pfp.ko
 AMD_hawaii_rlc.ko
 AMD_hawaii_sdma.ko
 AMD_hawaii_sdma1.ko
 AMD_hawaii_smc.ko
 AMD_hawaii_uvd.ko
 AMD_hawaii_vce.ko
 AMD_kabini_ce.ko
 AMD_kabini_me.ko
 AMD_kabini_mec.ko
 AMD_kabini_pfp.ko
 AMD_kabini_rlc.ko
 AMD_kabini_sdma.ko
 AMD_kabini_sdma1.ko
 AMD_kabini_uvd.ko
 AMD_kabini_vce.ko
 AMD_kaveri_ce.ko
 AMD_kaveri_me.ko
 AMD_kaveri_mec.ko
 AMD_kaveri_mec2.ko
 AMD_kaveri_pfp.ko
 AMD_kaveri_rlc.ko
 AMD_kaveri_sdma.ko
 AMD_kaveri_sdma1.ko
 AMD_kaveri_uvd.ko
 AMD_kaveri_vce.ko
 AMD_mullins_ce.ko
 AMD_mullins_me.ko
 AMD_mullins_mec.ko
 AMD_mullins_pfp.ko
 AMD_mullins_rlc.ko
 AMD_mullins_sdma.ko
 AMD_mullins_sdma1.ko
 AMD_mullins_uvd.ko
 AMD_mullins_vce.ko
 AMD_oland_ce.ko
 AMD_oland_k_smc.ko
 AMD_oland_mc.ko
 AMD_oland_me.ko
 AMD_oland_pfp.ko
 AMD_oland_rlc.ko
 AMD_oland_smc.ko
 AMD_picasso_asd.ko
 AMD_picasso_ce.ko
 AMD_picasso_gpu_info.ko
 AMD_picasso_me.ko
 AMD_picasso_mec.ko
 AMD_picasso_mec2.ko
 AMD_picasso_pfp.ko
 AMD_picasso_rlc.ko
 AMD_picasso_rlc_am4.ko
 AMD_picasso_sdma.ko
 AMD_picasso_vcn.ko
 AMD_pitcairn_ce.ko
 AMD_pitcairn_k_smc.ko
 AMD_pitcairn_mc.ko
 AMD_pitcairn_me.ko
 AMD_pitcairn_pfp.ko
 AMD_pitcairn_rlc.ko
 AMD_pitcairn_smc.ko
 AMD_polaris10_ce.ko
 AMD_polaris10_ce_2.ko
 AMD_polaris10_k2_smc.ko
 AMD_polaris10_k_mc.ko
 AMD_polaris10_k_smc.ko
 AMD_polaris10_mc.ko
 AMD_polaris10_me.ko
 AMD_polaris10_me_2.ko
 AMD_polaris10_mec.ko
 AMD_polaris10_mec2.ko
 AMD_polaris10_mec2_2.ko
 AMD_polaris10_mec_2.ko
 AMD_polaris10_pfp.ko
 AMD_polaris10_pfp_2.ko
 AMD_polaris10_rlc.ko
 AMD_polaris10_sdma.ko
 AMD_polaris10_sdma1.ko
 AMD_polaris10_smc.ko
 AMD_polaris10_smc_sk.ko
 AMD_polaris10_uvd.ko
 AMD_polaris10_vce.ko
 AMD_polaris11_ce.ko
 AMD_polaris11_ce_2.ko
 AMD_polaris11_k2_smc.ko
 AMD_polaris11_k_mc.ko
 AMD_polaris11_k_smc.ko
 AMD_polaris11_mc.ko
 AMD_polaris11_me.ko
 AMD_polaris11_me_2.ko
 AMD_polaris11_mec.ko
 AMD_polaris11_mec2.ko
 AMD_polaris11_mec2_2.ko
 AMD_polaris11_mec_2.ko
 AMD_polaris11_pfp.ko
 AMD_polaris11_pfp_2.ko
 AMD_polaris11_rlc.ko
 AMD_polaris11_sdma.ko
 AMD_polaris11_sdma1.ko
 AMD_polaris11_smc.ko
 AMD_polaris11_smc_sk.ko
 AMD_polaris11_uvd.ko
 AMD_polaris11_vce.ko
 AMD_polaris12_ce.ko
 AMD_polaris12_ce_2.ko
 AMD_polaris12_k_mc.ko
 AMD_polaris12_k_smc.ko
 AMD_polaris12_mc.ko
 AMD_polaris12_me.ko
 AMD_polaris12_me_2.ko
 AMD_polaris12_mec.ko
 AMD_polaris12_mec2.ko
 AMD_polaris12_mec2_2.ko
 AMD_polaris12_mec_2.ko
 AMD_polaris12_pfp.ko
 AMD_polaris12_pfp_2.ko
 AMD_polaris12_rlc.ko
 AMD_polaris12_sdma.ko
 AMD_polaris12_sdma1.ko
 AMD_polaris12_smc.ko
 AMD_polaris12_uvd.ko
 AMD_polaris12_vce.ko
 AMD_raven2_asd.ko
 AMD_raven2_ce.ko
 AMD_raven2_gpu_info.ko
 AMD_raven2_me.ko
 AMD_raven2_mec.ko
 AMD_raven2_mec2.ko
 AMD_raven2_pfp.ko
 AMD_raven2_rlc.ko
 AMD_raven2_sdma.ko
 AMD_raven2_vcn.ko
 AMD_raven_asd.ko
 AMD_raven_ce.ko
 AMD_raven_dmcu.ko
 AMD_raven_gpu_info.ko
 AMD_raven_me.ko
 AMD_raven_mec.ko
 AMD_raven_mec2.ko
 AMD_raven_pfp.ko
 AMD_raven_rlc.ko
 AMD_raven_sdma.ko
 AMD_raven_vcn.ko
 AMD_si58_mc.ko
 AMD_stoney_ce.ko
 AMD_stoney_me.ko
 AMD_stoney_mec.ko
 AMD_stoney_pfp.ko
 AMD_stoney_rlc.ko
 AMD_stoney_sdma.ko
 AMD_stoney_uvd.ko
 AMD_stoney_vce.ko
 AMD_tahiti_ce.ko
 AMD_tahiti_k_smc.ko
 AMD_tahiti_mc.ko
 AMD_tahiti_me.ko
 AMD_tahiti_pfp.ko
 AMD_tahiti_rlc.ko
 AMD_tahiti_smc.ko
 AMD_tonga_ce.ko
 AMD_tonga_k_smc.ko
 AMD_tonga_mc.ko
 AMD_tonga_me.ko
 AMD_tonga_mec.ko
 AMD_tonga_mec2.ko
 AMD_tonga_pfp.ko
 AMD_tonga_rlc.ko
 AMD_tonga_sdma.ko
 AMD_tonga_sdma1.ko
 AMD_tonga_smc.ko
 AMD_tonga_uvd.ko
 AMD_tonga_vce.ko
 AMD_topaz_ce.ko
 AMD_topaz_k_smc.ko
 AMD_topaz_mc.ko
 AMD_topaz_me.ko
 AMD_topaz_mec.ko
 AMD_topaz_mec2.ko
 AMD_topaz_pfp.ko
 AMD_topaz_rlc.ko
 AMD_topaz_sdma.ko
 AMD_topaz_sdma1.ko
 AMD_topaz_smc.ko
 AMD_vega10_acg_smc.ko
 AMD_vega10_asd.ko
 AMD_vega10_ce.ko
 AMD_vega10_gpu_info.ko
 AMD_vega10_me.ko
 AMD_vega10_mec.ko
 AMD_vega10_mec2.ko
 AMD_vega10_pfp.ko
 AMD_vega10_rlc.ko
 AMD_vega10_sdma.ko
 AMD_vega10_sdma1.ko
 AMD_vega10_smc.ko
 AMD_vega10_sos.ko
 AMD_vega10_uvd.ko
 AMD_vega10_vce.ko
 AMD_vega12_asd.ko
 AMD_vega12_ce.ko
 AMD_vega12_gpu_info.ko
 AMD_vega12_me.ko
 AMD_vega12_mec.ko
 AMD_vega12_mec2.ko
 AMD_vega12_pfp.ko
 AMD_vega12_rlc.ko
 AMD_vega12_sdma.ko
 AMD_vega12_sdma1.ko
 AMD_vega12_smc.ko
 AMD_vega12_sos.ko
 AMD_vega12_uvd.ko
 AMD_vega12_vce.ko
 AMD_vega20_asd.ko
 AMD_vega20_ce.ko
 AMD_vega20_me.ko
 AMD_vega20_mec.ko
 AMD_vega20_mec2.ko
 AMD_vega20_pfp.ko
 AMD_vega20_rlc.ko
 AMD_vega20_sdma.ko
 AMD_vega20_sdma1.ko
 AMD_vega20_smc.ko
 AMD_vega20_sos.ko
 AMD_vega20_uvd.ko
 AMD_vega20_vce.ko
 AMD_vegam_ce.ko
 AMD_vegam_me.ko
 AMD_vegam_mec.ko
 AMD_vegam_mec2.ko
 AMD_vegam_pfp.ko
 AMD_vegam_rlc.ko
 AMD_vegam_sdma.ko
 AMD_vegam_sdma1.ko
 AMD_vegam_smc.ko
 AMD_vegam_uvd.ko
 AMD_vegam_vce.ko
 AMD_verde_ce.ko
 AMD_verde_k_smc.ko
 AMD_verde_mc.ko
 AMD_verde_me.ko
 AMD_verde_pfp.ko
 AMD_verde_rlc.ko
 AMD_verde_smc.ko


[FILE:2374:files/wrap-fw_module.sh]
#!/bin/sh
# modification of /usr/share/examples/kld/firmware/wrap-fw_module.sh

set -e

if [ "$#" -eq 0 ] || [ "$#" -gt 2 ]; then
  echo "Usage: $(basename $0) fw.bin [module_prefix]"
  exit 1
fi

if [ ! -f $1 ]; then
   echo "File $1 does not exist"
   exit 1
fi

if [ "$#" -eq 2 ]; then
MOD_PREFIX=$2
fi

MODULEDIR=${MODULEDIR:-/boot/modules.local}
WORKDIR=$(mktemp -d)
CURDIR=$PWD

FWFILE=$(basename "$1")
# strip .bin and .fw extensions
MODNAME=$(basename $(basename "$1" .bin) .fw)

# if module_prefix is provided, append to module name
if [ "$#" -eq 2 ]; then
MODNAME=${MOD_PREFIX}${MODNAME}
fi

# copy firmware file to workdir
cp -v "$1" "$WORKDIR"/"$FWFILE"

# build a local fw module version w/o kernel sources (should have no impact)

# ld/objcopy substitutes ' ', '-', '.' and '/' to '_'
FWSYM=$(echo ${FWFILE} |sed 's/ /_/g' | sed 's/-/_/g' |sed 's/\./_/g' |sed 's/\/_//g')
echo FWSYM=${FWSYM}

cd $WORKDIR
ld -b binary --no-warn-mismatch -r -d -o "${FWFILE}.fwo"  "${FWFILE}"

cat << EOF >> ${MODNAME}.c
#include <sys/param.h>
#include <sys/errno.h>
#include <sys/kernel.h>
#include <sys/module.h>
#include <sys/linker.h>
#include <sys/firmware.h>

extern char _binary_${FWSYM}_start[], _binary_${FWSYM}_end[];

static int
${MODNAME}_fw_modevent(module_t mod, int type, void *unused)
{
  const struct firmware *fp;
  int error;
  switch (type) {
  case MOD_LOAD:
    fp = firmware_register("${MODNAME}", _binary_${FWSYM}_start , (size_t)(_binary_${FWSYM}_end - _binary_${FWSYM}_start), 0, NULL);
    if (fp == NULL)
      goto fail_0;
    return (0);
fail_0:
    return (ENXIO);
  case MOD_UNLOAD:
    error = firmware_unregister("${MODNAME}");
    return (error);
  }
  return (EINVAL);
}

static moduledata_t ${MODNAME}_fw_mod = {
  "${MODNAME}_fw",
  ${MODNAME}_fw_modevent,
  0
};
DECLARE_MODULE(${MODNAME}_fw, ${MODNAME}_fw_mod, SI_SUB_DRIVERS, SI_ORDER_FIRST);
MODULE_VERSION(${MODNAME}_fw, 1);
MODULE_DEPEND(${MODNAME}_fw, firmware, 1, 1, 1);
EOF

FFLAGS="-fno-common -ffreestanding -fno-asynchronous-unwind-tables -fno-omit-frame-pointer -fno-stack-protector"
cc  -O -pipe   -D_KERNEL -Wall -std=c99 -Werror -DKLD_MODULE ${FFLAGS} -mcmodel=kernel -mno-red-zone -c "${MODNAME}.c"
ld  -r -d -o "${MODNAME}.ko" "${FWFILE}.fwo" "${MODNAME}.o"

# copy firmware module to external modules dir
cp -v "$WORKDIR/$MODNAME.ko" "${MODULEDIR}/"

rm -rf "${WORKDIR}"

