# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-sh
VERSION=		1.14.3
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Python subprocess replacement (3.10)
SDESC[v11]=		Python subprocess replacement (3.11)
HOMEPAGE=		https://github.com/amoffat/sh
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/s/sh
DISTFILE[1]=		sh-1.14.3.tar.gz:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		sh-1.14.3

GENERATED=		yes

[PY310].USES_ON=			python:py310,sutools

[PY311].USES_ON=			python:v11,sutools

[FILE:1947:descriptions/desc.single]
    :alt: Logo

|

    :alt: Version
    :alt: Downloads Status
    :alt: Python Versions
    :alt: Build Status
    :alt: Coverage Status

|

sh is a full-fledged subprocess replacement for Python 2, Python 3, PyPy
and PyPy3
that allows you to call *any* program as if it were a function:

.. code:: python

    from sh import ifconfig
    print(ifconfig("eth0"))

sh is *not* a collection of system commands implemented in Python.

sh relies on various Unix system calls and only works on Unix-like
operating
systems - Linux, macOS, BSDs etc. Specifically, Windows is not supported.

[Complete documentation here]

Installation
============

::

    $> pip install sh

Support
=======
* [Andrew Moffat] - author/maintainer
* [Erik Cederstrand] - maintainer

Developers
==========

Updating the docs
-----------------

Check out the `gh-pages <https://github.com/amoffat/sh/tree/gh-pages>`_
branch and follow the ``README.rst`` there.

Testing
-------

I've included a Docker test suite in the `docker_test_suit/` folder.  To
build the image, `cd` into that directory and
run::

    $> ./build.sh

This will install ubuntu 18.04 LTS and all supported python versions.  Once
it's done, stay in that directory and
run::

    $> ./run.sh

This will mount your local code directory into the container and start the
test suite, which will take a long time to
run.  If you wish to run a single test, you may pass that test to
`./run.sh`::

    $> ./run.sh FunctionalTests.test_unicode_arg

To run a single test for a single environment::

    $> ./run.sh -e 3.4 FunctionalTests.test_unicode_arg

Coverage
--------

First run all of the tests::

    $> SH_TESTS_RUNNING=1 coverage run --source=sh -m unittest

This will aggregate a ``.coverage``.  You may then visualize the report
with::

    $> coverage report

Or generate visual html files with::

    $> coverage html

Which will create ``./htmlcov/index.html`` that you may open in a web
browser.


[FILE:95:distinfo]
e4045b6c732d9ce75d571c79f5ac2234edd9ae4f5fa9d59b09705082bdca18c7        62851 sh-1.14.3.tar.gz

