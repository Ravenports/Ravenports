# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-sh
VERSION=		1.14.2
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Python subprocess replacement (3.10)
SDESC[py39]=		Python subprocess replacement (3.9)
HOMEPAGE=		https://github.com/amoffat/sh
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/7a/c3/0836b7b975d09428d90f926dc1f86e2d76d721cf79bd6659838761c35f85
DISTFILE[1]=		sh-1.14.2-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		sh-1.14.2.dist-info

GENERATED=		yes

[PY39].USES_ON=				python:py39,wheel

[PY310].USES_ON=			python:py310,wheel

[FILE:1758:descriptions/desc.single]
    :alt: Logo

|

    :alt: Version
    :alt: Downloads Status
    :alt: Python Versions
    :alt: Build Status
    :alt: Coverage Status

|

sh is a full-fledged subprocess replacement for Python 2.6 - 3.8, PyPy and
PyPy3
that allows you to call *any* program as if it were a function:

.. code:: python

    from sh import ifconfig
    print(ifconfig("eth0"))

sh is *not* a collection of system commands implemented in Python.

[Complete documentation here]

Installation
============

::

    $> pip install sh

Support
=======
* [Andrew Moffat] - author/maintainer
* [Erik Cederstrand] - maintainer

Developers
==========

Updating the docs
-----------------

Check out the `gh-pages <https://github.com/amoffat/sh/tree/gh-pages>`_
branch and follow the ``README.rst`` there.

Testing
-------

I've included a Docker test suite in the `docker_test_suit/` folder.  To
build the image, `cd` into that directory and
run::

    $> ./build.sh

This will install ubuntu 18.04 LTS and all python versions from 2.6-3.8. 
Once it's done, stay in that directory and
run::

    $> ./run.sh

This will mount your local code directory into the container and start the
test suite, which will take a long time to
run.  If you wish to run a single test, you may pass that test to
`./run.sh`::

    $> ./run.sh FunctionalTests.test_unicode_arg

To run a single test for a single environment::

    $> ./run.sh -e 3.4 FunctionalTests.test_unicode_arg

Coverage
--------

First run all of the tests::

    $> python sh.py test

This will aggregate a ``.coverage``.  You may then visualize the report
with::

    $> coverage report

Or generate visual html files with::

    $> coverage html

Which will create ``./htmlcov/index.html`` that you may open in a web
browser.


[FILE:109:distinfo]
4921ac9c1a77ec8084bdfaf152fe14138e2b3557cc740002c1a97076321fce8a        40755 sh-1.14.2-py2.py3-none-any.whl

