# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		snowball
VERSION=		3.0.1
KEYWORDS=		textproc
VARIANTS=		std
SDESC[std]=		String proc lang for creating stemming algorithms
HOMEPAGE=		https://snowballstem.org/
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/snowballstem:snowball:v3.0.1
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			libstemmer_c
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

EXRUN[primary]=		snowball:libstemmer_c:std

USES=			gmake perl:build

LICENSE=		BSD3CLAUSE:primary
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

MAKEFILE=		GNUmakefile

do-install:
		${INSTALL_PROGRAM} ${WRKSRC}/snowball ${STAGEDIR}${PREFIX}/bin
		${INSTALL_PROGRAM} ${WRKSRC}/stemwords ${STAGEDIR}${PREFIX}/bin
		${INSTALL_DATA} ${WRKSRC}/include/libstemmer.h ${STAGEDIR}${PREFIX}/include
		${INSTALL_LIB} ${WRKSRC}/libstemmer.so.0.0.0 ${STAGEDIR}${PREFIX}/lib
		(cd ${STAGEDIR}${PREFIX}/lib && \
			${LN} -s libstemmer.so.0.0.0 libstemmer.so.0 && \
			${LN} -s libstemmer.so.0.0.0 libstemmer.so)
.for B in bin/snowball bin/stemwords lib/libstemmer.so.0.0.0
		${STRIP_CMD} ${STAGEDIR}${PREFIX}/${B}
.endfor

[FILE:1079:descriptions/desc.primary]
Snowball is a small string processing language for creating stemming 
algorithms for use in Information Retrieval, plus a collection of stemming 
algorithms implemented using it.

Stemming means mapping different forms of the same word to a common "stem" 
- for example, the English stemmer maps 'connection', 'connections', 
'connective', 'connected', and 'connecting' to 'connect'. So a searching 
for connected would also find documents which only have the other forms.

This stem form is often a word itself, but this is not always the case as 
this is not a requirement for text search systems, which are the intended 
field of use. We also aim to conflate words with the same meaning, rather 
than all words with a common linguistic root (so 'awe' and 'awful' don't 
have the same stem), and over-stemming is more problematic than 
under-stemming so we tend not to stem in cases that are hard to resolve. 
If you want to always reduce words to a root form and/or get a root form 
which is itself a word then Snowball's stemming algorithms likely aren't 
the right answer. 


[FILE:213:descriptions/desc.libstemmer_c]
This library contains all you need to include the snowball stemming 
algorithms into a C project of your own. You don't need to use the 
snowball compiler or worry about the internals of the stemmers in any way. 


[FILE:113:distinfo]
80ac10ce40dc4fcfbfed8d085c457b5613da0e86a73611a3d5527d044a142d60       256065 snowballstem-snowball-3.0.1.tar.gz


[FILE:26:manifests/plist.primary]
bin/
 snowball
 stemwords


[FILE:43:manifests/plist.libstemmer_c]
lib/
 libstemmer.so.0
 libstemmer.so.0.0.0


[FILE:39:manifests/plist.dev]
include/libstemmer.h
lib/libstemmer.so


[FILE:1262:patches/patch-GNUmakefile]
--- GNUmakefile.orig	2025-05-09 03:10:41 UTC
+++ GNUmakefile
@@ -190,12 +190,12 @@ C_OTHER_OBJECTS = $(C_OTHER_SOURCES:.c=.
 JAVA_CLASSES = $(JAVA_SOURCES:.java=.class)
 JAVA_RUNTIME_CLASSES=$(JAVARUNTIME_SOURCES:.java=.class)
 
-CFLAGS=-g -O2 -W -Wall -Wmissing-prototypes -Wmissing-declarations -Wshadow $(WERROR)
-CPPFLAGS=
+CFLAGS+=-fPIC -W -Wall -Wmissing-prototypes -Wmissing-declarations -Wshadow $(WERROR)
+CPPFLAGS+=
 
 INCLUDES=-Iinclude
 
-all: snowball$(EXEEXT) libstemmer.a stemwords$(EXEEXT) $(C_OTHER_SOURCES) $(C_OTHER_HEADERS) $(C_OTHER_OBJECTS)
+all: snowball$(EXEEXT) libstemmer.a stemwords$(EXEEXT) $(C_OTHER_SOURCES) $(C_OTHER_HEADERS) $(C_OTHER_OBJECTS) libstemmer.so
 
 algorithms.mk: libstemmer/mkalgorithms.pl libstemmer/modules.txt
 	libstemmer/mkalgorithms.pl algorithms.mk libstemmer/modules.txt
@@ -257,6 +257,9 @@ libstemmer/libstemmer.o: libstemmer/modu
 libstemmer.a: libstemmer/libstemmer.o $(RUNTIME_OBJECTS) $(C_LIB_OBJECTS)
 	$(AR) -cru $@ $^
 
+libstemmer.so: libstemmer/libstemmer.o $(RUNTIME_OBJECTS) $(C_LIB_OBJECTS)
+	$(CC) $(CFLAGS) -shared $(LDFLAGS) -Wl,-soname,libstemmer.so.0,-version-script,libstemmer/symbol.map -o $@.0.0.0 $^
+ 
 examples/%.o: examples/%.c
 	$(CC) $(CFLAGS) $(INCLUDES) $(CPPFLAGS) -c -o $@ $<
 


[FILE:160:patches/patch-libstemmer_symbol.map]
--- /dev/null	2023-12-12 09:34:49 UTC
+++ libstemmer/symbol.map
@@ -0,0 +1,6 @@
+SB_STEMMER_0 {
+    global:
+        sb_stemmer_*;
+    local:
+        *;
+};

