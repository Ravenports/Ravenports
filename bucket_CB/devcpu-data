# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		devcpu-data
VERSION=		1.11
KEYWORDS=		sysutils
VARIANTS=		standard
SDESC[standard]=	Intel and AMD CPUs microcode updates
HOMEPAGE=		none
CONTACT=		nobody

DOWNLOAD_GROUPS=	main intel amd
SITES[main]=		https://downloadmirror.intel.com/26925/eng/
SITES[intel]=		https://downloadmirror.intel.com/26925/eng/
SITES[amd]=		http://www.amd64.org/microcode/
DISTFILE[1]=		microcode-20170707.tgz:intel
DISTFILE[2]=		amd-ucode-2014-12-01.tar.bz2:amd
DF_INDEX=		1 2
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		freebsd dragonfly
NOT_FOR_ARCH=		aarch64

EXTRACT_DIRTY=		1 2

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"Intel Software License Agreement"
LICENSE_SCHEME=		solo
LICENSE_FILE=		CUSTOM1:{{FILESDIR}}/LICENSE

FPC_EQUIVALENT=		sysutils/devcpu-data

RC_SUBR=		microcode_update:single

post-extract:
	${INSTALL_DATA} ${FILESDIR}/Makefile \
		${FILESDIR}/ucode-tool.c ${WRKSRC}/
	${MV} ${WRKDIR}/${NAMEBASE}_2/* ${WRKSRC}/

do-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/share/cpucontrol
	${INSTALL_DATA} ${WRKSRC}/mcodes/* \
		${STAGEDIR}${PREFIX}/share/cpucontrol

[FILE:154:descriptions/desc.single]
This port supplies microcode updates for use with cpuctl(4) microcode
update facility.  These could be used to keep your processor's firmware
up-to-date.


[FILE:208:distinfo]
4fd44769bf52a7ac11e90651a307aa6e56ca6e1a814e50d750ba8207973bee93      2908882 microcode-20170707.tgz
e8f37ed12955585a625ee7cd48d89f9a04ceb2afa36081b52cc59d08a3bb8293        20585 amd-ucode-2014-12-01.tar.bz2


[FILE:2888:manifests/plist.single]
share/cpucontrol/
 2f0708.fw
 AMD-00001020-01000084.fw
 AMD-00001022-01000083.fw
 AMD-00001041-010000db.fw
 AMD-00001043-010000c8.fw
 AMD-00001062-010000c7.fw
 AMD-00001080-010000da.fw
 AMD-00001081-010000d9.fw
 AMD-000010a0-010000dc.fw
 AMD-00002031-02000032.fw
 AMD-00003010-03000027.fw
 AMD-00005010-05000029.fw
 AMD-00005020-05000119.fw
 AMD-00006012-0600063d.fw
 AMD-00006020-06000832.fw
 AMD-00006101-06001119.fw
 AMD-00007001-0700010f.fw
 M01106C2217.fw
 M01106CA107.fw
 M0120661104.fw
 M0220661105_CV.fw
 M04106C2218.fw
 M04106CA107.fw
 M08106C2219.fw
 M08106CA107.fw
 M10106CA107.fw
 MU163202.fw
 MU165040.fw
 MU165041.fw
 MU165045.fw
 MU165140.fw
 MU16522a.fw
 MU16522c.fw
 MU16530c.fw
 MU16530d.fw
 MU165310.fw
 MU16600a.fw
 MU166503.fw
 MU166a0b.fw
 MU166a0c.fw
 MU166a0d.fw
 MU166d05.fw
 MU166d06.fw
 MU166d07.fw
 MU16810d.fw
 MU16810e.fw
 MU16810f.fw
 MU168111.fw
 MU168307.fw
 MU168308.fw
 MU168607.fw
 MU168608.fw
 MU16860a.fw
 MU16860c.fw
 MU168a01.fw
 MU168a04.fw
 MU168a05.fw
 MU16b11c.fw
 MU16b11d.fw
 MU16b401.fw
 MU16b402.fw
 MU26522b.fw
 MU26530b.fw
 MU268110.fw
 MU268602.fw
 m011066143.fw
 m011067660F.fw
 m016fbBA.fw
 m01f0712.fw
 m01f0a13.fw
 m01f2529.fw
 m01f480c.fw
 m01f6402.fw
 m01f6508.fw
 m021066142.fw
 m02f0a15.fw
 m02f241f.fw
 m02f252a.fw
 m02f2610.fw
 m02f2738.fw
 m02f292d.fw
 m02f4116.fw
 m02f480e.fw
 m03106a4_00000012.fw
 m03106a5_00000019.fw
 m041067660F.fw
 m046fbBC.fw
 m04f0a14.fw
 m04f122e.fw
 m04f241e.fw
 m04f252b.fw
 m04f2737.fw
 m04f292e.fw
 m04f620f.fw
 m05206f2_00000037.fw
 m08106d129.fw
 m086fbBB.fw
 m08f2739.fw
 m08f292f.fw
 m0df320a.fw
 m0df330c.fw
 m101067660F.fw
 m101067770A.fw
 m1050662_0000000f.fw
 m1050663_0700000d.fw
 m1050664_0f00000a.fw
 m1069507.fw
 m106f76a.fw
 m106fbBA.fw
 m10f2421.fw
 m10f252c.fw
 m111067AA0B.fw
 m1220652_0000000e.fw
 m12206a7_00000029.fw
 m12306a9_0000001c.fw
 m13106e5_00000007.fw
 m16f25d.fw
 m16f6d0.fw
 m16fda4.fw
 m1df3417.fw
 m2069507.fw
 m206d618.fw
 m206e839.fw
 m206ec54.fw
 m206f25c.fw
 m206f6d1.fw
 m206fbBA.fw
 m206fda4.fw
 m2240671_00000017.fw
 m22f6809.fw
 m2a906e9_0000005d_0000005e.fw
 m32306c3_00000022.fw
 m3240661_00000017.fw
 m34f6404.fw
 m36506e3_000000b9_000000ba.fw
 m401067660F.fw
 m406f76b.fw
 m406fbBC.fw
 m441067AA0B.fw
 m46f6d2.fw
 m5cf4a04.fw
 m5df4a02.fw
 m5ff4807.fw
 m6d206d6_00000619.fw
 m6d206d7_00000710.fw
 m6f306f2_0000003a.fw
 m7240651_00000020.fw
 m801066144.fw
 m801067660F.fw
 m80306f4_0000000f.fw
 m8069547.fw
 m806ec59.fw
 m806fa95.fw
 m806fbBA.fw
 m806fda4.fw
 m9220655_00000004.fw
 m9750654_02000022.fw
 m9df4305.fw
 m9df4406.fw
 m9df4703.fw
 mA01067AA0B.fw
 mbdf4117.fw
 mbdf4903.fw
 mc0306d4_00000025.fw
 mc0406e3_000000b9_000000ba.fw
 mc0806e9_00000061_00000062.fw
 mc0806ea_00000065_00000066.fw
 med306e4_00000428.fw
 med306e6_00000600.fw
 med306e7_0000070d.fw
 mef406f1_0b000021.fw
 mu267114.fw
 mu267238.fw
 mu26732e.fw
 mu26a003.fw
 mu26a101.fw


[FILE:7134:files/LICENSE]
The terms of the software license agreement included with any software you download will control your use of the software.

INTEL SOFTWARE LICENSE AGREEMENT

IMPORTANT - READ BEFORE COPYING, INSTALLING OR USING.
Do not use or load this software and any associated materials (collectively,
the "Software") until you have carefully read the following terms and
conditions. By loading or using the Software, you agree to the terms of this
Agreement. If you do not wish to so agree, do not install or use the Software.

LICENSES: Please Note:
- If you are a network administrator, the "Site License" below shall
apply to you.
- If you are an end user, the "Single User License" shall apply to you.
- If you are an original equipment manufacturer (OEM), the "OEM License"
shall apply to you.

SITE LICENSE. You may copy the Software onto your organization's computers
for your organization's use, and you may make a reasonable number of
back-up copies of the Software, subject to these conditions:

1. This Software is licensed for use only in conjunction with Intel
component products. Use of the Software in conjunction with non-Intel
component products is not licensed hereunder.
2. You may not copy, modify, rent, sell, distribute or transfer any part
of the Software except as provided in this Agreement, and you agree to
prevent unauthorized copying of the Software.
3. You may not reverse engineer, decompile, or disassemble the Software.
4. You may not sublicense or permit simultaneous use of the Software by
more than one user.
5. The Software may include portions offered on terms in addition to those
set out here, as set out in a license accompanying those portions.

SINGLE USER LICENSE. You may copy the Software onto a single computer for
your personal, noncommercial use, and you may make one back-up copy of the
Software, subject to these conditions:

1. This Software is licensed for use only in conjunction with Intel
component products. Use of the Software in conjunction with non-Intel
component products is not licensed hereunder.
2. You may not copy, modify, rent, sell, distribute or transfer any part
of the Software except as provided in this Agreement, and you agree to
prevent unauthorized copying of the Software.
3. You may not reverse engineer, decompile, or disassemble the Software.
4. You may not sublicense or permit simultaneous use of the Software by
more than one user.
5. The Software may include portions offered on terms in addition to those
set out here, as set out in a license accompanying those portions.

OEM LICENSE: You may reproduce and distribute the Software only as an
integral part of or incorporated in Your product or as a standalone
Software maintenance update for existing end users of Your products,
excluding any other standalone products, subject to these conditions:

1. This Software is licensed for use only in conjunction with Intel
component products. Use of the Software in conjunction with non-Intel
component products is not licensed hereunder.
2. You may not copy, modify, rent, sell, distribute or transfer any part
of the Software except as provided in this Agreement, and you agree to
prevent unauthorized copying of the Software.
3. You may not reverse engineer, decompile, or disassemble the Software.
4. You may only distribute the Software to your customers pursuant to a
written license agreement. Such license agreement may be a "break-the-
seal" license agreement. At a minimum such license shall safeguard
Intel's ownership rights to the Software.
5. The Software may include portions offered on terms in addition to those
set out here, as set out in a license accompanying those portions.

NO OTHER RIGHTS. No rights or licenses are granted by Intel to You, expressly
or by implication, with respect to any proprietary information or patent,
copyright, mask work, trademark, trade secret, or other intellectual property
right owned or controlled by Intel, except as expressly provided in this
Agreement.

OWNERSHIP OF SOFTWARE AND COPYRIGHTS. Title to all copies of the Software
remains with Intel or its suppliers. The Software is copyrighted and
protected by the laws of the United States and other countries, and
international treaty provisions. You may not remove any copyright notices
from the Software. Intel may make changes to the Software, or to items
referenced therein, at any time without notice, but is not obligated to
support or update the Software. Except as otherwise expressly provided, Intel
grants no express or implied right under Intel patents, copyrights,
trademarks, or other intellectual property rights. You may transfer the
Software only if the recipient agrees to be fully bound by these terms and if
you retain no copies of the Software.

LIMITED MEDIA WARRANTY. If the Software has been delivered by Intel on
physical media, Intel warrants the media to be free from material physical
defects for a period of ninety days after delivery by Intel. If such a defect
is found, return the media to Intel for replacement or alternate delivery of
the Software as Intel may select.

EXCLUSION OF OTHER WARRANTIES. EXCEPT AS PROVIDED ABOVE, THE SOFTWARE IS
PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED WARRANTY OF ANY KIND
INCLUDING WARRANTIES OF MERCHANTABILITY, NONINFRINGEMENT, OR FITNESS FOR A
PARTICULAR PURPOSE. Intel does not warrant or assume responsibility for the
accuracy or completeness of any information, text, graphics, links or other
items contained within the Software.

LIMITATION OF LIABILITY. IN NO EVENT SHALL INTEL OR ITS SUPPLIERS BE LIABLE
FOR ANY DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, LOST PROFITS,
BUSINESS INTERRUPTION, OR LOST INFORMATION) ARISING OUT OF THE USE OF OR
INABILITY TO USE THE SOFTWARE, EVEN IF INTEL HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES. SOME JURISDICTIONS PROHIBIT EXCLUSION OR
LIMITATION OF LIABILITY FOR IMPLIED WARRANTIES OR CONSEQUENTIAL OR INCIDENTAL
DAMAGES, SO THE ABOVE LIMITATION MAY NOT APPLY TO YOU. YOU MAY ALSO HAVE
OTHER LEGAL RIGHTS THAT VARY FROM JURISDICTION TO JURISDICTION.

TERMINATION OF THIS AGREEMENT. Intel may terminate this Agreement at any time
if you violate its terms. Upon termination, you will immediately destroy the
Software or return all copies of the Software to Intel.

APPLICABLE LAWS. Claims arising under this Agreement shall be governed by the
laws of California, excluding its principles of conflict of laws and the
United Nations Convention on Contracts for the Sale of Goods. You may not
export the Software in violation of applicable export laws and regulations.
Intel is not obligated under any other agreements unless they are in writing
and signed by an authorized representative of Intel.

GOVERNMENT RESTRICTED RIGHTS. The Software is provided with "RESTRICTED
RIGHTS." Use, duplication, or disclosure by the Government is subject to
restrictions as set forth in FAR52.227-14 and DFAR252.227-7013 et seq. or its
successor. Use of the Software by the Government constitutes acknowledgment
of Intel's proprietary rights therein. Contractor or Manufacturer is Intel
2200 Mission College Blvd., Santa Clara, CA 95052.


[FILE:513:files/Makefile]
AMD_UCODE_DIR=	amd-ucode
AMD_UCODE=	$(AMD_UCODE_DIR)/microcode_amd.bin \
		$(AMD_UCODE_DIR)/microcode_amd_fam15h.bin \
		$(AMD_UCODE_DIR)/microcode_amd_fam16h.bin
INTEL_UCODE=	microcode.dat
OUTPUT_DIR=	mcodes
all:	ucode
ucode:	ucode-tool
	mkdir -p $(OUTPUT_DIR)
	./ucode-tool -o $(OUTPUT_DIR) -i $(INTEL_UCODE)
	./ucode-tool -o $(OUTPUT_DIR) -a $(AMD_UCODE)

# Use the host cc to compile ucode-tool in case of cross-compile
ucode-tool: ucode-tool.c
	cc ucode-tool.c -o $@

clean:
	rm -rf $(OUTPUT_DIR) ucode-tool


[FILE:1652:files/microcode_update.in]
#!/bin/sh
#
# $FreeBSD: head/sysutils/devcpu-data/files/microcode_update.in 452203 2017-10-16 16:37:56Z riggs $
#

# PROVIDE:	microcode_update
# REQUIRE:	root mountcritlocal
# KEYWORD:	nojail

#
# Add the following line to /etc/rc.conf to enable flow-capture:
# microcode_update_enable (bool):	Set it to "YES" to update microcode on startup
#					Set to "NO" by default.
# microcode_update_datadir (str):	Directory, microcode updates stored in.
#					Default is "%%DATADIR%%"
# microcode_update_cpus (str):		A list of cpus to update on startup, or "ALL" for all.
#					Example: microcode_update_cpus_cpus="0 CPU0"
#					Set to "ALL" by default. 
# microcode_update_flags (str):		Flags for cpucontrol(8).

. /etc/rc.subr

name="microcode_update"
rcvar=microcode_update_enable
stop_cmd=":"
start_precmd="microcode_update_prepare"
start_cmd="microcode_update_start"
requires_modules="cpuctl"

CMT="/usr/sbin/cpucontrol"

microcode_update_prepare()
{
	if ! kldstat -q -m cpuctl; then
		if ! kldload cpuctl > /dev/null 2>&1; then
			warn "Can't load cpuctl module."
			return 1
		fi
	fi
}

microcode_update_start()
{
	echo "Updating cpucodes..."
	if [ "${microcode_cpus}" = "ALL" ]; then
		ncpu=`/sbin/sysctl -n hw.ncpu`
		cpus=`jot ${ncpu} 0`;
	else
		cpus=${microcode_cpus}
	fi
	for i in ${cpus}; do
		${CMT} -u ${microcode_update_flags} \
		    -d "${microcode_update_datadir}" /dev/cpuctl${i} || \
		    (echo "Failed." && exit 1)
	done
	echo "Done."
}

load_rc_config $name

# Set default values
: ${microcode_update_enable="NO"}
: ${microcode_update_datadir="%%DATADIR%%"}
: ${microcode_cpus="ALL"}
: ${microcode_update_flags=""}

run_rc_command "$1"


[FILE:6187:files/ucode-tool.c]
/*-
 * Copyright (c) 2013 John Clark <clarkjc@runbox.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/endian.h>
#include <unistd.h>

#define BUFFER_SIZE	4096

static void	error(const char *fmt, ...);
static void	process_amd(const char *container, const char *outdir);
static void	process_intel(const char *filename, const char *outdir);

/*
 * This tool extracts microcode from container files provided by
 * Intel and AMD for their families of popular microprocessors.
 */
int
main(int argc, char *argv[])
{
	int ch, i, mode = -1;
	char *outdir = ".";

	/* Parse the command line arguments. */
	while ((ch = getopt(argc, argv, "aio:")) != -1) {
		switch (ch) {
		case 'a':	/* Mode select */
		case 'i':
			mode = ch;
			break;
		case 'o':	/* Output directory */
			outdir = optarg;
			break;
		default:	/* Unknown */
			error("Error: Invalid argument\n");
		}
	}

	if (mode == 'i') {
		/* Process Intel microcode container files */
		for (i = optind; i < argc; i++) {
			process_intel(argv[i], outdir);
		}
	} else if (mode == 'a') {
		/* Process AMD microcode container files */
		for (i = optind; i < argc; i++) {
			process_amd(argv[i], outdir);
		}
	} else {
		error("Error: Invalid mode\n");
	}

	return 0;
}

/* Display an error message and exit with a status code of 1. */
static void
error(const char *fmt, ...)
{
	va_list args;

	if (fmt == NULL) {
		perror("Error");
	} else {
		va_start(args, fmt);
		vfprintf(stderr, fmt, args);
		va_end(args);
	}
	exit(1);
}

/* Process an AMD supplied microcode container file. */
#define AMD_HEADER_LEN		12
#define AMD_SKIP_OFFSET		8
#define AMD_UCODE_HEADER_LEN	8
#define AMD_UCODE_HEADER_TYPE	0x00000001
#define AMD_UCODE_ID_OFFSET	4
#define AMD_UCODE_SIG_OFFSET	24
static void
process_amd(const char *container, const char *outdir)
{
	char outname[FILENAME_MAX];
	const uint8_t magic[] = {
		0x44, 0x4d, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	FILE *fin, *fout;
	uint8_t *buf;
	uint32_t id, len, sig;
	int num;

	if ((buf = malloc(BUFFER_SIZE)) == NULL)
		error(NULL);

	/* Open the container file and read the header. */
	if ((fin = fopen(container, "rb")) == NULL)
		error(NULL);
	if (fread(buf, AMD_HEADER_LEN, 1, fin) != 1) {
		error("Error: Truncated file: %s\n", container);
	}

	/* Check the magic numbers. */
	if (memcmp(magic, buf, sizeof(magic)) != 0) {
		error("Error: Invalid file: %s\n", container);
	}

	/* Seek to the first microcode image. */
	if (fseek(fin, le32dec(buf + AMD_SKIP_OFFSET), SEEK_CUR) != 0)
		error(NULL);

	/* Read all microcode images. */
	while ((num = fread(buf, 1, AMD_UCODE_HEADER_LEN, fin)) != 0) {
		/* Read and validate the image. */
		if (num != AMD_UCODE_HEADER_LEN) {
			error("Error: Truncated file: %s\n", container);
		}
		if (le32dec(buf) != AMD_UCODE_HEADER_TYPE) {
			error("Error: Invalid type: %s\n", container);
		}
		len = le32dec(buf + sizeof(uint32_t));
		if (len > BUFFER_SIZE) {
			if ((buf = realloc(buf, len)) == NULL)
				error(NULL);
		}
		if (fread(buf, len, 1, fin) != 1) {
			error("Error: Truncated file: %s\n", container);
		}

		/* Write the image to an output file. */
		sig = le32dec(buf + AMD_UCODE_SIG_OFFSET);
		id = le32dec(buf + AMD_UCODE_ID_OFFSET);
		snprintf(outname, sizeof(outname), "%s/AMD-%08x-%08x.fw",
		    outdir, sig, id);
		if ((fout = fopen(outname, "wb")) == NULL)
			error(NULL);
		if (fwrite(buf, len, 1, fout) != 1)
			error(NULL);
		if (fclose(fout) != 0)
			error(NULL);
	}

	if (fclose(fin) != 0)
		error(NULL);
	free(buf);
}

/* Process an Intel supplied microcode container file. */
static void
process_intel(const char *container, const char *outdir)
{
	char outname[FILENAME_MAX];
	FILE *fin, *fout = NULL;
	char *buf, *token;
	const char * const sep = ",. \t\n";
	uint32_t val;

	if ((buf = malloc(BUFFER_SIZE)) == NULL)
		error(NULL);
	if ((fin = fopen(container, "r")) == NULL)
		error(NULL);

	/* Process the container file line by line. */
	while (fgets(buf, BUFFER_SIZE, fin) != NULL) {
		if ((token = strtok(buf, sep)) == NULL)
			continue;

		if (*token == '/') {
			/* Process a comment line. */
			if (fout != NULL) {
				/* Close previous output file. */
				if (fclose(fout) != 0)
					error(NULL);
				fout = NULL;
			}
			if ((token = strtok(NULL, sep)) != NULL) {
				/* Construct next file name. */
				snprintf(outname, sizeof(outname), "%s/%s.fw",
				    outdir, token);
			}
		} else {
			/* Process a data line. */
			if ((fout == NULL) && (token != NULL)) {
				if ((fout = fopen(outname, "wb")) == NULL)
					error(NULL);
			}
			while (token != NULL) {
				val = htole32(strtoul(token, NULL, 0));
				if (fwrite(&val, sizeof(val), 1, fout) != 1)
					error(NULL);
				token = strtok(NULL, sep);
			}
		}
	}

	if (fout != NULL) {
		if (fclose(fout) != 0)
			error(NULL);
	}
	if (fclose(fin) != 0)
		error(NULL);
	free(buf);
}

