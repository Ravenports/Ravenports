# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		anet
VERSION=		0.4.0
KEYWORDS=		net
VARIANTS=		standard
SDESC[standard]=	Networking library for Ada
HOMEPAGE=		https://www.codelabs.ch/anet/
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		http://www.codelabs.ch/download/
DISTFILE[1]=		libanet-0.4.0.tar.bz2:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	TESTED
OPTIONS_STANDARD=	TESTED

BUILD_DEPENDS=		asciidoc:single:py27
			source-highlight:primary:standard

USES=			gprbuild gmake

DISTNAME=		libanet-0.4.0

LICENSE=		LGPL21+:primary GMGPL:primary
LICENSE_SCHEME=		multi
LICENSE_FILE=		LGPL21+:{{WRKSRC}}/COPYING
			GMGPL:{{WRKDIR}}/GMGPL_LICENSE

FPC_EQUIVALENT=		net/anet

BUILD_TARGET=		all doc
MAKE_ARGS=		NUM_CPUS={{MAKE_JOBS_NUMBER}}
			LIBRARY_KIND=static
			OS=bsd

[TESTED].DESCRIPTION=			Run unit test suite before installation
[TESTED].BUILD_DEPENDS_ON=		ahven:primary:standard
[TESTED].BUILD_TARGET_ON=		tests

post-patch:
	${REINPLACE_CMD} -e 's|dynamic|static|g' ${WRKSRC}/gnat/anet.gpr
	${REINPLACE_CMD} -e 's|DESTDIR|DEST2|g' ${WRKSRC}/doc/Makefile

post-extract:
	${AWK} '/^pragma/ {exit}; {print}' ${WRKSRC}/src/anet.ads \
		> ${WRKDIR}/GMGPL_LICENSE

do-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/lib/gnat \
		${STAGEDIR}${PREFIX}/lib/anet \
		${STAGEDIR}${PREFIX}/include/anet \
		${STAGEDIR}${STD_DOCDIR}
	${INSTALL_DATA} ${WRKSRC}/src/*.ad[bs] ${WRKSRC}/src/bsd/*.ad[bs] \
		${STAGEDIR}${PREFIX}/include/anet
	${INSTALL_DATA} ${WRKSRC}/lib/bsd/static/*.ali \
		${STAGEDIR}${PREFIX}/lib/anet
	${INSTALL_DATA} ${WRKSRC}/lib/bsd/static/*.a ${STAGEDIR}${PREFIX}/lib
	${INSTALL_DATA} ${WRKSRC}/gnat/anet.gpr ${STAGEDIR}${PREFIX}/lib/gnat
	(cd ${WRKSRC}/doc && ${COPYTREE_SHARE} html ${STAGEDIR}${STD_DOCDIR})

[FILE:605:descriptions/desc.primary]
Anet is a networking library for the Ada programming language featuring:
  * BSD socket implementation
  * High abstraction level
  * Extendable socket type hierarchy
  * Socket receiver tasks (Stream and Datagram)
  * Ada type serialisation/deserialisation over sockets
  * Supported socket families
    - IPv4 (AF_INET)
    - IPv6 (AF_INET6)
    - UNIX domain (AF_UNIX)
    - Linux only: Packet (AF_PACKET)
    - Linux only: Netlink (AF_NETLINK)
  * Supported socket modes
    - Stream (TCP)
    - Datagram (UDP)
    - RAW
  * Support for IPv4/IPv6 multicast
  * UDP/IPv4 packet creation and validation


[FILE:100:distinfo]
e837dfe5d94e4d6ce9a821ab13df011820ebe8a237ffd001c1b01548dbde7080        53374 libanet-0.4.0.tar.bz2


[FILE:1773:manifests/plist.primary]
include/anet/
 anet-byte_swapping.adb
 anet-byte_swapping.ads
 anet-constants.ads
 anet-errno.adb
 anet-errno.ads
 anet-ipv4.adb
 anet-ipv4.ads
 anet-os.adb
 anet-os.ads
 anet-os_constants.ads
 anet-receivers-datagram.adb
 anet-receivers-datagram.ads
 anet-receivers-stream.adb
 anet-receivers-stream.ads
 anet-receivers.adb
 anet-receivers.ads
 anet-socket_families.ads
 anet-sockets-filters.adb
 anet-sockets-filters.ads
 anet-sockets-inet-iface.adb
 anet-sockets-inet-iface.ads
 anet-sockets-inet.adb
 anet-sockets-inet.ads
 anet-sockets-thin-inet.adb
 anet-sockets-thin-inet.ads
 anet-sockets-thin-netdev-requests.ads
 anet-sockets-thin-netdev.ads
 anet-sockets-thin-sockaddr.ads
 anet-sockets-thin-unix.ads
 anet-sockets-thin.ads
 anet-sockets-unix.adb
 anet-sockets-unix.ads
 anet-sockets.adb
 anet-sockets.ads
 anet-streams.adb
 anet-streams.ads
 anet-thin.ads
 anet-types.adb
 anet-types.ads
 anet-udp.adb
 anet-udp.ads
 anet-util.adb
 anet-util.ads
 anet.adb
 anet.ads
lib/anet/
 anet-byte_swapping.ali
 anet-constants.ali
 anet-errno.ali
 anet-ipv4.ali
 anet-os.ali
 anet-os_constants.ali
 anet-receivers-datagram.ali
 anet-receivers-stream.ali
 anet-receivers.ali
 anet-socket_families.ali
 anet-sockets-filters.ali
 anet-sockets-inet-iface.ali
 anet-sockets-inet.ali
 anet-sockets-thin-inet.ali
 anet-sockets-thin-netdev-requests.ali
 anet-sockets-thin-netdev.ali
 anet-sockets-thin-sockaddr.ali
 anet-sockets-thin-unix.ali
 anet-sockets-thin.ali
 anet-sockets-unix.ali
 anet-sockets.ali
 anet-streams.ali
 anet-thin.ali
 anet-types.ali
 anet-udp.ali
 anet-util.ali
 anet.ali
lib/gnat/anet.gpr
lib/libanet.a
include/anet/
 anet-sockets-net_ifaces.ads
 anet-sockets-net_ifaces.adb
 anet-arp.ads
 anet-arp.adb
lib/anet/
 anet-sockets-net_ifaces.ali
 anet-arp.ali


[FILE:47:manifests/plist.docs]
share/doc/anet/html/
 asciidoc.css
 index.html


[FILE:2906:patches/patch-src_anet-sockets-inet.adb]
--- src/anet-sockets-inet.adb.orig	2016-06-29 10:26:01 UTC
+++ src/anet-sockets-inet.adb
@@ -52,7 +52,7 @@ package body Anet.Sockets.Inet is
       Res  : C.int;
       Sock : Thin.Inet.Sockaddr_In_Type
         (Family => Socket_Families.Family_Inet);
-      Len  : aliased C.int := Sock'Size / 8;
+      Len  : aliased C.int := Thin.Inet.Sockaddr_In_Size;
    begin
       New_Socket.Sock_FD := -1;
 
@@ -80,7 +80,7 @@ package body Anet.Sockets.Inet is
       Res  : C.int;
       Sock : Thin.Inet.Sockaddr_In_Type
         (Family => Socket_Families.Family_Inet6);
-      Len  : aliased C.int := Sock'Size / 8;
+      Len  : aliased C.int := Thin.Inet.Sockaddr_In6_Size;
    begin
       New_Socket.Sock_FD := -1;
 
@@ -129,7 +129,7 @@ package body Anet.Sockets.Inet is
         (Result  => Thin.C_Bind
            (S       => Socket.Sock_FD,
             Name    => Sockaddr'Address,
-            Namelen => Sockaddr'Size / 8),
+            Namelen => Thin.Inet.Sockaddr_In_Size),
          Message => "Unable to bind IPv4 socket to " & To_String
            (Address => Address) & "," & Port'Img);
    end Bind;
@@ -153,7 +153,7 @@ package body Anet.Sockets.Inet is
         (Result  => Thin.C_Bind
            (S       => Socket.Sock_FD,
             Name    => Sockaddr'Address,
-            Namelen => Sockaddr'Size / 8),
+            Namelen => Thin.Inet.Sockaddr_In6_Size),
          Message => "Unable to bind IPv6 socket to " & To_String
            (Address => Address) & "," & Port'Img);
    end Bind;
@@ -173,7 +173,7 @@ package body Anet.Sockets.Inet is
         (Result  => Thin.C_Connect
            (S       => Socket.Sock_FD,
             Name    => Dst'Address,
-            Namelen => Dst'Size / 8),
+            Namelen => Thin.Inet.Sockaddr_In_Size),
          Message => "Unable to connect socket to address " & To_String
            (Address => Address) & " (" & Port'Img & " )");
    end Connect;
@@ -193,7 +193,7 @@ package body Anet.Sockets.Inet is
         (Result  => Thin.C_Connect
            (S       => Socket.Sock_FD,
             Name    => Dst'Address,
-            Namelen => Dst'Size / 8),
+            Namelen => Thin.Inet.Sockaddr_In6_Size),
          Message => "Unable to connect socket to address " & To_String
            (Address => Address) & " (" & Port'Img & " )");
    end Connect;
@@ -432,7 +432,7 @@ package body Anet.Sockets.Inet is
          Len   => Item'Length,
          Flags => 0,
          To    => Dst'Address,
-         Tolen => Dst'Size / 8);
+         Tolen => Thin.Inet.Sockaddr_In_Size);
 
       Errno.Check_Or_Raise
         (Result  => C.int (Res),
@@ -464,7 +464,7 @@ package body Anet.Sockets.Inet is
          Len   => Item'Length,
          Flags => 0,
          To    => Dst'Address,
-         Tolen => Dst'Size / 8);
+         Tolen => Thin.Inet.Sockaddr_In6_Size);
 
       Errno.Check_Or_Raise
         (Result  => C.int (Res),

