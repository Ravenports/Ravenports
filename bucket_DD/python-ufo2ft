# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-ufo2ft
VERSION=		2.11.3
KEYWORDS=		python devel graphics
VARIANTS=		py38 py37
SDESC[py37]=		Bridge between UFOs and FontTools (PY 37)
SDESC[py38]=		Bridge between UFOs and FontTools (PY 38)
HOMEPAGE=		https://github.com/googlefonts/ufo2ft
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/u/ufo2ft
DISTFILE[1]=		ufo2ft-2.11.3.zip:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		ufo2ft-2.11.3

GENERATED=		yes

[PY37].BUILDRUN_DEPENDS_ON=		python-fonttools:single:py37
					python-cu2qu:single:py37
					python-compreffor:single:py37
					python-booleanOperations:single:py37
					python-setuptools_scm:single:py37
[PY37].USES_ON=				python:py37

[PY38].BUILDRUN_DEPENDS_ON=		python-fonttools:single:py38
					python-cu2qu:single:py38
					python-compreffor:single:py38
					python-booleanOperations:single:py38
					python-setuptools_scm:single:py38
[PY38].USES_ON=				python:py38

[FILE:3390:descriptions/desc.single]
|Travis CI Status| |Appveyor CI Status| |PyPI Version| |Codecov|
|Gitter Chat|

ufo2ft
======

ufo2ft ("UFO to FontTools") is a fork of
`ufo2fdk <https://github.com/typesupply/ufo2fdk>`__ whose goal is to
generate OpenType font binaries from UFOs without the FDK dependency.

The library provides two functions, ``compileOTF`` and ``compileTTF``,
which work exactly the same way:

.. code:: python

    from defcon import Font
    from ufo2ft import compileOTF
    ufo = Font('MyFont-Regular.ufo')
    otf = compileOTF(ufo)
    otf.save('MyFont-Regular.otf')

In most cases, the behavior of ufo2ft should match that of ufo2fdk,
whose documentation is retained below (and hopefully is still accurate).

Naming Data
~~~~~~~~~~~

As with any OpenType compiler, you have to set the font naming data to a
particular standard for your naming to be set correctly. In ufo2fdk, you
can get away with setting *two* naming attributes in your font.info
object for simple fonts:

-  familyName: The name for your family. For example, "My Garamond".
-  styleName: The style name for this particular font. For example,
   "Display Light Italic"

ufo2fdk will create all of the other naming data based on thse two
fields. If you want to use the fully automatic naming system, all of the
other name attributes should be set to ``None`` in your font. However,
if you want to override the automated system at any level, you can
specify particular naming attributes and ufo2fdk will honor your
settings. You don't have to set *all* of the attributes, just the ones
you don't want to be automated. For example, in the family "My Garamond"
you have eight weights. It would be nice to style map the italics to the
romans for each weight. To do this, in the individual romans and
italics, you need to set the style mapping data. This is done through
the ``styleMapFamilyName`` and ``styleMapStyleName`` attributes. In each
of your roman and italic pairs you would do this:

**My Garamond-Light.ufo**

-  familyName = "My Garamond"
-  styleName = "Light"
-  styleMapFamilyName = "My Garamond Display Light"
-  styleMapStyleName = "regular"

**My Garamond-Light Italic.ufo**

-  familyName = "My Garamond"
-  styleName = "Display Light Italic"
-  styleMapFamilyName = "My Garamond Display Light"
-  styleMapStyleName = "italic"

**My Garamond-Book.ufo**

-  familyName = "My Garamond"
-  styleName = "Book"
-  styleMapFamilyName = "My Garamond Display Book"
-  styleMapStyleName = "regular"

**My Garamond-Book Italic.ufo**

-  familyName = "My Garamond"
-  styleName = "Display Book Italic"
-  styleMapFamilyName = "My Garamond Display Book"
-  styleMapStyleName = "italic"

**etc.**

Additionally, if you have defined any naming data, or any data for that
matter, in table definitions within your font's features that data will
be honored.


Feature generation
~~~~~~~~~~~~~~~~~~

If your font's features do not contain kerning/mark/mkmk features,
ufo2ft will create them based on your font's kerning/anchor data.

In addition to
`Adobe OpenType feature files
<http://www.adobe.com/devnet/opentype/afdko/topic_feature_file_syntax.html>
`__,
ufo2ft also supports the
`MTI/Monotype format
<http://monotype.github.io/OpenType_Table_Source/otl_source.html>`__.
For example, a GPOS table in this format would be stored within the UFO at
``data/com.github.googlei18n.ufo2ft.mtiFeatures/GPOS.mti``.


Fallbacks
~~~~~~~~~


[FILE:96:distinfo]
3234e1d58a71da51c0191ec925fc14fd1e053f10006157cd1825a250d55f29e6       227880 ufo2ft-2.11.3.zip

