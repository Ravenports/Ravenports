# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ada_spawn
VERSION=		2021
KEYWORDS=		devel ada
VARIANTS=		standard
SDESC[standard]=	Simple API to spawn communicating processes
HOMEPAGE=		none
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		ADACORE/28342768afab1e644a660b96051c04e5e9d3bcb0?filename=spawn-2021-20210701-19A43-src.tar.gz&x=/
DISTFILE[1]=		spawn-2021-20210701-19A43-src.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	gtkada:primary:standard

USES=			gmake gprbuild

DISTNAME=		spawn-2021-20210701-19A43-src

LICENSE=		GPLv3+:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv3+:{{WRKSRC}}/COPYING3
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/source/spawn/spawn.ads
LICENSE_SCHEME=		solo

MAKE_ENV=		BUILD_MODE=prod

INSTALL_REQ_TOOLCHAIN=	yes

do-build:
.for LT in relocatable static-pic static
. for GPR in spawn.gpr spawn_glib.gpr
	${SETENV} ${MAKE_ENV} gprbuild -p -j0 -XLIBRARY_TYPE=${LT} -P ${WRKSRC}/gnat/${GPR}
. endfor
.endfor

do-install:
.for LT in relocatable static-pic static
. for GPR in spawn spawn_glib
	${SETENV} ${MAKE_ENV} gprinstall\
		--prefix=${STAGEDIR}${PREFIX}\
		--lib-subdir=lib/${GPR}.${LT}\
		--sources-subdir=include/${GPR}\
		-p -P ${WRKSRC}/gnat/${GPR}.gpr
. endfor
.endfor
	${RM} -r ${STAGEDIR}${PREFIX}/share/gpr/manifests
	# override generated gpr with our own
	${INSTALL_DATA} ${FILESDIR}/*.gpr ${STAGEDIR}${PREFIX}/share/gpr

[FILE:208:descriptions/desc.single]
Ada Process API (spawn)

This library provides simple API to spawn processes and communicate with
them. Two implementations of the same API are provided:
 * The integrated into Glib event loop
 * Independent


[FILE:115:distinfo]
14559419d703f1c4e6a27c6160d0d5cc3987e9b0790e04920e963a4b0d5e3f5c        49671 spawn-2021-20210701-19A43-src.tar.gz


[FILE:2626:manifests/plist.single]
include/spawn/
 posix_const.c
 spawn-environments-initialize_default__posix.adb
 spawn-environments-internal__posix.adb
 spawn-environments-internal__posix.ads
 spawn-environments-search_in_path__posix.adb
 spawn-environments.adb
 spawn-environments.ads
 spawn-internal__posix.adb
 spawn-internal__posix.ads
 spawn-posix.ads
 spawn-processes-monitor-osx_initialize.adb
 spawn-processes-monitor-unix_initialize.adb
 spawn-processes-monitor.ads
 spawn-processes-monitor__posix.adb
 spawn-processes-monitor_loop.adb
 spawn-processes-monitor_loop.ads
 spawn-processes.ads
 spawn-processes__posix.adb
 spawn-string_vectors.ads
 spawn.ads
include/spawn_glib/
 spawn-environments-initialize_default__glib.adb
 spawn-environments-internal__glib.adb
 spawn-environments-internal__glib.ads
 spawn-environments-search_in_path__posix.adb
 spawn-environments.adb
 spawn-environments.ads
 spawn-internal__glib.ads
 spawn-internal__posix.adb
 spawn-posix.ads
 spawn-processes-monitor-osx_initialize.adb
 spawn-processes-monitor-unix_initialize.adb
 spawn-processes.ads
 spawn-processes__glib.adb
 spawn-string_vectors.ads
 spawn.ads
lib/spawn.relocatable/
 libspawn.a
 spawn-environments-internal__posix.ali
 spawn-environments.ali
 spawn-internal__posix.ali
 spawn-posix.ali
 spawn-processes-monitor__posix.ali
 spawn-processes-monitor_loop.ali
 spawn-processes__posix.ali
 spawn-string_vectors.ali
 spawn.ali
lib/spawn.static/
 libspawn.a
 spawn-environments-internal__posix.ali
 spawn-environments.ali
 spawn-internal__posix.ali
 spawn-posix.ali
 spawn-processes-monitor__posix.ali
 spawn-processes-monitor_loop.ali
 spawn-processes__posix.ali
 spawn-string_vectors.ali
 spawn.ali
lib/spawn.static-pic/
 libspawn.a
 spawn-environments-internal__posix.ali
 spawn-environments.ali
 spawn-internal__posix.ali
 spawn-posix.ali
 spawn-processes-monitor__posix.ali
 spawn-processes-monitor_loop.ali
 spawn-processes__posix.ali
 spawn-string_vectors.ali
 spawn.ali
lib/spawn_glib.relocatable/
 libspawn_glib.a
 spawn-environments-internal__glib.ali
 spawn-environments.ali
 spawn-internal__posix.ali
 spawn-posix.ali
 spawn-processes__glib.ali
 spawn-string_vectors.ali
 spawn.ali
lib/spawn_glib.static/
 libspawn_glib.a
 spawn-environments-internal__glib.ali
 spawn-environments.ali
 spawn-internal__posix.ali
 spawn-posix.ali
 spawn-processes__glib.ali
 spawn-string_vectors.ali
 spawn.ali
lib/spawn_glib.static-pic/
 libspawn_glib.a
 spawn-environments-internal__glib.ali
 spawn-environments.ali
 spawn-internal__posix.ali
 spawn-posix.ali
 spawn-processes__glib.ali
 spawn-string_vectors.ali
 spawn.ali
share/gpr/
 spawn.gpr
 spawn_glib.gpr


[FILE:529:patches/patch-Makefile]
--- Makefile.orig	2021-06-15 05:10:23 UTC
+++ Makefile
@@ -19,7 +19,7 @@ endif
 
 all:
 	gprbuild $(GPRBUILD_FLAGS) -P gnat/spawn.gpr
-	gprbuild $(GPRBUILD_FLAGS) -P gnat/spawn_tests.gpr
+	gprbuild $(GPRBUILD_FLAGS) -P gnat/spawn_glib.gpr
 check:
 	export LD_LIBRARY_PATH=.libs/spawn/relocatable; \
 	for TEST in ${SPAWN_TESTS}; do \
@@ -28,6 +28,7 @@ check:
 
 install:
 	gprinstall $(GPRINSTALL_FLAGS) -p -P gnat/spawn.gpr
+	gprinstall $(GPRINSTALL_FLAGS) -f -p -P gnat/spawn_glib.gpr
 clean:
 	gprclean -q -P gnat/spawn.gpr
 


[FILE:2515:files/spawn.gpr]
library project Spawn is
   type BUILD_KIND is ("static", "static-pic", "relocatable");
   BUILD : BUILD_KIND := external("SPAWN_BUILD", external("LIBRARY_TYPE", "static-pic"));

   for Languages use ("Ada", "c");

   case BUILD is
      when "static" =>
         for Source_Dirs use ("../../include/spawn/");
         for Library_Dir use "../../lib/spawn.static/";
         for Library_Kind use "static";
      when "static-pic" =>
         for Source_Dirs use ("../../include/spawn");
         for Library_Dir use "../../lib/spawn.static-pic";
         for Library_Kind use "static-pic";
      when "relocatable" =>
         for Source_Dirs use ("../../include/spawn");
         for Library_Dir use "../../lib/spawn.relocatable";
         for Library_Kind use "relocatable";
   end case;

   for Library_Name use "spawn";

   package Naming is
      for dot_replacement use "-";
      for casing use "lowercase";
      for spec_suffix ("c") use ".h";
      for spec_suffix ("ada") use ".ads";
      for body_suffix ("c") use ".c";
      for body_suffix ("ada") use ".adb";      
      for body ("spawn.processes.monitor.initialize") use "spawn-processes-monitor-unix_initialize.adb";
      for body ("spawn.processes.monitor") use "spawn-processes-monitor__posix.adb";
      for body ("spawn.environments.search_in_path") use "spawn-environments-search_in_path__posix.adb";
      for body ("spawn.processes") use "spawn-processes__posix.adb";
      for body ("spawn.environments.internal") use "spawn-environments-internal__posix.adb";
      for body ("spawn.environments.initialize_default") use "spawn-environments-initialize_default__posix.adb";
      for body ("spawn.internal") use "spawn-internal__posix.adb";
      for spec ("spawn.environments.internal") use "spawn-environments-internal__posix.ads";
      for spec ("spawn.internal") use "spawn-internal__posix.ads";
   end Naming;

   package Linker is
      null;
   end Linker;

   package Install is
      for Active use "False";
   end Install;

   for Externally_Built use "True";

   type Os_Api_Kind is
     ("unix", "osx", "Windows_NT");

   type Spawn_Build_Kind is
     ("dev", "prod", "coverage");

   type Any_Boolean is
     ("false", "true");

   linker_options     := ();
   ada_switches       := ("-gnatwe", "-O2", "-g");
   common_excluded    := ();
   warnings_as_errors : any_boolean := "true";
   superproject       := "";
   build_mode         : spawn_build_kind := "prod";
   os_api             : os_api_kind := "unix";
end Spawn;


[FILE:2381:files/spawn_glib.gpr]
with "gtkada";

library project Spawn_Glib is
   type BUILD_KIND is ("static", "static-pic", "relocatable");
   BUILD : BUILD_KIND := external("SPAWN_GLIB_BUILD", external("LIBRARY_TYPE", "static-pic"));

   for Languages use ("Ada");

   case BUILD is
      when "static" =>
         for Source_Dirs use ("../../include/spawn_glib/");
         for Library_Dir use "../../lib/spawn_glib.static/";
         for Library_Kind use "static";
      when "static-pic" =>
         for Source_Dirs use ("../../include/spawn_glib");
         for Library_Dir use "../../lib/spawn_glib.static-pic";
         for Library_Kind use "static-pic";
      when "relocatable" =>
         for Source_Dirs use ("../../include/spawn_glib");
         for Library_Dir use "../../lib/spawn_glib.relocatable";
         for Library_Kind use "relocatable";
   end case;

   for Library_Name use "spawn_glib";

   package Naming is
      for dot_replacement use "-";
      for casing use "lowercase";
      for spec_suffix ("ada") use ".ads";
      for body_suffix ("ada") use ".adb";
      for body ("spawn.processes") use "spawn-processes__glib.adb";
      for body ("spawn.environments.search_in_path") use "spawn-environments-search_in_path__posix.adb";
      for body ("spawn.environments.internal") use "spawn-environments-internal__glib.adb";
      for body ("spawn.environments.initialize_default") use "spawn-environments-initialize_default__glib.adb";
      for body ("spawn.internal") use "spawn-internal__posix.adb";
      for spec ("spawn.environments.internal") use "spawn-environments-internal__glib.ads";
      for spec ("spawn.internal") use "spawn-internal__glib.ads";
   end Naming;

   package Linker is
      null;
   end Linker;

   package Install is
      for Active use "False";
   end Install;

   for Externally_Built use "True";

   type Os_Api_Kind is
     ("unix", "osx", "Windows_NT");

   type Spawn_Glib_Build_Kind is
     ("dev", "prod", "coverage");

   type Any_Boolean is
     ("false", "true");

   linker_options     := ();
   ada_switches       := ("-gnatwe", "-O2", "-g");
   common_excluded    := ("spawn-processes-monitor.ads", "spawn-processes-monitor_loop.ads", "spawn-processes-monitor_loop.adb");
   warnings_as_errors : any_boolean := "true";
   build_mode         : spawn_glib_build_kind := "prod";
   os_api             : os_api_kind := "unix";
end Spawn_Glib;

