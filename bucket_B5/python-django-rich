# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-django-rich
VERSION=		1.4.0
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Extensions for using Rich with Django (3.10)
SDESC[v11]=		Extensions for using Rich with Django (3.11)
HOMEPAGE=		https://github.com/adamchainz/django-rich
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/01/17/f1e290a3855a25dda741914094b2a068a5242162148486b4f68d86b6b607
DISTFILE[1]=		django_rich-1.4.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		django_rich-1.4.0.dist-info

GENERATED=		yes

[PY310].RUN_DEPENDS_ON=			python-Django:single:py310
					python-rich:single:py310
[PY310].USES_ON=			python:py310,wheel

[PY311].RUN_DEPENDS_ON=			python-Django:single:v11
					python-rich:single:v11
[PY311].USES_ON=			python:v11,wheel

[FILE:2546:descriptions/desc.single]
===========
django-rich
===========

   :alt: pre-commit

Extensions for using [Rich] with Django.

Requirements
------------

Python 3.7 to 3.11 supported.

Django 3.2 to 4.1 supported.

----

**Want to work smarter and faster?**
Check out my book [Boost Your Django DX] which covers many ways to improve
your development experience.
I wrote django-rich whilst working on the book!

----

Installation
------------

1. Install with **pip**:

   .. code-block:: sh

       python -m pip install django-rich

Reference
---------

``django_rich.management.RichCommand``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A subclass of Django’s |BaseCommand|__ class that sets its
``self.console`` to a Rich |Console|__.
The Console uses the command’s stdout argument, which defaults to
``sys.stdout``.
Colourization is enabled or disabled according to Django’s ``--no-color
and --force-color`` flags.

.. |BaseCommand| replace:: BaseCommand
__
https://docs.djangoproject.com/en/stable/howto/custom-management-commands/#django.core.management.BaseCommand

.. |Console| replace:: Console
__ https://rich.readthedocs.io/en/stable/console.html

You can use ``self.console`` like so:

.. code-block:: python

    from django_rich.management import RichCommand

    class Command(RichCommand):
        def handle(self, *args, **options):
            self.console.print("[bold red]Alert![/bold red]")

You can customize the construction of the Console by overriding the
make_rich_console class attribute.
This should be a callable that returns a Console, such as a
|functools.partial|__.
For example, to disable the default-on markup and highlighting flags:

.. |functools.partial| replace:: ``functools.partial``
__ https://docs.python.org/3/library/functools.html#functools.partial

.. code-block:: python

    from functools import partial

    from django_rich.management import RichCommand
    from rich.console import Console

    class Command(RichCommand):
        make_rich_console = partial(Console, markup=False, highlight=False)

        def handle(self, *args, **options):
            ...

``django_rich.test.RichRunner``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A subclass of Django's |DiscoverRunner|__ with colourized outputs and [nice
traceback rendering].

.. image::
https://raw.githubusercontent.com/adamchainz/django-rich/main/img/RichRunner.png

.. |DiscoverRunner| replace:: DiscoverRunner
__
https://docs.djangoproject.com/en/stable/topics/testing/advanced/#defining-a-test-runner

To use this class, point your |TEST_RUNNER|__ setting to it:



[FILE:113:distinfo]
b418926692bf92222006ba846cc2a4aace484401398cd79fde013b11e9a23fa9         6965 django_rich-1.4.0-py3-none-any.whl

