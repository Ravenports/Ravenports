# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-loguru
VERSION=		0.7.2
KEYWORDS=		python
VARIANTS=		v11 v12
SDESC[v11]=		Python logging made (stupidly) simple (3.11)
SDESC[v12]=		Python logging made (stupidly) simple (3.12)
HOMEPAGE=		https://github.com/Delgan/loguru
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/03/0a/4f6fed21aa246c6b49b561ca55facacc2a44b87d65b8b92362a8e99ba202
DISTFILE[1]=		loguru-0.7.2-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v11]=		single
SPKGS[v12]=		single

OPTIONS_AVAILABLE=	PY311 PY312
OPTIONS_STANDARD=	none
VOPTS[v11]=		PY311=ON PY312=OFF
VOPTS[v12]=		PY311=OFF PY312=ON

USES=			cpe

DISTNAME=		loguru-0.7.2.dist-info

CPE_PRODUCT=		loguru
CPE_TARGET_SW=		python
CPE_VENDOR=		loguru_project
GENERATED=		yes

[PY311].USES_ON=			python:v11,wheel

[PY312].USES_ON=			python:v12,wheel

[FILE:2836:descriptions/desc.single]
   :align: center
   :alt: Loguru logo

   :align: center
   :alt: Loguru demo

=========

    :alt: Pypi version

    :alt: Python versions

    :alt: Docs

    :alt: Build status

    :alt: Coverage

    :alt: Code quality

    :alt: License

**Loguru** is a library which aims to bring enjoyable logging in Python.

Did you ever feel lazy about configuring a logger and used ``print()``
instead?... I did, yet logging is fundamental to every application and
eases the process of debugging. Using **Loguru** you have no excuse not to
use logging from the start, this is as simple as from loguru import logger.

Also, this library is intended to make Python logging less painful by
adding a bunch of useful functionalities that solve caveats of the standard
loggers. Using logs in your application should be an automatism, **Loguru**
tries to make it both pleasant and powerful.

.. end-of-readme-intro

Installation
------------

::

    pip install loguru

Features
--------

* `Ready to use out of the box without boilerplate`_
* `No Handler, no Formatter, no Filter: one function to rule them all`_
* `Easier file logging with rotation / retention / compression`_
* `Modern string formatting using braces style`_
* `Exceptions catching within threads or main`_
* `Pretty logging with colors`_
* `Asynchronous, Thread-safe, Multiprocess-safe`_
* `Fully descriptive exceptions`_
* `Structured logging as needed`_
* `Lazy evaluation of expensive functions`_
* `Customizable levels`_
* `Better datetime handling`_
* `Suitable for scripts and libraries`_
* `Entirely compatible with standard logging`_
* `Personalizable defaults through environment variables`_
* `Convenient parser`_
* `Exhaustive notifier`_
* `10x faster than built-in logging`_

Take the tour
-------------

.. |logger| replace:: logger
.. _logger:
https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger

.. |add| replace:: ``add()``
.. _add:
https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.add

.. |remove| replace:: ``remove()``
.. _remove:
https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.remove

.. |complete| replace:: ``complete()``
.. _complete:
https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.complete

.. |catch| replace:: ``catch()``
.. _catch:
https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.catch

.. |bind| replace:: ``bind()``
.. _bind:
https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.bind

.. |contextualize| replace:: ``contextualize()``
.. _contextualize:
https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.contextualize

.. |patch| replace:: ``patch()``
.. _patch:
https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.patch



[FILE:108:distinfo]
003d71e3d3ed35f0f8984898359d65b79e5b21943f78af86aa5491210429b8eb        62549 loguru-0.7.2-py3-none-any.whl

