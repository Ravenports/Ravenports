# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-jsonargparse
VERSION=		4.40.2
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		JSON argument and config file parser (3.12)
SDESC[v13]=		JSON argument and config file parser (3.13)
HOMEPAGE=		https://pypi.org/project/jsonargparse/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/f4/ba/76643ce22e178c6f7873cc4684878162e6a558be159bb356691a12c8d0d9
DISTFILE[1]=		jsonargparse-4.40.2-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		jsonargparse-4.40.2.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-PyYAML:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-PyYAML:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:2424:descriptions/desc.single]


jsonargparse
============

Docs: https://jsonargparse.readthedocs.io/ | Source:
https://github.com/omni-us/jsonargparse/

jsonargparse is a library for creating command-line interfaces (CLIs) and
making Python apps easily configurable. It is a well-maintained project
with
frequent releases, adhering to high standards of development: semantic
versioning, deprecation periods, changelog, automated testing, and full
test
coverage.

Although jsonargparse might not be widely recognized yet, it already boasts
a [substantial user base
]. Most notably,
it serves as the framework behind pytorch-lightning's [LightningCLI
].

Teaser examples
---------------

CLI with minimal boilerplate:

.. code-block:: python

    from jsonargparse import auto_cli

    def main_function(...):  # your main parameters and logic here
        ...

    if __name__ == "__main__":
        auto_cli(main_function)  # parses arguments and runs main_function

Minimal boilerplate but manually parsing:

.. code-block:: python

    from jsonargparse import auto_parser

    parser = auto_parser(main_function)
    cfg = parser.parse_args()
    ...

Powerful argparse-like low level parsers:

.. code-block:: python

    from jsonargparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument("--config", action="config")  # support config
files
    parser.add_argument("--opt", type=Union[int, Literal["off"]])  #
complex arguments via type hints
    parser.add_function_arguments(main_function, "function")  # add
function parameters
    parser.add_class_arguments(SomeClass, "class")  # add class parameters
    ...
    cfg = parser.parse_args()
    init = parser.instantiate_classes(cfg)
    ...

Features
--------

jsonargparse is user-friendly and encourages the development of **clean,
high-quality code**. It encompasses numerous powerful features, some unique
to
jsonargparse, while also combining advantages found in similar packages:

- **Automatic** creation of CLIs, like [Fire
 ], [Typer
 ], [Clize
 ] and [Tyro
 ].

- Use **type hints** for argument validation, like [Typer
 ], [Tap
 ] and [Tyro
 ].

- Use of **docstrings** for automatic generation of help, like [Tap
 ], [Tyro
 ] and [SimpleParsing
 ].

- Parse from **configuration files** and **environment variables**, like
  [OmegaConf], [dynaconf
 ], [confuse
 ] and [configargparse
 ].

- **Dataclasses** support, like [SimpleParsing
 ] and [Tyro
 ].



[FILE:126:distinfo]
94c770c383786513355a176e093dee9fdef21d7afab837789106af17e307eae3       225035 python-src/jsonargparse-4.40.2-py3-none-any.whl

