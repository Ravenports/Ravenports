# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-wcwidth
VERSION=		0.1.9
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Measures number of terminal column cells (PY37)
SDESC[py38]=		Measures number of terminal column cells (PY38)
HOMEPAGE=		https://github.com/jquast/wcwidth
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/w/wcwidth
DISTFILE[1]=		wcwidth-0.1.9.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		wcwidth-0.1.9

GENERATED=		yes

[PY37].USES_ON=				python:py37

[PY38].USES_ON=				python:py38

[FILE:2765:descriptions/desc.single]
============
Introduction
============

This Library is mainly for those implementing a Terminal Emulator, or
programs
that carefully produce output to mimick or to be interpreted by an
emulator.

**Problem Statement**: The printible length of *most* strings are equal to
the
number of cells they occupy on the screen.  However, there are categories
of
characters that *occupy 2 cells* (full-wide), and others that *occupy 0*
cells
(zero-width).

**Solution**: POSIX.1-2001 and POSIX.1-2008 conforming systems provide
`wcwidth(3)`_ and `wcswidth(3)`_ C functions of which this python module's
functions precisely copy.  *These functions return the number of cells a
unicode string is expected to occupy.*

Installation
------------

The stable version of this package is maintained on pypi, install or
upgrade using pip::

    pip install --upgrade wcwidth

Example
-------

**Problem**: given the following phrase (Japanese),

    >>> text = u'コンニチハ'

Python **incorrectly** uses the *string length* of 5 codepoints rather than
the
*printible length* of 10 cells, so that when using the `rjust` function,
the
output length is wrong::

    >>> print(len('コンニチハ'))
    5

    >>> print('コンニチハ'.rjust(11, '_'))
    ______コンニチハ

By defining our own "rjust" function that uses wcwidth, we can correct
this::

   >>> def wc_rjust(text, length, padding=' '):
   ...    from wcwidth import wcswidth
   ...    return padding * max(0, (length - wcswidth(text))) + text
   ...

Our **Solution** uses wcswidth to determine the string length correctly::

   >>> from wcwidth import wcswidth
   >>> print(wcswidth('コンニチハ'))
   10

   >>> print(wc_rjust('コンニチハ', 11, '_'))
   _コンニチハ

Uses
----

This library is used in:

- asciimatics_: Package to help people create full-screen text UIs.
- blessed_: a simplified wrapper around curses.
- curtsies_: Curses wrapper with a display based on compositing 2d arrays
of text.
- ftfy_: Fixes mojibake and other glitches in Unicode text, after the fact.
- pyte_: a Simple VTXXX-compatible linux terminal emulator.
- python-prompt-toolkit_: a Powerful interactive command line building
library.
- termtosvg_: Terminal recorder that renders sessions as SVG animations.

wcwidth, wcswidth
-----------------
Use function ``wcwidth()`` to determine the length of a *single unicode
character*, and ``wcswidth()`` to determine the length of a several, or a
*string of unicode characters*.

Briefly, return values of function ``wcwidth()`` are:

``-1``
  Indeterminate (not printable).

0
  Does not advance the cursor, such as NULL or Combining.

2
  Characters of category East Asian Wide (W) or East Asian
  Full-width (F) which are displayed using two terminal cells.

1


[FILE:99:distinfo]
ee73862862a156bf77ff92b09034fc4825dd3af9cf81bc5b360668d425f3c5f1        24764 wcwidth-0.1.9.tar.gz

