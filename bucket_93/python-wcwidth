# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-wcwidth
VERSION=		0.2.5
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Measures number of terminal column cells (PY37)
SDESC[py38]=		Measures number of terminal column cells (PY38)
HOMEPAGE=		https://github.com/jquast/wcwidth
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/59/7c/e39aca596badaf1b78e8f547c807b04dae603a433d3e7a7e04d67f2ef3e5
DISTFILE[1]=		wcwidth-0.2.5-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		wcwidth-0.2.5.dist-info

GENERATED=		yes

[PY37].BUILD_DEPENDS_ON=		python-pip:single:py37
[PY37].USES_ON=				python:py37,wheel

[PY38].BUILD_DEPENDS_ON=		python-pip:single:py38
[PY38].USES_ON=				python:py38,wheel

[FILE:1422:descriptions/desc.single]
|pypi_downloads| |codecov| |license|

============
Introduction
============

This library is mainly for CLI programs that carefully produce output for
Terminals, or make pretend to be an emulator.

**Problem Statement**: The printable length of *most* strings are equal to
the
number of cells they occupy on the screen ``1 charater : 1 cell``. 
However,
there are categories of characters that *occupy 2 cells* (full-wide), and
others that *occupy 0* cells (zero-width).

**Solution**: POSIX.1-2001 and POSIX.1-2008 conforming systems provide
`wcwidth(3)`_ and `wcswidth(3)`_ C functions of which this python module's
functions precisely copy.  *These functions return the number of cells a
unicode string is expected to occupy.*

Installation
------------

The stable version of this package is maintained on pypi, install using
pip::

    pip install wcwidth

Example
-------

**Problem**: given the following phrase (Japanese),

   >>>  text = u'コンニチハ'

Python **incorrectly** uses the *string length* of 5 codepoints rather than
the
*printible length* of 10 cells, so that when using the `rjust` function,
the
output length is wrong::

    >>> print(len('コンニチハ'))
    5

    >>> print('コンニチハ'.rjust(20, '_'))
    _____コンニチハ

By defining our own "rjust" function that uses wcwidth, we can correct
this::

   >>> def wc_rjust(text, length, padding=' '):
       :alt: MIT License


[FILE:113:distinfo]
beb4802a9cebb9144e99086eff703a642a13d6a0052920003a230f3294bbe784        30763 wcwidth-0.2.5-py2.py3-none-any.whl

