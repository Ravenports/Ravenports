# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		tmux
VERSION=		2.9a
REVISION=		1
KEYWORDS=		sysutils
VARIANTS=		standard
SDESC[standard]=	Terminal multiplexer
HOMEPAGE=		https://tmux.github.io/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main bash
SITES[bash]=		GITHUB/imomaliev:tmux-bash-completion:ef56d3e
SITES[main]=		https://github.com/tmux/tmux/releases/download/2.9a/
DISTFILE[1]=		tmux-2.9a.tar.gz:main
DISTFILE[2]=		generated:bash
DF_INDEX=		1 2
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	libevent:single:standard

USES=			pkgconfig ncurses

LICENSE=		ISCL:single
LICENSE_FILE=		ISCL:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		sysutils/tmux

INVALID_RPATH=		yes
MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--sysconfdir={{PREFIX}}/etc

CPPFLAGS=		-I{{NCURSESINC}}

post-patch:
	${REINPLACE_CMD} -e 's|/etc/tmux.conf|${PREFIX}/etc/tmux.conf|g' \
		${WRKSRC}/CHANGES ${WRKSRC}/tmux.h

do-install:
	${INSTALL_PROGRAM} ${WRKSRC}/tmux ${STAGEDIR}${PREFIX}/bin
	${INSTALL_MAN} ${WRKSRC}/tmux.1 ${STAGEDIR}${MANPREFIX}/man/man1
	@${MKDIR} ${STAGEDIR}${PREFIX}/etc/bash_completion.d
	${INSTALL_DATA} ${WRKDIR}/tmux-bash-completion-ef56d3e/completions/tmux \
		${STAGEDIR}${PREFIX}/etc/bash_completion.d/tmux

[FILE:232:descriptions/desc.single]
tmux is a "terminal multiplexer", it enables a number of terminals (or
windows) to be accessed and controlled from a single terminal. tmux is
intended to be a simple, modern, BSD-licensed alternative to programs
such as GNU screen.


[FILE:219:distinfo]
839d167a4517a6bffa6b6074e89a9a8630547b2dea2086f1fad15af12ab23b25       510915 tmux-2.9a.tar.gz
2f8f3fe586bbdeec9b251ce3ef74f5edef19ba371968a8011acef860ddac59e1         1526 imomaliev-tmux-bash-completion-ef56d3e.tar.gz


[FILE:61:manifests/plist.single]
bin/tmux
etc/bash_completion.d/tmux
share/man/man1/tmux.1.gz


[FILE:1467:patches/patch-tty.c]
--- tty.c.orig	2019-05-29 23:24:04 UTC
+++ tty.c
@@ -527,6 +527,12 @@ tty_putc(struct tty *tty, u_char ch)
 {
 	const char	*acs;
 
+	if ((tty->term->flags & TERM_EARLYWRAP) &&
+	    ch >= 0x20 && ch != 0x7f &&
+	    tty->cy == tty->sy - 1 &&
+	    tty->cx + 1 >= tty->sx)
+		return;
+
 	if (tty->cell.attr & GRID_ATTR_CHARSET) {
 		acs = tty_acs_get(tty, ch);
 		if (acs != NULL)
@@ -557,6 +563,11 @@ tty_putc(struct tty *tty, u_char ch)
 void
 tty_putn(struct tty *tty, const void *buf, size_t len, u_int width)
 {
+	if ((tty->term->flags & TERM_EARLYWRAP) &&
+	    tty->cy == tty->sy - 1 &&
+	    tty->cx + len >= tty->sx)
+		len = tty->sx - tty->cx - 1;
+
 	tty_add(tty, buf, len);
 	if (tty->cx + width > tty->sx) {
 		tty->cx = (tty->cx + width) - tty->sx;
@@ -1746,6 +1757,8 @@ void
 tty_cmd_cells(struct tty *tty, const struct tty_ctx *ctx)
 {
 	struct window_pane	*wp = ctx->wp;
+	u_int			 i;
+	struct grid_cell	 gc;
 
 	if (!tty_is_visible(tty, ctx, ctx->ocx, ctx->ocy, ctx->num, 1))
 		return;
@@ -1769,6 +1782,15 @@ tty_cmd_cells(struct tty *tty, const str
 	tty_margin_off(tty);
 	tty_cursor_pane_unless_wrap(tty, ctx, ctx->ocx, ctx->ocy);
 
+	if (tty->term->flags & TERM_EARLYWRAP) {
+		for (i = 0; i < ctx->num; i++) {
+			memcpy(&gc, ctx->cell, sizeof gc);
+			utf8_set(&gc.data, ((char *)ctx->ptr)[i]);
+			tty_cell(tty, &gc, ctx->wp);
+		}
+		return;
+	}
+
 	tty_attributes(tty, ctx->cell, ctx->wp);
 	tty_putn(tty, ctx->ptr, ctx->num, ctx->num);
 }

