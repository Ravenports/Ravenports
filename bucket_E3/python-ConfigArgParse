# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-ConfigArgParse
VERSION=		1.5.1
KEYWORDS=		python
VARIANTS=		py38 py39
SDESC[py38]=		Drop-in replacement for argparse (PY38)
SDESC[py39]=		Drop-in replacement for argparse (PY39)
HOMEPAGE=		https://github.com/bw2/ConfigArgParse
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/5e/1d/9722b6247cb89ee9f741095bf748c87ae064c5961758846e4f03fa1f4940
DISTFILE[1]=		ConfigArgParse-1.5.1-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py38]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY38 PY39
OPTIONS_STANDARD=	none
VOPTS[py38]=		PY38=ON PY39=OFF
VOPTS[py39]=		PY38=OFF PY39=ON

DISTNAME=		ConfigArgParse-1.5.1.dist-info

GENERATED=		yes

[PY38].USES_ON=				python:py38,wheel

[PY39].USES_ON=				python:py39,wheel

[FILE:3326:descriptions/desc.single]
ConfigArgParse
--------------

Overview
~~~~~~~~

Applications with more than a handful of user-settable options are best
configured through a combination of command line args, config files,
hard-coded defaults, and in some cases, environment variables.

Python's command line parsing modules such as argparse have very limited
support for config files and environment variables, so this module
extends argparse to add these features.

Available on PyPI: http://pypi.python.org/pypi/ConfigArgParse

Features
~~~~~~~~

-  command-line, config file, env var, and default settings can now be
   defined, documented, and parsed in one go using a single API (if a
   value is specified in more than one way then: command line >
   environment variables > config file values > defaults)
-  config files can have .ini or .yaml style syntax (eg. key=value or
   key: value)
-  user can provide a config file via a normal-looking command line arg
   (eg. -c path/to/config.txt) rather than the argparse-style @config.txt
-  one or more default config file paths can be specified
   (eg. ['/etc/bla.conf', '~/.my_config'] )
-  all argparse functionality is fully supported, so this module can
   serve as a drop-in replacement (verified by argparse unittests).
-  env vars and config file keys & syntax are automatically documented
   in the -h help message
-  new method :code:`print_values()` can report keys & values and where
   they were set (eg. command line, env var, config file, or default).
-  lite-weight (no 3rd-party library dependencies except (optionally)
PyYAML)
-  extensible (:code:`ConfigFileParser` can be subclassed to define a new
   config file format)
-  unittested by running the unittests that came with argparse but on
   configargparse, and using tox to test with Python 2.7 and Python 3+

Example
~~~~~~~

*config_test.py*:

Script that defines 4 options and a positional arg and then parses and
prints the values. Also,
it prints out the help message as well as the string produced by
:code:`format_values()` to show
what they look like.

.. code:: py

   import configargparse

   p =
configargparse.ArgParser(default_config_files=['/etc/app/conf.d/*.conf',
'~/.my_settings'])
   p.add('-c', '--my-config', required=True, is_config_file=True,
help='config file path')
   p.add('--genome', required=True, help='path to genome file')  # this
option can be set in a config file because it starts with '--'
   p.add('-v', help='verbose', action='store_true')
   p.add('-d', '--dbsnp', help='known variants .vcf', env_var='DBSNP_PATH')
 # this option can be set in a config file because it starts with '--'
   p.add('vcf', nargs='+', help='variant file(s)')

   options = p.parse_args()

   print(options)
   print("----------")
   print(p.format_help())
   print("----------")
   print(p.format_values())    # useful for logging where different
settings came from

*config.txt:*

Since the script above set the config file as required=True, lets create a
config file to give it:

.. code:: py

    # settings for config_test.py
    genome = HCMV     # cytomegalovirus genome
    dbsnp = /data/dbsnp/variants.vcf

*command line:*

Now run the script and pass it the config file:

.. code:: bash

    DBSNP_PATH=/data/dbsnp/variants_v2.vcf python config_test.py
--my-config config.txt f1.vcf f2.vcf

*output:*



[FILE:116:distinfo]
ebef7b5379600fa34c276debf36e72ac8b37e7e42e6f0cfaed49c61e206eb604        20066 ConfigArgParse-1.5.1-py3-none-any.whl

