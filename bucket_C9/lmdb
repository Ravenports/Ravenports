# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		lmdb
VERSION=		0.9.27
KEYWORDS=		databases
VARIANTS=		standard
SDESC[standard]=	Lightning Memory-Mapped Database
HOMEPAGE=		https://symas.com/lmdb/technical/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://git.openldap.org/openldap/openldap/-/archive/LMDB_0.9.27/
DISTFILE[1]=		openldap-LMDB_0.9.27.tar.bz2:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

DISTNAME=		openldap-LMDB_0.9.27/libraries/liblmdb

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"OpenLDAP Public License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		databases/lmdb

MAKE_ARGS=		CC="{{CC}}"
			prefix="{{PREFIX}}"
			INSTALL_PROGRAM="{{INSTALL_PROGRAM}}"
			INSTALL_LIB="{{INSTALL_LIB}}"
			INSTALL_DATA="{{INSTALL_DATA}}"
			INSTALL_MAN="{{INSTALL_MAN}}"

VAR_OPSYS[sunos]=	CFLAGS=-DMDB_FDATASYNC=fsync

post-install:
	${LN} -sf liblmdb.so.0 ${STAGEDIR}${PREFIX}/lib/liblmdb.so

[FILE:498:descriptions/desc.single]
LMDB is an ultra-fast, ultra-compact key-value data store developed by 
Symas for the OpenLDAP Project.

It uses memory-mapped files, so it has the read performance of a pure 
in-memory database while still offering the persistence of standard 
disk-based databases, and is only limited to the size of the virtual 
address space, (it is not limited to the size of physical RAM). LMDB was 
originally called MDB, but was renamed to avoid confusion with other 
software associated with the name MDB.


[FILE:107:distinfo]
2746e429364bfa6f048f2980b8aab6ef461937e33e5c955d7b6242719b2527c4       116687 openldap-LMDB_0.9.27.tar.bz2


[FILE:178:manifests/plist.single]
bin/
 mdb_copy
 mdb_dump
 mdb_load
 mdb_stat
include/lmdb.h
lib/
 liblmdb.a
 liblmdb.so
 liblmdb.so.0
share/man/man1/
 mdb_copy.1.gz
 mdb_dump.1.gz
 mdb_load.1.gz
 mdb_stat.1.gz


[FILE:2555:patches/patch-Makefile]
--- Makefile.orig	2020-10-26 19:00:40 UTC
+++ Makefile
@@ -23,11 +23,11 @@ AR	= ar
 W	= -W -Wall -Wno-unused-parameter -Wbad-function-cast -Wuninitialized
 THREADS = -pthread
 OPT = -O2 -g
-CFLAGS	= $(THREADS) $(OPT) $(W) $(XCFLAGS)
+CFLAGS	+= $(THREADS) $(W)
 LDLIBS	=
 SOLIBS	=
-SOEXT	= .so
-prefix	= /usr/local
+SOEXT	= .so.0
+prefix	?= /usr/local
 exec_prefix = $(prefix)
 bindir = $(exec_prefix)/bin
 libdir = $(exec_prefix)/lib
@@ -49,10 +49,10 @@ install: $(ILIBS) $(IPROGS) $(IHDRS)
 	mkdir -p $(DESTDIR)$(libdir)
 	mkdir -p $(DESTDIR)$(includedir)
 	mkdir -p $(DESTDIR)$(mandir)/man1
-	for f in $(IPROGS); do cp $$f $(DESTDIR)$(bindir); done
-	for f in $(ILIBS); do cp $$f $(DESTDIR)$(libdir); done
-	for f in $(IHDRS); do cp $$f $(DESTDIR)$(includedir); done
-	for f in $(IDOCS); do cp $$f $(DESTDIR)$(mandir)/man1; done
+	for f in $(IPROGS); do $(INSTALL_PROGRAM) $$f $(DESTDIR)$(bindir); done
+	for f in $(ILIBS); do $(INSTALL_LIB) $$f $(DESTDIR)$(libdir); done
+	for f in $(IHDRS); do $(INSTALL_DATA) $$f $(DESTDIR)$(includedir); done
+	for f in $(IDOCS); do $(INSTALL_MAN) $$f $(DESTDIR)$(mandir)/man1; done
 
 clean:
 	rm -rf $(PROGS) *.[ao] *.[ls]o *~ testdb
@@ -64,20 +64,30 @@ test:	all
 liblmdb.a:	mdb.o midl.o
 	$(AR) rs $@ mdb.o midl.o
 
-liblmdb$(SOEXT):	mdb.lo midl.lo
-#	$(CC) $(LDFLAGS) -pthread -shared -Wl,-Bsymbolic -o $@ mdb.o midl.o $(SOLIBS)
-	$(CC) $(LDFLAGS) -pthread -shared -o $@ mdb.lo midl.lo $(SOLIBS)
+    liblmdb$(SOEXT):	mdb.lo midl.lo
+    #	$(CC) $(LDFLAGS) -pthread -shared -Wl,-Bsymbolic -o $@ mdb.o midl.o $(SOLIBS)
+	$(CC) $(LDFLAGS) -pthread -shared -Wl,-soname,$@ -o $@ mdb.lo midl.lo $(SOLIBS)
 
 mdb_stat: mdb_stat.o liblmdb.a
+	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}
 mdb_copy: mdb_copy.o liblmdb.a
+	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}
 mdb_dump: mdb_dump.o liblmdb.a
+	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}
 mdb_load: mdb_load.o liblmdb.a
+	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}
 mtest:    mtest.o    liblmdb.a
+	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}
 mtest2:	mtest2.o liblmdb.a
+	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}
 mtest3:	mtest3.o liblmdb.a
+	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}
 mtest4:	mtest4.o liblmdb.a
+	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}
 mtest5:	mtest5.o liblmdb.a
+	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}
 mtest6:	mtest6.o liblmdb.a
+	${CC} ${CFLAGS} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}
 
 mdb.o: mdb.c lmdb.h midl.h
 	$(CC) $(CFLAGS) $(CPPFLAGS) -c mdb.c


[FILE:302:patches/patch-mdb.c]
--- mdb.c.orig	2020-10-26 19:00:40 UTC
+++ mdb.c
@@ -132,6 +132,8 @@ typedef SSIZE_T	ssize_t;
 # define MDB_FDATASYNC		fsync
 #elif defined(ANDROID)
 # define MDB_FDATASYNC		fsync
+#elif defined(__FreeBSD_version) && __FreeBSD_version < 1101000
+# define MDB_FDATASYNC		fsync
 #endif
 
 #ifndef _WIN32

