# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-wrapt
VERSION=		1.14.1
KEYWORDS=		python
VARIANTS=		py310 py311
SDESC[py310]=		Decorators, wrappers and monkey patching (3.10)
SDESC[py311]=		Decorators, wrappers and monkey patching (3.11)
HOMEPAGE=		https://github.com/GrahamDumpleton/wrapt
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/w/wrapt
DISTFILE[1]=		wrapt-1.14.1.tar.gz:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py311]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[py311]=		PY310=OFF PY311=ON

DISTNAME=		wrapt-1.14.1

GENERATED=		yes

[PY310].BUILDRUN_DEPENDS_ON=		python-setuptools:single:py310
[PY310].USES_ON=			python:py310,sutools

[PY311].BUILDRUN_DEPENDS_ON=		python-setuptools:single:py311
[PY311].USES_ON=			python:py311,sutools

[FILE:1911:descriptions/desc.single]
wrapt
=====

|Actions| |PyPI|

The aim of the **wrapt** module is to provide a transparent object proxy
for Python, which can be used as the basis for the construction of function
wrappers and decorator functions.

The **wrapt** module focuses very much on correctness. It therefore goes
way beyond existing mechanisms such as ``functools.wraps()`` to ensure that
decorators preserve introspectability, signatures, type checking abilities
etc. The decorators that can be constructed using this module will work in
far more scenarios than typical decorators and provide more predictable and
consistent behaviour.

To ensure that the overhead is as minimal as possible, a C extension module
is used for performance critical components. An automatic fallback to a
pure Python implementation is also provided where a target system does not
have a compiler to allow the C extension to be compiled.

Documentation
-------------

For further information on the **wrapt** module see:

* http://wrapt.readthedocs.org/

Quick Start
-----------

To implement your decorator you need to first define a wrapper function.
This will be called each time a decorated function is called. The wrapper
function needs to take four positional arguments:

* wrapped - The wrapped function which in turns needs to be called by your
wrapper function.
* instance - The object to which the wrapped function was bound when it was
called.
* args - The list of positional arguments supplied when the decorated
function was called.
* kwargs - The dictionary of keyword arguments supplied when the decorated
function was called.

The wrapper function would do whatever it needs to, but would usually in
turn call the wrapped function that is passed in via the wrapped
argument.

The decorator ``@wrapt.decorator`` then needs to be applied to the wrapper
function to convert it into a decorator which can in turn be applied to
other functions.


[FILE:98:distinfo]
380a85cf89e0e69b7cfbe2ea9f765f004ff419f34194018a6827ac0e3edfed4d        50890 wrapt-1.14.1.tar.gz

