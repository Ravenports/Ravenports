# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		lua-sysctl
VERSION=		2.1
KEYWORDS=		devel
VARIANTS=		lua52 lua53 lua54
SDESC[lua52]=		Small FBSD sysctl(3) interface for Lua 5.2
SDESC[lua53]=		Small FBSD sysctl(3) interface for Lua 5.3
SDESC[lua54]=		Small FBSD sysctl(3) interface for Lua 5.4
HOMEPAGE=		https://github.com/kAworu/lua-sysctl
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/kAworu:lua-sysctl:v2.1
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[lua52]=		set
			primary
			docs
			examples
SPKGS[lua53]=		set
			primary
			docs
			examples
SPKGS[lua54]=		set
			primary
			docs
			examples

OPTIONS_AVAILABLE=	LUA52 LUA53 LUA54
OPTIONS_STANDARD=	none
VOPTS[lua52]=		LUA52=ON LUA53=OFF LUA54=OFF
VOPTS[lua53]=		LUA52=OFF LUA53=ON LUA54=OFF
VOPTS[lua54]=		LUA52=OFF LUA53=OFF LUA54=ON

ONLY_FOR_OPSYS=		freebsd dragonfly midnightbsd

USES=			pkgconfig

LICENSE=		BSD2CLAUSE:primary
LICENSE_FILE=		BSD2CLAUSE:{{WRKDIR}}/LICENSE
LICENSE_AWK=		BSD2CLAUSE:"^$$"
LICENSE_SOURCE=		BSD2CLAUSE:{{WRKSRC}}/src/lua_sysctl.c
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/lua-sysctl

MOUNT_PROCFS=		yes

[LUA52].DESCRIPTION=			Build with Lua 5.2
[LUA52].USES_ON=			lua:5.2

[LUA53].DESCRIPTION=			Build with Lua 5.3
[LUA53].USES_ON=			lua:5.3

[LUA54].DESCRIPTION=			Build with Lua 5.4
[LUA54].USES_ON=			lua:5.4

post-patch:
	${REINPLACE_CMD} "s/5.2/${LUA_VER}/g" ${WRKSRC}/Makefile

do-install:
	${MKDIR} ${STAGEDIR}${LUA_MODLIBDIR}
.for D in doc examples
	${MKDIR} ${STAGEDIR}${PREFIX}/share/${D}/lua${LUA_VER_STR}/lua-sysctl
.endfor
	${INSTALL_LIB} ${WRKSRC}/build/sysctl.so ${STAGEDIR}${LUA_MODLIBDIR}
	${INSTALL_DATA} ${WRKSRC}/README.md \
		${STAGEDIR}${PREFIX}/share/doc/lua${LUA_VER_STR}/lua-sysctl
	${INSTALL_DATA} ${WRKSRC}/misc/*.lua \
		${STAGEDIR}${PREFIX}/share/examples/lua${LUA_VER_STR}/lua-sysctl

[FILE:222:descriptions/desc.primary]
lua-sysctl aims to provide a simple and complete interface to FreeBSD's 
sysctl(3) C functions for the Lua scripting language. It allows for both 
reading and setting sysctl values (for limitations see the documentation).


[FILE:107:distinfo]
6f687e0ec57dc1fbb461e665af5b0b0c81bdb42ffa710f4fdb05d4f8bc71677c         8215 kAworu-lua-sysctl-2.1.tar.gz


[FILE:28:manifests/plist.primary]
%%LUA_MODLIBDIR%%/sysctl.so


[FILE:50:manifests/plist.docs]
share/doc/lua%%LUA_VER_STR%%/lua-sysctl/README.md


[FILE:67:manifests/plist.examples]
share/examples/lua%%LUA_VER_STR%%/lua-sysctl/
 i.lua
 test-all.lua


[FILE:528:patches/patch-src_lua__sysctl.c]
--- src/lua_sysctl.c.orig	2021-03-20 15:41:49.561385000 +0100
+++ src/lua_sysctl.c	2021-03-20 15:42:52.220425000 +0100
@@ -273,10 +273,12 @@
 	if ((kind & CTLTYPE) == CTLTYPE_NODE)
 		return (luaL_error(L, "oid '%s' isn't a leaf node", bufp));
 	if (!(kind & CTLFLAG_WR)) {
+#ifndef __DragonFly__
 		if (kind & CTLFLAG_TUN)
 			return (luaL_error(L, "oid '%s' is a read only tunable. "
 					"Tunable values are set in /boot/loader.conf", bufp));
 		else
+#endif
 			return (luaL_error(L, "oid '%s' is read only", bufp));
 	}
 

