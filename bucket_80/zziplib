# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		zziplib
VERSION=		0.13.69
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Provide transparent read access to zipped data
HOMEPAGE=		https://github.com/gdraheim/zziplib
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/gdraheim:zziplib:v0.13.69
DISTFILE[1]=		zziplib-0.13.69.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			sdl

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		sdl1:primary:standard
			xmlto:single:standard
			zip:single:standard
EXRUN[sdl]=		sdl1:primary:standard

USES=			libtool shebangfix pkgconfig python:py27,build zlib

LICENSE=		LGPL20:primary MPL:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		LGPL20:{{WRKSRC}}/docs/COPYING.LIB
			MPL:{{WRKSRC}}/docs/COPYING.MPL
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/zzip/zzip.h
LICENSE_SCHEME=		dual

FPC_EQUIVALENT=		devel/zziplib
SHEBANG_FILES=		docs/*.py

INVALID_RPATH=		yes
MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--enable-sdl

INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		13.0.69

post-install:
.for l in zzip zzipfseeko zzipmmapped zzipwrap
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/lib${l}-0.so.13.0.69
.endfor

[FILE:258:descriptions/desc.primary]
zziplib provides read access to zipped files in a zip-archive, using 
compression based solely on free algorithms provided by zlib. It also 
provides a functionality to overlay the archive filesystem with the 
filesystem of the operating system environment.


[FILE:50:descriptions/desc.sdl]
This subpackage provides SDL support for zziplib.


[FILE:101:distinfo]
846246d7cdeee405d8d21e2922c6e97f55f24ecbe3b6dcf5778073a88f120544      1132204 zziplib-0.13.69.tar.gz


[FILE:1885:manifests/plist.primary]
bin/
 unzip-mem
 unzzip
 unzzip-big
 unzzip-mem
 unzzip-mix
 zzcat
 zzdir
 zzxorcat
 zzxorcopy
 zzxordir
include/
 zzip-io.h
 zzip.h
 zziplib.h
include/zzip/
 _config.h
 _msvc.h
 autoconf.h
 conf.h
 fetch.h
 file.h
 format.h
 fseeko.h
 info.h
 lib.h
 memdisk.h
 mmapped.h
 plugin.h
 stdint.h
 types.h
 wrap.h
 write.h
 zzip.h
 zzip32.h
lib/
 libzzip-0.so.%%SOMAJOR%%
 libzzip-0.so.%%SOVERSION%%
 libzzip-0.so.10
 libzzip-0.so.11
 libzzip-0.so.12
 libzzip.a
 libzzip.so
 libzzipfseeko-0.so.%%SOMAJOR%%
 libzzipfseeko-0.so.%%SOVERSION%%
 libzzipfseeko-0.so.10
 libzzipfseeko-0.so.11
 libzzipfseeko-0.so.12
 libzzipfseeko.a
 libzzipfseeko.so
 libzzipmmapped-0.so.%%SOMAJOR%%
 libzzipmmapped-0.so.%%SOVERSION%%
 libzzipmmapped-0.so.10
 libzzipmmapped-0.so.11
 libzzipmmapped-0.so.12
 libzzipmmapped.a
 libzzipmmapped.so
 libzzipwrap-0.so.%%SOMAJOR%%
 libzzipwrap-0.so.%%SOVERSION%%
 libzzipwrap.a
 libzzipwrap.so
lib/pkgconfig/
 zzip-zlib-config.pc
 zzipfseeko.pc
 zziplib.pc
 zzipmmapped.pc
 zzipwrap.pc
share/aclocal/zziplib.m4
share/man/man3/
 zzip_disk_buffer.3.gz
 zzip_disk_close.3.gz
 zzip_disk_entry_fopen.3.gz
 zzip_disk_entry_strdup_comment.3.gz
 zzip_disk_entry_strdup_name.3.gz
 zzip_disk_entry_to_data.3.gz
 zzip_disk_entry_to_file_header.3.gz
 zzip_disk_fclose.3.gz
 zzip_disk_feof.3.gz
 zzip_disk_findfile.3.gz
 zzip_disk_findfirst.3.gz
 zzip_disk_findmatch.3.gz
 zzip_disk_findnext.3.gz
 zzip_disk_fopen.3.gz
 zzip_disk_fread.3.gz
 zzip_disk_init.3.gz
 zzip_disk_mmap.3.gz
 zzip_disk_munmap.3.gz
 zzip_disk_new.3.gz
 zzip_disk_open.3.gz
 zzip_entry_data_offset.3.gz
 zzip_entry_fclose.3.gz
 zzip_entry_feof.3.gz
 zzip_entry_ffile.3.gz
 zzip_entry_findfile.3.gz
 zzip_entry_findfirst.3.gz
 zzip_entry_findmatch.3.gz
 zzip_entry_findnext.3.gz
 zzip_entry_fopen.3.gz
 zzip_entry_fread.3.gz
 zzip_entry_fread_file_header.3.gz
 zzip_entry_free.3.gz
 zzip_entry_strdup_name.3.gz


[FILE:92:manifests/plist.sdl]
include/SDL_rwops_zzip/
 SDL_rwops_zzip.c
 SDL_rwops_zzip.h
lib/pkgconfig/SDL_rwops_zzip.pc


[FILE:2038:patches/patch-docs_dbk2man.py]
--- docs/dbk2man.py.orig	2018-03-16 11:55:55 UTC
+++ docs/dbk2man.py
@@ -1,4 +1,4 @@
-#!/usr/local/bin/python2.7
+#! /usr/bin/python
 """ Converts an xml-file with docbook elements into troff manual pages.
     The conversion uses etree expecting <refentry> elements in the input.
     The output goes to a multiple files in manX/* subdirectories.
@@ -223,22 +223,23 @@ def refentry2man(refentry, subdirectory 
         if found is not None: manvolnum = found.text
     written = 0
     section = refentry.find("refnamediv")
-    for refname in section.findall("refname"):
-        if not refentrytitle:
-            refentrytitle = refname.text
-        manpage = refname.text
-        filename = "%s/man%s/%s.%s" % (subdirectory, manvolnum, manpage, manvolnum)
-        if manpage != refentrytitle:
-            manpagetext = ".so %s.%s\n" % (refentrytitle, manvolnum)
-            writefile(filename, manpagetext)
-        else:
-            manpagetext = text
+    if section is not None:
+        for refname in section.findall("refname"):
+            if not refentrytitle:
+                refentrytitle = refname.text
+            manpage = refname.text
+            filename = "%s/man%s/%s.%s" % (subdirectory, manvolnum, manpage, manvolnum)
+            if manpage != refentrytitle:
+                manpagetext = ".so %s.%s\n" % (refentrytitle, manvolnum)
+                writefile(filename, manpagetext)
+            else:
+                manpagetext = text
+                writefile(filename, manpagetext)
+                written += 1
+        if not written:
+            manpage = refentrytitle
+            filename = "%s/man%s/%s.%s" % (subdirectory, manvolnum, manpage, manvolnum)
             writefile(filename, manpagetext)
-            written += 1
-    if not written:
-        manpage = refentrytitle
-        filename = "%s/man%s/%s.%s" % (subdirectory, manvolnum, manpage, manvolnum)
-        writefile(filename, manpagetext)
 
 def writefile(filename, manpagetext):
     dirname = os.path.dirname(filename)

