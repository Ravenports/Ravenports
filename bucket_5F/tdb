# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		tdb
VERSION=		1.3.18
KEYWORDS=		databases
VARIANTS=		standard
SDESC[standard]=	Trivial Database
HOMEPAGE=		https://tdb.samba.org/
CONTACT=		Leonid_Bobrov[mazocomp@disroot.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://download.samba.org/pub/tdb/
			https://ftp.samba.org/pub/tdb/
DISTFILE[1]=		tdb-1.3.18.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		autoselect-python:single:standard
			docbook-xsl:primary:standard
			libxslt:single:standard

USES=			compiler pkgconfig python shebangfix

LICENSE=		LGPL3+:single
LICENSE_TERMS=		single:{{WRKSRC}}/TERMS
LICENSE_FILE=		LGPL3+:stock
LICENSE_AWK=		TERMS:"^\#include"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/pytdb.c
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		databases/tdb
SHEBANG_FILES=		python/tdbdump.py
			python/tests/simple.py
			buildtools/bin/waf
			buildtools/examples/run_on_target.py
SHEBANG_OLD_PYTHON=	"/usr/bin/env python3"

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--prefix={{PREFIX}}
			--mandir={{MANPREFIX}}/man
			--without-gettext

INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		1.3.18

post-patch:
	# enable docbook to build manpages
	${REINPLACE_CMD} -e 's|/docbook.sourceforge.net/|/cdn.docbook.org/|' \
		${WRKSRC}/buildtools/wafsamba/wafsamba.py \
		${WRKSRC}/buildtools/wafsamba/samba_conftests.py
	${REINPLACE_CMD} -e 's|python3|python${PYTHON_VER}|g' \
		${WRKSRC}/buildtools/wafsamba/samba_python.py \
		${WRKSRC}/third_party/waf/waflib/extras/run_py_script.py

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/tdb*
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libtdb.${LIBEXT}
	${STRIP_CMD} ${STAGEDIR}${PYTHON_SITELIBDIR}/td*.so

[FILE:234:descriptions/desc.single]
TDB is a Trivial Database. In concept, it is very much like GDBM, and
BSD's DB except that it allows multiple simultaneous writers and uses
locking internally to keep writers from trampling on each other. TDB is
also extremely small.


[FILE:96:distinfo]
c156b40e88bc82a538893437cd763d26fbed5379871e0f7219fd021e60d336b7       697970 tdb-1.3.18.tar.gz


[FILE:466:manifests/plist.single]
%%ONLY-DRAGONFLY%%%%PYTHON_SITELIBDIR%%/tdb.%%SHARED_OBJECT%%
%%ONLY-FREEBSD%%%%PYTHON_SITELIBDIR%%/tdb.%%SHARED_OBJECT%%
%%ONLY-LINUX%%%%PYTHON_SITELIBDIR%%/tdb.cpython-37m-x86_64-linux-gnu.%%SHARED_OBJECT%%
%%PYTHON_SITELIBDIR%%/_tdb_text.py
bin/
 tdbbackup
 tdbdump
 tdbrestore
 tdbtool
include/tdb.h
lib/
 libtdb.so
 libtdb.so.%%SOMAJOR%%
 libtdb.so.%%SOVERSION%%
lib/pkgconfig/tdb.pc
share/man/man8/
 tdbbackup.8.gz
 tdbdump.8.gz
 tdbrestore.8.gz
 tdbtool.8.gz


[FILE:290:patches/patch-Makefile]
--- Makefile.orig	2019-02-26 07:01:14 UTC
+++ Makefile
@@ -1,6 +1,6 @@
 # simple makefile wrapper to run waf
 
-WAF_BIN=`PATH=buildtools/bin:../../buildtools/bin:$$PATH which waf`
+WAF_BIN=buildtools/bin/waf
 WAF_BINARY=$(PYTHON) $(WAF_BIN)
 WAF=PYTHONHASHSEED=1 WAF_MAKE=1 $(WAF_BINARY)
 


[FILE:2282:patches/patch-buildtools_wafsamba_samba__autoconf.py]
Disable libssp -- it causes segfaults on several platforms, likly some
kind of missing os-specific support or consideration.

--- buildtools/wafsamba/samba_autoconf.py.orig	2019-02-26 06:44:21 UTC
+++ buildtools/wafsamba/samba_autoconf.py
@@ -683,44 +683,6 @@ def SAMBA_CONFIG_H(conf, path=None):
     if not IN_LAUNCH_DIR(conf):
         return
 
-    # we need to build real code that can't be optimized away to test
-    stack_protect_list = ['-fstack-protector-strong', '-fstack-protector']
-    for stack_protect_flag in stack_protect_list:
-        flag_supported = conf.check(fragment='''
-                                    #include <stdio.h>
-
-                                    int main(void)
-                                    {
-                                        char t[100000];
-                                        while (fgets(t, sizeof(t), stdin));
-                                        return 0;
-                                    }
-                                    ''',
-                                    execute=0,
-                                    cflags=[ '-Werror', '-Wp,-D_FORTIFY_SOURCE=2', stack_protect_flag],
-                                    mandatory=False,
-                                    msg='Checking if compiler accepts %s' % (stack_protect_flag))
-        if flag_supported:
-            conf.ADD_CFLAGS('%s' % (stack_protect_flag))
-            break
-
-    flag_supported = conf.check(fragment='''
-                                #include <stdio.h>
-
-                                int main(void)
-                                {
-                                    char t[100000];
-                                    while (fgets(t, sizeof(t), stdin));
-                                    return 0;
-                                }
-                                ''',
-                                execute=0,
-                                cflags=[ '-Werror', '-fstack-clash-protection'],
-                                mandatory=False,
-                                msg='Checking if compiler accepts -fstack-clash-protection')
-    if flag_supported:
-        conf.ADD_CFLAGS('-fstack-clash-protection')
-
     if Options.options.debug:
         conf.ADD_CFLAGS('-g', testflags=True)
 

