# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		uclcmd
VERSION=		0.1
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Command line tool for UCL configuration files
HOMEPAGE=		https://github.com/allanjude/uclcmd/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/allanjude:uclcmd:da1ac0f
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	libucl:single:standard
B_DEPS[sunos]=		libbsd4sol:single:standard
B_DEPS[linux]=		libbsd:single:standard

USES=			pkgconfig

LICENSE=		BSD2CLAUSE:single
LICENSE_SCHEME=		solo
LICENSE_FILE=		BSD2CLAUSE:{{WRKSRC}}/LICENSE

FPC_EQUIVALENT=		devel/uclcmd

VAR_OPSYS[sunos]=	CFLAGS=-I{{LOCALBASE}}/include/bsd

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/uclcmd

[FILE:154:descriptions/desc.single]
uclcmd is a command line tool for working with UCL config files.

It is designed to be somewhat compatible with jq by implementing a very
similar syntax.


[FILE:110:distinfo]
4f463eac57c76d92aaca7697b4849e19dc434867c995dbff956e972cf222ec7f        18958 allanjude-uclcmd-da1ac0f.tar.gz


[FILE:11:manifests/plist.single]
bin/uclcmd


[FILE:457:patches/patch-uclcmd.h]
--- uclcmd.h.orig	2017-04-28 04:19:05 UTC
+++ uclcmd.h
@@ -51,6 +51,12 @@
 #define __DECONST(type, var)    ((type)(uintptr_t)(const void *)(var))
 #endif
 
+#ifndef __printflike
+#define	__printflike(fmtarg, firstvararg) \
+            __attribute__((__nonnull__(fmtarg), \
+			  __format__ (__printf__, fmtarg, firstvararg)))
+#endif
+
 #define UCLCMD_PARSER_FLAGS	UCL_PARSER_KEY_LOWERCASE | \
 		UCL_PARSER_NO_IMPLICIT_ARRAYS | UCL_PARSER_SAVE_COMMENTS
 


[FILE:873:patches/patch-uclcmd__common.c]
--- uclcmd_common.c.orig	2017-04-28 04:19:05 UTC
+++ uclcmd_common.c
@@ -30,6 +30,35 @@
 
 #include "uclcmd.h"
 
+#ifdef __linux__
+#include <bsd/stdio.h>
+static int
+vasprintf(char **strp, const char *fmt, va_list args)
+{
+    va_list args_copy;
+    int status, needed;
+
+    va_copy(args_copy, args);
+    needed = vsnprintf(NULL, 0, fmt, args_copy);
+    va_end(args_copy);
+    if (needed < 0) {
+        *strp = NULL;
+        return needed;
+    }
+    *strp = malloc(needed + 1);
+    if (*strp == NULL)
+        return -1;
+    status = vsnprintf(*strp, needed + 1, fmt, args);
+    if (status >= 0)
+        return status;
+    else {
+        free(*strp);
+        *strp = NULL;
+        return status;
+    }
+}
+#endif
+
 /* 
  * This method is called with the arguments of asprintf() as parameter.
  * It handles error checking all instances of asprintf()


[FILE:291:sunos/patch-Makefile]
--- Makefile.orig	2017-04-28 04:19:05 UTC
+++ Makefile
@@ -12,7 +12,7 @@ EXECUTABLE=uclcmd
 all: $(SRCS) $(EXECUTABLE)
 
 $(EXECUTABLE): $(OBJS)
-	$(CC) $(LDFLAGS) $(LIBS) -o $(EXECUTABLE) $(OBJS)
+	$(CC) $(LDFLAGS) $(LIBS) -o $(EXECUTABLE) $(OBJS) -lbsd
 
 clean:
 	rm -f *.o $(EXECUTABLE)

