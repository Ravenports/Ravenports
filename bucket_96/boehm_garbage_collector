# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		boehm_garbage_collector
VERSION=		7.6.2
KEYWORDS=		devel
VARIANTS=		standard threaded redirect
SDESC[threaded]=	Garbage collection with posix thread support
SDESC[redirect]=	Garbage collection with redirected malloc
SDESC[standard]=	Garbage collection and memory leak detection
HOMEPAGE=		http://www.hboehm.info/gc/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://www.hboehm.info/gc/gc_source/
DISTFILE[1]=		gc-7.6.2.tar.gz:main
DF_INDEX=		1
SPKGS[threaded]=	single
SPKGS[redirect]=	single
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	THREADED REDIRECT
OPTIONS_STANDARD=	none
VOPTS[threaded]=	THREADED=ON REDIRECT=OFF
VOPTS[redirect]=	THREADED=OFF REDIRECT=ON

BUILD_DEPENDS=		libatomic_ops:single:standard

USES=			cpe libtool pkgconfig c++:single

DISTNAME=		gc-7.6.2

LICENSE=		BSD2CLAUSE:single
LICENSE_SCHEME=		solo
LICENSE_FILE=		BSD2CLAUSE:{{WRKSRC}}/COPYING

CPE_PRODUCT=		garbage_collector
CPE_VENDOR=		boehm-demers-weiser
FPC_EQUIVALENT=		devel/boehm-gc

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--enable-cplusplus
			--disable-static
			--disable-docs

SINGLE_JOB=		yes

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		1.3.0
PLIST_SUB=		GCVERSION=2.2.1
			GCMAJOR=2

[THREADED].DESCRIPTION=			Enable posix thread support
[THREADED].CONFIGURE_ARGS_OFF=		--disable-threads
[THREADED].CONFIGURE_ARGS_ON=		--enable-threads=posix
[THREADED].CONFIGURE_ENABLE_BOTH=	parallel-mark

[REDIRECT].DESCRIPTION=			Enable malloc redirection support
[REDIRECT].CONFIGURE_ENABLE_BOTH=	redirect-malloc

post-patch:
	@${REINPLACE_CMD} -e "s|%%PREFIX%%|${PREFIX}|g" ${WRKSRC}/doc/gc.man
	@${REINPLACE_CMD} -e "s|: install-dist_pkgdataDATA|: |" ${WRKSRC}/Makefile.in

post-install:
	${INSTALL_MAN} ${WRKSRC}/doc/gc.man ${STAGEDIR}${MANPREFIX}/man/man3/gc.3

[FILE:741:descriptions/desc.single]
The Boehm-Weiser garbage collection package, for C and C++ -
garbage collection and memory leak detection libraries.

A garbage collector is something which automatically frees malloc'd
memory for you by working out what parts of memory your program
no longer has pointers to.  As a result, garbage collectors can also
inform you of memory leaks (if they find memory they can free, it means
you have lost all of your pointers to it, but you didn't free it).

C programs may be linked against either of these, and should run (with
GC or leak detection) without change.  C++ programs must include a header
to use garbage collection, though leak detection should work without
such source code modifications.  See the man page and header files.


[FILE:94:distinfo]
bd112005563d787675163b5afff02c364fc8deb13a99c03f4e80fdf6608ad41e      1119725 gc-7.6.2.tar.gz


[FILE:529:manifests/plist.single]
include/
 gc.h
include/gc/
 cord.h
 cord_pos.h
 ec.h
 gc.h
 gc_allocator.h
 gc_backptr.h
 gc_config_macros.h
 gc_cpp.h
 gc_disclaim.h
 gc_gcj.h
 gc_inline.h
 gc_mark.h
 gc_pthread_redirects.h
 gc_tiny_fl.h
 gc_typed.h
 gc_version.h
 javaxfc.h
 leak_detector.h
 weakpointer.h
include/
 gc_cpp.h
lib/
 libcord.so
 libcord.so.%%SOMAJOR%%
 libcord.so.%%SOVERSION%%
 libgc.so
 libgc.so.%%GCMAJOR%%
 libgc.so.%%GCVERSION%%
 libgccpp.so
 libgccpp.so.%%SOMAJOR%%
 libgccpp.so.%%SOVERSION%%
lib/pkgconfig/bdw-gc.pc
share/man/man3/gc.3.gz


[FILE:767:patches/patch-configure]
--- configure.orig	2017-12-23 08:48:37 UTC
+++ configure
@@ -16172,6 +16172,9 @@ else
 fi
 
 case "${host}" in
+  *-freebsd*|*-dragonfly*)
+    gc_use_mmap=yes
+    ;;
   *-linux*)
     # FIXME: This seems to be no longer needed as configured in gcconfig.h
     #gc_use_mmap=yes
@@ -16431,7 +16434,7 @@ $as_echo "$as_me: WARNING: \"Only HP-UX
         THREADDLLIBS=-pthread
         AM_CFLAGS="$AM_CFLAGS -pthread"
         ;;
-     *-*-freebsd*)
+     *-*-freebsd*|*-*-dragonfly*)
         { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: \"FreeBSD does not yet fully support threads with Boehm GC.\"" >&5
 $as_echo "$as_me: WARNING: \"FreeBSD does not yet fully support threads with Boehm GC.\"" >&2;}
         $as_echo "#define GC_FREEBSD_THREADS 1" >>confdefs.h


[FILE:1949:patches/patch-doc_gc.man]
--- doc/gc.man.orig	2017-12-23 08:46:29 UTC
+++ doc/gc.man
@@ -11,7 +11,7 @@ void GC_free(void *ptr);
 void * GC_realloc(void *ptr, size_t size);
 .br
 .sp
-cc ... gc.a
+cc ... -lgc
 .LP
 .SH DESCRIPTION
 .I GC_malloc
@@ -88,6 +88,48 @@ This may temporarily write protect pages
 .LP
 Other facilities not discussed here include limited facilities to support incremental collection on machines without appropriate VM support, provisions for providing more explicit object layout information to the garbage collector, more direct support for ``weak'' pointers, support for ``abortable'' garbage collections during idle time, etc.
 .LP
+.SH "PORT INFORMATION"
+.LP
+In this (FreeBSD package) installation,
+.I gc.h
+and
+.I gc_cpp.h
+will probably be found in
+.I %%PREFIX%%/include,
+and the library in
+.I %%PREFIX%%/lib.
+.LP
+This library has been compiled as drop-in replacements
+for malloc and free (which is to say, all malloc
+calls will allocate garbage-collectable data).
+There is no need to include "gc.h" in your C files unless you want
+access to the debugging (and other) functions defined there,
+or unless you want to explicitly use
+.I GC_malloc_uncollectable
+for some allocations.
+Just link against them whenever you want either garbage
+collection or leak detection.
+.LP
+The C++ header file, "gc_cpp.h",
+.I is
+necessary for C++ programs, to obtain the appropriate
+definitions of the
+.I new
+and
+.I delete
+operators.
+The comments in both of these header files presently
+provide far better documentation
+for the package than this man page;
+look there for more information.
+.LP
+This library is compiled without (explicit) support
+for the experimental
+.I gc
+extension of
+.I g++.
+This may or may not make a difference.
+.LP
 .SH "SEE ALSO"
 The README and gc.h files in the distribution.  More detailed definitions of the functions exported by the collector are given there.  (The above list is not complete.)
 .LP


[FILE:459:patches/patch-dyn_load.c]
--- dyn_load.c.orig	2017-12-23 08:46:29 UTC
+++ dyn_load.c
@@ -426,7 +426,7 @@ GC_INNER GC_bool GC_register_main_static
 # endif
 #endif /* __GLIBC__ >= 2 || PLATFORM_ANDROID */
 
-#if (defined(FREEBSD) && __FreeBSD__ >= 7)
+#if defined __FreeBSD__ || defined __DragonFly__
   /* On the FreeBSD system, any target system at major version 7 shall   */
   /* have dl_iterate_phdr; therefore, we need not make it weak as below. */
 # ifndef HAVE_DL_ITERATE_PHDR


[FILE:365:patches/patch-tools_threadlibs.c]
--- tools/threadlibs.c.orig	2017-12-23 08:46:29 UTC
+++ tools/threadlibs.c
@@ -42,7 +42,7 @@ int main(void)
 #       ifdef GC_USE_DLOPEN_WRAP
           printf("-ldl ");
 #       endif
-#       if (__FREEBSD_version >= 500000)
+#       if defined __FreeBSD__ || defined __DragonFly__
           printf("-lpthread\n");
 #       else
           printf("-pthread\n");

