# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		lp_solve
VERSION=		5.5.2.14
KEYWORDS=		math
VARIANTS=		std
SDESC[std]=		Linear Programming Solver
HOMEPAGE=		https://github.com/lp-solve/lp_solve
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/lp-solve/lp_solve/releases/download/5.5.2.14/
DISTFILE[1]=		lp_solve_5.5.2.14_source.tar.gz:main
DISTFILE[2]=		lp_solve_5.5.2.14_bfp_LUSOL_source.tar.gz:main
DF_INDEX=		1 2
SPKGS[std]=		single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

DISTNAME=		lp_solve

LICENSE=		LGPL21:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		LGPL21:stock
LICENSE_AWK=		TERMS:"Release notes"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/lp_lib.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		math/lp_solve

post-patch:
	${REINPLACE_CMD} -e "s/ FALSE/ LP_FALSE/; s/ TRUE/ LP_TRUE/" \
		${WRKSRC}/shared/commonlib.[ch] ${WRKSRC}/shared/myblas.c

pre-build:
	${FIND} ${WRKSRC} -name "ccc" | ${XARGS} ${REINPLACE_CMD} -e \
		"s|^c=.*$$|c='${CC}'|g ; \
		 s|^opts=.*$$|opts='${CFLAGS}'|g ; \
		 s|-fpic|-fPIC|g${SEDINSTR}"

do-build:
	(cd ${WRKSRC}/lp_solve  && ${SETENV} TMPDIR="${WRKDIR}" ${SH} -x ccc)
	(cd ${WRKSRC}/demo      && ${SETENV} TMPDIR="${WRKDIR}" ${SH} -x ccc)
	(cd ${WRKSRC}/lpsolve55 && ${SETENV} TMPDIR="${WRKDIR}" ${SH} -x ccc)

do-install:
	${INSTALL_PROGRAM} ${WRKSRC}/lp_solve/bin/ux64/lp_solve \
		${STAGEDIR}${PREFIX}/bin
	${INSTALL_DATA} ${WRKSRC}/lpsolve55/bin/ux64/liblpsolve55.a \
		${STAGEDIR}${PREFIX}/lib
	${INSTALL_LIB} ${WRKSRC}/lpsolve55/bin/ux64/liblpsolve55.so \
		${STAGEDIR}${PREFIX}/lib
	${LN} -sf liblpsolve55.so ${STAGEDIR}${PREFIX}/lib/liblpsolve55.so.1
	${MKDIR} ${STAGEDIR}${PREFIX}/include/lpsolve
.for i in declare.h fortify.h ini.h lp_*.h lpkit.h lpsolve.h ufortify.h yacc_read.h
	${INSTALL_DATA} ${WRKSRC}/${i} ${STAGEDIR}${PREFIX}/include/lpsolve
.endfor

[FILE:172:descriptions/desc.single]
This is the lp_solve, A free linear programming solver that can process
standard MPL format, LP format or be accessed directly from your code
via API calls from a library.


[FILE:230:distinfo]
a4bbdc881128bdbe920a38e134c9add5db47f9aa814a0a018ba940b0f3c278c3       565652 lp_solve_5.5.2.14_source.tar.gz
28ec5c39e87f934d5f57d4a7f6ce22745cd359319191be2638c5490141a08fdf       106499 lp_solve_5.5.2.14_bfp_LUSOL_source.tar.gz


[FILE:428:manifests/plist.single]
bin/lp_solve
include/lpsolve/
 declare.h
 fortify.h
 ini.h
 lp_Hash.h
 lp_MDO.h
 lp_MPS.h
 lp_SOS.h
 lp_bit.h
 lp_crash.h
 lp_explicit.h
 lp_fortify.h
 lp_lib.h
 lp_matrix.h
 lp_mipbb.h
 lp_presolve.h
 lp_price.h
 lp_pricePSE.h
 lp_report.h
 lp_rlp.h
 lp_scale.h
 lp_simplex.h
 lp_solveDLL.h
 lp_types.h
 lp_utils.h
 lp_wlp.h
 lpkit.h
 lpsolve.h
 ufortify.h
 yacc_read.h
lib/
 liblpsolve55.a
 liblpsolve55.so
 liblpsolve55.so.1


[FILE:595:patches/patch-shared_commonlib.c]
--- shared/commonlib.c.orig	2025-03-22 17:51:08 UTC
+++ shared/commonlib.c
@@ -6,7 +6,7 @@
 #elif defined EnhTime
 # include <windows.h>
 #else
-# include <sys/timeb.h>
+# include <sys/time.h>
 #endif
 
 #include <stdlib.h>
@@ -844,10 +844,12 @@ double timeNow(void)
   }
   return( timeBase + (double) now.QuadPart/(double) freq.QuadPart );
 #else
-  struct timeb buf;
+  struct timeval tv;
+  struct timezone tz;
+
+  gettimeofday(&tv, &tz);
+  return((double)tv.tv_sec+((double)tv.tv_usec)/1000000.0);
 
-  ftime(&buf);
-  return((double)buf.time+((double) buf.millitm)/1000.0);
 #endif
 }
 


[FILE:116:files/special.mk]
# Strip -ldl from all platforms except linux

.if "${OPSYS}" == "Linux"
SEDINSTR=
.else
SEDINSTR=; s|-ldl||g
.endif

