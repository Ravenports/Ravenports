# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libparserutils
VERSION=		0.2.5
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Library for building efficient parsers
HOMEPAGE=		https://www.netsurf-browser.org/projects/libparserutils/
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://download.netsurf-browser.org/libs/releases/
DISTFILE[1]=		libparserutils-0.2.5-src.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		netsurf-buildsystem:single:standard

USES=			gmake perl:build pkgconfig

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/libparserutils

MAKE_ENV=		COMPONENT_TYPE="lib-shared"

INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		0.2.5

CFLAGS=			-DWITHOUT_ICONV_FILTER

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libparserutils.so.0.2.5

[FILE:190:descriptions/desc.single]
LibParserUtils is a library for building efficient parsers, written in C. 
It was developed as part of the NetSurf project and is available for use 
by other software under the MIT licence.


[FILE:110:distinfo]
317ed5c718f17927b5721974bae5de32c3fd6d055db131ad31b4312a032ed139        74518 libparserutils-0.2.5-src.tar.gz


[FILE:350:manifests/plist.single]
include/parserutils/
 errors.h
 functypes.h
 parserutils.h
 types.h
include/parserutils/charset/
 codec.h
 mibenum.h
 utf16.h
 utf8.h
include/parserutils/input/inputstream.h
include/parserutils/utils/
 buffer.h
 stack.h
 vector.h
lib/
 libparserutils.so
 libparserutils.so.%%SOMAJOR%%
 libparserutils.so.%%SOVERSION%%
lib/pkgconfig/libparserutils.pc


[FILE:504:patches/patch-src_charset_aliases.c]
--- src/charset/aliases.c.orig	2018-08-22 13:25:07 UTC
+++ src/charset/aliases.c
@@ -49,8 +49,12 @@ static int parserutils_charset_alias_mat
                 
                 if (key_left == 0)
                         break;
-                
+               
+#ifdef __NetBSD__
+                cmpret = tolower((int)*s_key) - *s_alias;
+#else 
                 cmpret = tolower(*s_key) - *s_alias;
+#endif
                 
                 if (cmpret != 0) {
                         return cmpret;

