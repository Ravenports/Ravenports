# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pipdeptree
VERSION=		2.5.0
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Utility to show package dependency tree (3.10)
SDESC[v11]=		Utility to show package dependency tree (3.11)
HOMEPAGE=		none
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/48/c9/8bbc6ea20543b20c8c1a004bbbdf435aa1ec67ff6fc6a0187de2b7575ab2
DISTFILE[1]=		pipdeptree-2.5.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		pipdeptree-2.5.0.dist-info

GENERATED=		yes

[PY310].USES_ON=			python:py310,wheel

[PY311].USES_ON=			python:v11,wheel

[FILE:3031:descriptions/desc.single]
# pipdeptree

[check]
[![pre-commit.ci
status]](https://results.pre-commit.ci/latest/github/tox-dev/pipdeptree/main)

`pipdeptree` is a command line utility for displaying the installed python
packages in form of a dependency tree. It
works for packages installed globally on a machine as well as in a
virtualenv. Since `pip freeze` shows all dependencies
as a flat list, finding out which are the top level packages and which
packages do they depend on requires some effort.
It\'s also tedious to resolve conflicting dependencies that could have been
installed because older version of `pip`
didn\'t have true dependency resolution[^1]. `pipdeptree` can help here by
identifying conflicting dependencies
installed in the environment.R

To some extent, `pipdeptree` is inspired by the `lein deps :tree` command
of [Leiningen].

## Installation

`bash
pip install pipdeptree
`

pipdeptree has been tested with Python versions `3.7`, `3.8`, `3.9` and
`3.10`.

## Running in virtualenvs

`New in ver. 2.0.0`

If you want to run pipdeptree in the context of a particular virtualenv,
you can specify the `--python` option. Note
that this capability has been recently added in version `2.0.0`.

Alternately, you may also install pipdeptree inside the virtualenv and then
run it from there.

## Usage and examples

To give you a brief idea, here is the output of `pipdeptree` compared with
`pip freeze`:

```bash
$ pip freeze
Flask==0.10.1
itsdangerous==0.24
Jinja2==2.11.2
-e
git+git@github.com:naiquevin/lookupy.git@cdbe30c160e1c29802df75e145ea4ad903c05386#egg=Lookupy
MarkupSafe==0.22
pipdeptree @ file:///private/tmp/pipdeptree-2.0.0b1-py3-none-any.whl
Werkzeug==0.11.2
```

And now see what `pipdeptree` outputs,

```bash
$ pipdeptree
Warning!!! Possibly conflicting dependencies found:
* Jinja2==2.11.2
 - MarkupSafe [required: >=0.23, installed: 0.22]
------------------------------------------------------------------------
Flask==0.10.1
  - itsdangerous [required: >=0.21, installed: 0.24]
  - Jinja2 [required: >=2.4, installed: 2.11.2]
    - MarkupSafe [required: >=0.23, installed: 0.22]
  - Werkzeug [required: >=0.7, installed: 0.11.2]
Lookupy==0.1
pipdeptree==2.0.0b1
  - pip [required: >=6.0.0, installed: 20.1.1]
setuptools==47.1.1
wheel==0.34.2
```

## Is it possible to find out why a particular package is installed?

`New in ver. 0.5.0`

Yes, there\'s a `--reverse` (or simply `-r`) flag for this. To find out
which packages depend on a particular
package(s), it can be combined with `--packages` option as follows:

```bash
$ pipdeptree --reverse --packages itsdangerous,MarkupSafe
Warning!!! Possibly conflicting dependencies found:
* Jinja2==2.11.2
 - MarkupSafe [required: >=0.23, installed: 0.22]
------------------------------------------------------------------------
itsdangerous==0.24
  - Flask==0.10.1 [requires: itsdangerous>=0.21]
MarkupSafe==0.22
  - Jinja2==2.11.2 [requires: MarkupSafe>=0.23]
    - Flask==0.10.1 [requires: Jinja2>=2.4]
```

## What\'s with the warning about conflicting dependencies?


[FILE:112:distinfo]
cd167f38264c44ed41d3de0e8d7f47d4fbcbe6592587266e0219b8c056416c6b        17095 pipdeptree-2.5.0-py3-none-any.whl

