# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		llvm-libunwind
VERSION=		17.0.3
KEYWORDS=		lang devel
VARIANTS=		standard
SDESC[standard]=	LLVM version of libunwind library
HOMEPAGE=		https://github.com/llvm-mirror/libunwind
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.3/
DISTFILE[1]=		libunwind-17.0.3.src.tar.xz:main
DISTFILE[2]=		libcxx-17.0.3.src.tar.xz:main
DISTFILE[3]=		llvm-17.0.3.src.tar.xz:main
DISTFILE[4]=		cmake-17.0.3.src.tar.xz:main
DISTFILE[5]=		runtimes-17.0.3.src.tar.xz:main
DF_INDEX=		1 2 3 4 5
SPKGS[standard]=	complete
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		llvm:dev:standard

USES=			cpe cmake cclibs:primary

DISTNAME=		libunwind-17.0.3.src

LICENSE=		CUSTOM1:primary
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
CPE_PRODUCT=		llvm
CPE_VENDOR=		llvm

SOVERSION=		1.0

CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/*.h ${STAGEDIR}${PREFIX}/include/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libunwind.${LIBEXT}

post-extract:
	# LIBUNWIND_LIBCXX_PATH is ignored (Another llvm 12.0.0 issue)
	${MV} ${WRKDIR}/libcxx-17.0.3.src ${WRKDIR}/libcxx
	# can't build c++ or libunwind separately anymore
	${MV} ${WRKDIR}/llvm-17.0.3.src ${WRKDIR}/llvm
	# Install more cmake functions
	${CP} ${WRKDIR}/cmake-17.0.3.src/Modules/* \
		${WRKSRC}/cmake/Modules/
	${CP} ${WRKDIR}/runtimes-17.0.3.src/cmake/Modules/* \
		${WRKSRC}/cmake/Modules/

[FILE:618:descriptions/desc.primary]
libunwind is an implementation of the interface defined by the HP libunwind
project. It was contributed by Apple as a way to enable clang++ to port to
platforms that do not have a system unwinder. It is intended to be a small
and fast implementation of the ABI, leaving off some features of HP's
libunwind that never materialized (e.g. remote unwinding).

The unwinder has two levels of API. The high level APIs are the _Unwind_*
functions which implement functionality required by __cxa_* exception
functions. The low level APIs are the unw_* functions which are an
interface defined by the old HP libunwind project.


[FILE:517:distinfo]
fbd663c0bdbbb1be7d628529394339c4c3ef9cfd9f02779bb15e540ec9821844       115056 libunwind-17.0.3.src.tar.xz
8bde61132a396ae33df4f8c4ba092a3a0edd0139318e2f7c64ca522b26842584      3945844 libcxx-17.0.3.src.tar.xz
18fa6b5f172ddf5af9b3aedfdb58ba070fd07fc45e7e589c46c350b3cc066bc1     59294480 llvm-17.0.3.src.tar.xz
54fc534f0da09088adbaa6c3bfc9899a500153b96e60c2fb9322a7aa37b1027a         8712 cmake-17.0.3.src.tar.xz
4bb3ab75e2b085b32fb2c9f5412343825598bde015986db6d3774398a539703b         6244 runtimes-17.0.3.src.tar.xz


[FILE:59:manifests/plist.primary]
lib/
 libunwind.so.%%SOMAJOR%%
 libunwind.so.%%SOVERSION%%


[FILE:223:manifests/plist.dev]
include/
 __libunwind_config.h
 libunwind.h
 libunwind.modulemap
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
include/mach-o/
 compact_unwind_encoding.h
 compact_unwind_encoding.modulemap
lib/
 libunwind.a
 libunwind.so

