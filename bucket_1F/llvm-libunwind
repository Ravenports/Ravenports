# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		llvm-libunwind
VERSION=		20.1.6
KEYWORDS=		lang devel
VARIANTS=		std
SDESC[std]=		LLVM version of libunwind library
HOMEPAGE=		https://github.com/llvm-mirror/libunwind
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.6/
DISTFILE[1]=		libunwind-20.1.6.src.tar.xz:main
DISTFILE[2]=		libcxx-20.1.6.src.tar.xz:main
DISTFILE[3]=		llvm-20.1.6.src.tar.xz:main
DISTFILE[4]=		cmake-20.1.6.src.tar.xz:main
DISTFILE[5]=		runtimes-20.1.6.src.tar.xz:main
DIST_SUBDIR=		llvm20
DF_INDEX=		1 2 3 4 5
SPKGS[std]=		set
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		llvm:dev:std

USES=			cpe cmake cclibs:primary

DISTNAME=		libunwind-20.1.6.src

LICENSE=		CUSTOM1:primary
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
CPE_PRODUCT=		llvm
CPE_VENDOR=		llvm

SOVERSION=		1.0

CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/*.h ${STAGEDIR}${PREFIX}/include/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libunwind.${LIBEXT}

post-extract:
	# LIBUNWIND_LIBCXX_PATH is ignored (Another llvm 12.0.0 issue)
	${MV} ${WRKDIR}/libcxx-20.1.6.src ${WRKDIR}/libcxx
	# can't build c++ or libunwind separately anymore
	${MV} ${WRKDIR}/llvm-20.1.6.src ${WRKDIR}/llvm
	# Install more cmake functions
	${CP} ${WRKDIR}/cmake-20.1.6.src/Modules/* \
		${WRKSRC}/cmake/Modules/
	${CP} ${WRKDIR}/runtimes-20.1.6.src/cmake/Modules/* \
		${WRKSRC}/cmake/Modules/

[FILE:618:descriptions/desc.primary]
libunwind is an implementation of the interface defined by the HP libunwind
project. It was contributed by Apple as a way to enable clang++ to port to
platforms that do not have a system unwinder. It is intended to be a small
and fast implementation of the ABI, leaving off some features of HP's
libunwind that never materialized (e.g. remote unwinding).

The unwinder has two levels of API. The high level APIs are the _Unwind_*
functions which implement functionality required by __cxa_* exception
functions. The low level APIs are the unw_* functions which are an
interface defined by the old HP libunwind project.


[FILE:552:distinfo]
bdf90d0428c2cb7b763677c0932509b6dca9f210183e9e73c129ab32d7b658ef       120748 llvm20/libunwind-20.1.6.src.tar.xz
93f6523c0bc3295c540284eae5a926ed78d678c75217ab24273abb10029003e4      4455876 llvm20/libcxx-20.1.6.src.tar.xz
f09e304ca98bb809f492ec34f94f587361b4b0d06ed783fb3a41e7fb218e47a1     72696956 llvm20/llvm-20.1.6.src.tar.xz
b4b3efa5d5b01b3f211f1ba326bb6f0c318331f828202d332c95b7f30fca5f8c         8644 llvm20/cmake-20.1.6.src.tar.xz
fde825adf348b4cb3b778d8d0409a1ecab2ac0d5ae27031a4530756e909db2d8         8332 llvm20/runtimes-20.1.6.src.tar.xz


[FILE:59:manifests/plist.primary]
lib/
 libunwind.so.%%SOMAJOR%%
 libunwind.so.%%SOVERSION%%


[FILE:186:manifests/plist.dev]
include/
 __libunwind_config.h
 libunwind.h
 libunwind.modulemap
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
include/mach-o/compact_unwind_encoding.h
lib/
 libunwind.a
 libunwind.so

