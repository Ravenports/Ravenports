# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		llvm-libunwind
VERSION=		19.1.7
KEYWORDS=		lang devel
VARIANTS=		std
SDESC[std]=		LLVM version of libunwind library
HOMEPAGE=		https://github.com/llvm-mirror/libunwind
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.7/
DISTFILE[1]=		libunwind-19.1.7.src.tar.xz:main
DISTFILE[2]=		libcxx-19.1.7.src.tar.xz:main
DISTFILE[3]=		llvm-19.1.7.src.tar.xz:main
DISTFILE[4]=		cmake-19.1.7.src.tar.xz:main
DISTFILE[5]=		runtimes-19.1.7.src.tar.xz:main
DF_INDEX=		1 2 3 4 5
SPKGS[std]=		set
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		llvm:dev:std

USES=			cpe cmake cclibs:primary

DISTNAME=		libunwind-19.1.7.src

LICENSE=		CUSTOM1:primary
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
CPE_PRODUCT=		llvm
CPE_VENDOR=		llvm

SOVERSION=		1.0

CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/*.h ${STAGEDIR}${PREFIX}/include/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libunwind.${LIBEXT}

post-extract:
	# LIBUNWIND_LIBCXX_PATH is ignored (Another llvm 12.0.0 issue)
	${MV} ${WRKDIR}/libcxx-19.1.7.src ${WRKDIR}/libcxx
	# can't build c++ or libunwind separately anymore
	${MV} ${WRKDIR}/llvm-19.1.7.src ${WRKDIR}/llvm
	# Install more cmake functions
	${CP} ${WRKDIR}/cmake-19.1.7.src/Modules/* \
		${WRKSRC}/cmake/Modules/
	${CP} ${WRKDIR}/runtimes-19.1.7.src/cmake/Modules/* \
		${WRKSRC}/cmake/Modules/

[FILE:618:descriptions/desc.primary]
libunwind is an implementation of the interface defined by the HP libunwind
project. It was contributed by Apple as a way to enable clang++ to port to
platforms that do not have a system unwinder. It is intended to be a small
and fast implementation of the ABI, leaving off some features of HP's
libunwind that never materialized (e.g. remote unwinding).

The unwinder has two levels of API. The high level APIs are the _Unwind_*
functions which implement functionality required by __cxa_* exception
functions. The low level APIs are the unw_* functions which are an
interface defined by the old HP libunwind project.


[FILE:517:distinfo]
10e650f436bc416674f01b5e01177405886f4d0f0b2568c6808044eacad52ea0       120004 libunwind-19.1.7.src.tar.xz
b736109650ffc750dbdc506483347b3713ded9d0300f48432b820ad66b6a9052      4718816 libcxx-19.1.7.src.tar.xz
96f833c6ad99a3e8e1d9aca5f439b8fd2c7efdcf83b664e0af1c0712c5315910     67828200 llvm-19.1.7.src.tar.xz
11c5a28f90053b0c43d0dec3d0ad579347fc277199c005206b963c19aae514e3         9300 cmake-19.1.7.src.tar.xz
404c54c2df45a307331eba1372917ec480addf3b77ca9943ed4d7ea445efb08f         7224 runtimes-19.1.7.src.tar.xz


[FILE:59:manifests/plist.primary]
lib/
 libunwind.so.%%SOMAJOR%%
 libunwind.so.%%SOVERSION%%


[FILE:186:manifests/plist.dev]
include/
 __libunwind_config.h
 libunwind.h
 libunwind.modulemap
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
include/mach-o/compact_unwind_encoding.h
lib/
 libunwind.a
 libunwind.so

