# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		llvm-libunwind
VERSION=		20.1.4
KEYWORDS=		lang devel
VARIANTS=		std
SDESC[std]=		LLVM version of libunwind library
HOMEPAGE=		https://github.com/llvm-mirror/libunwind
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.4/
DISTFILE[1]=		libunwind-20.1.4.src.tar.xz:main
DISTFILE[2]=		libcxx-20.1.4.src.tar.xz:main
DISTFILE[3]=		llvm-20.1.4.src.tar.xz:main
DISTFILE[4]=		cmake-20.1.4.src.tar.xz:main
DISTFILE[5]=		runtimes-20.1.4.src.tar.xz:main
DIST_SUBDIR=		llvm20
DF_INDEX=		1 2 3 4 5
SPKGS[std]=		set
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		llvm:dev:std

USES=			cpe cmake cclibs:primary

DISTNAME=		libunwind-20.1.4.src

LICENSE=		CUSTOM1:primary
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
CPE_PRODUCT=		llvm
CPE_VENDOR=		llvm

SOVERSION=		1.0

CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/*.h ${STAGEDIR}${PREFIX}/include/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libunwind.${LIBEXT}

post-extract:
	# LIBUNWIND_LIBCXX_PATH is ignored (Another llvm 12.0.0 issue)
	${MV} ${WRKDIR}/libcxx-20.1.4.src ${WRKDIR}/libcxx
	# can't build c++ or libunwind separately anymore
	${MV} ${WRKDIR}/llvm-20.1.4.src ${WRKDIR}/llvm
	# Install more cmake functions
	${CP} ${WRKDIR}/cmake-20.1.4.src/Modules/* \
		${WRKSRC}/cmake/Modules/
	${CP} ${WRKDIR}/runtimes-20.1.4.src/cmake/Modules/* \
		${WRKSRC}/cmake/Modules/

[FILE:618:descriptions/desc.primary]
libunwind is an implementation of the interface defined by the HP libunwind
project. It was contributed by Apple as a way to enable clang++ to port to
platforms that do not have a system unwinder. It is intended to be a small
and fast implementation of the ABI, leaving off some features of HP's
libunwind that never materialized (e.g. remote unwinding).

The unwinder has two levels of API. The high level APIs are the _Unwind_*
functions which implement functionality required by __cxa_* exception
functions. The low level APIs are the unw_* functions which are an
interface defined by the old HP libunwind project.


[FILE:552:distinfo]
6be6213cdb628af13b29c6c45a1eb8f2181fa1590cffce6e7f7ba7508cfccede       120836 llvm20/libunwind-20.1.4.src.tar.xz
435890bbcda9b0076ccc843949d34d08598faf72a68e2cec6740a72735f1d394      4459608 llvm20/libcxx-20.1.4.src.tar.xz
98a95e4a86dd50d0177ae058365e08da0569ad843e829a68489a0d217e5c4411     72705040 llvm20/llvm-20.1.4.src.tar.xz
d6fe52e4fd709590284127cfef143f67ff1b917865f1b4731f6600c330bf9c27         8648 llvm20/cmake-20.1.4.src.tar.xz
5a559ab91fe5963c69f9b7838f364e0ab72e1a6cca9b9cbadf8426f93a203a9c         8336 llvm20/runtimes-20.1.4.src.tar.xz


[FILE:59:manifests/plist.primary]
lib/
 libunwind.so.%%SOMAJOR%%
 libunwind.so.%%SOVERSION%%


[FILE:186:manifests/plist.dev]
include/
 __libunwind_config.h
 libunwind.h
 libunwind.modulemap
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
include/mach-o/compact_unwind_encoding.h
lib/
 libunwind.a
 libunwind.so

