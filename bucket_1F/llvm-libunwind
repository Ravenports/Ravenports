# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		llvm-libunwind
VERSION=		19.1.3
KEYWORDS=		lang devel
VARIANTS=		std
SDESC[std]=		LLVM version of libunwind library
HOMEPAGE=		https://github.com/llvm-mirror/libunwind
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.3/
DISTFILE[1]=		libunwind-19.1.3.src.tar.xz:main
DISTFILE[2]=		libcxx-19.1.3.src.tar.xz:main
DISTFILE[3]=		llvm-19.1.3.src.tar.xz:main
DISTFILE[4]=		cmake-19.1.3.src.tar.xz:main
DISTFILE[5]=		runtimes-19.1.3.src.tar.xz:main
DF_INDEX=		1 2 3 4 5
SPKGS[std]=		set
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		llvm:dev:std

USES=			cpe cmake cclibs:primary

DISTNAME=		libunwind-19.1.3.src

LICENSE=		CUSTOM1:primary
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
CPE_PRODUCT=		llvm
CPE_VENDOR=		llvm

SOVERSION=		1.0

CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/*.h ${STAGEDIR}${PREFIX}/include/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libunwind.${LIBEXT}

post-extract:
	# LIBUNWIND_LIBCXX_PATH is ignored (Another llvm 12.0.0 issue)
	${MV} ${WRKDIR}/libcxx-19.1.3.src ${WRKDIR}/libcxx
	# can't build c++ or libunwind separately anymore
	${MV} ${WRKDIR}/llvm-19.1.3.src ${WRKDIR}/llvm
	# Install more cmake functions
	${CP} ${WRKDIR}/cmake-19.1.3.src/Modules/* \
		${WRKSRC}/cmake/Modules/
	${CP} ${WRKDIR}/runtimes-19.1.3.src/cmake/Modules/* \
		${WRKSRC}/cmake/Modules/

[FILE:618:descriptions/desc.primary]
libunwind is an implementation of the interface defined by the HP libunwind
project. It was contributed by Apple as a way to enable clang++ to port to
platforms that do not have a system unwinder. It is intended to be a small
and fast implementation of the ABI, leaving off some features of HP's
libunwind that never materialized (e.g. remote unwinding).

The unwinder has two levels of API. The high level APIs are the _Unwind_*
functions which implement functionality required by __cxa_* exception
functions. The low level APIs are the unw_* functions which are an
interface defined by the old HP libunwind project.


[FILE:517:distinfo]
88b4dae401349293ac58308cdf80af39acc8e22e51e1419a79782a3731ff59fb       120020 libunwind-19.1.3.src.tar.xz
cd5680e5ee4803bbe5c4007e4c546b7263525466049832c630c3fd5fc027468c      4745616 libcxx-19.1.3.src.tar.xz
11e166d0f291a53cfc6b9e58abd1d7954de32ebc37672987612d3b7075d88411     67810976 llvm-19.1.3.src.tar.xz
4c55aa6e77fc0e8b759bca2c79ee4fd0ea8c7fab06eeea09310ae1e954a0af5e         9300 cmake-19.1.3.src.tar.xz
63966eaa7d0e70773eacbe5b8871c5d8a98e2ccf3cf6daa3c2018fcdf6501f11         7228 runtimes-19.1.3.src.tar.xz


[FILE:59:manifests/plist.primary]
lib/
 libunwind.so.%%SOMAJOR%%
 libunwind.so.%%SOVERSION%%


[FILE:186:manifests/plist.dev]
include/
 __libunwind_config.h
 libunwind.h
 libunwind.modulemap
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
include/mach-o/compact_unwind_encoding.h
lib/
 libunwind.a
 libunwind.so

