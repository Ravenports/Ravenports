# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		llvm-libunwind
VERSION=		17.0.5
KEYWORDS=		lang devel
VARIANTS=		standard
SDESC[standard]=	LLVM version of libunwind library
HOMEPAGE=		https://github.com/llvm-mirror/libunwind
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.5/
DISTFILE[1]=		libunwind-17.0.5.src.tar.xz:main
DISTFILE[2]=		libcxx-17.0.5.src.tar.xz:main
DISTFILE[3]=		llvm-17.0.5.src.tar.xz:main
DISTFILE[4]=		cmake-17.0.5.src.tar.xz:main
DISTFILE[5]=		runtimes-17.0.5.src.tar.xz:main
DF_INDEX=		1 2 3 4 5
SPKGS[standard]=	complete
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		llvm:dev:standard

USES=			cpe cmake cclibs:primary

DISTNAME=		libunwind-17.0.5.src

LICENSE=		CUSTOM1:primary
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
CPE_PRODUCT=		llvm
CPE_VENDOR=		llvm

SOVERSION=		1.0

CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/*.h ${STAGEDIR}${PREFIX}/include/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libunwind.${LIBEXT}

post-extract:
	# LIBUNWIND_LIBCXX_PATH is ignored (Another llvm 12.0.0 issue)
	${MV} ${WRKDIR}/libcxx-17.0.5.src ${WRKDIR}/libcxx
	# can't build c++ or libunwind separately anymore
	${MV} ${WRKDIR}/llvm-17.0.5.src ${WRKDIR}/llvm
	# Install more cmake functions
	${CP} ${WRKDIR}/cmake-17.0.5.src/Modules/* \
		${WRKSRC}/cmake/Modules/
	${CP} ${WRKDIR}/runtimes-17.0.5.src/cmake/Modules/* \
		${WRKSRC}/cmake/Modules/

[FILE:618:descriptions/desc.primary]
libunwind is an implementation of the interface defined by the HP libunwind
project. It was contributed by Apple as a way to enable clang++ to port to
platforms that do not have a system unwinder. It is intended to be a small
and fast implementation of the ABI, leaving off some features of HP's
libunwind that never materialized (e.g. remote unwinding).

The unwinder has two levels of API. The high level APIs are the _Unwind_*
functions which implement functionality required by __cxa_* exception
functions. The low level APIs are the unw_* functions which are an
interface defined by the old HP libunwind project.


[FILE:517:distinfo]
04a6ff061dde2204453d4c9e089e91df64db7987516a1a3bcc9116d270869a3b       115092 libunwind-17.0.5.src.tar.xz
18c5d9413a63aa624c48273de4cce6b5e288b56a7a0b3cf4ecd93954255f4ddf      3955896 libcxx-17.0.5.src.tar.xz
569526fd017478eee51518a79c064442c0499269c6a6de586e409d91282afd04     59298032 llvm-17.0.5.src.tar.xz
734ea7767ebda642d22c878024c9fb14ae0521d048bdba54e463bb73260adaef         8712 cmake-17.0.5.src.tar.xz
624ce23776dfb730e0b960091ba795c5ce26a0a7a0bea2e575804f1a5ac027e6         6244 runtimes-17.0.5.src.tar.xz


[FILE:59:manifests/plist.primary]
lib/
 libunwind.so.%%SOMAJOR%%
 libunwind.so.%%SOVERSION%%


[FILE:223:manifests/plist.dev]
include/
 __libunwind_config.h
 libunwind.h
 libunwind.modulemap
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
include/mach-o/
 compact_unwind_encoding.h
 compact_unwind_encoding.modulemap
lib/
 libunwind.a
 libunwind.so

