# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		llvm-libunwind
VERSION=		17.0.6
KEYWORDS=		lang devel
VARIANTS=		standard
SDESC[standard]=	LLVM version of libunwind library
HOMEPAGE=		https://github.com/llvm-mirror/libunwind
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/
DISTFILE[1]=		libunwind-17.0.6.src.tar.xz:main
DISTFILE[2]=		libcxx-17.0.6.src.tar.xz:main
DISTFILE[3]=		llvm-17.0.6.src.tar.xz:main
DISTFILE[4]=		cmake-17.0.6.src.tar.xz:main
DISTFILE[5]=		runtimes-17.0.6.src.tar.xz:main
DF_INDEX=		1 2 3 4 5
SPKGS[standard]=	complete
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		llvm:dev:standard

USES=			cpe cmake cclibs:primary

DISTNAME=		libunwind-17.0.6.src

LICENSE=		CUSTOM1:primary
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
CPE_PRODUCT=		llvm
CPE_VENDOR=		llvm

SOVERSION=		1.0

CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/*.h ${STAGEDIR}${PREFIX}/include/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libunwind.${LIBEXT}

post-extract:
	# LIBUNWIND_LIBCXX_PATH is ignored (Another llvm 12.0.0 issue)
	${MV} ${WRKDIR}/libcxx-17.0.6.src ${WRKDIR}/libcxx
	# can't build c++ or libunwind separately anymore
	${MV} ${WRKDIR}/llvm-17.0.6.src ${WRKDIR}/llvm
	# Install more cmake functions
	${CP} ${WRKDIR}/cmake-17.0.6.src/Modules/* \
		${WRKSRC}/cmake/Modules/
	${CP} ${WRKDIR}/runtimes-17.0.6.src/cmake/Modules/* \
		${WRKSRC}/cmake/Modules/

[FILE:618:descriptions/desc.primary]
libunwind is an implementation of the interface defined by the HP libunwind
project. It was contributed by Apple as a way to enable clang++ to port to
platforms that do not have a system unwinder. It is intended to be a small
and fast implementation of the ABI, leaving off some features of HP's
libunwind that never materialized (e.g. remote unwinding).

The unwinder has two levels of API. The high level APIs are the _Unwind_*
functions which implement functionality required by __cxa_* exception
functions. The low level APIs are the unw_* functions which are an
interface defined by the old HP libunwind project.


[FILE:517:distinfo]
9e7535a353aa862730b4ba38df42e06f6856b40c4cc51b57f27b5046dc21d70d       115088 libunwind-17.0.6.src.tar.xz
edf7b12046ada95c63bd6c57099e8452f68f8be0affd9af96df16fd48e632ec1      3946532 libcxx-17.0.6.src.tar.xz
b638167da139126ca11917b6880207cc6e8f9d1cbb1a48d87d017f697ef78188     59298244 llvm-17.0.6.src.tar.xz
807f069c54dc20cb47b21c1f6acafdd9c649f3ae015609040d6182cab01140f4         8712 cmake-17.0.6.src.tar.xz
eb58b5be78741c6a3429f3b58910e81aa001d0720627b932595e1f39ed93075a         6240 runtimes-17.0.6.src.tar.xz


[FILE:59:manifests/plist.primary]
lib/
 libunwind.so.%%SOMAJOR%%
 libunwind.so.%%SOVERSION%%


[FILE:223:manifests/plist.dev]
include/
 __libunwind_config.h
 libunwind.h
 libunwind.modulemap
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
include/mach-o/
 compact_unwind_encoding.h
 compact_unwind_encoding.modulemap
lib/
 libunwind.a
 libunwind.so

