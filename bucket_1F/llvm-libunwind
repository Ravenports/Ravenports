# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		llvm-libunwind
VERSION=		18.1.4
KEYWORDS=		lang devel
VARIANTS=		standard
SDESC[standard]=	LLVM version of libunwind library
HOMEPAGE=		https://github.com/llvm-mirror/libunwind
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.4/
DISTFILE[1]=		libunwind-18.1.4.src.tar.xz:main
DISTFILE[2]=		libcxx-18.1.4.src.tar.xz:main
DISTFILE[3]=		llvm-18.1.4.src.tar.xz:main
DISTFILE[4]=		cmake-18.1.4.src.tar.xz:main
DISTFILE[5]=		runtimes-18.1.4.src.tar.xz:main
DF_INDEX=		1 2 3 4 5
SPKGS[standard]=	complete
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		llvm:dev:standard

USES=			cpe cmake cclibs:primary

DISTNAME=		libunwind-18.1.4.src

LICENSE=		CUSTOM1:primary
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
CPE_PRODUCT=		llvm
CPE_VENDOR=		llvm

SOVERSION=		1.0

CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/*.h ${STAGEDIR}${PREFIX}/include/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libunwind.${LIBEXT}

post-extract:
	# LIBUNWIND_LIBCXX_PATH is ignored (Another llvm 12.0.0 issue)
	${MV} ${WRKDIR}/libcxx-18.1.4.src ${WRKDIR}/libcxx
	# can't build c++ or libunwind separately anymore
	${MV} ${WRKDIR}/llvm-18.1.4.src ${WRKDIR}/llvm
	# Install more cmake functions
	${CP} ${WRKDIR}/cmake-18.1.4.src/Modules/* \
		${WRKSRC}/cmake/Modules/
	${CP} ${WRKDIR}/runtimes-18.1.4.src/cmake/Modules/* \
		${WRKSRC}/cmake/Modules/

[FILE:618:descriptions/desc.primary]
libunwind is an implementation of the interface defined by the HP libunwind
project. It was contributed by Apple as a way to enable clang++ to port to
platforms that do not have a system unwinder. It is intended to be a small
and fast implementation of the ABI, leaving off some features of HP's
libunwind that never materialized (e.g. remote unwinding).

The unwinder has two levels of API. The high level APIs are the _Unwind_*
functions which implement functionality required by __cxa_* exception
functions. The low level APIs are the unw_* functions which are an
interface defined by the old HP libunwind project.


[FILE:517:distinfo]
9e754cec4d3aeebc8ce697c08948ad4fcd37dfe34e51099acf944d09385d7ff3       119264 libunwind-18.1.4.src.tar.xz
6d8c47671c5ad77b3c3f0dab16f31f289b4382bba644e0d62d9316b51e1cf1c9      4031032 libcxx-18.1.4.src.tar.xz
954df1e7a7768ec0c9804da75e5332d68bcc7396c475faf6ed77e7150e4bcdcd     61991952 llvm-18.1.4.src.tar.xz
1acdd829b77f658ba4473757178f9960abcb6ac8d2c700b0772a952b3c9306ba         8708 cmake-18.1.4.src.tar.xz
557e5a292977628bb5683d67d7c81ed55e14b310d74c6ba53a516f64d5f61dd8         6788 runtimes-18.1.4.src.tar.xz


[FILE:59:manifests/plist.primary]
lib/
 libunwind.so.%%SOMAJOR%%
 libunwind.so.%%SOVERSION%%


[FILE:223:manifests/plist.dev]
include/
 __libunwind_config.h
 libunwind.h
 libunwind.modulemap
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
include/mach-o/
 compact_unwind_encoding.h
 compact_unwind_encoding.modulemap
lib/
 libunwind.a
 libunwind.so

