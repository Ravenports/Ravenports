# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		llvm-libunwind
VERSION=		19.1.6
KEYWORDS=		lang devel
VARIANTS=		std
SDESC[std]=		LLVM version of libunwind library
HOMEPAGE=		https://github.com/llvm-mirror/libunwind
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.6/
DISTFILE[1]=		libunwind-19.1.6.src.tar.xz:main
DISTFILE[2]=		libcxx-19.1.6.src.tar.xz:main
DISTFILE[3]=		llvm-19.1.6.src.tar.xz:main
DISTFILE[4]=		cmake-19.1.6.src.tar.xz:main
DISTFILE[5]=		runtimes-19.1.6.src.tar.xz:main
DF_INDEX=		1 2 3 4 5
SPKGS[std]=		set
			primary
			dev

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		llvm:dev:std

USES=			cpe cmake cclibs:primary

DISTNAME=		libunwind-19.1.6.src

LICENSE=		CUSTOM1:primary
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release
CPE_PRODUCT=		llvm
CPE_VENDOR=		llvm

SOVERSION=		1.0

CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/*.h ${STAGEDIR}${PREFIX}/include/
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libunwind.${LIBEXT}

post-extract:
	# LIBUNWIND_LIBCXX_PATH is ignored (Another llvm 12.0.0 issue)
	${MV} ${WRKDIR}/libcxx-19.1.6.src ${WRKDIR}/libcxx
	# can't build c++ or libunwind separately anymore
	${MV} ${WRKDIR}/llvm-19.1.6.src ${WRKDIR}/llvm
	# Install more cmake functions
	${CP} ${WRKDIR}/cmake-19.1.6.src/Modules/* \
		${WRKSRC}/cmake/Modules/
	${CP} ${WRKDIR}/runtimes-19.1.6.src/cmake/Modules/* \
		${WRKSRC}/cmake/Modules/

[FILE:618:descriptions/desc.primary]
libunwind is an implementation of the interface defined by the HP libunwind
project. It was contributed by Apple as a way to enable clang++ to port to
platforms that do not have a system unwinder. It is intended to be a small
and fast implementation of the ABI, leaving off some features of HP's
libunwind that never materialized (e.g. remote unwinding).

The unwinder has two levels of API. The high level APIs are the _Unwind_*
functions which implement functionality required by __cxa_* exception
functions. The low level APIs are the unw_* functions which are an
interface defined by the old HP libunwind project.


[FILE:517:distinfo]
34eab971069837be770e44f3543f1eb50f385575e8f29d1b5e1a67e7c482f680       120032 libunwind-19.1.6.src.tar.xz
bfa95b7777d1aafde91df6362542cea4b2f8b8575cf2c4c950e382f5962fe2df      4746604 libcxx-19.1.6.src.tar.xz
ad1a3b125ff014ded290094088de40efb9193ce81a24278184230b7d401f8a3e     67828048 llvm-19.1.6.src.tar.xz
9c7ec82d9a240dc2287b8de89d6881bb64ceea0dcd6ce133c34ef65bda22d99e         9300 cmake-19.1.6.src.tar.xz
a242d2aeaafbc259901d0f5b962874ed8e6ff0b51993036e08ae5d28be2f6e68         7228 runtimes-19.1.6.src.tar.xz


[FILE:59:manifests/plist.primary]
lib/
 libunwind.so.%%SOMAJOR%%
 libunwind.so.%%SOVERSION%%


[FILE:186:manifests/plist.dev]
include/
 __libunwind_config.h
 libunwind.h
 libunwind.modulemap
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
include/mach-o/compact_unwind_encoding.h
lib/
 libunwind.a
 libunwind.so

