# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		mysql80
VERSION=		8.0.15
KEYWORDS=		databases
VARIANTS=		standard
SDESC[standard]=	Multithreaded SQL database (server)
HOMEPAGE=		https://www.mysql.com/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		MYSQL/MySQL-8.0
DISTFILE[1]=		mysql-boost-8.0.15.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			server
			client

OPTIONS_AVAILABLE=	ARCHIVE BLACKHOLE EXAMPLE FEDERATED INNOBASE
			PERFSCHEMA PERFORMANCE
OPTIONS_STANDARD=	ARCHIVE BLACKHOLE EXAMPLE FEDERATED INNOBASE
			PERFSCHEMA PERFORMANCE
OPTGROUP_UNLIMITED=	STORAGE
OPTDESCR[STORAGE]=	Storage engines statically compiled into server
OPTGROUP[STORAGE]=	ARCHIVE BLACKHOLE EXAMPLE FEDERATED INNOBASE
			PERFSCHEMA
OPT_ON[all]=		PERFORMANCE

BUILD_DEPENDS=		rpcgen:single:standard
			libedit:single:standard
BUILDRUN_DEPENDS=	libevent:single:standard
			lz4:complete:standard
EXRUN[client]=		libedit:single:standard
			zlib:complete:standard

USERS=			mysql
GROUPS=			mysql
USERGROUP_SPKG=		server

USES=			bison cmake perl:run shebangfix ssl:build
			c++:server,client cclibs:server,client pkgconfig

DISTNAME=		mysql-8.0.15

LICENSE=		GPLv2:server CUSTOM1:server
LICENSE_TERMS=		server:{{WRKDIR}}/TERMS
LICENSE_NAME=		CUSTOM1:"MySQL Router License"
LICENSE_FILE=		GPLv2:{{WRKSRC}}/README
			CUSTOM1:{{WRKSRC}}/router/LICENSE.router
LICENSE_AWK=		TERMS:"^\/\*$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/include/mysql.h
LICENSE_SCHEME=		multi

CMAKE_BUILD_TYPE=	Release
FPC_EQUIVALENT=		databases/mysql80-server
SHEBANG_FILES=		scripts/*.pl

INSTALL_REQ_TOOLCHAIN=	yes
PLIST_SUB=		MY_DBDIR=/var/db/mysql
			MY_SECDIR=/var/db/mysql_secure
			MY_TMPDIR=/var/db/mysql_tmpdir
RC_SUBR=		mysql-server:server
SUB_FILES=		my.cnf.sample
SUB_LIST=		MY_DBDIR=/var/db/mysql
			MY_SECDIR=/var/db/mysql_secure
			MY_TMPDIR=/var/db/mysql_tmpdir

CFLAGS=			-Wno-deprecated-declarations
CMAKE_ARGS=		-DINSTALL_PKGCONFIGDIR="{{LOCALBASE}}/lib/pkgconfig"
			-DINSTALL_DOCDIR="share/doc/mysql"
			-DINSTALL_DOCREADMEDIR="share/doc/mysql"
			-DINSTALL_INCLUDEDIR="include/mysql"
			-DINSTALL_INFODIR="share/info"
			-DINSTALL_LIBDIR="lib/mysql"
			-DINSTALL_MANDIR="share/man"
			-DINSTALL_MYSQLDATADIR="/var/db/mysql"
			-DINSTALL_MYSQLKEYRINGDIR="etc/mysql/keyring"
			-DINSTALL_MYSQLSHAREDIR="share/mysql"
			-DINSTALL_MYSQLTESTDIR="share/mysql/tests"
			-DINSTALL_PLUGINDIR="lib/mysql/plugin"
			-DINSTALL_SBINDIR="libexec"
			-DINSTALL_SECURE_FILE_PRIVDIR="/var/db/mysql_secure"
			-DINSTALL_SHAREDIR="share"
			-DINSTALL_SUPPORTFILESDIR="share/mysql"
			-DMYSQL_KEYRINGDIR="etc/mysql/keyring"
			-DWITH_BOOST="{{WRKSRC}}/boost"
			-DWITH_EDITLINE=system
			-DWITH_LIBEVENT=system
			-DWITH_LZ4=system
			-DWITH_ZLIB=system
			-DWITH_SSL={{OPENSSLBASE}}
			-DINSTALL_MYSQLTESTDIR=0
			-DZLIB_INCLUDE_DIR={{LOCALBASE}}/include

[PERFSCHEMA].DESCRIPTION=		Provide "Performance Schema Storage" engine
[PERFSCHEMA].CMAKE_ARGS_OFF=		-DWITHOUT_PERFSCHEMA_STORAGE_ENGINE=1
[PERFSCHEMA].CMAKE_ARGS_ON=		-DWITH_PERFSCHEMA_STORAGE_ENGINE=1

[EXAMPLE].DESCRIPTION=			Provide "Example Storage" engine
[EXAMPLE].CMAKE_ARGS_OFF=		-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1
[EXAMPLE].CMAKE_ARGS_ON=		-DWITH_EXAMPLE_STORAGE_ENGINE=1

[BLACKHOLE].DESCRIPTION=		Provide "Blackhole Storage" engine
[BLACKHOLE].CMAKE_ARGS_OFF=		-DWITHOUT_BLACKHOLE_STORAGE_ENGINE=1
[BLACKHOLE].CMAKE_ARGS_ON=		-DWITH_BLACKHOLE_STORAGE_ENGINE=1

[PERFORMANCE].DESCRIPTION=		Enable "Performance Schema" (High RAM usage)
[PERFORMANCE].SUB_LIST_OFF=		PERFSCHEMRC="--skip-performance-schema"
[PERFORMANCE].SUB_LIST_ON=		PERFSCHEMRC=""

[ARCHIVE].DESCRIPTION=			Provide "Archive Storage" engine
[ARCHIVE].CMAKE_ARGS_OFF=		-DWITHOUT_ARCHIVE_STORAGE_ENGINE=1
[ARCHIVE].CMAKE_ARGS_ON=		-DWITH_ARCHIVE_STORAGE_ENGINE=1

[FEDERATED].DESCRIPTION=		Provide "Federated Storage" engine
[FEDERATED].CMAKE_ARGS_OFF=		-DWITHOUT_FEDERATED_STORAGE_ENGINE=1
[FEDERATED].CMAKE_ARGS_ON=		-DWITH_FEDERATED_STORAGE_ENGINE=1
[FEDERATED].SUB_LIST_OFF=		FEDER=""
[FEDERATED].SUB_LIST_ON=		FEDER="--federated"

[INNOBASE].DESCRIPTION=			Provide "InnoDB Storage" engine
[INNOBASE].CMAKE_ARGS_OFF=		-DWITHOUT_INNOBASE_STORAGE_ENGINE=1
[INNOBASE].CMAKE_ARGS_ON=		-DWITH_INNOBASE_STORAGE_ENGINE=1

post-patch:
	${REINPLACE_CMD} -e 's|/usr/bin/perl|${PREFIX}/bin/perl|' \
		${WRKSRC}/scripts/CMakeLists.txt

post-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/etc/mysql/keyring \
		${STAGEDIR}/var/db/mysql_secure \
		${STAGEDIR}/var/db/mysql_tmpdir
	${INSTALL_DATA} ${WRKDIR}/my.cnf.sample \
		${STAGEDIR}${ETCDIR}/my.cnf.sample
	${MV} ${STAGEDIR}${PREFIX}/share/doc/mysql/sample_mysqlrouter.conf \
		${STAGEDIR}${ETCDIR}/mysqlrouter.conf.sample
	${RM} ${STAGEDIR}${MANPREFIX}/man/man1/zlib_decompress.1 \
		${STAGEDIR}${MANPREFIX}/man/man1/lz4_decompress.1
	${RM} ${STAGEDIR}${PREFIX}/*.router
	${RMDIR} ${STAGEDIR}${PREFIX}/lib/mysql/plugin/debug
	${RMDIR} ${STAGEDIR}${PREFIX}/run
	${RM} -r ${STAGEDIR}${PREFIX}/share/doc
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/mysql/lib*.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/mysql/plugin/*.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/mysql/mysqlrouter/*.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/libexec/mysqld
	# Linux doesn't like -R flags
	${SED} -i'' -e 's| -R| -Wl,-rpath,|g' \
		${STAGEDIR}${PREFIX}/bin/mysql_config
	list=$$(cd ${STAGEDIR}${PREFIX}/bin && ${LS} * | ${AWK} \
		'{ if ($$1 != "mysql_config" && $$1 != "mysqld_mult" && \
		$$1 != "mysqld_safe" && $$1 != "mysqldumpslow" && \
		$$1 != "mysqld_multi") print}'); \
	(cd ${STAGEDIR}${PREFIX}/bin && ${STRIP_CMD} $$list)

post-extract:
	${RM} -rv ${WRKSRC}/sql/sql_hints.yy.cc ${WRKSRC}/sql/sql_hints.yy.h

post-patch-freebsd:
	${RM} ${WRKSRC}/cmake/os/FreeBSD.cmake

[FILE:294:descriptions/desc.server]
MySQL is a very fast, multi-threaded, multi-user and robust SQL
(Structured Query Language) database server.

MySQL, the most popular Open Source SQL database management system, is
developed, distributed, and supported by Oracle Corporation.

This package contains the MySQL server components.


[FILE:150:descriptions/desc.client]
MySQL is a very fast, multi-threaded, multi-user and robust SQL
(Structured Query Language) database server.

This package contains the MySQL client.


[FILE:104:distinfo]
95dbdb54c3967feefb255b96458b089a601e4de238bcc1f328b066018ee47db0    117079697 mysql-boost-8.0.15.tar.gz


[FILE:5088:manifests/plist.server]
@sample etc/mysql/my.cnf.sample
@sample etc/mysql/mysqlrouter.conf.sample
%%ONLY-LINUX%%lib/mysql/plugin/auth_socket.so
bin/
 ibd2sdi
 innochecksum
 my_print_defaults
 myisam_ftdump
 myisamchk
 myisamlog
 myisampack
 mysql_secure_installation
 mysql_tzinfo_to_sql
 mysql_upgrade
 mysqld_multi
 mysqld_safe
 mysqldumpslow
 mysqlrouter
 mysqlrouter_plugin_info
 mysqltest
 mysqlxtest
 perror
 zlib_decompress
lib/mysql/
 libmysqlharness.a
 libmysqlharness.so
 libmysqlharness.so.1
 libmysqlrouter.so
 libmysqlrouter.so.1
lib/mysql/mysqlrouter/
 keepalive.so
 metadata_cache.so
 mysql_protocol.so
 routing.so
 syslog.so
lib/mysql/plugin/
 adt_null.so
 auth.so
 auth_test_plugin.so
 component_audit_api_message_emit.so
 component_example_component1.so
 component_example_component2.so
 component_example_component3.so
 component_log_filter_dragnet.so
 component_log_sink_json.so
 component_log_sink_syseventlog.so
 component_log_sink_test.so
 component_mysqlx_global_reset.so
 component_pfs_example.so
 component_pfs_example_component_population.so
 component_test_audit_api_message.so
 component_test_backup_lock_service.so
 component_test_host_application_signal.so
 component_test_pfs_notification.so
 component_test_pfs_resource_group.so
 component_test_status_var_service.so
 component_test_status_var_service_int.so
 component_test_status_var_service_reg_only.so
 component_test_status_var_service_str.so
 component_test_status_var_service_unreg_only.so
 component_test_string_service.so
 component_test_string_service_charset.so
 component_test_string_service_long.so
 component_test_sys_var_service.so
 component_test_sys_var_service_int.so
 component_test_sys_var_service_same.so
 component_test_sys_var_service_str.so
 component_test_system_variable_source.so
 component_test_udf_registration.so
 component_udf_reg_3_func.so
 component_udf_reg_avg_func.so
 component_udf_reg_int_func.so
 component_udf_reg_int_same_func.so
 component_udf_reg_only_3_func.so
 component_udf_reg_real_func.so
 component_udf_unreg_3_func.so
 component_udf_unreg_int_func.so
 component_udf_unreg_real_func.so
 component_validate_password.so
 connection_control.so
 daemon_example.ini
 group_replication.so
 ha_mock.so
 keyring_file.so
 keyring_udf.so
 libdaemon_example.so
 libtest_framework.so
 libtest_services.so
 libtest_services_threaded.so
 libtest_session_attach.so
 libtest_session_detach.so
 libtest_session_in_thd.so
 libtest_session_info.so
 libtest_sql_2_sessions.so
 libtest_sql_all_col_types.so
 libtest_sql_cmds_1.so
 libtest_sql_commit.so
 libtest_sql_complex.so
 libtest_sql_errors.so
 libtest_sql_lock.so
 libtest_sql_processlist.so
 libtest_sql_replication.so
 libtest_sql_shutdown.so
 libtest_sql_sqlmode.so
 libtest_sql_stmt.so
 libtest_sql_stored_procedures_functions.so
 libtest_sql_views_triggers.so
 libtest_x_sessions_deinit.so
 libtest_x_sessions_init.so
 locking_service.so
 mypluglib.so
 mysql_no_login.so
 pfs_example_plugin_employee.so
 qa_auth_client.so
 qa_auth_interface.so
 qa_auth_server.so
 replication_observers_example_plugin.so
 rewrite_example.so
 rewriter.so
 semisync_master.so
 semisync_slave.so
 test_security_context.so
 test_services_host_application_signal.so
 test_services_plugin_registry.so
 test_udf_services.so
 udf_example.so
 validate_password.so
 version_token.so
libexec/mysqld
share/man/man1/
 ibd2sdi.1.gz
 innochecksum.1.gz
 my_print_defaults.1.gz
 myisam_ftdump.1.gz
 myisamchk.1.gz
 myisamlog.1.gz
 myisampack.1.gz
 mysql.server.1.gz
 mysql_secure_installation.1.gz
 mysql_ssl_rsa_setup.1.gz
 mysql_tzinfo_to_sql.1.gz
 mysql_upgrade.1.gz
 mysqld_multi.1.gz
 mysqld_safe.1.gz
 mysqldumpslow.1.gz
 mysqlman.1.gz
 perror.1.gz
share/man/man8/mysqld.8.gz
share/mysql/
 dictionary.txt
 errmsg-utf8.txt
 innodb_memcached_config.sql
 install_rewriter.sql
 magic
 mysql-log-rotate
 mysql.server
 mysqld_multi.server
 uninstall_rewriter.sql
share/mysql/bulgarian/errmsg.sys
share/mysql/charsets/
 Index.xml
 README
 armscii8.xml
 ascii.xml
 cp1250.xml
 cp1251.xml
 cp1256.xml
 cp1257.xml
 cp850.xml
 cp852.xml
 cp866.xml
 dec8.xml
 geostd8.xml
 greek.xml
 hebrew.xml
 hp8.xml
 keybcs2.xml
 koi8r.xml
 koi8u.xml
 latin1.xml
 latin2.xml
 latin5.xml
 latin7.xml
 macce.xml
 macroman.xml
 swe7.xml
share/mysql/czech/errmsg.sys
share/mysql/danish/errmsg.sys
share/mysql/dutch/errmsg.sys
share/mysql/english/errmsg.sys
share/mysql/estonian/errmsg.sys
share/mysql/french/errmsg.sys
share/mysql/german/errmsg.sys
share/mysql/greek/errmsg.sys
share/mysql/hungarian/errmsg.sys
share/mysql/italian/errmsg.sys
share/mysql/japanese/errmsg.sys
share/mysql/korean/errmsg.sys
share/mysql/norwegian/errmsg.sys
share/mysql/norwegian-ny/errmsg.sys
share/mysql/polish/errmsg.sys
share/mysql/portuguese/errmsg.sys
share/mysql/romanian/errmsg.sys
share/mysql/russian/errmsg.sys
share/mysql/serbian/errmsg.sys
share/mysql/slovak/errmsg.sys
share/mysql/spanish/errmsg.sys
share/mysql/swedish/errmsg.sys
share/mysql/ukrainian/errmsg.sys
@dir var/lib/mysqlrouter
@dir(mysql,mysql,0750) %%MY_SECDIR%%
@dir(mysql,mysql,0750) %%MY_TMPDIR%%
@dir(mysql,mysql,0750) etc/mysql/keyring


[FILE:782:manifests/plist.client]
bin/
 mysql
 mysql_config
 mysql_config_editor
 mysql_ssl_rsa_setup
 mysqladmin
 mysqlbinlog
 mysqlcheck
 mysqldump
 mysqlimport
 mysqlpump
 mysqlshow
 mysqlslap
include/mysql/
 binary_log_types.h
 errmsg.h
 my_command.h
 my_list.h
 mysql.h
 mysql_com.h
 mysql_time.h
 mysql_version.h
 mysqld_error.h
 mysqlx_ername.h
 mysqlx_error.h
 mysqlx_version.h
include/mysql/mysql/
 client_plugin.h
 plugin_auth_common.h
 udf_registration_types.h
lib/mysql/
 libmysqlclient.a
 libmysqlclient.so
 libmysqlclient.so.21
lib/pkgconfig/mysqlclient.pc
share/aclocal/mysql.m4
share/man/man1/
 comp_err.1.gz
 mysql.1.gz
 mysql_config.1.gz
 mysql_config_editor.1.gz
 mysqladmin.1.gz
 mysqlbinlog.1.gz
 mysqlcheck.1.gz
 mysqldump.1.gz
 mysqlimport.1.gz
 mysqlpump.1.gz
 mysqlshow.1.gz
 mysqlslap.1.gz


[FILE:1332:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2019-01-25 22:33:03 UTC
+++ CMakeLists.txt
@@ -1045,7 +1045,6 @@ IF(UNIX)
 ENDIF()
 
 IF(NOT WITHOUT_SERVER)
-  ADD_SUBDIRECTORY(testclients)
   ADD_SUBDIRECTORY(sql)
 ENDIF()
 
@@ -1054,8 +1053,6 @@ ENDIF()
 ADD_SUBDIRECTORY(scripts)
 
 IF(NOT WITHOUT_SERVER)
-  ADD_SUBDIRECTORY(mysql-test)
-  ADD_SUBDIRECTORY(mysql-test/lib/My/SafeProcess)
   ADD_SUBDIRECTORY(support-files)
   IF(EXISTS ${CMAKE_SOURCE_DIR}/internal/CMakeLists.txt)
     ADD_SUBDIRECTORY(internal)
@@ -1144,7 +1141,6 @@ ELSE()
   SET(CPACK_GENERATOR "TGZ")
 ENDIF() 
 ADD_SUBDIRECTORY(packaging/WiX)
-ADD_SUBDIRECTORY(packaging/solaris)
 
 IF(UNIX)
   INSTALL(FILES Docs/mysql.info DESTINATION ${INSTALL_INFODIR} OPTIONAL COMPONENT Info)
@@ -1152,6 +1148,7 @@ ENDIF()
 #
 # RPM installs documentation directly from the source tree
 #
+IF(FALSE)
 IF(NOT INSTALL_LAYOUT MATCHES "RPM")
   INSTALL(FILES README LICENSE DESTINATION ${INSTALL_DOCREADMEDIR} COMPONENT Readme)
   INSTALL(FILES ${CMAKE_BINARY_DIR}/Docs/INFO_SRC ${CMAKE_BINARY_DIR}/Docs/INFO_BIN DESTINATION ${INSTALL_DOCDIR})
@@ -1170,6 +1167,7 @@ IF(NOT INSTALL_LAYOUT MATCHES "RPM")
     PATTERN "README.build" EXCLUDE
   )
 ENDIF()
+ENDIF()
 
 # Now that we're done with all ADD_SUBDIRECTORY and thus all feature tests,
 # we can safely enable ASan on Clang/Win32 if needed.


[FILE:512:patches/patch-cmake_plugin.cmake]
--- cmake/plugin.cmake.orig	2019-01-25 22:33:03 UTC
+++ cmake/plugin.cmake
@@ -231,9 +231,6 @@ MACRO(MYSQL_ADD_PLUGIN)
       MYSQL_INSTALL_TARGETS(${target}
         DESTINATION ${INSTALL_PLUGINDIR}
         COMPONENT ${INSTALL_COMPONENT})
-      INSTALL_DEBUG_TARGET(${target}
-        DESTINATION ${INSTALL_PLUGINDIR}/debug
-        COMPONENT ${INSTALL_COMPONENT})
       # For internal testing in PB2, append collections files
       IF(DEFINED ENV{PB2WORKDIR})
         PLUGIN_APPEND_COLLECTIONS(${plugin})


[FILE:831:patches/patch-cmake_ssl.cmake]
--- cmake/ssl.cmake.orig	2019-01-25 22:33:03 UTC
+++ cmake/ssl.cmake
@@ -312,7 +312,7 @@ MACRO (MYSQL_CHECK_SSL)
     IF(OPENSSL_INCLUDE_DIR AND
        OPENSSL_LIBRARY   AND
        CRYPTO_LIBRARY      AND
-       OPENSSL_MAJOR_VERSION STREQUAL "1"
+       (OPENSSL_MAJOR_VERSION STREQUAL "1" OR OPENSSL_MAJOR_VERSION STREQUAL "2")
       )
       SET(OPENSSL_FOUND TRUE)
       FIND_PROGRAM(OPENSSL_EXECUTABLE openssl
@@ -417,7 +417,7 @@ ENDMACRO()
 # then copy the dlls to runtime_output_directory, and add INSTALL them.
 # Currently only relevant for Windows, Mac and Linux.
 MACRO(MYSQL_CHECK_SSL_DLLS)
-  IF (WITH_SSL_PATH AND (APPLE OR WIN32 OR LINUX_STANDALONE))
+  IF (FALSE)
     MESSAGE(STATUS "WITH_SSL_PATH ${WITH_SSL_PATH}")
     IF(LINUX_STANDALONE)
       GET_FILENAME_COMPONENT(CRYPTO_EXT "${CRYPTO_LIBRARY}" EXT)


[FILE:565:patches/patch-cmd-line-utils_libedit_chartype.h]
--- extra/libedit/chartype.h.orig	2019-01-25 22:33:03 UTC
+++ extra/libedit/chartype.h
@@ -49,7 +49,7 @@
   TODO : Verify if FreeBSD & AIX stores ISO 10646 in wchar_t. */
 #if !defined(__NetBSD__) && !defined(__sun) \
   && !(defined(__APPLE__) && defined(__MACH__)) \
-  && !defined(__FreeBSD__) && !defined(_AIX)
+  && !defined(__FreeBSD__) && !defined(_AIX) && !defined(__DragonFly__)
 #ifndef __STDC_ISO_10646__
 /* In many places it is assumed that the first 127 code points are ASCII
  * compatible, so ensure wchar_t indeed does ISO 10646 and not some other


[FILE:810:patches/patch-cmd-line-utils_libedit_vi.c]
--- extra/libedit/vi.c.orig	2019-01-25 22:33:03 UTC
+++ extra/libedit/vi.c
@@ -919,7 +919,7 @@ vi_comment_out(EditLine *el, Int c __att
  * NB: posix implies that we should enter insert mode, however
  * this is against historical precedent...
  */
-#if defined(__weak_reference) && !defined(__FreeBSD__)
+#if defined(__weak_reference) && !defined(__FreeBSD__) && !defined(__DragonFly__)
 __weakref_visible char *my_get_alias_text(const char *)
     __weak_reference(get_alias_text);
 #endif
@@ -928,7 +928,7 @@ protected el_action_t
 vi_alias(EditLine *el __attribute__((__unused__)),
 	 Int c __attribute__((__unused__)))
 {
-#if defined(__weak_reference) && !defined(__FreeBSD__)
+#if defined(__weak_reference) && !defined(__FreeBSD__) && !defined(__DragonFly__)
 	char alias_name[3];
 	char *alias_text;
 


[FILE:505:patches/patch-configure.cmake]
--- configure.cmake.orig	2019-01-25 22:33:03 UTC
+++ configure.cmake
@@ -655,6 +655,7 @@ int main(int ac, char **av)
 HAVE_SYS_GETTID)
 
 # Check for pthread_getthreadid_np()
+set(CMAKE_REQUIRED_LIBRARIES pthread)
 CHECK_C_SOURCE_COMPILES("
 #include <pthread_np.h>
 int main(int ac, char **av)
@@ -663,6 +664,7 @@ int main(int ac, char **av)
   return (tid != 0 ? 0 : 1);
 }"
 HAVE_PTHREAD_GETTHREADID_NP)
+set(CMAKE_REQUIRED_LIBRARIES "")
 
 # Check for pthread_threadid_np()
 CHECK_C_SOURCE_COMPILES("


[FILE:427:patches/patch-include_my__compare.h]
--- include/my_compare.h.orig	2019-01-25 22:33:03 UTC
+++ include/my_compare.h
@@ -49,7 +49,7 @@
   But beware the dependency of MI_MAX_POSSIBLE_KEY_BUFF and HA_MAX_KEY_LENGTH.
 */
 
-#define HA_MAX_KEY_LENGTH 1000 /* Max length in bytes */
+#define HA_MAX_KEY_LENGTH 4000 /* Max length in bytes */
 #define HA_MAX_KEY_SEG 16      /* Max segments for key */
 
 #define HA_MAX_POSSIBLE_KEY_BUFF (HA_MAX_KEY_LENGTH + 24 + 6 + 6)


[FILE:419:patches/patch-include_my__thread__os__id.h]
--- include/my_thread_os_id.h.orig	2019-01-25 22:33:03 UTC
+++ include/my_thread_os_id.h
@@ -84,8 +84,12 @@ static inline my_thread_os_id_t my_threa
   return pthread_getthreadid_np();
 #else
 #ifdef HAVE_INTEGER_PTHREAD_SELF
+#  ifdef __DragonFly__
+  return syscall(SYS_lwp_gettid);
+#  else
   /* Unknown platform, fallback. */
   return pthread_self();
+#  endif
 #else
   /* Feature not available. */
   return 0;


[FILE:480:patches/patch-include_myisam.h]
--- include/myisam.h.orig	2019-01-25 22:33:03 UTC
+++ include/myisam.h
@@ -59,7 +59,7 @@
   The following defines can be increased if necessary.
   But beware the dependency of MI_MAX_POSSIBLE_KEY_BUFF and MI_MAX_KEY_LENGTH.
 */
-#define MI_MAX_KEY_LENGTH 1000 /* Max length in bytes */
+#define MI_MAX_KEY_LENGTH 4000 /* Max length in bytes */
 #define MI_MAX_KEY_SEG 16      /* Max segments for key */
 
 #define MI_MAX_KEY_BUFF (MI_MAX_KEY_LENGTH + MI_MAX_KEY_SEG * 6 + 8 + 8)


[FILE:748:patches/patch-libmysql_CMakeLists.txt]
--- libmysql/CMakeLists.txt.orig	2019-01-25 22:33:03 UTC
+++ libmysql/CMakeLists.txt
@@ -236,7 +236,6 @@ ENDIF()
 
 # LDAP authentication SASL client plugin
 MESSAGE(STATUS "Creating LDAP authentication SASL client library.")
-ADD_SUBDIRECTORY(authentication_ldap)
   
 # Merge several convenience libraries into one big mysqlclient
 MERGE_CONVENIENCE_LIBRARIES(mysqlclient ${LIBS_TO_MERGE} COMPONENT Development)
@@ -293,7 +292,7 @@ IF(NOT DISABLE_SHARED)
   ENDIF()
   IF(UNIX)
     # libtool compatability
-    IF(CMAKE_SYSTEM_NAME MATCHES "FreeBSD" OR APPLE)
+    IF(CMAKE_SYSTEM_NAME MATCHES "FreeBSD|DragonFly|Linux|SunOS" OR APPLE)
       SET(OS_SHARED_LIB_VERSION "${SHARED_LIB_MAJOR_VERSION}")
     ELSE()
       SET(OS_SHARED_LIB_VERSION


[FILE:382:patches/patch-libservices_CMakeLists.txt]
--- libservices/CMakeLists.txt.orig	2019-01-25 22:33:03 UTC
+++ libservices/CMakeLists.txt
@@ -45,7 +45,9 @@ SET(MYSQLSERVICES_SOURCES
   plugin_registry_service.c)
 
 ADD_CONVENIENCE_LIBRARY(mysqlservices ${MYSQLSERVICES_SOURCES})
+IF(FALSE)
 IF(INSTALL_STATIC_LIBRARIES)
+ENDIF()
   INSTALL(TARGETS mysqlservices
     DESTINATION ${INSTALL_LIBDIR} COMPONENT Development)
 ENDIF()


[FILE:1963:patches/patch-mysys__ssl_my__default.cc]
--- mysys_ssl/my_default.cc.orig	2019-01-25 22:33:03 UTC
+++ mysys_ssl/my_default.cc
@@ -203,7 +203,7 @@ bool no_defaults = false;
 
 /* Which directories are searched for options (and in which order) */
 
-#define MAX_DEFAULT_DIRS 6
+#define MAX_DEFAULT_DIRS 7
 #define DEFAULT_DIRS_SIZE (MAX_DEFAULT_DIRS + 1) /* Terminate with NULL */
 static const char **default_directories = NULL;
 
@@ -908,6 +908,14 @@ static int search_default_file_with_ext(
       return 1; /* Ignore wrong files */
   }
 
+  if (strstr(name, "/etc") == name)
+  {
+    fprintf(stderr,
+             "error: Config file %s in invalid location, please move to or merge with /usr/local%s\n",
+             name,name);
+      goto err;
+  }
+
   while (mysql_file_getline(buff, sizeof(buff) - 1, fp, is_login_file)) {
     line++;
     /* Ignore comment and empty lines */
@@ -1226,7 +1234,8 @@ void my_print_default_files(const char *
             end[(strlen(end) - 1)] = ' ';
           else
             strxmov(end, conf_file, *ext, " ", NullS);
-          fputs(name, stdout);
+          if (strstr(name, "/etc") != name)
+            fputs(name, stdout);
         }
       }
     }
@@ -1563,13 +1572,8 @@ static const char **init_default_directo
 
 #else
 
-  errors += add_directory(alloc, "/etc/", dirs);
-  errors += add_directory(alloc, "/etc/mysql/", dirs);
-
-#if defined(DEFAULT_SYSCONFDIR)
-  if (DEFAULT_SYSCONFDIR[0])
-    errors += add_directory(alloc, DEFAULT_SYSCONFDIR, dirs);
-#endif /* DEFAULT_SYSCONFDIR */
+  errors += add_directory(alloc, "/usr/local/etc/", dirs);
+  errors += add_directory(alloc, "/usr/local/etc/mysql/", dirs);
 
 #endif
 
@@ -1633,7 +1637,7 @@ int check_file_permissions(const char *f
 #if !defined(_WIN32)
   MY_STAT stat_info;
 
-  if (!my_stat(file_name, &stat_info, MYF(0))) return 1;
+  if (!my_stat(file_name, &stat_info, MYF(0))) return 0;
   /*
     Ignore .mylogin.cnf file if not exclusively readable/writable
     by current user.


[FILE:469:patches/patch-mysys__ssl_my__md5.cc]
--- mysys_ssl/my_md5.cc.orig	2019-01-25 22:33:03 UTC
+++ mysys_ssl/my_md5.cc
@@ -56,7 +56,7 @@ static void my_md5_hash(unsigned char *d
 int compute_md5_hash(char *digest, const char *buf, int len) {
   int retval = 0;
   int fips_mode = 0;
-#if !defined(HAVE_WOLFSSL)
+#if !defined(HAVE_WOLFSSL) && !defined(LIBRESSL_VERSION_NUMBER)
   fips_mode = FIPS_mode();
 #endif /* HAVE_WOLFSSL */
   /* If fips mode is ON/STRICT restricted method calls will result into abort,


[FILE:435:patches/patch-plugin_password__validation_validate__password.cc]
--- plugin/password_validation/validate_password.cc.orig	2019-01-25 22:33:03 UTC
+++ plugin/password_validation/validate_password.cc
@@ -25,6 +25,8 @@
 #include <mysql/plugin_validate_password.h>
 #include <mysql/service_my_plugin_log.h>
 #include <mysql/service_mysql_string.h>
+/* solve clash between libc++ bitset::test() and test macro from my_global.h */
+#undef test
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>


[FILE:442:patches/patch-plugin_x_CMakeLists.txt]
--- plugin/x/CMakeLists.txt.orig	2019-01-25 22:33:03 UTC
+++ plugin/x/CMakeLists.txt
@@ -89,12 +89,15 @@ INCLUDE_DIRECTORIES(
   ${MYSQLX_GENERATE_DIR}
   ${MYSQLX_PROTOCOL_INCLUDE_DIR}
   ${MYSQLX_CLIENT_INCLUDE_DIR}
+  ${BOOST_INCLUDE_DIR}
 )
 
 INCLUDE_DIRECTORIES(SYSTEM
   ${PROTOBUF_INCLUDE_DIRS}
   ${LIBEVENT_INCLUDE_DIRS}
   ${ICU_INCLUDE_DIRS}
+  ${SSL_INCLUDE_DIRS}
+  ${ZLIB_INCLUDE_DIR}
 )
 
 SET(MYSQLX_PROTBUF_AND_PROTOCOL_LIB


[FILE:515:patches/patch-plugin_x_client_sha256__scramble__generator.cc]
--- plugin/x/client/sha256_scramble_generator.cc.orig	2019-01-25 22:33:03 UTC
+++ plugin/x/client/sha256_scramble_generator.cc
@@ -97,7 +97,7 @@ bool SHA256_digest::retrieve_digest(unsi
     DBUG_RETURN(true);
   }
   m_ok = EVP_DigestFinal_ex(md_context, m_digest, nullptr);
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if defined(LIBRESSL_VERSION_NUMBER) || OPENSSL_VERSION_NUMBER < 0x10100000L
   EVP_MD_CTX_cleanup(md_context);
 #else  /* OPENSSL_VERSION_NUMBER < 0x10100000L */
   EVP_MD_CTX_reset(md_context);


[FILE:1642:patches/patch-plugin_x_client_xconnection__impl.cc]
--- plugin/x/client/xconnection_impl.cc.orig	2019-01-25 22:33:03 UTC
+++ plugin/x/client/xconnection_impl.cc
@@ -182,12 +182,12 @@ XError ssl_verify_server_cert(Vio *vio,
     return XError{CR_SSL_CONNECTION_ERROR, "Failed to get CN from CN entry"};
   }
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
-  const auto cn = reinterpret_cast<char *>(ASN1_STRING_data(cn_asn1));
-#else  /* OPENSSL_VERSION_NUMBER < 0x10100000L */
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
   const auto cn =
       reinterpret_cast<const char *>(ASN1_STRING_get0_data(cn_asn1));
-#endif /* OPENSSL_VERSION_NUMBER < 0x10100000L */
+#else
+  const auto cn = reinterpret_cast<char *>(ASN1_STRING_data(cn_asn1));
+#endif /* OPENSSL_VERSION_NUMBER >= 0x10100000L */
   const auto cn_len = static_cast<size_t>(ASN1_STRING_length(cn_asn1));
 
   // There should not be any NULL embedded in the CN
@@ -444,7 +444,7 @@ XError Connection_impl::get_ssl_error(co
   return XError(CR_SSL_CONNECTION_ERROR, buffer);
 }
 
-#ifndef HAVE_WOLFSSL
+#if !defined(HAVE_WOLFSSL) && !defined(LIBRESSL_VERSION_NUMBER)
 /**
   Set fips mode in openssl library,
   When we set fips mode ON/STRICT, it will perform following operations:
@@ -494,7 +494,7 @@ XError Connection_impl::activate_tls() {
   if (!m_context->m_ssl_config.is_configured())
     return XError{CR_SSL_CONNECTION_ERROR, ER_TEXT_TLS_NOT_CONFIGURATED};
 
-#ifndef HAVE_WOLFSSL
+#if !defined(HAVE_WOLFSSL) && !defined(LIBRESSL_VERSION_NUMBER)
   char err_string[OPENSSL_ERROR_LENGTH] = {'\0'};
   if (set_fips_mode((int)m_context->m_ssl_config.m_ssl_fips_mode, err_string) !=
       1) {


[FILE:481:patches/patch-router_cmake_set__rpath.cmake]
--- router/cmake/set_rpath.cmake.orig	2019-01-25 22:33:03 UTC
+++ router/cmake/set_rpath.cmake
@@ -81,8 +81,7 @@ ELSE()
 ENDIF()
 
 SET(CMAKE_INSTALL_RPATH)
-IF(INSTALL_LAYOUT STREQUAL "STANDALONE" OR INSTALL_LAYOUT STREQUAL "DEFAULT" OR
-   INSTALL_LAYOUT STREQUAL "WIN" OR INSTALL_LAYOUT STREQUAL "SVR4")
+IF(FALSE)
   # rpath for lib/mysqlrouter/ plugins that want to find lib/
   SET(RPATH_PLUGIN_TO_LIB "${RPATH_ORIGIN}/../")
   SET(RPATH_PLUGIN_TO_PLUGIN "${RPATH_ORIGIN}/")


[FILE:395:patches/patch-router_src_harness_CMakeLists.txt]
--- router/src/harness/CMakeLists.txt.orig	2019-01-25 22:33:03 UTC
+++ router/src/harness/CMakeLists.txt
@@ -138,7 +138,7 @@ IF(WIN32)
     COMPILE_FLAGS -DHARNESS_STATIC_DEFINE)
 ENDIF()
 IF(THREADS_HAVE_PTHREAD_ARG)
-  target_compile_options(PUBLIC harness-archive "-pthread")
+  target_compile_options(harness-archive PUBLIC "-pthread")
 ENDIF()
 
 # create harness library - dynamic version


[FILE:301:patches/patch-router_src_harness_src_socket__operations.cc]
--- router/src/harness/src/socket_operations.cc.orig	2019-01-25 22:33:03 UTC
+++ router/src/harness/src/socket_operations.cc
@@ -42,6 +42,9 @@
 #include <ifaddrs.h>
 #include <net/if.h>
 #endif
+#ifdef __DragonFly__
+#include <netinet/in.h>
+#endif
 #else
 #include <windows.h>
 #include <winsock2.h>


[FILE:308:patches/patch-router_src_routing_src_connection.h]
--- router/src/routing/src/connection.h.orig	2019-01-25 22:33:03 UTC
+++ router/src/routing/src/connection.h
@@ -29,6 +29,9 @@
 #include <chrono>
 #include <condition_variable>
 #include <mutex>
+#ifdef __DragonFly__
+#include <sys/socket.h>
+#endif
 
 #include "context.h"
 #include "mysql_router_thread.h"


[FILE:2029:patches/patch-scripts_CMakeLists.txt]
--- scripts/CMakeLists.txt.orig	2019-01-25 22:33:03 UTC
+++ scripts/CMakeLists.txt
@@ -261,11 +261,7 @@ IF(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX
   STRING(REGEX REPLACE "-std=c..[0-9]+" "" CXXFLAGS "${CXXFLAGS}")
 ENDIF()
 
-IF(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
-  SET (PERL_PATH "/usr/local/bin/perl")
-ELSE()
   SET (PERL_PATH "/usr/bin/perl")
-ENDIF()
 
 IF(UNIX)
   # SHELL_PATH, FIND_PROC, CHECK_PID are used by mysqld_safe
@@ -284,13 +280,9 @@ IF(NOT FIND_PROC AND CMAKE_SYSTEM_NAME M
     "ps -p $PID | grep -v mysqld_safe | grep -- $MYSQLD > /dev/null")
 ENDIF()
 
-IF(NOT FIND_PROC)
-  # BSD styl
-  EXECUTE_PROCESS(COMMAND ps -uaxww OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE result)
-  IF(result MATCHES 0)
+IF(NOT FIND_PROC AND CMAKE_SYSTEM_NAME MATCHES "DragonFly|FreeBSD")
      SET( FIND_PROC
        "ps -uaxww | grep -v mysqld_safe | grep -- $MYSQLD | grep $PID > /dev/null")
-  ENDIF()
 ENDIF()
 
 IF(NOT FIND_PROC)
@@ -335,7 +327,7 @@ SET(pkglibdir ${prefix}/${INSTALL_LIBDIR
 SET(pkgplugindir ${prefix}/${INSTALL_PLUGINDIR})
 SET(localstatedir ${MYSQL_DATADIR})
 
-IF(CMAKE_SYSTEM_NAME STREQUAL "SunOS")
+IF(TRUE)
   SET(RPATH_OPTION " -R$pkglibdir")
 ENDIF()
 
@@ -372,6 +364,8 @@ MACRO(EXTRACT_LINK_LIBRARIES target var)
           GET_FILENAME_COMPONENT(lib "${lib}" NAME_WE)
           STRING(REGEX REPLACE "^lib" "" lib "${lib}")
           SET(${var} "${${var}}-l${lib} " )
+        ELSEIF(lib STREQUAL "-pthread")
+          SET(${var} "${${var}}-pthread " ) 
         ELSE()
           SET(${var} "${${var}}-l${lib} " )
         ENDIF()
@@ -497,7 +491,7 @@ ELSE()
   FOREACH(file ${BIN_SCRIPTS})
     IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${file}.sh)
       CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${file}.sh
-        ${CMAKE_CURRENT_BINARY_DIR}/${file} ESCAPE_QUOTES @ONLY)
+        ${CMAKE_CURRENT_BINARY_DIR}/${file} @ONLY)
     ELSEIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${file})
       CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${file}
          ${CMAKE_CURRENT_BINARY_DIR}/${file} COPYONLY)


[FILE:516:patches/patch-sql-common_client.cc]
--- sql-common/client.cc.orig	2019-01-25 22:33:03 UTC
+++ sql-common/client.cc
@@ -5623,7 +5623,7 @@ int STDCALL mysql_options(MYSQL *mysql,
 #endif
       break;
     case MYSQL_OPT_SSL_FIPS_MODE: {
-#if defined(HAVE_OPENSSL) && !defined(HAVE_WOLFSSL)
+#if defined(HAVE_OPENSSL) && !defined(HAVE_WOLFSSL) && !defined(LIBRESSL_VERSION_NUMBER)
       char ssl_err_string[OPENSSL_ERROR_LENGTH] = {'\0'};
       ENSURE_EXTENSIONS_PRESENT(&mysql->options);
       mysql->options.extension->ssl_fips_mode = *(uint *)arg;


[FILE:485:patches/patch-sql_CMakeLists.txt]
Apple doesn't support cpu binding to threads.
Make DragonFly link by using same (non)interface.

--- sql/CMakeLists.txt.orig	2019-01-25 22:33:03 UTC
+++ sql/CMakeLists.txt
@@ -535,7 +535,7 @@ IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
   LIST(APPEND SQL_SHARED_SOURCES resourcegroups/platform/thread_attrs_api_linux.cc)
 ENDIF()
 
-IF(APPLE)
+IF(APPLE OR CMAKE_SYSTEM_NAME MATCHES "DragonFly")
   LIST(APPEND SQL_SHARED_SOURCES resourcegroups/platform/thread_attrs_api_apple.cc)
 ENDIF()
 


[FILE:540:patches/patch-sql_auth_sha2__password__common.cc]
--- sql/auth/sha2_password_common.cc.orig	2019-01-25 22:33:03 UTC
+++ sql/auth/sha2_password_common.cc
@@ -101,7 +101,7 @@ bool SHA256_digest::retrieve_digest(unsi
     DBUG_RETURN(true);
   }
   m_ok = EVP_DigestFinal_ex(md_context, m_digest, NULL);
-#if defined(HAVE_WOLFSSL) || OPENSSL_VERSION_NUMBER < 0x10100000L
+#if defined(HAVE_WOLFSSL) || defined(LIBRESSL_VERSION_NUMBER) || OPENSSL_VERSION_NUMBER < 0x10100000L
   EVP_MD_CTX_cleanup(md_context);
 #else  /* OPENSSL_VERSION_NUMBER < 0x10100000L */
   EVP_MD_CTX_reset(md_context);


[FILE:1476:patches/patch-sql_mysqld.cc]
--- sql/mysqld.cc.orig	2019-01-25 22:33:03 UTC
+++ sql/mysqld.cc
@@ -4580,7 +4580,7 @@ static int warn_self_signed_ca() {
 
 static PSI_memory_key key_memory_openssl = PSI_NOT_INSTRUMENTED;
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if defined(LIBRESSL_VERSION_NUMBER) || OPENSSL_VERSION_NUMBER < 0x10100000L
 #define FILE_LINE_ARGS
 #else
 #define FILE_LINE_ARGS , const char *, int
@@ -4597,7 +4597,7 @@ static void my_openssl_free(void *ptr FI
 
 static void init_ssl() {
 #ifdef HAVE_OPENSSL
-#if !defined(HAVE_WOLFSSL) && !defined(__sun)
+#if !defined(HAVE_WOLFSSL) && !defined(__sun) && !defined(LIBRESSL_VERSION_NUMBER)
 #if defined(HAVE_PSI_MEMORY_INTERFACE)
   static PSI_memory_info all_openssl_memory[] = {
       {&key_memory_openssl, "openssl_malloc", 0, 0,
@@ -4617,7 +4617,7 @@ static void init_ssl() {
 
 static int init_ssl_communication() {
 #ifdef HAVE_OPENSSL
-#ifndef HAVE_WOLFSSL
+#if !defined(HAVE_WOLFSSL) && !defined(LIBRESSL_VERSION_NUMBER)
   char ssl_err_string[OPENSSL_ERROR_LENGTH] = {'\0'};
   int ret_fips_mode = set_fips_mode(opt_ssl_fips_mode, ssl_err_string);
   if (ret_fips_mode != 1) {
@@ -9039,7 +9039,7 @@ bool mysqld_get_one_option(int optid,
         One can disable SSL later by using --skip-ssl or --ssl=0.
       */
       opt_use_ssl = true;
-#ifdef HAVE_WOLFSSL
+#if defined(HAVE_WOLFSSL) || defined(LIBRESSL_VERSION_NUMBER)
       /* crl has no effect in wolfSSL. */
       opt_ssl_crl = NULL;
       opt_ssl_crlpath = NULL;


[FILE:3090:patches/patch-sql_sys__vars.cc]
--- sql/sys_vars.cc.orig	2019-01-25 22:33:03 UTC
+++ sql/sys_vars.cc
@@ -1930,7 +1930,7 @@ static Sys_var_ulong Sys_interactive_tim
     "The number of seconds the server waits for activity on an interactive "
     "connection before closing it",
     SESSION_VAR(net_interactive_timeout), CMD_LINE(REQUIRED_ARG),
-    VALID_RANGE(1, LONG_TIMEOUT), DEFAULT(NET_WAIT_TIMEOUT), BLOCK_SIZE(1));
+    VALID_RANGE(1, INT_MAX32 / 1000), DEFAULT(NET_WAIT_TIMEOUT), BLOCK_SIZE(1));
 
 static Sys_var_ulong Sys_join_buffer_size(
     "join_buffer_size", "The size of the buffer that is used for full joins",
@@ -2714,7 +2714,7 @@ static Sys_var_ulong Sys_net_read_timeou
     "Number of seconds to wait for more data from a connection before "
     "aborting the read",
     SESSION_VAR(net_read_timeout), CMD_LINE(REQUIRED_ARG),
-    VALID_RANGE(1, LONG_TIMEOUT), DEFAULT(NET_READ_TIMEOUT), BLOCK_SIZE(1),
+    VALID_RANGE(1, INT_MAX32 / 1000), DEFAULT(NET_READ_TIMEOUT), BLOCK_SIZE(1),
     NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),
     ON_UPDATE(fix_net_read_timeout));
 
@@ -2735,7 +2735,7 @@ static Sys_var_ulong Sys_net_write_timeo
     "Number of seconds to wait for a block to be written to a connection "
     "before aborting the write",
     SESSION_VAR(net_write_timeout), CMD_LINE(REQUIRED_ARG),
-    VALID_RANGE(1, LONG_TIMEOUT), DEFAULT(NET_WRITE_TIMEOUT), BLOCK_SIZE(1),
+    VALID_RANGE(1, INT_MAX32 / 1000), DEFAULT(NET_WRITE_TIMEOUT), BLOCK_SIZE(1),
     NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),
     ON_UPDATE(fix_net_write_timeout));
 
@@ -4251,7 +4251,7 @@ static Sys_var_charptr Sys_tls_version(
     READ_ONLY GLOBAL_VAR(opt_tls_version), SSL_OPT(OPT_TLS_VERSION),
     IN_FS_CHARSET, "TLSv1,TLSv1.1,TLSv1.2");
 
-#ifndef HAVE_WOLFSSL
+#if !defined(HAVE_WOLFSSL) && !defined(LIBRESSL_VERSION_NUMBER)
 static bool update_fips_mode(sys_var *, THD *, enum_var_type) {
   char ssl_err_string[OPENSSL_ERROR_LENGTH] = {'\0'};
   if (set_fips_mode(opt_ssl_fips_mode, ssl_err_string) != 1) {
@@ -4264,7 +4264,7 @@ static bool update_fips_mode(sys_var *,
 }
 #endif
 
-#ifdef HAVE_WOLFSSL
+#if defined(HAVE_WOLFSSL) || defined(LIBRESSL_VERSION_NUMBER)
 static const char *ssl_fips_mode_names[] = {"OFF", 0};
 #else
 static const char *ssl_fips_mode_names[] = {"OFF", "ON", "STRICT", 0};
@@ -4280,7 +4280,7 @@ static Sys_var_enum Sys_ssl_fips_mode(
     GLOBAL_VAR(opt_ssl_fips_mode), SSL_OPT(OPT_SSL_FIPS_MODE),
     ssl_fips_mode_names, DEFAULT(0), NO_MUTEX_GUARD, NOT_IN_BINLOG,
     ON_CHECK(NULL),
-#ifndef HAVE_WOLFSSL
+#if !defined(HAVE_WOLFSSL) && !defined(LIBRESSL_VERSION_NUMBER)
     ON_UPDATE(update_fips_mode),
 #else
     ON_UPDATE(NULL),
@@ -4589,7 +4589,7 @@ static Sys_var_ulong Sys_net_wait_timeou
     "The number of seconds the server waits for activity on a "
     "connection before closing it",
     SESSION_VAR(net_wait_timeout), CMD_LINE(REQUIRED_ARG),
-    VALID_RANGE(1, IF_WIN(INT_MAX32 / 1000, LONG_TIMEOUT)),
+    VALID_RANGE(1, INT_MAX32 / 1000),
     DEFAULT(NET_WAIT_TIMEOUT), BLOCK_SIZE(1));
 
 static Sys_var_plugin Sys_default_storage_engine(


[FILE:450:patches/patch-storage_innobase_include_srv0mon.h]
--- storage/innobase/include/srv0mon.h.orig	2019-01-25 22:33:03 UTC
+++ storage/innobase/include/srv0mon.h
@@ -40,6 +40,10 @@ Foundation, Inc., 51 Franklin St, Fifth
 /* Required for FreeBSD so that INT64_MAX is defined. */
 #define __STDC_LIMIT_MACROS
 #endif /* __STDC_LIMIT_MACROS */
+#ifdef __DragonFly__
+/* The hack above doen't work for dragonfly, stdint.h already imported */
+#include <machine/int_limits.h>
+#endif
 
 #include <stdint.h>
 


[FILE:931:patches/patch-storage_myisam_mi__dynrec.cc]
--- storage/myisam/mi_dynrec.cc.orig	2019-01-25 22:33:03 UTC
+++ storage/myisam/mi_dynrec.cc
@@ -84,17 +84,12 @@ bool mi_dynmap_file(MI_INFO *info, my_of
     DBUG_RETURN(1);
   }
   /*
-    I wonder if it is good to use MAP_NORESERVE. From the Linux man page:
-    MAP_NORESERVE
-      Do not reserve swap space for this mapping. When swap space is
-      reserved, one has the guarantee that it is possible to modify the
-      mapping. When swap space is not reserved one might get SIGSEGV
-      upon a write if no physical memory is available.
+    MAP_NORESERVE is unimplemented in FreeBSD
   */
   info->s->file_map = (uchar *)my_mmap(
       0, (size_t)size,
       info->s->mode == O_RDONLY ? PROT_READ : PROT_READ | PROT_WRITE,
-      MAP_SHARED | MAP_NORESERVE, info->dfile, 0L);
+      MAP_SHARED, info->dfile, 0L);
   if (info->s->file_map == (uchar *)MAP_FAILED) {
     info->s->file_map = NULL;
     DBUG_RETURN(1);


[FILE:1755:patches/patch-vio_viosslfactories.cc]
--- vio/viosslfactories.cc.orig	2019-01-25 22:33:03 UTC
+++ vio/viosslfactories.cc
@@ -38,6 +38,7 @@
 
 #ifdef HAVE_OPENSSL
 #include <openssl/dh.h>
+#include <openssl/crypto.h>
 
 #define TLS_VERSION_OPTION_SIZE 256
 #define SSL_CIPHER_LIST_SIZE 4096
@@ -136,7 +137,7 @@ static DH *get_dh2048(void) {
     BIGNUM *p = BN_bin2bn(dh2048_p, sizeof(dh2048_p), NULL);
     BIGNUM *g = BN_bin2bn(dh2048_g, sizeof(dh2048_g), NULL);
     if (!p || !g
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
         || !DH_set0_pqg(dh, p, NULL, g)
 #endif /* OPENSSL_VERSION_NUMBER >= 0x10100000L */
     ) {
@@ -144,7 +145,7 @@ static DH *get_dh2048(void) {
       DH_free(dh);
       return NULL;
     }
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     dh->p = p;
     dh->g = g;
 #endif /* OPENSSL_VERSION_NUMBER < 0x10100000L */
@@ -429,7 +430,7 @@ void ssl_start() {
   }
 }
 
-#ifndef HAVE_WOLFSSL
+#if !defined(HAVE_WOLFSSL) && !defined(LIBRESSL_VERSION_NUMBER)
 /**
   Set fips mode in openssl library,
   When we set fips mode ON/STRICT, it will perform following operations:
@@ -452,6 +453,10 @@ int set_fips_mode(const uint fips_mode,
   int rc = -1;
   unsigned int fips_mode_old = -1;
   unsigned long err_library = 0;
+#if defined(LIBRESSL_VERSION_NUMBER)
+  err_string="LibreSSL deosn't have FIPS_mode functionas";
+  goto EXIT;
+#else
   if (fips_mode > 2) {
     goto EXIT;
   }
@@ -465,6 +470,7 @@ int set_fips_mode(const uint fips_mode,
     ERR_error_string_n(err_library, err_string, OPENSSL_ERROR_LENGTH - 1);
     err_string[OPENSSL_ERROR_LENGTH - 1] = '\0';
   }
+#endif
 EXIT:
   return rc;
 }


[FILE:2182:files/my.cnf.sample.in]
[client]
port                            = 3306
socket                          = /tmp/mysql.sock

[mysql]
prompt                          = \u@\h [\d]>\_
no_auto_rehash

[mysqld]
user                            = mysql
port                            = 3306
socket                          = /tmp/mysql.sock
bind-address                    = 127.0.0.1
basedir                         = %%PREFIX%%
datadir                         = %%MY_DBDIR%%
tmpdir                          = %%MY_TMPDIR%%
slave-load-tmpdir               = %%MY_TMPDIR%%
secure-file-priv                = %%MY_SECDIR%%
log-bin                         = mysql-bin
log-output                      = TABLE
master-info-repository          = TABLE
relay-log-info-repository       = TABLE
relay-log-recovery              = 1
slow-query-log                  = 1
server-id                       = 1
sync_binlog                     = 1
sync_relay_log                  = 1
binlog_cache_size               = 16M
expire_logs_days                = 30
default_password_lifetime       = 0
enforce-gtid-consistency        = 1
gtid-mode                       = ON
safe-user-create                = 1
lower_case_table_names          = 1
explicit-defaults-for-timestamp = 1
myisam-recover-options          = BACKUP,FORCE
open_files_limit                = 32768
table_open_cache                = 16384
table_definition_cache          = 8192
net_retry_count                 = 16384
key_buffer_size                 = 256M
max_allowed_packet              = 64M
query_cache_type                = 0
query_cache_size                = 0
long_query_time                 = 0.5
innodb_buffer_pool_size         = 1G
innodb_data_home_dir            = %%MY_DBDIR%%
innodb_log_group_home_dir       = %%MY_DBDIR%%
innodb_data_file_path           = ibdata1:128M:autoextend
innodb_temp_data_file_path      = ibtmp1:128M:autoextend
innodb_flush_method             = O_DIRECT
innodb_log_file_size            = 256M
innodb_log_buffer_size          = 16M
innodb_write_io_threads         = 8
innodb_read_io_threads          = 8
innodb_autoinc_lock_mode        = 2
skip-symbolic-links

[mysqldump]
max_allowed_packet              = 256M
quote_names
quick


[FILE:2478:files/mysql-server.in]
#!/bin/sh
#
# PROVIDE: mysql
# REQUIRE: LOGIN
# KEYWORD: shutdown

#
# Add the following line to /etc/rc.conf to enable mysql:
# mysql_enable (bool):	Set to "NO" by default.
#			Set it to "YES" to enable MySQL.
# mysql_limits (bool):	Set to "NO" by default.
#			Set it to yes to run `limits -e -U mysql`
#			just before mysql starts.
# mysql_dbdir (str):	Default to "%%MY_DBDIR%%"
#			Base database directory.
# mysql_confdir (str):	Default to "%%ETCDIR%%"
#			Base configuration directory.
# mysql_optfile (str):	Server-specific option file.
#			Set it in the rc.conf or default behaviour of
#			`mysqld_safe` itself, will be picking
#			${mysql_confdir}/my.cnf if it exists.
# mysql_pidfile (str):	Custum PID file path and name.
#			Default to "${mysql_dbdir}/${hostname}.pid".
# mysql_args (str):	Custom additional arguments to be passed
#			to mysqld_safe (default empty).
#

. /etc/rc.subr

name="mysql"
rcvar=mysql_enable

load_rc_config $name

: ${mysql_enable="NO"}
: ${mysql_limits="NO"}
: ${mysql_dbdir="%%MY_DBDIR%%"}
: ${mysql_confdir="%%ETCDIR%%"}
if [ -f "${mysql_confdir}/my.cnf" ]; then
: ${mysql_optfile="${mysql_confdir}/my.cnf"}
elif [ -f "${mysql_dbdir}/my.cnf" ]; then
: ${mysql_optfile="${mysql_dbdir}/my.cnf"}
fi
if [ ! -z "${mysql_optfile}" ]; then
mysql_extra="--defaults-extra-file=${mysql_optfile}"
fi

mysql_user="mysql"
mysql_limits_args="-e -U ${mysql_user}"
: ${hostname:=`/bin/hostname`}
pidfile=${mysql_pidfile:-"${mysql_dbdir}/${hostname}.pid"}
command="/usr/sbin/daemon"
command_args="-c -f %%PREFIX%%/bin/mysqld_safe ${mysql_extra} --basedir=%%PREFIX%% --datadir=${mysql_dbdir} --pid-file=${pidfile} --user=${mysql_user} ${mysql_args} %%FEDER%% %%PERFSCHEMRC%%"
procname="%%PREFIX%%/libexec/mysqld"
start_precmd="${name}_prestart"
start_postcmd="${name}_poststart"
mysql_install_db="%%PREFIX%%/bin/mysql_install_db"
mysql_install_db_args="${mysql_extra} --basedir=%%PREFIX%% --datadir=${mysql_dbdir} --mysqld-file=${procname} --user=${mysql_user}"

mysql_create_auth_tables()
{
	eval $mysql_install_db $mysql_install_db_args >/dev/null 2>/dev/null
}

mysql_prestart()
{
	if [ ! -d "${mysql_dbdir}/mysql/." ]; then
		mysql_create_auth_tables || return 1
	fi
	if checkyesno mysql_limits; then
		eval `/usr/bin/limits ${mysql_limits_args}` 2>/dev/null
	else
		return 0
	fi
}

mysql_poststart()
{
	local timeout=15
	while [ ! -f "${pidfile}" -a ${timeout} -gt 0 ]; do
		timeout=$(( timeout - 1 ))
		sleep 1
	done
	return 0
}

run_rc_command "$1"


[FILE:576:files/pkg-message-server.in]
*****************************************************************************

Remember to run mysql_upgrade the first time you start the MySQL server
after an upgrade from an earlier version.

Initial password for first time use of MySQL is saved in $HOME/.mysql_secret
ie. when you want to use "mysql -u root -p" first you should see password
in /root/.mysql_secret

MySQL57 has a default %%ETCDIR%%/my.cnf,
remember to replace it wit your own
or set `mysql_optfile="$YOUR_CNF_FILE` in rc.conf.

*****************************************************************************


[FILE:28:files/special.mk]
ETCDIR=	${PREFIX}/etc/mysql

