# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		fuse3
VERSION=		3.17.1
KEYWORDS=		sysutils
VARIANTS=		std
SDESC[std]=		File System in Userspace (FUSE) utilities
HOMEPAGE=		https://github.com/libfuse/libfuse
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/libfuse:libfuse:fuse-3.17.1
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		set
			primary
			dev
			man

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

NOT_FOR_OPSYS=		dragonfly sunos

USES=			cpe meson pkgconfig

LICENSE=		LGPL21:primary GPLv2:primary
LICENSE_TERMS=		primary:{{WRKSRC}}/LICENSE
LICENSE_FILE=		LGPL21:{{WRKSRC}}/LGPL2.txt
			GPLv2:{{WRKSRC}}/GPL2.txt
LICENSE_SCHEME=		multi

CPE_PRODUCT=		fuse
CPE_VENDOR=		fuse_project
MESON_ARGS=		-Dtests=false
			-Dexamples=false

SOVERSION=		3.17.1

MOUNT_PROCFS=		yes
VAR_OPSYS[netbsd]=	CFLAGS=-D__off64_t=off_t

post-install-linux:
	${RM} -r ${STAGEDIR}/dev
	${MV} ${STAGEDIR}${PREFIX}/etc/fuse.conf ${STAGEDIR}${PREFIX}/etc/fuse.conf.sample

[FILE:1114:descriptions/desc.primary]
FUSE (Filesystem in Userspace) is an interface for userspace programs to 
export a filesystem to the kernel. The FUSE project consists of two
components: the fuse kernel module (maintained by supported operating
system) and the libfuse userspace library (the contents of this package).
libfuse provides the reference implementation for communicating with the
FUSE kernel module.

A FUSE file system is typically implemented as a standalone application 
that links with libfuse. libfuse provides functions to mount the file 
system, unmount it, read requests from the kernel, and send responses 
back. libfuse offers two APIs: a "high-level", synchronous API, and a 
"low-level" asynchronous API. In both cases, incoming requests from the 
kernel are passed to the main program using callbacks. When using the 
high-level API, the callbacks may work with file names and paths instead 
of inodes, and processing of a request finishes when the callback function 
returns. When using the low-level API, the callbacks must work with inodes 
and responses must be sent explicitly using a separate set of API 
functions.


[FILE:113:distinfo]
b81027fc8f444fb574de7f13edf0cf9810643d2935670c4fe19f140354241208       918705 libfuse-libfuse-fuse-3.17.1.tar.gz


[FILE:183:manifests/plist.primary]
%%ONLY-LINUX%%/etc/init.d/fuse3
%%ONLY-LINUX%%@sample etc/fuse.conf.sample
%%ONLY-LINUX%%bin/fusermount3
%%ONLY-LINUX%%sbin/mount.fuse3
lib/
 libfuse3.so.4
 libfuse3.so.%%SOVERSION%%


[FILE:153:manifests/plist.dev]
include/fuse3/
 cuse_lowlevel.h
 fuse.h
 fuse_common.h
 fuse_log.h
 fuse_lowlevel.h
 fuse_opt.h
 libfuse_config.h
lib/libfuse3.so
lib/pkgconfig/fuse3.pc


[FILE:86:manifests/plist.man]
%%ONLY-LINUX%%share/man/man1/fusermount3.1
%%ONLY-LINUX%%share/man/man8/mount.fuse3.8


[FILE:489:patches/patch-lib_mount__bsd.c]
--- lib/mount_bsd.c.orig	2025-03-24 12:25:30 UTC
+++ lib/mount_bsd.c
@@ -81,7 +81,7 @@ static const struct fuse_opt fuse_mount_
 	FUSE_DUAL_OPT_KEY("private",		KEY_KERN),
 	FUSE_DUAL_OPT_KEY("neglect_shares",	KEY_KERN),
 	FUSE_DUAL_OPT_KEY("push_symlinks_in",	KEY_KERN),
-#if __FreeBSD_version >= 1200519
+#if (__FreeBSD_version >= 1200519) || defined(__MidnightBSD__)
 	FUSE_DUAL_OPT_KEY("intr",		KEY_KERN),
 #endif
 	/* stock FBSD mountopt parsing routine lets anything be negated... */


[FILE:475:patches/patch-meson.build]
--- meson.build.orig	2025-03-24 12:25:30 UTC
+++ meson.build
@@ -80,7 +80,7 @@ endforeach
 private_cfg.set('HAVE_SETXATTR', 
         cc.has_function('setxattr', prefix: '#include <sys/xattr.h>'))
 private_cfg.set('HAVE_ICONV', 
-        cc.has_function('iconv', prefix: '#include <iconv.h>'))
+        cc.has_function('dontuseiconv', prefix: '#include <iconv.h>'))
 private_cfg.set('HAVE_BACKTRACE',
         cc.has_function('backtrace', prefix: '#include <execinfo.h>'))
 


[FILE:361:patches/patch-util_meson.build]
--- util/meson.build.orig	2025-03-24 12:25:30 UTC
+++ util/meson.build
@@ -18,7 +18,7 @@ udevrulesdir = get_option('udevrulesdir'
 if udevrulesdir == ''
   udev = dependency('udev', required: false)
   if udev.found()
-     udevrulesdir = join_paths(udev.get_variable(pkgconfig: 'udevdir'), 'rules.d')
+     udevrulesdir = '/etc/udev/rules.d'
   endif
 endif
 


[FILE:202:files/messages-primary-freebsd.ucl]
freebsd: {
  type: "install"
  message: <<EOM
================ FreeBSD Message ================ 
Install the fuse kernel module to use this port.
=================================================
EOM
}


[FILE:178:files/scripts-primary.ucl.in]
pre-install: [{
     args: ""
     code: <<EOS
EOS
/bin/mknod -m 0666 /dev/fuse c 10 229 || true
}]
post-deinstall: [{
     args: ""
     code: <<EOS
/bin/rm -f /dev/fuse
EOS
}]

