# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		fuse3
VERSION=		3.9.2
KEYWORDS=		sysutils
VARIANTS=		standard
SDESC[standard]=	File System in Userspace (FUSE) utilities
HOMEPAGE=		https://github.com/libfuse/libfuse
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/libfuse:libfuse:fuse-3.9.2
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

NOT_FOR_OPSYS=		dragonfly sunos

USES=			cpe meson pkgconfig

LICENSE=		LGPL21:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		LGPL21:{{WRKSRC}}/COPYING.LIB
LICENSE_AWK=		TERMS:"pthread.h"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/lib/fuse_misc.h
LICENSE_SCHEME=		solo

CPE_PRODUCT=		fuse
CPE_VENDOR=		fuse_project

SOVERSION=		3.9.2

post-patch:
	# temporary, remove when 3.4.0 released
	${REINPLACE_CMD} -e 's|3.4.0|3.9.2|' ${WRKSRC}/meson.build

post-install-linux:
	${RM} -r ${STAGEDIR}/dev
	${MV} ${STAGEDIR}${PREFIX}/etc/fuse.conf ${STAGEDIR}${PREFIX}/etc/fuse.conf.sample

[FILE:1114:descriptions/desc.single]
FUSE (Filesystem in Userspace) is an interface for userspace programs to 
export a filesystem to the kernel. The FUSE project consists of two
components: the fuse kernel module (maintained by supported operating
system) and the libfuse userspace library (the contents of this package).
libfuse provides the reference implementation for communicating with the
FUSE kernel module.

A FUSE file system is typically implemented as a standalone application 
that links with libfuse. libfuse provides functions to mount the file 
system, unmount it, read requests from the kernel, and send responses 
back. libfuse offers two APIs: a "high-level", synchronous API, and a 
"low-level" asynchronous API. In both cases, incoming requests from the 
kernel are passed to the main program using callbacks. When using the 
high-level API, the callbacks may work with file names and paths instead 
of inodes, and processing of a request finishes when the callback function 
returns. When using the low-level API, the callbacks must work with inodes 
and responses must be sent explicitly using a separate set of API 
functions.


[FILE:112:distinfo]
b4409255cbda6f6975ca330f5b04cb335b823a95ddd8c812c3d224ec53478fc0       772386 libfuse-libfuse-fuse-3.9.2.tar.gz


[FILE:570:manifests/plist.single]
%%ONLY-LINUX%%/etc/init.d/fuse3
%%ONLY-LINUX%%/etc/udev/rules.d/99-fuse3.rules
%%ONLY-LINUX%%@postunexec rm -f /dev/fuse
%%ONLY-LINUX%%@preexec mknod -m 0666 /dev/fuse c 10 229 || true
%%ONLY-LINUX%%@sample etc/fuse.conf.sample
%%ONLY-LINUX%%bin/fusermount3
%%ONLY-LINUX%%sbin/mount.fuse3
%%ONLY-LINUX%%share/man/man1/fusermount3.1.gz
%%ONLY-LINUX%%share/man/man8/mount.fuse3.8.gz
include/fuse3/
 cuse_lowlevel.h
 fuse.h
 fuse_common.h
 fuse_log.h
 fuse_lowlevel.h
 fuse_opt.h
lib/
 libfuse3.so
 libfuse3.so.%%SOMAJOR%%
 libfuse3.so.%%SOVERSION%%
lib/pkgconfig/fuse3.pc


[FILE:429:patches/patch-meson.build]
--- meson.build.orig	2020-03-19 20:00:41 UTC
+++ meson.build
@@ -44,7 +44,7 @@ endforeach
 cfg.set('HAVE_SETXATTR', 
         cc.has_function('setxattr', prefix: '#include <sys/xattr.h>'))
 cfg.set('HAVE_ICONV', 
-        cc.has_function('iconv', prefix: '#include <iconv.h>'))
+        cc.has_function('dontuseiconv', prefix: '#include <iconv.h>'))
 
 # Test if structs have specific member
 cfg.set('HAVE_STRUCT_STAT_ST_ATIM',


[FILE:401:patches/patch-util_meson.build]
--- util/meson.build.orig	2020-03-19 20:00:41 UTC
+++ util/meson.build
@@ -16,8 +16,7 @@ executable('mount.fuse3', ['mount.fuse.c
 
 udevrulesdir = get_option('udevrulesdir')
 if udevrulesdir == ''
-  udev = dependency('udev')
-  udevrulesdir = join_paths(udev.get_pkgconfig_variable('udevdir'), 'rules.d')
+  udevrulesdir = '/etc/udev/rules.d'
 endif
 
 meson.add_install_script('install_helper.sh',


[FILE:150:files/pkg-message-single-freebsd]
================ FreeBSD Message ================ 
Install the fuse kernel module to use this port.
=================================================

