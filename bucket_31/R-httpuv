# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		R-httpuv
VERSION=		1.5.3.1
KEYWORDS=		cran
VARIANTS=		standard
SDESC[standard]=	HTTP and WebSocket Server Library
HOMEPAGE=		https://github.com/rstudio/httpuv
CONTACT=		CRAN_Automaton[cran@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		CRAN/src/contrib
DISTFILE[1]=		httpuv_1.5.3.1.tar.gz:main
DIST_SUBDIR=		CRAN
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	R-Rcpp:single:standard
			R-R6:single:standard
			R-promises:single:standard
			R-later:single:standard
			R-BH:single:standard

USES=			cran gmake

DISTNAME=		httpuv

GENERATED=		yes

INSTALL_REQ_TOOLCHAIN=	yes

[FILE:492:descriptions/desc.single]
httpuv: HTTP and WebSocket Server Library

Provides low-level socket and protocol support for handling HTTP and
WebSocket requests directly from within R. It is primarily intended as a
building block for other packages, rather than making it particularly easy
to create complete web applications using httpuv alone. httpuv is built on
top of the libuv and http-parser C libraries, both of which were developed
by Joyent, Inc. (See LICENSE file for libuv and http-parser license
information.)


[FILE:105:distinfo]
5f517d4358957782bbcdd93fe551b5c2962e4f43fee486c69a7fb71af6950252      1803128 CRAN/httpuv_1.5.3.1.tar.gz


[FILE:733:patches/patch-src_unix_freebsd.c]
--- src/libuv/src/unix/freebsd.c.orig	2020-05-15 16:23:13 UTC
+++ src/libuv/src/unix/freebsd.c
@@ -58,7 +58,8 @@ void uv__platform_loop_delete(uv_loop_t*
 
 
 #ifdef __DragonFly__
-int uv_exepath(char* buffer, size_t* size) {
+/* deprecated long ago, use KERN_PROC_PATHNAME sysctl */
+int uv_exepath_procfs(char* buffer, size_t* size) {
   char abspath[PATH_MAX * 2 + 1];
   ssize_t abspath_size;
 
@@ -80,7 +81,8 @@ int uv_exepath(char* buffer, size_t* siz
 
   return 0;
 }
-#else
+#endif
+
 int uv_exepath(char* buffer, size_t* size) {
   char abspath[PATH_MAX * 2 + 1];
   int mib[4];
@@ -110,7 +112,6 @@ int uv_exepath(char* buffer, size_t* siz
 
   return 0;
 }
-#endif
 
 uint64_t uv_get_free_memory(void) {
   int freecount;


[FILE:1597:patches/patch-src_unix_fs.c]
--- src/libuv/src/unix/fs.c.orig	2020-05-15 16:23:13 UTC
+++ src/libuv/src/unix/fs.c
@@ -976,7 +976,6 @@ static ssize_t uv__fs_sendfile(uv_fs_t*
 static ssize_t uv__fs_utime(uv_fs_t* req) {
 #if defined(__linux__)                                                         \
     || defined(_AIX71)                                                         \
-    || defined(__sun)                                                          \
     || defined(__HAIKU__)
   /* utimesat() has nanosecond resolution but we stick to microseconds
    * for the sake of consistency with other platforms.
@@ -986,6 +985,7 @@ static ssize_t uv__fs_utime(uv_fs_t* req
   ts[1] = uv__fs_to_timespec(req->mtime);
   return utimensat(AT_FDCWD, req->path, ts, 0);
 #elif defined(__APPLE__)                                                      \
+    || defined(__sun)                                                         \
     || defined(__DragonFly__)                                                 \
     || defined(__FreeBSD__)                                                   \
     || defined(__FreeBSD_kernel__)                                            \
@@ -1019,7 +1019,6 @@ static ssize_t uv__fs_utime(uv_fs_t* req
 static ssize_t uv__fs_lutime(uv_fs_t* req) {
 #if defined(__linux__)            ||                                           \
     defined(_AIX71)               ||                                           \
-    defined(__sun)                ||                                           \
     defined(__HAIKU__)
   struct timespec ts[2];
   ts[0] = uv__fs_to_timespec(req->atime);


[FILE:1063:patches/patch-src_unix_udp.c]
--- src/libuv/src/unix/udp.c.orig	2020-05-15 16:23:13 UTC
+++ src/libuv/src/unix/udp.c
@@ -850,7 +850,7 @@ static int uv__udp_set_membership6(uv_ud
 }
 
 
-#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__)
+#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__) && !defined(__DragonFly__)
 static int uv__udp_set_source_membership4(uv_udp_t* handle,
                                           const struct sockaddr_in* multicast_addr,
                                           const char* interface_addr,
@@ -1045,7 +1045,7 @@ int uv_udp_set_source_membership(uv_udp_
                                  const char* interface_addr,
                                  const char* source_addr,
                                  uv_membership membership) {
-#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__)
+#if !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__ANDROID__) && !defined(__DragonFly__)
   int err;
   struct sockaddr_storage mcast_addr;
   struct sockaddr_in* mcast_addr4;

