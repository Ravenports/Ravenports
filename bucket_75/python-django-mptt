# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-django-mptt
VERSION=		0.17.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Django Modified Preorder Tree Traversal (3.12)
SDESC[v13]=		Django Modified Preorder Tree Traversal (3.13)
HOMEPAGE=		https://github.com/django-mptt/django-mptt/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/8d/81/ce5576765cea3cdb37c983400f76050194c354d55a3facf39561cf24adc2
DISTFILE[1]=		django_mptt-0.17.0-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		django_mptt-0.17.0.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-django-js-asset:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-django-js-asset:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:3165:descriptions/desc.single]
==========================================
**This project is currently unmaintained**
==========================================

You can find alternatives to django-mptt on
[Django Packages].
Maybe you do not need MPTT, especially when using newer databases. See
`django-tree-queries <https://github.com/matthiask/django-tree-queries>`_
for an
implementation using recursive Common Table Expressions (CTE). Here's its
[announcement blog post].

===========
django-mptt
===========

Utilities for implementing Modified Preorder Tree Traversal with your
Django Models and working with trees of Model instances.

Project home: https://github.com/django-mptt/django-mptt/

Documentation: https://django-mptt.readthedocs.io/

Discussion group: https://groups.google.com/forum/#!forum/django-mptt-dev

What is Modified Preorder Tree Traversal?
=========================================

MPTT is a technique for storing hierarchical data in a database. The aim is
to
make retrieval operations very efficient.

The trade-off for this efficiency is that performing inserts and moving
items around the tree are more involved, as there's some extra work
required to keep the tree structure in a good state at all times.

Here are a few articles about MPTT to whet your appetite and provide
details about how the technique itself works:

* `Trees in SQL`_
* `Storing Hierarchical Data in a Database`_
* `Managing Hierarchical Data in MySQL`_

.. _`Trees in SQL`:
https://www.ibase.ru/files/articles/programming/dbmstrees/sqltrees.html
.. _`Storing Hierarchical Data in a Database`:
https://www.sitepoint.com/hierarchical-data-database/
.. _`Managing Hierarchical Data in MySQL`:
http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/

What is ``django-mptt``?
========================

``django-mptt`` is a reusable Django app that aims to make it easy for you
to use MPTT with your own Django models.

It takes care of the details of managing a database table as a tree
structure and provides tools for working with trees of model instances.

Requirements
------------

* A supported version of Python:
https://devguide.python.org/versions/#supported-versions
* A supported version of Django:
https://www.djangoproject.com/download/#supported-versions

Feature overview
----------------

* Simple registration of models - fields required for tree structure will
be
  added automatically.

* The tree structure is automatically updated when you create or delete
  model instances, or change an instance's parent.

* Each level of the tree is automatically sorted by a field (or fields) of
your
  choice.

* New model methods are added to each registered model for:

  * changing position in the tree
  * retrieving ancestors, siblings, descendants
  * counting descendants
  * other tree-related operations

* A TreeManager manager is added to all registered models. This provides
  methods to:

  * move nodes around a tree, or into a different tree
  * insert a node anywhere in a tree
  * rebuild the MPTT fields for the tree (useful when you do bulk updates
    outside of Django)

* `Form fields`_ for tree models.

* `Utility functions`_ for tree models.



[FILE:125:distinfo]
e77dd4b4d0de14f50239b0900def44c1d31403664ab3682b80b27fa1319fe7f0       120170 python-src/django_mptt-0.17.0-py3-none-any.whl

