# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		nginx
VERSION=		1.13.4
KEYWORDS=		lang
VARIANTS=		standard loaded
SDESC[standard]=	HTTP and reverse proxy server (basic options)
SDESC[loaded]=		HTTP and reverse proxy server (all options)
HOMEPAGE=		https://nginx.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main geoip2 notice
SITES[geoip2]=		GITHUB/leev:ngx_http_geoip2_module:2.0
SITES[main]=		http://nginx.org/download/
SITES[notice]=		GITHUB/kr:nginx-notice:3c95966
DISTFILE[1]=		nginx-1.13.4.tar.gz:main
DISTFILE[2]=		generated:geoip2
DISTFILE[3]=		generated:notice
DF_INDEX=		1
SPKGS[standard]=	single
SPKGS[loaded]=		single

OPTIONS_AVAILABLE=	LOADED
OPTIONS_STANDARD=	none
VOPTS[loaded]=		LOADED=ON

BUILD_DEPENDS=		pcre:static:standard
BUILDRUN_DEPENDS=	pcre:shared:standard

USERS=			{{WWWOWN}}
GROUPS=			{{WWWGRP}}
USERGROUP_SPKG=		single

USES=			cpe ssl zlib

CPE_PRODUCT=		nginx
CPE_VENDOR=		nginx
FPC_EQUIVALENT=		www/nginx

MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--prefix={{PREFIX}}/etc/nginx
			--with-cc-opt="-I{{LOCALBASE}}/include"
			--with-ld-opt="-L{{LOCALBASE}}/lib -Wl,-rpath,{{LOCALBASE}}/lib"
			--conf-path={{PREFIX}}/etc/nginx/nginx.conf
			--sbin-path={{PREFIX}}/sbin/nginx
			--pid-path=/var/run/nginx.pid
			--error-log-path=/var/log/nginx/error.log
			--user={{WWWOWN}}
			--group={{WWWGRP}}
			--with-pcre
			--modules-path={{PREFIX}}/libexec/nginx
			--with-file-aio
			--http-client-body-temp-path=/var/tmp/nginx/client_body_temp
			--http-fastcgi-temp-path=/var/tmp/nginx/fastcgi_temp
			--http-proxy-temp-path=/var/tmp/nginx/proxy_temp
			--http-scgi-temp-path=/var/tmp/nginx/scgi_temp
			--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi_temp
			--http-log-path=/var/log/nginx/access.log
			--with-http_addition_module
			--with-http_auth_request_module
			--with-http_dav_module
			--with-http_flv_module
			--with-http_gzip_static_module
			--with-http_gunzip_module
			--with-http_mp4_module
			--with-http_random_index_module
			--with-http_realip_module
			--with-http_secure_link_module
			--with-http_slice_module
			--with-http_ssl_module
			--with-http_stub_status_module
			--with-http_sub_module
			--with-http_v2_module
			--with-mail=dynamic
			--with-mail_ssl_module
			--with-stream=dynamic
			--with-stream_ssl_module
			--with-stream_ssl_preread_module
			--with-threads

PLIST_SUB=		WWWOWN={{WWWOWN}}
			WWWGRP={{WWWGRP}}
			NGINX_TMPDIR=/var/tmp/nginx
			NGINX_LOGDIR=/var/log/nginx
RC_SUBR=		nginx:single
SUB_FILES=		pkg-message-single
SUB_LIST=		WWWOWN={{WWWOWN}}
			WWWGRP={{WWWGRP}}
			NGINX_TMPDIR=/var/tmp/nginx
			NGINX_LOGDIR=/var/log/nginx

[LOADED].DESCRIPTION=			All options enabled (heavy dependencies)
[LOADED].BROKEN_ON=			need to replace gpatch with bsdpatch
[LOADED].BUILDRUN_DEPENDS_ON=		libmaxminddb:single:standard
[LOADED].CONFIGURE_ARGS_OFF=		--without-mail_imap_module
					--without-mail_pop3_module
					--without-mail_smtp_module
[LOADED].CONFIGURE_ARGS_ON=		--add-dynamic-module={{WRKDIR}}/ngx_http_geoip2_module-2.0
					--add-module={{WRKDIR}}/nginx-notice-3c95966
[LOADED].DF_INDEX_ON=			2
					3
[LOADED].EXTRA_PATCHES_ON=		extra-patch-ngx_http_notice_module.c

post-patch:
	@${REINPLACE_CMD} 's!%%HTTP_PORT%%!80!; \
		s!%%PREFIX%%!${PREFIX}!; \
		s!%%NGINX_ERRORLOG%%!/var/log/nginx/error.log!' \
		${WRKSRC}/conf/nginx.conf

do-build:
	@(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${MAKE_CMD})

post-install:
	${CAT} ${WRKSRC}/conf/nginx.conf \
		>>${STAGEDIR}${PREFIX}/etc/nginx/nginx.conf-dist
	${INSTALL_MAN} ${WRKSRC}/objs/nginx.8 \
		${STAGEDIR}${MAN8PREFIX}/man/man8

do-install:
	${MKDIR} ${STAGEDIR}${PREFIX}/etc/nginx \
		${STAGEDIR}${PREFIX}/libexec/nginx \
		${STAGEDIR}/var/tmp/nginx \
		${STAGEDIR}/var/log/nginx \
		${STAGEDIR}${PREFIX}/www/nginx-dist
	${INSTALL_PROGRAM} ${WRKSRC}/objs/nginx ${STAGEDIR}${PREFIX}/sbin
.for i in koi-utf koi-win win-utf
	${INSTALL_DATA} ${WRKSRC}/conf/${i} ${STAGEDIR}${PREFIX}/etc/nginx
.endfor
.for i in fastcgi_params mime.types scgi_params uwsgi_params
	${INSTALL_DATA} ${WRKSRC}/conf/${i} ${STAGEDIR}${PREFIX}/etc/nginx/${i}-dist
.endfor
.for i in index.html 50x.html
	${INSTALL_DATA} ${WRKSRC}/html/${i} ${STAGEDIR}${PREFIX}/www/nginx-dist
.endfor
	${ECHO_CMD} >> ${STAGEDIR}${PREFIX}/www/nginx-dist/EXAMPLE_DIRECTORY-DONT_ADD_OR_TOUCH_ANYTHING
	(cd ${WRKSRC}/objs/ && ${FIND} . -depth -maxdepth 1 -name '*.so' -type f \
		-exec ${INSTALL_PROGRAM} {} ${STAGEDIR}${PREFIX}/libexec/nginx \;)

[FILE:351:descriptions/desc.single.standard]
NGINX is a high performance edge web server with the lowest memory
footprint and the key features to build modern and efficient web
infrastructure.

NGINX functionality includes HTTP server, HTTP and mail reverse proxy,
caching, load balancing, compression, request throttling, connection
multiplexing and reuse, SSL offload and HTTP media streaming.


[FILE:471:descriptions/desc.single.loaded]
NGINX is a high performance edge web server with the lowest memory
footprint and the key features to build modern and efficient web
infrastructure.

NGINX functionality includes HTTP server, HTTP and mail reverse proxy,
caching, load balancing, compression, request throttling, connection
multiplexing and reuse, SSL offload and HTTP media streaming.

This package contains additional modules over the standard nginx:
  geoip2          : handles maxmind geoip2 databases


[FILE:324:distinfo]
de21f3c49ba65c611329d8759a63d72e5fcf719bc6f2a3270e2541348ef1fbba       988415 nginx-1.13.4.tar.gz
ebb4652c4f9a2e1ee31fddefc4c93ff78e651a4b2727d3453d026bccbd708d99         6766 leev-ngx_http_geoip2_module-2.0.tar.gz
e829fc94178cc8c91fef15a1fc44ee7ac162c13eddc0bba4c9427aaa23386885         3343 kr-nginx-notice-3c95966.tar.gz


[FILE:777:manifests/plist.single.standard]
@dir %%NGINX_LOGDIR%%
@dir %%NGINX_TMPDIR%%
@sample etc/nginx/fastcgi_params-dist etc/nginx/fastcgi_params
@sample etc/nginx/mime.types-dist etc/nginx/mime.types
@sample etc/nginx/nginx.conf-dist etc/nginx/nginx.conf
@sample etc/nginx/scgi_params-dist etc/nginx/scgi_params
@sample etc/nginx/uwsgi_params-dist etc/nginx/uwsgi_params
etc/nginx/
 koi-utf
 koi-win
 win-utf
libexec/nginx/
 ngx_mail_module.so
 ngx_stream_module.so
sbin/nginx
share/man/man8/nginx.8.gz
www/nginx-dist/
 50x.html
 EXAMPLE_DIRECTORY-DONT_ADD_OR_TOUCH_ANYTHING
 index.html
@preexec mkdir -p -m 755 %D/www/nginx-dist
@preexec if [ ! -d %D/www/nginx/ ] ; then ln -fs %D/www/nginx-dist %D/www/nginx; fi
@preexec chmod a-w %D/www/nginx-dist
@postunexec if [ -L %D/www/nginx ]; then rm -f %D/www/nginx; fi


[FILE:833:manifests/plist.single.loaded]
@dir %%NGINX_LOGDIR%%
@dir %%NGINX_TMPDIR%%
@sample etc/nginx/fastcgi_params-dist etc/nginx/fastcgi_params
@sample etc/nginx/mime.types-dist etc/nginx/mime.types
@sample etc/nginx/nginx.conf-dist etc/nginx/nginx.conf
@sample etc/nginx/scgi_params-dist etc/nginx/scgi_params
@sample etc/nginx/uwsgi_params-dist etc/nginx/uwsgi_params
etc/nginx/
 koi-utf
 koi-win
 win-utf
libexec/nginx/
 ngx_http_geoip2_module.so
 ngx_mail_module.so
 ngx_stream_module.so
 ngx_stream_geoip2_module.so
sbin/nginx
share/man/man8/nginx.8.gz
www/nginx-dist/
 50x.html
 EXAMPLE_DIRECTORY-DONT_ADD_OR_TOUCH_ANYTHING
 index.html
@preexec mkdir -p -m 755 %D/www/nginx-dist
@preexec if [ ! -d %D/www/nginx/ ] ; then ln -fs %D/www/nginx-dist %D/www/nginx; fi
@preexec chmod a-w %D/www/nginx-dist
@postunexec if [ -L %D/www/nginx ]; then rm -f %D/www/nginx; fi


[FILE:360:files/extra-patch-ngx_http_notice_module.c]
--- ../nginx-notice-3c95966/ngx_http_notice_module.c.orig	2009-07-16 18:37:57.000000000 +0200
+++ ../nginx-notice-3c95966/ngx_http_notice_module.c
@@ -153,7 +153,7 @@
         return NGX_HTTP_NOT_ALLOWED;
     }
 
-    rc = ngx_http_discard_body(r);
+    rc = ngx_http_discard_request_body(r);
 
     if (rc != NGX_OK && rc != NGX_AGAIN) {
         return rc;


[FILE:3521:files/nginx.in]
#!/bin/sh
#
# PROVIDE: nginx
# REQUIRE: LOGIN cleanvar
# KEYWORD: shutdown
#
# Add the following lines to /etc/rc.conf to enable nginx:
# nginx_enable (bool):		Set to "NO" by default.
#				Set it to "YES" to enable nginx
# nginx_profiles (str):		Set to "" by default.
#				Define your profiles here.
# nginx_pid_prefix (str):	Set to "" by default.
#				When using profiles manually assign value to "nginx_"
#				for prevent collision with other PIDs names.
# nginxlimits_enable (bool):	Set to "NO" by default.
#				Set it to yes to run `limits $limits_args`
#				just before nginx starts.
# nginx_flags (str):		Set to "" by default.
#				Extra flags passed to start command.
# nginxlimits_args (str):	Default to "-e -U %%WWWOWN%%"
#				Arguments of pre-start limits run.

. /etc/rc.subr

name="nginx"
rcvar=nginx_enable

start_precmd="nginx_precmd"
restart_precmd="nginx_checkconfig"
reload_precmd="nginx_checkconfig"
configtest_cmd="nginx_checkconfig"
gracefulstop_cmd="nginx_gracefulstop"
upgrade_precmd="nginx_checkconfig"
upgrade_cmd="nginx_upgrade"
command="%%PREFIX%%/sbin/nginx"
_pidprefix="%%NGINX_RUNDIR%%"
pidfile="${_pidprefix}/${name}.pid"
_tmpprefix="%%NGINX_TMPDIR%%"
required_files=%%PREFIX%%/etc/nginx/nginx.conf
extra_commands="reload configtest upgrade gracefulstop"

[ -z "$nginx_enable" ]		&& nginx_enable="NO"
[ -z "$nginxlimits_enable" ]	&& nginxlimits_enable="NO"
[ -z "$nginxlimits_args" ]	&& nginxlimits_args="-e -U %%WWWOWN%%"

load_rc_config $name

if [ -n "$2" ]; then
	profile="$2"
	if [ "x${nginx_profiles}" != "x" ]; then
		pidfile="${_pidprefix}/${nginx_pid_prefix}${profile}.pid"
		eval nginx_configfile="\${nginx_${profile}_configfile:-}"
		if [ "x${nginx_configfile}" = "x" ]; then
			echo "You must define a configuration file (nginx_${profile}_configfile)"
			exit 1
		fi
		required_files="${nginx_configfile}"
		eval nginx_enable="\${nginx_${profile}_enable:-${nginx_enable}}"
		eval nginx_flags="\${nginx_${profile}_flags:-${nginx_flags}}"
		eval nginxlimits_enable="\${nginxlimits_${profile}_enable:-${nginxlimits_enable}}"
		eval nginxlimits_args="\${nginxlimits_${profile}_args:-${nginxlimits_args}}"
		nginx_flags="-c ${nginx_configfile} -g \"pid ${pidfile};\" ${nginx_flags}"
	else
		echo "$0: extra argument ignored"
	fi
else
	if [ "x${nginx_profiles}" != "x" -a "x$1" != "x" ]; then
		for profile in ${nginx_profiles}; do
			echo "===> nginx profile: ${profile}"
			%%PREFIX%%/etc/rc.d/nginx $1 ${profile}
			retcode="$?"
			if [ "0${retcode}" -ne 0 ]; then
				failed="${profile} (${retcode}) ${failed:-}"
			else
				success="${profile} ${success:-}"
			fi
		done
		exit 0
	fi
fi

# tmpfs(5)
nginx_checktmpdir()
{
	if [ ! -d ${_tmpprefix} ] ; then
		install -d -o %%WWWOWN%% -g %%WWWGRP%% -m 755 ${_tmpprefix}
	fi
}

nginx_checkconfig()
{
	nginx_checktmpdir

	echo "Performing sanity check on nginx configuration:"
	eval ${command} ${nginx_flags} -t
}

nginx_gracefulstop()
{
	echo "Performing a graceful stop:"
	sig_stop="QUIT"
	run_rc_command ${rc_prefix}stop $rc_extra_args || return 1
}

nginx_upgrade()
{
	echo "Upgrading nginx binary:"

	reload_precmd=""
	sig_reload="USR2"
	run_rc_command ${rc_prefix}reload $rc_extra_args || return 1

	sleep 1

	echo "Stopping old binary:"

	sig_reload="QUIT"
	pidfile="$pidfile.oldbin"
	run_rc_command ${rc_prefix}reload $rc_extra_args || return 1
}

nginx_precmd() 
{
	nginx_checkconfig

	if checkyesno nginxlimits_enable
	then
		eval `/usr/bin/limits ${nginxlimits_args}` 2>/dev/null
	else
		return 0
	fi
}

run_rc_command "$1"


[FILE:763:files/pkg-message-single.in]

===================================================================
A recent version of the NGINX introduced dynamic modules support.
To load a module at runtime, include the new `load_module'
directive in the main context, specifying the path to the shared
object file for the module, enclosed in quotation marks.  When you
reload the configuration or restart NGINX, the module is loaded in.
It is possible to specify a path relative to the source directory,
or a full path, please see
https://www.nginx.com/blog/dynamic-modules-nginx-1-9-11/ and
http://nginx.org/en/docs/ngx_core_module.html#load_module for
details.

Default path for the NGINX dynamic modules is

%%PREFIX%%/libexec/nginx.
===================================================================



[FILE:314:dragonfly/patch-src_core_ngx__config.h]
--- src/core/ngx_config.h.orig	2017-08-08 15:00:12 UTC
+++ src/core/ngx_config.h
@@ -12,8 +12,8 @@
 #include <ngx_auto_headers.h>
 
 
-#if defined __DragonFly__ && !defined __FreeBSD__
-#define __FreeBSD__        4
+#if defined __DragonFly__
+#undef  __FreeBSD_version
 #define __FreeBSD_version  480101
 #endif
 


[FILE:470:dragonfly/patch-src_event_modules_ngx__eventport__module.c]
--- src/event/modules/ngx_eventport_module.c.orig	2017-08-08 15:00:13 UTC
+++ src/event/modules/ngx_eventport_module.c
@@ -49,7 +49,7 @@ typedef struct  port_notify {
     void       *portnfy_user;   /* user defined */
 } port_notify_t;
 
-#if (__FreeBSD__ && __FreeBSD_version < 700005) || (NGX_DARWIN)
+#if (__FreeBSD_version < 700005) || (NGX_DARWIN)
 
 typedef struct itimerspec {     /* definition per POSIX.4 */
     struct timespec it_interval;/* timer period */


[FILE:532:dragonfly/patch-src_event_modules_ngx__kqueue__module.c]
--- src/event/modules/ngx_kqueue_module.c.orig	2017-08-08 15:00:13 UTC
+++ src/event/modules/ngx_kqueue_module.c
@@ -429,8 +429,7 @@ ngx_kqueue_set_event(ngx_event_t *ev, ng
     if (filter == EVFILT_VNODE) {
         kev->fflags = NOTE_DELETE|NOTE_WRITE|NOTE_EXTEND
                                  |NOTE_ATTRIB|NOTE_RENAME
-#if (__FreeBSD__ == 4 && __FreeBSD_version >= 430000) \
-    || __FreeBSD_version >= 500018
+#if __FreeBSD_version >= 500018
                                  |NOTE_REVOKE
 #endif
                       ;


[FILE:447:dragonfly/patch-src_os_unix_ngx__freebsd__init.c]
--- src/os/unix/ngx_freebsd_init.c.orig	2017-08-08 15:00:13 UTC
+++ src/os/unix/ngx_freebsd_init.c
@@ -162,8 +162,7 @@ ngx_os_specific_init(ngx_log_t *log)
      * to allow an old binary to run correctly on an updated FreeBSD system.
      */
 
-#if (__FreeBSD__ == 4 && __FreeBSD_version >= 460102) \
-    || __FreeBSD_version == 460002 || __FreeBSD_version >= 500039
+#if __FreeBSD_version >= 500039
 
     /* a new syscall without the bug */
 


[FILE:293:dragonfly/patch-src_os_unix_ngx__posix__config.h]
--- src/os/unix/ngx_posix_config.h.orig	2017-08-08 15:00:14 UTC
+++ src/os/unix/ngx_posix_config.h
@@ -145,7 +145,7 @@ typedef struct aiocb  ngx_aiocb_t;
 #define ngx_debug_init()
 
 
-#if (__FreeBSD__) && (__FreeBSD_version < 400017)
+#if 0
 
 #include <sys/param.h>          /* ALIGN() */
 

