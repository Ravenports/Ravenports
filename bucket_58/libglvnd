# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libglvnd
VERSION=		1.5.0
KEYWORDS=		graphics
VARIANTS=		standard
SDESC[standard]=	GL Vendor-Neutral Dispatch library
HOMEPAGE=		https://gitlab.freedesktop.org/glvnd/libglvnd
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://gitlab.freedesktop.org/glvnd/libglvnd/-/archive/v1.5.0/
DISTFILE[1]=		libglvnd-v1.5.0.tar.bz2:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			meson
XORG_COMPONENTS=	x11 xext xorgproto

DISTNAME=		libglvnd-v1.5.0

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKDIR}}/LICENSE
LICENSE_AWK=		MIT:"^$$"
LICENSE_SOURCE=		MIT:{{WRKSRC}}/src/GL/libgl.c
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		graphics/libglvnd
MESON_ARGS=		-Dx11=enabled
			-Dglx=enabled

[FILE:336:descriptions/desc.single]
libglvnd is a vendor-neutral dispatch layer for arbitrating OpenGL API calls
between multiple vendors. It allows multiple drivers from different vendors to
coexist on the same filesystem, and determines which vendor to dispatch each
API call to at runtime.

Both GLX and EGL are supported, in any combination with OpenGL and OpenGL ES.


[FILE:102:distinfo]
148bf421fef62a3c2bb0a7264292fc76743b2bbcebe9995be4b63fe5f15c471f       565918 libglvnd-v1.5.0.tar.bz2


[FILE:779:manifests/plist.single]
include/EGL/
 egl.h
 eglext.h
 eglplatform.h
include/GL/
 gl.h
 glcorearb.h
 glext.h
 glx.h
 glxext.h
include/GLES/
 egl.h
 gl.h
 glext.h
 glplatform.h
include/GLES2/
 gl2.h
 gl2ext.h
 gl2platform.h
include/GLES3/
 gl3.h
 gl31.h
 gl32.h
 gl3ext.h
 gl3platform.h
include/KHR/khrplatform.h
include/glvnd/
 GLdispatchABI.h
 libeglabi.h
 libglxabi.h
lib/
 libEGL.so
 libEGL.so.1
 libEGL.so.1.1.0
 libGL.so
 libGL.so.1
 libGL.so.1.7.0
 libGLESv1_CM.so
 libGLESv1_CM.so.1
 libGLESv1_CM.so.1.2.0
 libGLESv2.so
 libGLESv2.so.2
 libGLESv2.so.2.1.0
 libGLX.so
 libGLX.so.0
 libGLX.so.0.0.0
 libGLdispatch.so
 libGLdispatch.so.0
 libGLdispatch.so.0.0.0
 libOpenGL.so
 libOpenGL.so.0
 libOpenGL.so.0.0.0
lib/pkgconfig/
 egl.pc
 gl.pc
 glesv1_cm.pc
 glesv2.pc
 glx.pc
 libglvnd.pc
 opengl.pc


[FILE:432:patches/patch-meson.build]
--- meson.build.orig	2022-08-22 13:02:53 UTC
+++ meson.build
@@ -136,7 +136,7 @@ if use_asm
   thread_type = 'tsd'
   if get_option('dispatch-tls')
     if have_tls
-      if host_machine.system() == 'freebsd' or cc.has_header_symbol('features.h', '__GLIBC__')
+      if ['freebsd', 'dragonfly'].contains(host_machine.system()) or cc.has_header_symbol('features.h', '__GLIBC__')
         thread_type = 'tls'
       endif
     endif


[FILE:413:patches/patch-src_GLdispatch_vnd-glapi_glapi.h]
--- src/GLdispatch/vnd-glapi/glapi.h.orig	2022-08-22 13:02:53 UTC
+++ src/GLdispatch/vnd-glapi/glapi.h
@@ -88,7 +88,7 @@ enum {
  */
 _GLAPI_EXPORT extern const __thread void *
     _glapi_tls_Current[GLAPI_NUM_CURRENT_ENTRIES]
-#if defined(__GLIBC__) || defined(__FreeBSD__)
+#if defined(__GLIBC__) || defined(__FreeBSD__) || defined(__DragonFly__)
     __attribute__((tls_model("initial-exec")))
 #endif
     ;


[FILE:413:patches/patch-src_GLdispatch_vnd-glapi_u__current__tls.c]
--- src/GLdispatch/vnd-glapi/u_current_tls.c.orig	2022-08-22 13:02:53 UTC
+++ src/GLdispatch/vnd-glapi/u_current_tls.c
@@ -30,7 +30,7 @@
 #include "stub.h"
 
 __thread const void *_glapi_tls_Current[GLAPI_NUM_CURRENT_ENTRIES]
-#if defined(__GLIBC__) || defined(__FreeBSD__)
+#if defined(__GLIBC__) || defined(__FreeBSD__) || defined(__DragonFly__)
     __attribute__((tls_model("initial-exec")))
 #endif
     = {

