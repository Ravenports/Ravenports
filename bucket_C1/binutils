# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		binutils
VERSION=		2.28
KEYWORDS=		devel
VARIANTS=		standard nls ravensys
SDESC[ravensys]=	GNU binary tools for Ravenports toolchain
SDESC[nls]=		GNU binary tools with native language support
SDESC[standard]=	GNU binary tools
HOMEPAGE=		http://sources.redhat.com/binutils/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		SOURCEWARE/binutils/releases
DISTFILE[1]=		binutils-2.28.tar.bz2:main
DF_INDEX=		1
SPKGS[ravensys]=	single
SPKGS[nls]=		single
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	NLS RELRO RAVENSYS
OPTIONS_STANDARD=	NLS RELRO
VOPTS[ravensys]=	NLS=OFF
			RELRO=ON
			RAVENSYS=ON
VOPTS[nls]=		NLS=ON
			RELRO=ON
			RAVENSYS=OFF
OPT_ON[all]=		RELRO

BUILD_DEPENDS=		zlib:static:standard
			mpfr:static:standard
			gmp:static:standard
USES=			bison gmake libtool

LICENSE=		GPLv3:single LGPL3:single
LICENSE_SCHEME=		multi
LICENSE_FILE=		GPLv3:{{WRKSRC}}/COPYING3
			LGPL3:{{WRKSRC}}/COPYING3.LIB
INFO=			single:as
			single:binutils
			single:gprof
			single:bfd
			single:ld
INFO_SUBDIR=		.

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-werror
			--disable-shared
			--with-gmp={{LOCALBASE}}
			--with-mpfr={{LOCALBASE}}
			--with-system-zlib
			--with-lib-path=/usr/lib
			--enable-targets=all
			--enable-x86-relax-relocations=no

VAR_ARCH[aarch64]=	CONFIGURE_ARGS=--enable-gold
			CONFIGURE_ARGS=--enable-plugins
			PLIST_SUB=GOLD=""
VAR_ARCH[x86_64]=	CONFIGURE_ARGS=--enable-gold
			CONFIGURE_ARGS=--enable-plugins
			PLIST_SUB=GOLD=""
VAR_ARCH[i386]=		PLIST_SUB=GOLD="@comment "

[RAVENSYS].DESCRIPTION=			Static binutils for Ravenports system-root
[RAVENSYS].MAKEFILE_ON=			PREFIX=/raven/toolchain

[NLS].CONFIGURE_ENABLE_BOTH=		nls
[NLS].USES_ON=				gettext-runtime

[RELRO].DESCRIPTION=			enable -z relro in ELF linker by default
[RELRO].CONFIGURE_ARGS_OFF=		--enable-relro=no
[RELRO].CONFIGURE_ARGS_ON=		--enable-relro

post-install:
	${INSTALL_DATA} ${WRKSRC}/include/plugin-api.h \
		${STAGEDIR}${PREFIX}/include/
	@${FIND} ${STAGEDIR}${PREFIX}/${CONFIGURE_TARGET} ! -type d | \
		${SED} -e 's,^${STAGEDIR}${PREFIX}/,,' \
		>> ${WRKDIR}/.manifest.single.mktmp
	${RM} ${STAGEDIR}${PREFIX}/include/ansidecl.h
	${SED} -i'' '/#include "ansidecl.h"/d' \
		${STAGEDIR}${PREFIX}/include/bfd.h
.for tool in coffdump dlltool dllwrap nlmconv srconv sysdump windmc windres
	@${RM} ${STAGEDIR}${PREFIX}/bin/${BUTARGET}-${tool} \
		${STAGEDIR}${MANPREFIX}/man/man1/${BUTARGET}-${tool}.1 \
		${STAGEDIR}${PREFIX}/${BUTARGET}/bin/${tool}
.endfor

[FILE:311:descriptions/desc.single]
The GNU Binutils are a collection of binary tools. The main ones are:

* ld - the GNU linker.
* as - the GNU assembler.

Most of these programs use BFD, the Binary File Descriptor library, to do
low-level manipulation. Many of them also use the opcodes library to
assemble and disassemble machine instructions.


[FILE:100:distinfo]
6297433ee120b11b4b0a1c8f3512d7d73501753142ab9e2daa13c5a3edd32a72     26556365 binutils-2.28.tar.bz2


[FILE:2980:manifests/plist.single]
%%GOLD%%bin/
 dwp
 ld.gold
%%GOLD%%include/plugin-api.h
%%NLS-ON%%%%GOLD%%share/locale/es/LC_MESSAGES/gold.mo
%%NLS-ON%%%%GOLD%%share/locale/fi/LC_MESSAGES/gold.mo
%%NLS-ON%%%%GOLD%%share/locale/fr/LC_MESSAGES/gold.mo
%%NLS-ON%%%%GOLD%%share/locale/id/LC_MESSAGES/gold.mo
%%NLS-ON%%%%GOLD%%share/locale/it/LC_MESSAGES/gold.mo
%%NLS-ON%%%%GOLD%%share/locale/vi/LC_MESSAGES/gold.mo
%%NLS-ON%%%%GOLD%%share/locale/zh_CN/LC_MESSAGES/gold.mo
bin/
 addr2line
 ar
 as
 c++filt
 elfedit
 gprof
 ld
 ld.bfd
 nm
 objcopy
 objdump
 ranlib
 readelf
 size
 strings
 strip
include/
 bfd.h
 bfdlink.h
 dis-asm.h
 symcat.h
lib/
 libbfd.a
 libopcodes.a
%%NLS-ON%%share/locale/bg/LC_MESSAGES/
 binutils.mo
 gprof.mo
 ld.mo
%%NLS-ON%%share/locale/ca/LC_MESSAGES/binutils.mo
%%NLS-ON%%share/locale/da/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/de/LC_MESSAGES/
 gprof.mo
 opcodes.mo
%%NLS-ON%%share/locale/eo/LC_MESSAGES/gprof.mo
%%NLS-ON%%share/locale/es/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gas.mo
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/fi/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gas.mo
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/fr/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gas.mo
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/ga/LC_MESSAGES/
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/hr/LC_MESSAGES/binutils.mo
%%NLS-ON%%share/locale/hu/LC_MESSAGES/gprof.mo
%%NLS-ON%%share/locale/id/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gas.mo
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/it/LC_MESSAGES/
 binutils.mo
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/ja/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gas.mo
 gprof.mo
 ld.mo
%%NLS-ON%%share/locale/ms/LC_MESSAGES/gprof.mo
%%NLS-ON%%share/locale/nl/LC_MESSAGES/
 gprof.mo
 opcodes.mo
%%NLS-ON%%share/locale/pt_BR/LC_MESSAGES/
 gprof.mo
 opcodes.mo
%%NLS-ON%%share/locale/ro/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gprof.mo
 opcodes.mo
%%NLS-ON%%share/locale/ru/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gas.mo
 gprof.mo
%%NLS-ON%%share/locale/rw/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gas.mo
 gprof.mo
%%NLS-ON%%share/locale/sk/LC_MESSAGES/binutils.mo
%%NLS-ON%%share/locale/sr/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gprof.mo
%%NLS-ON%%share/locale/sv/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/tr/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gas.mo
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/uk/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gas.mo
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/vi/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gprof.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/zh_CN/LC_MESSAGES/
 bfd.mo
 binutils.mo
 gas.mo
 ld.mo
 opcodes.mo
%%NLS-ON%%share/locale/zh_TW/LC_MESSAGES/
 binutils.mo
 ld.mo
share/man/man1/
 addr2line.1.gz
 ar.1.gz
 as.1.gz
 c++filt.1.gz
 dlltool.1.gz
 elfedit.1.gz
 gprof.1.gz
 ld.1.gz
 nlmconv.1.gz
 nm.1.gz
 objcopy.1.gz
 objdump.1.gz
 ranlib.1.gz
 readelf.1.gz
 size.1.gz
 strings.1.gz
 strip.1.gz
 windmc.1.gz
 windres.1.gz


[FILE:1011:patches/patch-bfd_elfnn-aarch64.c]
--- bfd/elfnn-aarch64.c.orig	2016-11-20 12:04:44.613621000 +0000
+++ bfd/elfnn-aarch64.c	2016-11-20 12:05:01.143334000 +0000
@@ -4369,7 +4369,9 @@
       off = h->got.offset;
       BFD_ASSERT (off != (bfd_vma) - 1);
       if (!WILL_CALL_FINISH_DYNAMIC_SYMBOL (dyn, bfd_link_pic (info), h)
-	  || (bfd_link_pic (info)
+	  || ((bfd_link_pic (info)
+	      || (!bfd_link_relocatable (info)
+		  && (info->export_dynamic || info->dynamic)))
 	      && SYMBOL_REFERENCES_LOCAL (info, h))
 	  || (ELF_ST_VISIBILITY (h->other)
 	      && h->root.type == bfd_link_hash_undefweak))
@@ -8891,6 +8893,14 @@
 			   + h->root.u.def.section->output_section->vma
 			   + h->root.u.def.section->output_offset);
 	}
+      else if (!bfd_link_relocatable (info)
+	    && (info->export_dynamic || info->dynamic)
+	    && SYMBOL_REFERENCES_LOCAL (info, h))
+	{
+	  BFD_ASSERT ((h->got.offset & 1) != 0);
+	  rela.r_info = ELFNN_R_INFO (h->dynindx, AARCH64_R (GLOB_DAT));
+	  rela.r_addend = 0;
+	}
       else
 	{
 do_glob_dat:


[FILE:581:patches/patch-include__safe-ctype.h]
--- ./include/safe-ctype.h.orig	2013-08-31 13:25:21.000000000 +0100
+++ ./include/safe-ctype.h	2013-08-31 13:25:57.000000000 +0100
@@ -119,6 +119,7 @@
    including another system header (for instance gnulib's stdint.h).
    So we include ctype.h here and then immediately redefine its macros.  */
 
+#if 0
 #include <ctype.h>
 #undef isalpha
 #define isalpha(c) do_not_use_isalpha_with_safe_ctype
@@ -146,5 +147,6 @@
 #define toupper(c) do_not_use_toupper_with_safe_ctype
 #undef tolower
 #define tolower(c) do_not_use_tolower_with_safe_ctype
+#endif
 
 #endif /* SAFE_CTYPE_H */


[FILE:465:dragonfly/patch-bfd_config.bfd]
For loader.efi linking support.

--- bfd/config.bfd.orig	2016-08-03 10:36:50.000000000 +0300
+++ bfd/config.bfd
@@ -700,7 +700,7 @@ case "${targ}" in
     ;;
   x86_64-*-dragonfly*)
     targ_defvec=x86_64_elf64_vec
-    targ_selvecs="i386_elf32_vec iamcu_elf32_vec l1om_elf64_vec k1om_elf64_vec"
+    targ_selvecs="i386_elf32_vec iamcu_elf32_vec l1om_elf64_vec k1om_elf64_vec x86_64_pei_vec"
     want64=true
     ;;
   x86_64-*-freebsd* | x86_64-*-kfreebsd*-gnu)


[FILE:460:dragonfly/patch-bfd_elf64-x86-64.c]
--- bfd/elf64-x86-64.c.orig	2016-08-03 07:36:51 UTC
+++ bfd/elf64-x86-64.c
@@ -530,7 +530,7 @@ elf_x86_64_write_core_note (bfd *abfd, c
 /* The name of the dynamic interpreter.	 This is put in the .interp
    section.  */
 
-#define ELF64_DYNAMIC_INTERPRETER "/lib/ld64.so.1"
+#define ELF64_DYNAMIC_INTERPRETER "/libexec/ld-elf.so.2"
 #define ELF32_DYNAMIC_INTERPRETER "/lib/ldx32.so.1"
 
 /* If ELIMINATE_COPY_RELOCS is non-zero, the linker will try to avoid


[FILE:518:dragonfly/patch-gold_x86__64.cc]
--- gold/x86_64.cc.orig	2016-08-03 07:36:53 UTC
+++ gold/x86_64.cc
@@ -1120,7 +1120,7 @@ const Target::Target_info Target_x86_64<
   true,			// is_default_stack_executable
   true,			// can_icf_inline_merge_sections
   '\0',			// wrap_char
-  "/lib/ld64.so.1",     // program interpreter
+  "/libexec/ld-elf.so.2",     // program interpreter
   0x400000,		// default_text_segment_address
   0x1000,		// abi_pagesize (overridable by -z max-page-size)
   0x1000,		// common_pagesize (overridable by -z common-page-size)

