# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-prometheus-client
VERSION=		0.16.0
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Client for Prometheus monitoring system (3.10)
SDESC[v11]=		Client for Prometheus monitoring system (3.11)
HOMEPAGE=		https://github.com/prometheus/client_python
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/5b/8e/6a546e439b4366ab9eab0a736876eb1e1916dd93b4a1fa560ef711d24f8c
DISTFILE[1]=		prometheus_client-0.16.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		prometheus_client-0.16.0.dist-info

GENERATED=		yes

[PY310].USES_ON=			python:py310,wheel

[PY311].USES_ON=			python:v11,wheel

[FILE:2321:descriptions/desc.single]
# Prometheus Python Client

The official Python client for [Prometheus].

## Three Step Demo

**One**: Install the client:
```
pip install prometheus-client
```

**Two**: Paste the following into a Python interpreter:
```python
from prometheus_client import start_http_server, Summary
import random
import time

# Create a metric to track time spent and requests made.
REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing
request')

# Decorate function with metric.
@REQUEST_TIME.time()
def process_request(t):
    """A dummy function that takes some time."""
    time.sleep(t)

if __name__ == '__main__':
    # Start up the server to expose the metrics.
    start_http_server(8000)
    # Generate some requests.
    while True:
        process_request(random.random())
```

**Three**: Visit [http://localhost:8000/] to view the metrics.

From one easy to use decorator you get:
  * `request_processing_seconds_count`: Number of times this function was
called.
  * `request_processing_seconds_sum`: Total amount of time spent in this
function.

Prometheus's `rate` function allows calculation of both requests per
second,
and latency over time from this data.

In addition if you're on Linux the `process` metrics expose CPU, memory and
other information about the process for free!

## Installation

```
pip install prometheus-client
```

This package can be found on
[PyPI].

## Instrumenting

Four types of metric are offered: Counter, Gauge, Summary and Histogram.
See the documentation on [metric types]
and [instrumentation best practices]
on how to use them.

### Counter

Counters go up, and reset when the process restarts.

```python
from prometheus_client import Counter
c = Counter('my_failures', 'Description of counter')
c.inc()     # Increment by 1
c.inc(1.6)  # Increment by given value
```

If there is a suffix of `_total` on the metric name, it will be removed.
When
exposing the time series for counter, a `_total` suffix will be added. This
is
for compatibility between OpenMetrics and the Prometheus text format, as
OpenMetrics
requires the `_total` suffix.

There are utilities to count exceptions raised:

```python
@c.count_exceptions()
def f():
  pass

with c.count_exceptions():
  pass

# Count only one type of exception
with c.count_exceptions(ValueError):
  pass
```



[FILE:120:distinfo]
0836af6eb2c8f4fed712b2f279f6c0a8bbab29f9f4aa15276b91c7cb0d1616ab       122464 prometheus_client-0.16.0-py3-none-any.whl

