# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-intervaltree
VERSION=		2.1.0
KEYWORDS=		python devel textproc
VARIANTS=		py27 py36 py37
SDESC[py36]=		Editable interval tree data structure (PY 36)
SDESC[py37]=		Editable interval tree data structure (PY 37)
SDESC[py27]=		Editable interval tree data structure (PY 27)
HOMEPAGE=		https://github.com/chaimleib/intervaltree
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/i/intervaltree
DISTFILE[1]=		intervaltree-2.1.0.tar.gz:main
DF_INDEX=		1
SPKGS[py36]=		single
SPKGS[py37]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY36 PY37
OPTIONS_STANDARD=	none
VOPTS[py36]=		PY27=OFF PY36=ON PY37=OFF
VOPTS[py37]=		PY27=OFF PY36=OFF PY37=ON
VOPTS[py27]=		PY27=ON PY36=OFF PY37=OFF

DISTNAME=		intervaltree-2.1.0

GENERATED=		yes

[PY36].BUILDRUN_DEPENDS_ON=		python-sortedcontainers:single:py36
[PY36].USES_ON=				python:py36

[PY37].BUILDRUN_DEPENDS_ON=		python-sortedcontainers:single:py37
[PY37].USES_ON=				python:py37

[PY27].BUILDRUN_DEPENDS_ON=		python-sortedcontainers:single:py27
[PY27].USES_ON=				python:py27

[FILE:2515:descriptions/desc.single]
.. This file is automatically generated by setup.py from README.md and
CHANGELOG.md.

intervaltree
============

A mutable, self-balancing interval tree for Python 2 and 3. Queries may
be by point, by range overlap, or by range envelopment.

This library was designed to allow tagging text and time intervals,
where the intervals include the lower bound but not the upper bound.

Installing
----------

.. code:: sh

    pip install intervaltree

Features
--------

-  Supports Python 2.6+ and Python 3.2+
-  Initializing

   -  blank ``tree = IntervalTree()``
   -  from an iterable of ``Interval`` objects
      (``tree = IntervalTree(intervals)``)
   -  from an iterable of tuples
      (``tree = IntervalTree.from_tuples(interval_tuples)``)

-  Insertions

   -  ``tree[begin:end] = data``
   -  ``tree.add(interval)``
   -  ``tree.addi(begin, end, data)``

-  Deletions

   -  ``tree.remove(interval)`` (raises ``ValueError`` if not present)
   -  ``tree.discard(interval)`` (quiet if not present)
   -  ``tree.removei(begin, end, data)`` (short for
      ``tree.remove(Interval(begin, end, data))``)
   -  ``tree.discardi(begin, end, data)`` (short for
      ``tree.discard(Interval(begin, end, data))``)
   -  ``tree.remove_overlap(point)``
   -  ``tree.remove_overlap(begin, end)`` (removes all overlapping the
      range)
   -  ``tree.remove_envelop(begin, end)`` (removes all enveloped in the
      range)

-  Overlap queries

   -  ``tree[point]``
   -  ``tree[begin:end]``
   -  ``tree.search(point)``
   -  ``tree.search(begin, end)``

-  Envelop queries

   -  ``tree.search(begin, end, strict=True)``

-  Membership queries

   -  ``interval_obj in tree`` (this is fastest, O(1))
   -  ``tree.containsi(begin, end, data)``
   -  ``tree.overlaps(point)``
   -  ``tree.overlaps(begin, end)``

-  Iterable

   -  ``for interval_obj in tree:``
   -  ``tree.items()``

-  Sizing

   -  ``len(tree)``
   -  ``tree.is_empty()``
   -  ``not tree``
   -  ``tree.begin()`` (the ``begin`` coordinate of the leftmost
      interval)
   -  ``tree.end()`` (the ``end`` coordinate of the rightmost interval)

-  Set-like operations

   -  union

      -  ``result_tree = tree.union(iterable)``
      -  ``result_tree = tree1 | tree2``
      -  ``tree.update(iterable)``
      -  ``tree |= other_tree``

   -  difference

      -  ``result_tree = tree.difference(iterable)``
      -  ``result_tree = tree1 - tree2``
      -  ``tree.difference_update(iterable)``
      -  ``tree -= other_tree``

   -  intersection



[FILE:104:distinfo]
aca5804b88f70cb49050c37b6de59090570f77a75aec1932966cf69f6a48810b        38404 intervaltree-2.1.0.tar.gz

