# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-intervaltree
VERSION=		3.0.2
KEYWORDS=		python devel textproc
VARIANTS=		py27 py38 py37
SDESC[py37]=		Editable interval tree data structure (PY 37)
SDESC[py38]=		Editable interval tree data structure (PY 38)
SDESC[py27]=		Editable interval tree data structure (PY 27)
HOMEPAGE=		https://github.com/chaimleib/intervaltree
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/i/intervaltree
DISTFILE[1]=		intervaltree-3.0.2.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY27=OFF PY38=OFF PY37=ON
VOPTS[py38]=		PY27=OFF PY38=ON PY37=OFF
VOPTS[py27]=		PY27=ON PY38=OFF PY37=OFF

DISTNAME=		intervaltree-3.0.2

GENERATED=		yes

INVALID_RPATH=		yes

[PY37].BUILDRUN_DEPENDS_ON=		python-sortedcontainers:single:py37
[PY37].USES_ON=				python:py37

[PY38].BUILDRUN_DEPENDS_ON=		python-sortedcontainers:single:py38
[PY38].USES_ON=				python:py38

[PY27].BUILDRUN_DEPENDS_ON=		python-sortedcontainers:single:py27
[PY27].USES_ON=				python:py27

[FILE:3308:descriptions/desc.single]
[![Build status badge][]][build status]

intervaltree
============

A mutable, self-balancing interval tree for Python 2 and 3. Queries may be
by point, by range overlap, or by range envelopment.

This library was designed to allow tagging text and time intervals, where
the intervals include the lower bound but not the upper bound.

**Version 3 changes!**

* The `search(begin, end, strict)` method no longer exists. Instead, use
one of these:
    * `at(point)`
    * `overlap(begin, end)`
    * `envelop(begin, end)`
* The `extend(items)` method no longer exists. Instead, use
`update(items)`.
* Methods like `merge_overlaps()` which took a `strict` argument
consistently default to `strict=True`. Before, some methods defaulted to
`True` and others to `False`.

Installing
----------

```sh
pip install intervaltree
```

Features
--------

* Supports Python 2.7 and Python 3.4+ (Tested under 2.7, and 3.4 thru 3.7)
* Initializing
    * blank `tree = IntervalTree()`
    * from an iterable of `Interval` objects (`tree =
IntervalTree(intervals)`)
    * from an iterable of tuples (`tree =
IntervalTree.from_tuples(interval_tuples)`)

* Insertions
    * `tree[begin:end] = data`
    * `tree.add(interval)`
    * `tree.addi(begin, end, data)`

* Deletions
    * `tree.remove(interval)`             (raises `ValueError` if not
present)
    * `tree.discard(interval)`            (quiet if not present)
    * `tree.removei(begin, end, data)`    (short for
`tree.remove(Interval(begin, end, data))`)
    * `tree.discardi(begin, end, data)`   (short for
`tree.discard(Interval(begin, end, data))`)
    * `tree.remove_overlap(point)`
    * `tree.remove_overlap(begin, end)`   (removes all overlapping the
range)
    * `tree.remove_envelop(begin, end)`   (removes all enveloped in the
range)

* Point queries
    * `tree[point]`
    * `tree.at(point)`                    (same as previous)

* Overlap queries
    * `tree[begin:end]`
    * `tree.overlap(begin, end)`          (same as previous)

* Envelop queries
    * `tree.envelop(begin, end)`

* Membership queries
    * `interval_obj in tree`              (this is fastest, O(1))
    * `tree.containsi(begin, end, data)`
    * `tree.overlaps(point)`
    * `tree.overlaps(begin, end)`

* Iterable
    * `for interval_obj in tree:`
    * `tree.items()`

* Sizing
    * `len(tree)`
    * `tree.is_empty()`
    * `not tree`
    * `tree.begin()`          (the `begin` coordinate of the leftmost
interval)
    * `tree.end()`            (the `end` coordinate of the rightmost
interval)

* Set-like operations
    * union
        * `result_tree = tree.union(iterable)`
        * `result_tree = tree1 | tree2`
        * `tree.update(iterable)`
        * `tree |= other_tree`

    * difference
        * `result_tree = tree.difference(iterable)`
        * `result_tree = tree1 - tree2`
        * `tree.difference_update(iterable)`
        * `tree -= other_tree`

    * intersection
        * `result_tree = tree.intersection(iterable)`
        * `result_tree = tree1 & tree2`
        * `tree.intersection_update(iterable)`
        * `tree &= other_tree`

    * symmetric difference
        * `result_tree = tree.symmetric_difference(iterable)`
        * `result_tree = tree1 ^ tree2`
        * `tree.symmetric_difference_update(iterable)`
        * `tree ^= other_tree`


[FILE:104:distinfo]
cb4f61c81dcb4fea6c09903f3599015a83c9bdad1f0bbd232495e6681e19e273        30663 intervaltree-3.0.2.tar.gz

