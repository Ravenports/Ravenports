# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libvss
VERSION=		2021
KEYWORDS=		textproc devel ada
VARIANTS=		standard
SDESC[standard]=	High level string and text processing library
HOMEPAGE=		https://github.com/AdaCore/VSS
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		ADACORE/b3b6db7b27ef26dc9006e062dd1bf7adbe47566b?filename=vss-2021-20210701-198AA-src.tar.gz&x=/
DISTFILE[1]=		vss-2021-20210701-198AA-src.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			gmake gprbuild

DISTNAME=		vss-2021-20210701-198AA-src

LICENSE=		GPLv3+:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv3+:{{WRKSRC}}/COPYING3
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/source/text/vss-strings.ads
LICENSE_SCHEME=		solo

MAKE_ARGS=		BUILD_MODE=prod

INSTALL_REQ_TOOLCHAIN=	yes

post-install:
	${RM} -r ${STAGEDIR}${PREFIX}/share/gpr/manifests

[FILE:981:descriptions/desc.single]
VSS is a high level string and text processing library.

The objectives of this project are:
 * To introduce a definite type that represents a string of Unicode
   characters and provides a handy set of operations.
 * The API should be encoding independent and allows efficient
   implementations depending on platform/application and avoid extra
   encoding conversions, e.g. an UTF-8 internal representation for Gtk+
   applications, UCS-2 for native Windows applications and UTF-16 for
   WebAssembly.
 * Besides separating string API from in-memory data representation, it
   should separate string API from input/output stream representation.
 * To provide a clear, well-defined semantic for iteration over string
   elements, such as unicode unit, grapheme cluster, etc.
 * To avoid string element integer indexes, because this isn't
   necessarily constant time and could mislead about indexed element kind.
 * To prefer safe results over raising exceptions where possible.


[FILE:113:distinfo]
8d3b4d0895d289ea68176e55d5954016cb7071950bad40124162e2cc3b48e534       143357 vss-2021-20210701-198AA-src.tar.gz


[FILE:6042:manifests/plist.single]
include/vss_gnat/
 a-szuvau.adb
 a-szuvau.ads
include/vss_json/
 vss-json-events.ads
 vss-json-implementation-parsers.adb
 vss-json-implementation-parsers.ads
 vss-json-implementation.ads
 vss-json-streams-content_handlers.adb
 vss-json-streams-content_handlers.ads
 vss-json-streams-readers-simple.adb
 vss-json-streams-readers-simple.ads
 vss-json-streams-readers.adb
 vss-json-streams-readers.ads
 vss-json-streams-writers.adb
 vss-json-streams-writers.ads
 vss-json-streams.ads
 vss-json.adb
 vss-json.ads
include/vss_text/
 vss-characters.ads
 vss-implementation-fnv_hash.adb
 vss-implementation-fnv_hash.ads
 vss-implementation-line_iterators.adb
 vss-implementation-line_iterators.ads
 vss-implementation-string_configuration.ads
 vss-implementation-string_handlers.adb
 vss-implementation-string_handlers.ads
 vss-implementation-string_vectors.adb
 vss-implementation-string_vectors.ads
 vss-implementation-strings.adb
 vss-implementation-strings.ads
 vss-implementation-utf8_encoding.adb
 vss-implementation-utf8_encoding.ads
 vss-implementation-utf8_string_handlers.adb
 vss-implementation-utf8_string_handlers.ads
 vss-implementation.ads
 vss-stream_element_vectors-conversions.adb
 vss-stream_element_vectors-conversions.ads
 vss-stream_element_vectors-internals.adb
 vss-stream_element_vectors-internals.ads
 vss-stream_element_vectors.adb
 vss-stream_element_vectors.ads
 vss-string_vectors-internals.adb
 vss-string_vectors-internals.ads
 vss-string_vectors.adb
 vss-string_vectors.ads
 vss-strings-character_iterators.ads
 vss-strings-conversions.adb
 vss-strings-conversions.ads
 vss-strings-converters-decoders-utf8.adb
 vss-strings-converters-decoders-utf8.ads
 vss-strings-converters-decoders.adb
 vss-strings-converters-decoders.ads
 vss-strings-converters.ads
 vss-strings-cursors-internals.adb
 vss-strings-cursors-internals.ads
 vss-strings-cursors-iterators-characters-internals.adb
 vss-strings-cursors-iterators-characters-internals.ads
 vss-strings-cursors-iterators-characters.adb
 vss-strings-cursors-iterators-characters.ads
 vss-strings-cursors-iterators-lines-internals.adb
 vss-strings-cursors-iterators-lines-internals.ads
 vss-strings-cursors-iterators-lines.adb
 vss-strings-cursors-iterators-lines.ads
 vss-strings-cursors-iterators.ads
 vss-strings-cursors-markers-internals.adb
 vss-strings-cursors-markers-internals.ads
 vss-strings-cursors-markers.adb
 vss-strings-cursors-markers.ads
 vss-strings-cursors.adb
 vss-strings-cursors.ads
 vss-strings-internals.adb
 vss-strings-internals.ads
 vss-strings-line_iterators.ads
 vss-strings-markers.ads
 vss-strings-texts.ads
 vss-strings.adb
 vss-strings.ads
 vss-text_streams-memory_utf8_input.adb
 vss-text_streams-memory_utf8_input.ads
 vss-text_streams-memory_utf8_output.adb
 vss-text_streams-memory_utf8_output.ads
 vss-text_streams.ads
 vss-unicode.ads
 vss.ads
lib/vss_gnat/
 a-szuvau.ali
 a-szuvau.o
lib/vss_json/
 vss-json-events.ali
 vss-json-events.o
 vss-json-implementation-parsers.ali
 vss-json-implementation-parsers.o
 vss-json-implementation.ali
 vss-json-implementation.o
 vss-json-streams-content_handlers.ali
 vss-json-streams-content_handlers.o
 vss-json-streams-readers-simple.ali
 vss-json-streams-readers-simple.o
 vss-json-streams-readers.ali
 vss-json-streams-readers.o
 vss-json-streams-writers.ali
 vss-json-streams-writers.o
 vss-json-streams.ali
 vss-json-streams.o
 vss-json.ali
 vss-json.o
lib/vss_text/
 vss-characters.ali
 vss-characters.o
 vss-implementation-fnv_hash.ali
 vss-implementation-fnv_hash.o
 vss-implementation-line_iterators.ali
 vss-implementation-line_iterators.o
 vss-implementation-string_configuration.ali
 vss-implementation-string_configuration.o
 vss-implementation-string_handlers.ali
 vss-implementation-string_handlers.o
 vss-implementation-string_vectors.ali
 vss-implementation-string_vectors.o
 vss-implementation-strings.ali
 vss-implementation-strings.o
 vss-implementation-utf8_encoding.ali
 vss-implementation-utf8_encoding.o
 vss-implementation-utf8_string_handlers.ali
 vss-implementation-utf8_string_handlers.o
 vss-implementation.ali
 vss-implementation.o
 vss-stream_element_vectors-conversions.ali
 vss-stream_element_vectors-conversions.o
 vss-stream_element_vectors-internals.ali
 vss-stream_element_vectors-internals.o
 vss-stream_element_vectors.ali
 vss-stream_element_vectors.o
 vss-string_vectors-internals.ali
 vss-string_vectors-internals.o
 vss-string_vectors.ali
 vss-string_vectors.o
 vss-strings-character_iterators.ali
 vss-strings-character_iterators.o
 vss-strings-conversions.ali
 vss-strings-conversions.o
 vss-strings-converters-decoders-utf8.ali
 vss-strings-converters-decoders-utf8.o
 vss-strings-converters-decoders.ali
 vss-strings-converters-decoders.o
 vss-strings-converters.ali
 vss-strings-converters.o
 vss-strings-cursors-internals.ali
 vss-strings-cursors-internals.o
 vss-strings-cursors-iterators-characters-internals.ali
 vss-strings-cursors-iterators-characters-internals.o
 vss-strings-cursors-iterators-characters.ali
 vss-strings-cursors-iterators-characters.o
 vss-strings-cursors-iterators-lines-internals.ali
 vss-strings-cursors-iterators-lines-internals.o
 vss-strings-cursors-iterators-lines.ali
 vss-strings-cursors-iterators-lines.o
 vss-strings-cursors-iterators.ali
 vss-strings-cursors-iterators.o
 vss-strings-cursors-markers-internals.ali
 vss-strings-cursors-markers-internals.o
 vss-strings-cursors-markers.ali
 vss-strings-cursors-markers.o
 vss-strings-cursors.ali
 vss-strings-cursors.o
 vss-strings-internals.ali
 vss-strings-internals.o
 vss-strings-line_iterators.ali
 vss-strings-line_iterators.o
 vss-strings-markers.ali
 vss-strings-markers.o
 vss-strings-texts.ali
 vss-strings-texts.o
 vss-strings.ali
 vss-strings.o
 vss-text_streams-memory_utf8_input.ali
 vss-text_streams-memory_utf8_input.o
 vss-text_streams-memory_utf8_output.ali
 vss-text_streams-memory_utf8_output.o
 vss-text_streams.ali
 vss-text_streams.o
 vss-unicode.ali
 vss-unicode.o
 vss.ali
 vss.o
share/gpr/
 vss_gnat.gpr
 vss_json.gpr
 vss_text.gpr


[FILE:567:patches/patch-Makefile]
--- Makefile.orig	2021-06-15 05:07:58 UTC
+++ Makefile
@@ -5,6 +5,11 @@ all:
 	gprbuild -p -P gnat/vss_text.gpr -XVSS_BUILD_MODE=$(BUILD_MODE) -cargs $(ADAFLAGS)
 	gprbuild -p -P gnat/vss_json.gpr -XVSS_BUILD_MODE=$(BUILD_MODE) -cargs $(ADAFLAGS)
 
+install:
+	gprinstall --prefix=$(DESTDIR)$(PREFIX) -p -P gnat/vss_text.gpr
+	gprinstall --prefix=$(DESTDIR)$(PREFIX) -p -P gnat/vss_json.gpr
+	gprinstall --prefix=$(DESTDIR)$(PREFIX) -p -P gnat/vss_gnat.gpr
+
 build_tests:
 	gprbuild -p -P gnat/tests/vss_text_tests.gpr
 	gprbuild -p -P gnat/tests/vss_json_tests.gpr


[FILE:7913:patches/patch-revert-2020]
This code requires Ada 2020 features which are missing from gcc9.
This patch reverts the code to it's previous form.

--- source/text/vss-strings.ads.orig	2021-06-15 05:07:58 UTC
+++ source/text/vss-strings.ads
@@ -53,8 +53,7 @@ package VSS.Strings is
    New_Line_Function : constant Line_Terminator_Set :=
      (CR | LF | CRLF | NEL => True, others => False);
 
-   type Virtual_String is tagged private
-     with String_Literal => To_Virtual_String;
+   type Virtual_String is tagged private;
    pragma Preelaborable_Initialization (Virtual_String);
 
    Empty_Virtual_String : constant Virtual_String;
--- testsuite/json/test_json_writer.adb.orig	2021-06-15 05:07:59 UTC
+++ testsuite/json/test_json_writer.adb
@@ -72,7 +72,8 @@ procedure Test_JSON_Writer is
         Character'Val (16#1F#)));
    --  All control characters required to be escaped
 
-   Escaped : constant VSS.Strings.Virtual_String := "\""";
+   Escaped : constant VSS.Strings.Virtual_String :=
+     VSS.Strings.Conversions.To_Virtual_String ("\""");
 
    procedure Test_Output_Failure
      (Writer : in out VSS.JSON.Streams.Writers.JSON_Simple_Writer'Class);
@@ -237,11 +238,11 @@ procedure Test_JSON_Writer is
       Object_Key_Scenario : constant Test_Scenario :=
         ((1, (Kind => VSS.JSON.Events.Start_Object)),
          (7, (Kind => VSS.JSON.Events.Key_Name,
-              Key  => "name")),
+              Key  => VSS.Strings.To_Virtual_String ("name"))),
          (2, (Kind         => VSS.JSON.Events.String_Value,
               String_Value => VSS.Strings.Empty_Virtual_String)),
          (11, (Kind => VSS.JSON.Events.Key_Name,
-               Key  => "surname")),
+              Key  => VSS.Strings.To_Virtual_String ("surname"))),
          (2, (Kind         => VSS.JSON.Events.String_Value,
               String_Value => VSS.Strings.Empty_Virtual_String)),
          (1, (Kind => VSS.JSON.Events.End_Object)));
@@ -283,51 +284,66 @@ begin
 
    --  Some usual constructs.
 
-   Writer.Key_Name ("name", Success);
-   Writer.String_Value ("Some name", Success);
-   Writer.Key_Name ("names", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("name"), Success);
+   Writer.String_Value
+     (VSS.Strings.Conversions.To_Virtual_String ("Some name"), Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("names"), Success);
    Writer.Start_Array (Success);
-   Writer.String_Value ("Some", Success);
-   Writer.String_Value ("name", Success);
+   Writer.String_Value
+     (VSS.Strings.Conversions.To_Virtual_String ("Some"), Success);
+   Writer.String_Value
+     (VSS.Strings.Conversions.To_Virtual_String ("name"), Success);
    Writer.End_Array (Success);
-   Writer.Key_Name ("is", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("is"), Success);
    Writer.Boolean_Value (False, Success);
-   Writer.Key_Name ("no", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("no"), Success);
    Writer.Boolean_Value (True, Success);
-   Writer.Key_Name ("empty", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("empty"), Success);
    Writer.Null_Value (Success);
-   Writer.Key_Name ("integer", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("integer"), Success);
    Writer.Integer_Value (15, Success);
-   Writer.Key_Name ("float", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("float"), Success);
    Writer.Float_Value (20.5, Success);
 
    --  Arrays of different types
 
-   Writer.Key_Name ("booleans", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("booleans"), Success);
    Writer.Start_Array (Success);
    Writer.Boolean_Value (False, Success);
    Writer.Boolean_Value (True, Success);
    Writer.End_Array (Success);
 
-   Writer.Key_Name ("nulls", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("nulls"), Success);
    Writer.Start_Array (Success);
    Writer.Null_Value (Success);
    Writer.Null_Value (Success);
    Writer.End_Array (Success);
 
-   Writer.Key_Name ("floats", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("floats"), Success);
    Writer.Start_Array (Success);
    Writer.Float_Value (-1.0, Success);
    Writer.Float_Value (1.0, Success);
    Writer.End_Array (Success);
 
-   Writer.Key_Name ("integers", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("integers"), Success);
    Writer.Start_Array (Success);
    Writer.Integer_Value (-1, Success);
    Writer.Integer_Value (1, Success);
    Writer.End_Array (Success);
 
-   Writer.Key_Name ("arrays", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("arrays"), Success);
    Writer.Start_Array (Success);
    Writer.Start_Array (Success);
    Writer.End_Array (Success);
@@ -335,7 +351,8 @@ begin
    Writer.End_Array (Success);
    Writer.End_Array (Success);
 
-   Writer.Key_Name ("objects", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("objects"), Success);
    Writer.Start_Array (Success);
    Writer.Start_Object (Success);
    Writer.End_Object (Success);
@@ -345,20 +362,24 @@ begin
 
    --  All control characters inside string value
 
-   Writer.Key_Name ("controls", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("controls"), Success);
    Writer.String_Value (All_Controls, Success);
 
    --  Backslash and quotation mark inside string value
 
-   Writer.Key_Name ("others", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("others"), Success);
    Writer.String_Value (Escaped, Success);
 
    --  Empty string as value (for both null string and string of zero length
    --  cases)
 
-   Writer.Key_Name ("empty_string", Success);
-   Writer.String_Value ("", Success);
-   Writer.Key_Name ("null_string", Success);
+   Writer.Key_Name
+     (VSS.Strings.To_Virtual_String ("empty_string"), Success);
+   Writer.String_Value (VSS.Strings.To_Virtual_String (""), Success);
+   Writer.Key_Name
+     (VSS.Strings.To_Virtual_String ("null_string"), Success);
    Writer.String_Value (VSS.Strings.Empty_Virtual_String, Success);
 
    Writer.End_Object (Success);
--- source/text/implementation/vss-strings-converters-decoders-utf8.adb.orig	2021-06-15 05:07:58 UTC
+++ source/text/implementation/vss-strings-converters-decoders-utf8.adb
@@ -179,10 +179,13 @@ package body VSS.Strings.Converters.Deco
    -------------------
 
    overriding function Error_Message
-     (Self : UTF8_Decoder) return VSS.Strings.Virtual_String is
+     (Self : UTF8_Decoder) return VSS.Strings.Virtual_String
+   is
+      error_msg : constant VSS.Strings.Virtual_String :=
+         VSS.Strings.To_Virtual_String ("Iff-formed sequence");
    begin
       if Self.Error then
-         return "Iff-formed sequence";
+         return error_msg;
 
       else
          return VSS.Strings.Empty_Virtual_String;
--- source/text/implementation/vss-strings-converters-decoders.adb.orig	2021-06-15 05:07:58 UTC
+++ source/text/implementation/vss-strings-converters-decoders.adb
@@ -118,11 +118,14 @@ package body VSS.Strings.Converters.Deco
    procedure Initialize
      (Self     : in out Virtual_String_Decoder'Class;
       Encoding : VSS.Strings.Virtual_String;
-      Flags    : Converter_Flags := Default_Converter_Flags) is
+      Flags    : Converter_Flags := Default_Converter_Flags)
+   is
+      utf8 : constant VSS.Strings.Virtual_String :=
+             VSS.Strings.To_Virtual_String ("utf-8");
    begin
       Free (Self.Decoder);
 
-      if Encoding = "utf-8" then
+      if Encoding = utf8 then
          Self.Decoder := new VSS.Strings.Converters.Decoders.UTF8.UTF8_Decoder;
          Self.Decoder.Initialize (Flags);
       end if;

