# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-attrs
VERSION=		19.1.0
KEYWORDS=		python devel
VARIANTS=		py27 py36 py37
SDESC[py36]=		Classes Without Boilerplate (PY 36)
SDESC[py37]=		Classes Without Boilerplate (PY 37)
SDESC[py27]=		Classes Without Boilerplate (PY 27)
HOMEPAGE=		https://www.attrs.org/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/a/attrs
DISTFILE[1]=		attrs-19.1.0.tar.gz:main
DF_INDEX=		1
SPKGS[py36]=		single
SPKGS[py37]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY36 PY37
OPTIONS_STANDARD=	none
VOPTS[py36]=		PY27=OFF PY36=ON PY37=OFF
VOPTS[py37]=		PY27=OFF PY36=OFF PY37=ON
VOPTS[py27]=		PY27=ON PY36=OFF PY37=OFF

DISTNAME=		attrs-19.1.0

GENERATED=		yes

[PY36].USES_ON=				python:py36

[PY37].USES_ON=				python:py37

[PY27].USES_ON=				python:py27

[FILE:3656:descriptions/desc.single]
.. image:: https://www.attrs.org/en/latest/_static/attrs_logo.png
   :alt: attrs Logo

======================================
``attrs``: Classes Without Boilerplate
======================================

.. image:: https://readthedocs.org/projects/attrs/badge/?version=stable
   :target: https://www.attrs.org/en/stable/?badge=stable
   :alt: Documentation Status

.. image:: https://travis-ci.org/python-attrs/attrs.svg?branch=master
   :target: https://travis-ci.org/python-attrs/attrs
   :alt: CI Status

.. image::
https://codecov.io/github/python-attrs/attrs/branch/master/graph/badge.svg
   :target: https://codecov.io/github/python-attrs/attrs
   :alt: Test Coverage

.. image:: https://img.shields.io/badge/code%20style-black-000000.svg
   :target: https://github.com/ambv/black
   :alt: Code style: black

.. teaser-begin

``attrs`` is the Python package that will bring back the **joy** of
**writing classes** by relieving you from the drudgery of implementing
object protocols (aka `dunder
<https://nedbatchelder.com/blog/200605/dunder.html>`_ methods).

Its main goal is to help you to write **concise** and **correct** software
without slowing down your code.

.. -spiel-end-

For that, it gives you a class decorator and a way to declaratively define
the attributes on that class:

.. -code-begin-

.. code-block:: pycon

   >>> import attr

   >>> @attr.s
   ... class SomeClass(object):
   ...     a_number = attr.ib(default=42)
   ...     list_of_numbers = attr.ib(factory=list)
   ...
   ...     def hard_math(self, another_number):
   ...         return self.a_number + sum(self.list_of_numbers) *
another_number


   >>> sc = SomeClass(1, [1, 2, 3])
   >>> sc
   SomeClass(a_number=1, list_of_numbers=[1, 2, 3])

   >>> sc.hard_math(3)
   19
   >>> sc == SomeClass(1, [1, 2, 3])
   True
   >>> sc != SomeClass(2, [3, 2, 1])
   True

   >>> attr.asdict(sc)
   {'a_number': 1, 'list_of_numbers': [1, 2, 3]}

   >>> SomeClass()
   SomeClass(a_number=42, list_of_numbers=[])

   >>> C = attr.make_class("C", ["a", "b"])
   >>> C("foo", "bar")
   C(a='foo', b='bar')


After *declaring* your attributes ``attrs`` gives you:

- a concise and explicit overview of the class's attributes,
- a nice human-readable ``__repr__``,
- a complete set of comparison methods,
- an initializer,
- and much more,

*without* writing dull boilerplate code again and again and *without*
runtime performance penalties.

On Python 3.6 and later, you can often even drop the calls to
``attr.ib()`` by using `type annotations
<https://www.attrs.org/en/latest/types.html>`_.

This gives you the power to use actual classes with actual types in your
code instead of confusing ``tuple``\ s or `confusingly behaving
<https://www.attrs.org/en/stable/why.html#namedtuples>`_ ``namedtuple``\ s.
Which in turn encourages you to write *small classes* that do `one thing
well <https://www.destroyallsoftware.com/talks/boundaries>`_.
Never again violate the `single responsibility principle
<https://en.wikipedia.org/wiki/Single_responsibility_principle>`_ just
because implementing ``__init__`` et al is a painful drag.


.. -testimonials-

Testimonials
============

**Amber Hawkie Brown**, Twisted Release Manager and Computer Owl:

  Writing a fully-functional class using attrs takes me less time than
writing this testimonial.


**Glyph Lefkowitz**, creator of `Twisted <https://twistedmatrix.com/>`_,
`Automat <https://pypi.org/project/Automat/>`_, and other open source
software, in `The One Python Library Everyone Needs
<https://glyph.twistedmatrix.com/2016/08/attrs.html>`_:

  Iâ€™m looking forward to is being able to program in Python-with-attrs
everywhere.


[FILE:98:distinfo]
f0b870f674851ecbfbbbd364d6b5cbdff9dcedbc7f3f5e18a6891057f21fe399       124220 attrs-19.1.0.tar.gz

