# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-attrs
VERSION=		22.2.0
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Classes Without Boilerplate (3.10)
SDESC[v11]=		Classes Without Boilerplate (3.11)
HOMEPAGE=		https://www.attrs.org/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/fb/6e/6f83bf616d2becdf333a1640f1d463fef3150e2e926b7010cb0f81c95e88
DISTFILE[1]=		attrs-22.2.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		attrs-22.2.0.dist-info

GENERATED=		yes

[PY310].USES_ON=			python:py310,wheel

[PY311].USES_ON=			python:v11,wheel

[FILE:1750:descriptions/desc.single]
<p align="center">
  
    [image]
  
</p>

<p align="center">
   
       [image]
   
   
      [image]
   
   [image]
   
      [image]
   
   
      [image]
   
   [image]
</p>

<!-- teaser-begin -->

*attrs* is the Python package that will bring back the **joy** of **writing
classes** by relieving you from the drudgery of implementing object
protocols (aka [dunder methods]).
[Trusted by NASA] for Mars missions since 2020!

Its main goal is to help you to write **concise** and **correct** software
without slowing down your code.

## Sponsors

*attrs* would not be possible without our [amazing sponsors].
Especially those generously supporting us at the *The Organization* tier
and higher:

<p align="center">
   
      [image]</img>
   

   
      [image]</img>
   

   
      [image]</img>
   

   
      [image]</img>
   
</p>

<p align="center">
   <strong>Please consider joining them to help make <em>attrs</em>â€™s
maintenance more sustainable!</strong>
</p>

<!-- teaser-end -->

## Example

*attrs* gives you a class decorator and a way to declaratively define the
attributes on that class:

<!-- code-begin -->

```pycon
>>> from attrs import asdict, define, make_class, Factory

>>> @define
... class SomeClass:
...     a_number: int = 42
...     list_of_numbers: list[int] = Factory(list)
...
...     def hard_math(self, another_number):
...         return self.a_number + sum(self.list_of_numbers) *
another_number

>>> sc = SomeClass(1, [1, 2, 3])
>>> sc
SomeClass(a_number=1, list_of_numbers=[1, 2, 3])

>>> sc.hard_math(3)
19
>>> sc == SomeClass(1, [1, 2, 3])
True
>>> sc != SomeClass(2, [3, 2, 1])
True

>>> asdict(sc)
{'a_number': 1, 'list_of_numbers': [1, 2, 3]}

>>> SomeClass()
SomeClass(a_number=42, list_of_numbers=[])



[FILE:108:distinfo]
29e95c7f6778868dbd49170f98f8818f78f3dc5e0e37c0b1f474e3561b240836        60018 attrs-22.2.0-py3-none-any.whl

