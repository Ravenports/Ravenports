# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		vde2
VERSION=		2.3.3
KEYWORDS=		net
VARIANTS=		standard
SDESC[standard]=	User-mode virtual ethernet infrastructure
HOMEPAGE=		https://vde.sourceforge.net/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/virtualsquare:vde-2:v2.3.3
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		dragonfly freebsd netbsd linux darwin midnightbsd

BUILD_DEPENDS=		libpcap:dev:standard
BUILDRUN_DEPENDS=	libpcap:primary:standard

USES=			autoreconf gmake libtool ssl

LICENSE=		GPLv2+:single CUSTOM1:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_NAME=		CUSTOM1:"Slirp License"
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/COPYING
			CUSTOM1:{{WRKSRC}}/COPYING.slirpvde
LICENSE_AWK=		TERMS:"^$$"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/include/libvdemgmt.h
LICENSE_SCHEME=		multi

FPC_EQUIVALENT=		net/vde2

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-python

MAKE_ENV=		V=1
SINGLE_JOB=		yes

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes

VAR_OPSYS[linux]=	CFLAGS=-D_BSD_SOURCE=1

post-patch:
	${REINPLACE_CMD} -e '/-Wall/s|-O2||g' ${WRKSRC}/configure.ac
	${REINPLACE_CMD} -e 's|$$(MAKE).*install-data-hook||g' \
		${WRKSRC}/man/Makefile.am

post-install:
	${LN} -sf unixcmd.1 ${STAGEDIR}${MANPREFIX}/man/man1/vdecmd.1
	${LN} -sf vdeq.1 ${STAGEDIR}${MANPREFIX}/man/man1/vdeqemu.1
	${LN} -sf vdeq.1 ${STAGEDIR}${MANPREFIX}/man/man1/vdekvm.1

[FILE:312:descriptions/desc.single]
Virtual Distributed Ethernet is a user-mode virtual network (layer2)
infrastructure.  It can be used for network simulations, joining multiple
qemu instances together in a shared virtual network, or tunneling over the
Internet.  Physical hosts can be joined to the virtual network by means of
the tap(4) driver.


[FILE:111:distinfo]
a7d2cc4c3d0c0ffe6aff7eb0029212f2b098313029126dcd12dc542723972379       234790 virtualsquare-vde-2-2.3.3.tar.gz


[FILE:1107:manifests/plist.single]
%%ONLY-LINUX%%lib/vde2/
 libvdetap.a
 libvdetap.so
%%ONLY-LINUX%%libexec/vdetap
bin/
 dpipe
 unixcmd
 vde_autolink
 vde_over_ns
 vde_pcapplug
 vde_plug
 vde_plug2tap
 vde_router
 vde_switch
 vdecmd
 vdeterm
 wirefilter
etc/vde2/vdecmd
etc/vde2/libvdemgmt/
 asyncrecv.rc
 closemachine.rc
 openmachine.rc
 sendcmd.rc
include/
 libvdehist.h
 libvdemgmt.h
 libvdeplug.h
 libvdeplug_dyn.h
 libvdesnmp.h
lib/
 libvdehist.a
 libvdehist.so
 libvdehist.so.0
 libvdehist.so.0.0.1
 libvdemgmt.a
 libvdemgmt.so
 libvdemgmt.so.0
 libvdemgmt.so.0.0.1
 libvdeplug.a
 libvdeplug.so
 libvdeplug.so.3
 libvdeplug.so.3.0.1
 libvdesnmp.a
 libvdesnmp.so
 libvdesnmp.so.0
 libvdesnmp.so.0.0.1
lib/pkgconfig/
 vdehist.pc
 vdemgmt.pc
 vdeplug.pc
 vdesnmp.pc
share/man/man1/
 dpipe.1.gz
 slirpvde.1.gz
 unixcmd.1.gz
 unixterm.1.gz
 vde_autolink.1.gz
 vde_cryptcab.1.gz
 vde_l3.1.gz
 vde_over_ns.1.gz
 vde_pcapplug.1.gz
 vde_plug.1.gz
 vde_plug2tap.1.gz
 vde_router.1.gz
 vde_switch.1.gz
 vde_vxlan.1.gz
 vdecmd.1.gz
 vdekvm.1.gz
 vdeq.1.gz
 vdeqemu.1.gz
 vdetaplib.1.gz
 vdeterm.1.gz
 wirefilter.1.gz
share/man/man8/vde_tunctl.8.gz


[FILE:656:patches/patch-configure.ac]
--- configure.ac.orig	2022-05-21 05:07:12.960406000 +0200
+++ configure.ac	2022-05-21 05:08:30.208378000 +0200
@@ -107,7 +107,7 @@
     AC_DEFINE([VDE_DARWIN], 1, [If defined, this is a Darwin system])
     darwin_gcc=yes
   ;;
-  freebsd*)
+  freebsd*|dragonfly*|netbsd*|midnight*)
     AC_DEFINE([VDE_FREEBSD], 1, [If defined, this is a FreeBSD system])
   ;;
   *)
@@ -190,7 +190,7 @@
 http://tuntaposx.sourceforge.net/])
       fi
       ;;
-    freebsd*)
+    freebsd*|dragonfly*|netbsd*|midnight*)
       AC_CHECK_HEADER([net/if_tun.h],
         [AC_DEFINE([HAVE_TUNTAP], 1, [If defined, tuntap support is compiled in])],
         [warn_tuntap=yes])


[FILE:361:patches/patch-src_dpipe.c]
--- src/dpipe.c.orig	2022-05-21 05:11:05.035482000 +0200
+++ src/dpipe.c	2022-05-21 05:12:17.785698000 +0200
@@ -201,7 +201,11 @@
 
 	if (daemonize != 0)
 		daemon(0,0);
+#ifdef __linux__
 	else if (setpgrp() == -1) {
+#else
+        else if (setpgrp(0,getpid()) != 0) {
+#endif
 		fprintf(stderr,"Err: cannot create pgrp\n");
 		perror("setpgrp");
 		exit(1);


[FILE:388:patches/patch-src_vde__pcapplug.c]
--- src/vde_pcapplug.c.orig	2011-11-23 16:41:18 UTC
+++ src/vde_pcapplug.c
@@ -196,7 +196,7 @@ void pcap_callback(u_char *u, const stru
 void setup_fd(int fd)
 {
 /* FreeBSD settings */
-#if defined(VDE_FREEBSD)
+#if 0 // BIOC* not defined by port libpcap 
 	/*
 	 * Tell the kernel that the header is fully-formed when it gets it.
 	 * This is required in order to fake the src address.


[FILE:313:patches/patch-src_vde__plug2tap.c]
--- src/vde_plug2tap.c.orig	2011-11-23 16:41:18 UTC
+++ src/vde_plug2tap.c
@@ -37,7 +37,11 @@
 #ifdef VDE_FREEBSD
 #include <sys/socket.h>
 #include <net/if.h>
+# ifdef __DragonFly__
+#include <net/tun/if_tun.h>
+# else
 #include <net/if_tun.h>
+# endif
 #endif
 
 #if defined(VDE_DARWIN) || defined(VDE_FREEBSD)


[FILE:375:patches/patch-src_vde__router_vder__icmp.c]
--- src/vde_router/vder_icmp.c.orig	2022-05-02 17:39:19 UTC
+++ src/vde_router/vder_icmp.c
@@ -61,7 +61,11 @@ int vder_icmp_ttl_expired(uint32_t dst,
 
 int vder_icmp_filter(uint32_t dst, uint8_t *foot)
 {
+#if defined(__NetBSD__)
+	return 0;
+#else
 	return vder_icmp_send(dst, ICMP_UNREACH, ICMP_UNREACH_FILTER_PROHIB, foot);
+#endif
 }
 
 /* Parse an incoming icmp packet

