# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		openmp
VERSION=		7.0.1
KEYWORDS=		devel lang
VARIANTS=		standard
SDESC[standard]=	LLVM Open Multi-Processing Runtime Library
HOMEPAGE=		http://llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://llvm.org/releases/7.0.1/
DISTFILE[1]=		openmp-7.0.1.src.tar.xz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cmake:outsource perl:build pkgconfig c++:single

DISTNAME=		openmp-7.0.1.src

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

CMAKE_BUILD_TYPE=	Release

CMAKE_ARGS=		-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libomp.${LIBEXT}
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libomptarget.${LIBEXT}

[FILE:951:descriptions/desc.single]
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies. Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them. The name "LLVM" itself is not an
acronym; it is the full name of the project.

The OpenMP subproject of LLVM contains the components required to build
an executable OpenMP program that are outside the compiler itself.

This package contains the code for the runtime library against which code
compiled by clang -fopenmp must be linked before it can run.  It also
contains the library that supports offload to target devices (in
"libomptarget").

Support for the parts of the OpenMP 4.0 (and later) language that are not
associated with the "target" constructs are contained in the "runtime"
directory. Support for offloading computation via the "target" directive
is in the separate "libomptarget" directory.


[FILE:102:distinfo]
bf16b78a678da67d68405214ec7ee59d86a15f599855806192a75dcfca9b0d0c       909316 openmp-7.0.1.src.tar.xz


[FILE:82:manifests/plist.single]
include/
 omp.h
 ompt.h
lib/
 libgomp.so
 libiomp5.so
 libomp.so
 libomptarget.so


[FILE:626:patches/patch-runtime_cmake_LibompHandleFlags.cmake]
--- runtime/cmake/LibompHandleFlags.cmake.orig	2018-07-30 18:16:22 UTC
+++ runtime/cmake/LibompHandleFlags.cmake
@@ -153,9 +153,9 @@ function(libomp_get_libflags libflags)
   if(${IA32})
     libomp_append(libflags_local -lirc_pic LIBOMP_HAVE_IRC_PIC_LIBRARY)
   endif()
-  IF(${CMAKE_SYSTEM_NAME} MATCHES "NetBSD")
+  IF(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD|DragonFly|NetBSD")
     libomp_append(libflags_local -lm)
-  ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "NetBSD")
+  ENDIF()
   set(libflags_local ${libflags_local} ${LIBOMP_LIBFLAGS})
   libomp_setup_flags(libflags_local)
   set(${libflags} ${libflags_local} PARENT_SCOPE)


[FILE:615:patches/patch-runtime_cmake_LibompMicroTests.cmake]
--- runtime/cmake/LibompMicroTests.cmake.orig	2016-12-08 09:22:24 UTC
+++ runtime/cmake/LibompMicroTests.cmake
@@ -171,7 +171,7 @@ add_custom_command(
 add_custom_target(libomp-test-deps DEPENDS test-deps/.success)
 set(libomp_expected_library_deps)
 if(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
-  set(libomp_expected_library_deps libc.so.7 libthr.so.3)
+  set(libomp_expected_library_deps libc.so.7 libthr.so.3 libm.so.5)
   libomp_append(libomp_expected_library_deps libhwloc.so.5 LIBOMP_USE_HWLOC)
 elseif(CMAKE_SYSTEM_NAME MATCHES "NetBSD")
   set(libomp_expected_library_deps libc.so.12 libpthread.so.1 libm.so.0)


[FILE:264:patches/patch-runtime_src_kmp__platform.h]
--- runtime/src/kmp_platform.h.orig	2017-10-20 19:30:57 UTC
+++ runtime/src/kmp_platform.h
@@ -44,7 +44,7 @@
 #else
 #endif
 
-#if (defined __FreeBSD__)
+#if (defined __FreeBSD__) || (defined __DragonFly__)
 #undef KMP_OS_FREEBSD
 #define KMP_OS_FREEBSD 1
 #endif

