# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-Deprecated
VERSION=		1.2.18
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Implements @deprecated decorator (3.12)
SDESC[v13]=		Implements @deprecated decorator (3.13)
HOMEPAGE=		https://github.com/laurent-laporte-pro/deprecated
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/6e/c6/ac0b6c1e2d138f1002bcf799d330bd6d85084fece321e662a14223794041
DISTFILE[1]=		Deprecated-1.2.18-py2.py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		Deprecated-1.2.18.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-wrapt:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-wrapt:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:2455:descriptions/desc.single]

Deprecated Library
------------------

Deprecated is Easy to Use
`

If you need to mark a function or a method as deprecated,
you can use the ``@deprecated`` decorator:

Save in a hello.py:

.. code:: python

    from deprecated import deprecated

    @deprecated(version='1.2.1', reason="You should use another function")
    def some_old_function(x, y):
        return x + y

    class SomeClass(object):
        @deprecated(version='1.3.0', reason="This method is deprecated")
        def some_old_method(self, x, y):
            return x + y

    some_old_function(12, 34)
    obj = SomeClass()
    obj.some_old_method(5, 8)

And Easy to Setup
`

And run it:

.. code:: bash

    $ pip install Deprecated
    $ python hello.py
    hello.py:15: DeprecationWarning: Call to deprecated function (or
staticmethod) some_old_function.
    (You should use another function) -- Deprecated since version 1.2.0.
      some_old_function(12, 34)
    hello.py:17: DeprecationWarning: Call to deprecated method
some_old_method.
    (This method is deprecated) -- Deprecated since version 1.3.0.
      obj.some_old_method(5, 8)

You can document your code
``

Have you ever wonder how to document that some functions, classes, methods,
etc. are deprecated?
This is now possible with the integrated Sphinx directives:

For instance, in hello_sphinx.py:

.. code:: python

    from deprecated.sphinx import deprecated
    from deprecated.sphinx import versionadded
    from deprecated.sphinx import versionchanged

    @versionadded(version='1.0', reason="This function is new")
    def function_one():
        '''This is the function one'''

    @versionchanged(version='1.0', reason="This function is modified")
    def function_two():
        '''This is the function two'''

    @deprecated(version='1.0', reason="This function will be removed soon")
    def function_three():
        '''This is the function three'''

    function_one()
    function_two()
    function_three()  # warns

    help(function_one)
    help(function_two)
    help(function_three)

The result it immediate
```

Run it:

.. code:: bash

    $ python hello_sphinx.py

    hello_sphinx.py:23: DeprecationWarning: Call to deprecated function (or
staticmethod) function_three.
    (This function will be removed soon) -- Deprecated since version 1.0.
      function_three()  # warns

    Help on function function_one in module __main__:

    function_one()
        This is the function one


[FILE:128:distinfo]
bd5011788200372a32418f888e326a09ff80d0214bd961147cfed01b5c018eec         9998 python-src/Deprecated-1.2.18-py2.py3-none-any.whl

