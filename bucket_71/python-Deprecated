# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-Deprecated
VERSION=		1.2.13
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Implements @deprecated decorator (3.10)
SDESC[py39]=		Implements @deprecated decorator (3.9)
HOMEPAGE=		https://github.com/tantale/deprecated
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/51/6a/c3a0408646408f7283b7bc550c30a32cc791181ec4618592eec13e066ce3
DISTFILE[1]=		Deprecated-1.2.13-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		Deprecated-1.2.13.dist-info

GENERATED=		yes

[PY39].RUN_DEPENDS_ON=			python-wrapt:single:py39
[PY39].USES_ON=				python:py39,wheel

[PY310].RUN_DEPENDS_ON=			python-wrapt:single:py310
[PY310].USES_ON=			python:py310,wheel

[FILE:2455:descriptions/desc.single]

Deprecated Library
------------------

Deprecated is Easy to Use
`

If you need to mark a function or a method as deprecated,
you can use the ``@deprecated`` decorator:

Save in a hello.py:

.. code:: python

    from deprecated import deprecated

    @deprecated(version='1.2.1', reason="You should use another function")
    def some_old_function(x, y):
        return x + y

    class SomeClass(object):
        @deprecated(version='1.3.0', reason="This method is deprecated")
        def some_old_method(self, x, y):
            return x + y

    some_old_function(12, 34)
    obj = SomeClass()
    obj.some_old_method(5, 8)

And Easy to Setup
`

And run it:

.. code:: bash

    $ pip install Deprecated
    $ python hello.py
    hello.py:15: DeprecationWarning: Call to deprecated function (or
staticmethod) some_old_function.
    (You should use another function) -- Deprecated since version 1.2.0.
      some_old_function(12, 34)
    hello.py:17: DeprecationWarning: Call to deprecated method
some_old_method.
    (This method is deprecated) -- Deprecated since version 1.3.0.
      obj.some_old_method(5, 8)

You can document your code
``

Have you ever wonder how to document that some functions, classes, methods,
etc. are deprecated?
This is now possible with the integrated Sphinx directives:

For instance, in hello_sphinx.py:

.. code:: python

    from deprecated.sphinx import deprecated
    from deprecated.sphinx import versionadded
    from deprecated.sphinx import versionchanged

    @versionadded(version='1.0', reason="This function is new")
    def function_one():
        '''This is the function one'''

    @versionchanged(version='1.0', reason="This function is modified")
    def function_two():
        '''This is the function two'''

    @deprecated(version='1.0', reason="This function will be removed soon")
    def function_three():
        '''This is the function three'''

    function_one()
    function_two()
    function_three()  # warns

    help(function_one)
    help(function_two)
    help(function_three)

The result it immediate
```

Run it:

.. code:: bash

    $ python hello_sphinx.py

    hello_sphinx.py:23: DeprecationWarning: Call to deprecated function (or
staticmethod) function_three.
    (This function will be removed soon) -- Deprecated since version 1.0.
      function_three()  # warns

    Help on function function_one in module __main__:

    function_one()
        This is the function one


[FILE:117:distinfo]
64756e3e14c8c5eea9795d93c524551432a0be75629f8f29e67ab8caf076c76d         9551 Deprecated-1.2.13-py2.py3-none-any.whl

