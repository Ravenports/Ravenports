# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-netbox-inventory
VERSION=		2.4.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Inventory asset management in NetBox (3.12)
SDESC[v13]=		Inventory asset management in NetBox (3.13)
HOMEPAGE=		https://github.com/ArnesSI/netbox-inventory/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/7c/2f/158514affd0c19abbf3f8dbcd6592e386e0049282c76c2afe786e266ea67
DISTFILE[1]=		netbox_inventory-2.4.0-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		netbox_inventory-2.4.0.dist-info

GENERATED=		yes

[PY312].USES_ON=			python:v12,wheel

[PY313].USES_ON=			python:v13,wheel

[FILE:3487:descriptions/desc.single]
# NetBox Inventory Plugin

A [Netbox] plugin for hardware inventory.

## Features

Keep track of your hardware, whether it is installed or in storage. You can
define assets that represent hardware that can be used as a device, module,
inventory item or rack in NetBox.

Each asset can have a storage location defined, when not in use. You can
assign
an asset to a device, module or inventory item. The plugin can keep serial
number
and asset tag between asset and device, module, inventory item or rack in
sync if
enabled in settings.

On Site and Location detail views there is a new tab Assets that can show
assets
that are stored or installed at that location or both. Rack details view
also has
a tab for installed Assets. This provides a unified view of all assets at a
given
location.

To properly support inventory items (that are used in NetBox to model SFP
and
similar modules) the plugin defines inventory item types that are
equivalent to
device types and module types. 

Inventory item types can be assigned into inventory item groups. On a group
detail
view you have an overview of the number of contained assets broken down by
asset
status or inventory item type and status. This way you can quickly see how
many
of a certain type of hardware you still have spare.

Inventory item groups can be nested, so you can for example model all
pluggables
as one top-level group with child groups for SFP+ modules, SFP28 modules
and so
on.

### Automatic management of asset status

Each asset has a status attribute that can indicate use of the asset. These
statuses can be set as needed by each NetBox installation.

Two statuses can have a special meaning. One to indicate asset is in
storage and one
to indicate asset is in use.

netbox_inventory can automatically set status to the value specified in
`used_status_name` configuration item when an asset is assigned to a
device, module
or inventory item.

When you remove an asset from device, module or inventory item the plugin
will set
asset status to `stored_status_name` configuration item.

To disable automatically changing status, set these two config parameters
to `None`.

### Prevent unwanted changes for tagged assets

With `asset_disable_editing_fields_for_tags` and
`asset_disable_deletion_for_tags` you can prevent changes to specified
asset data for assets that have certain tags attached. Changes are only
prevented via web interface. API modifications are allowed.

The idea is that an external system uses some assets stored in
netbox_inventory, and you want to prevent accidental changes to data
directly in NetBox web interface. Only that external system should modify
the data.

### Audit

Audit flows can be defined to audit the inventory on site. This feature is
not limited
to assets, it can be used to audit any object managed in NetBox.

* **Audit Flow Pages** allow the definition of user views that list
specific NetBox
  objects. These can be filtered by object type and field values.
* **Audit Flows** group multiple Audit Flow Pages into a single flow. A
flow can be
  initiated from a location type object (e.g. a `Location` or `Site`) using
the
  **[Audit]** button on its detail page. The audit flow will then display
all audit flow
  pages and their defined NetBox objects, restricted to the location for
which the flow
  is running.
* **Audit Trails** document when an object has been verified to be in the
specified
  location. An audit trail can either be created directly when running an


[FILE:129:distinfo]
f04609be733e7e75a49a40134ab69e0768f51e7cc92161db3ff5313f236c896a       144470 python-src/netbox_inventory-2.4.0-py3-none-any.whl

