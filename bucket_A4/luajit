# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		luajit
VERSION=		2.0.5
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Just-In-Time Compiler for Lua language
HOMEPAGE=		http://luajit.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://luajit.org/download/
DISTFILE[1]=		LuaJIT-2.0.5.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			cpe gmake cclibs:single

DISTNAME=		LuaJIT-2.0.5

FPC_EQUIVALENT=		lang/luajit

SOVERSION=		2.0.5

post-install:
	${LN} -sf luajit-2.0.5 ${STAGEDIR}${PREFIX}/bin/luajit
	${INSTALL_MAN} ${WRKSRC}/etc/luajit.1 ${STAGEDIR}${MAN1PREFIX}/man/man1

[FILE:211:descriptions/desc.single]
LuaJIT is a Just-In-Time Compiler (JIT) for the Lua programming language.
Lua is a powerful, dynamic and light-weight programming language. It may
be embedded or used as a general-purpose, stand-alone language.


[FILE:98:distinfo]
874b1f8297c697821f561f9b73b57ffd419ed8f4278c82e05b48806d30c1e979       849845 LuaJIT-2.0.5.tar.gz


[FILE:428:manifests/plist.single]
bin/
 luajit
 luajit-%%SOVERSION%%
include/luajit-2.0/
 lauxlib.h
 lua.h
 lua.hpp
 luaconf.h
 luajit.h
 lualib.h
lib/
 libluajit-5.1.a
 libluajit-5.1.so
 libluajit-5.1.so.%%SOMAJOR%%
 libluajit-5.1.so.%%SOVERSION%%
lib/pkgconfig/luajit.pc
share/luajit-%%SOVERSION%%/jit/
 bc.lua
 bcsave.lua
 dis_arm.lua
 dis_mips.lua
 dis_mipsel.lua
 dis_ppc.lua
 dis_x64.lua
 dis_x86.lua
 dump.lua
 v.lua
 vmdef.lua
share/man/man1/luajit.1.gz


[FILE:1715:patches/patch-Makefile]
--- Makefile.orig	2017-05-01 18:11:00 UTC
+++ Makefile
@@ -24,7 +24,7 @@ ABIVER=  5.1
 # Change the installation path as needed. This automatically adjusts
 # the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!
 #
-export PREFIX= /usr/local
+#export PREFIX= /usr/local
 export MULTILIB= lib
 ##############################################################################
 
@@ -62,8 +62,8 @@ INSTALL_T= $(INSTALL_BIN)/$(INSTALL_TNAM
 INSTALL_TSYM= $(INSTALL_BIN)/$(INSTALL_TSYMNAME)
 INSTALL_PC= $(INSTALL_PKGCONFIG)/$(INSTALL_PCNAME)
 
-INSTALL_DIRS= $(INSTALL_BIN) $(INSTALL_LIB) $(INSTALL_INC) $(INSTALL_MAN) \
-  $(INSTALL_PKGCONFIG) $(INSTALL_JITLIB) $(INSTALL_LMOD) $(INSTALL_CMOD)
+INSTALL_DIRS= $(INSTALL_INC) \
+  $(INSTALL_PKGCONFIG) $(INSTALL_JITLIB)
 UNINSTALL_DIRS= $(INSTALL_JITLIB) $(INSTALL_LJLIBD) $(INSTALL_INC) \
   $(INSTALL_LMOD) $(INSTALL_LMODD) $(INSTALL_CMOD) $(INSTALL_CMODD)
 
@@ -118,10 +118,8 @@ install: $(INSTALL_DEP)
 	$(RM) $(INSTALL_TSYM) $(INSTALL_DYN) $(INSTALL_SHORT1) $(INSTALL_SHORT2)
 	cd src && test -f $(FILE_SO) && \
 	  $(INSTALL_X) $(FILE_SO) $(INSTALL_DYN) && \
-	  $(LDCONFIG) $(INSTALL_LIB) && \
 	  $(SYMLINK) $(INSTALL_SONAME) $(INSTALL_SHORT1) && \
 	  $(SYMLINK) $(INSTALL_SONAME) $(INSTALL_SHORT2) || :
-	cd etc && $(INSTALL_F) $(FILE_MAN) $(INSTALL_MAN)
 	cd etc && $(SED_PC) $(FILE_PC) > $(FILE_PC).tmp && \
 	  $(INSTALL_F) $(FILE_PC).tmp $(INSTALL_PC) && \
 	  $(RM) $(FILE_PC).tmp
@@ -139,7 +137,6 @@ uninstall:
 	for file in $(FILES_INC); do \
 	  $(UNINSTALL) $(INSTALL_INC)/$$file; \
 	  done
-	$(LDCONFIG) $(INSTALL_LIB)
 	$(RMDIR) $(UNINSTALL_DIRS) || :
 	@echo "==== Successfully uninstalled LuaJIT $(VERSION) from $(PREFIX) ===="
 


[FILE:1192:patches/patch-src_Makefile]
--- src/Makefile.orig	2017-05-01 18:11:00 UTC
+++ src/Makefile
@@ -36,7 +36,7 @@ CC= $(DEFAULT_CC)
 # to slow down the C part by not omitting it. Debugging, tracebacks and
 # unwinding are not affected -- the assembler part has frame unwind
 # information and GCC emits it where needed (x64) or with -g (see CCDEBUG).
-CCOPT= -O2 -fomit-frame-pointer
+#CCOPT= -O2 -fomit-frame-pointer
 # Use this if you want to generate a smaller binary (but it's slower):
 #CCOPT= -Os -fomit-frame-pointer
 # Note: it's no longer recommended to use -O3 with GCC 4.x.
@@ -50,7 +50,7 @@ CCOPT= -O2 -fomit-frame-pointer
 # x86/x64 only: For GCC 4.2 or higher and if you don't intend to distribute
 # the binaries to a different machine you could also use: -march=native
 #
-CCOPT_x86= -march=i686
+#CCOPT_x86= -march=i686
 CCOPT_x64=
 CCOPT_arm=
 CCOPT_ppc=
@@ -297,9 +297,6 @@ ifeq (,$(shell $(TARGET_CC) -o /dev/null
   TARGET_XCFLAGS+= -fno-stack-protector
 endif
 ifeq (Darwin,$(TARGET_SYS))
-  ifeq (,$(MACOSX_DEPLOYMENT_TARGET))
-    export MACOSX_DEPLOYMENT_TARGET=10.4
-  endif
   TARGET_STRIP+= -x
   TARGET_XSHLDFLAGS= -dynamiclib -single_module -undefined dynamic_lookup -fPIC
   TARGET_DYNXLDOPTS=


[FILE:392:patches/patch-src_jit_bcsave.lua]
--- src/jit/bcsave.lua.orig	2017-05-01 18:11:00 UTC
+++ src/jit/bcsave.lua
@@ -275,7 +275,7 @@ typedef struct {
   o.sect[2].size = fofs(ofs)
   o.sect[3].type = f32(3) -- .strtab
   o.sect[3].ofs = fofs(sofs + ofs)
-  o.sect[3].size = fofs(#symname+1)
+  o.sect[3].size = fofs(#symname+2)
   ffi.copy(o.space+ofs+1, symname)
   ofs = ofs + #symname + 2
   o.sect[4].type = f32(1) -- .rodata

