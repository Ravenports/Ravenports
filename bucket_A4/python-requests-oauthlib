# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-requests-oauthlib
VERSION=		1.2.0
KEYWORDS=		python
VARIANTS=		py27 py36 py37
SDESC[py36]=		Authentication support for Requests (PY 36)
SDESC[py37]=		Authentication support for Requests (PY 37)
SDESC[py27]=		Authentication support for Requests (PY 27)
HOMEPAGE=		https://github.com/requests/requests-oauthlib
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/r/requests-oauthlib
DISTFILE[1]=		requests-oauthlib-1.2.0.tar.gz:main
DF_INDEX=		1
SPKGS[py36]=		single
SPKGS[py37]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY36 PY37
OPTIONS_STANDARD=	none
VOPTS[py36]=		PY27=OFF PY36=ON PY37=OFF
VOPTS[py37]=		PY27=OFF PY36=OFF PY37=ON
VOPTS[py27]=		PY27=ON PY36=OFF PY37=OFF

DISTNAME=		requests-oauthlib-1.2.0

GENERATED=		yes

[PY36].BUILDRUN_DEPENDS_ON=		python-oauthlib:single:py36
					python-requests:single:py36
[PY36].USES_ON=				python:py36

[PY37].BUILDRUN_DEPENDS_ON=		python-oauthlib:single:py37
					python-requests:single:py37
[PY37].USES_ON=				python:py37

[PY27].BUILDRUN_DEPENDS_ON=		python-oauthlib:single:py27
					python-requests:single:py27
[PY27].USES_ON=				python:py27

[FILE:4004:descriptions/desc.single]
Requests-OAuthlib |build-status| |coverage-status| |docs|
=========================================================

This project provides first-class OAuth library support for `Requests
<http://python-requests.org>`_.

The OAuth 1 workflow
--------------------

OAuth 1 can seem overly complicated and it sure has its quirks. Luckily,
requests_oauthlib hides most of these and let you focus at the task at
hand.

Accessing protected resources using requests_oauthlib is as simple as:

.. code-block:: pycon

    >>> from requests_oauthlib import OAuth1Session
    >>> twitter = OAuth1Session('client_key',
                                client_secret='client_secret',
                                resource_owner_key='resource_owner_key',

resource_owner_secret='resource_owner_secret')
    >>> url = 'https://api.twitter.com/1/account/settings.json'
    >>> r = twitter.get(url)

Before accessing resources you will need to obtain a few credentials from
your
provider (e.g. Twitter) and authorization from the user for whom you wish
to
retrieve resources for. You can read all about this in the full
`OAuth 1 workflow guide on RTD
<https://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html>`_
.

The OAuth 2 workflow
--------------------

OAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The
most
common being the Authorization Code Grant, also known as the WebApplication
flow.

Fetching a protected resource after obtaining an access token can be
extremely
simple. However, before accessing resources you will need to obtain a few
credentials from your provider (e.g. Google) and authorization from the
user
for whom you wish to retrieve resources for. You can read all about this
in the
full `OAuth 2 workflow guide on RTD
<https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html>`_
.

Installation
-------------

To install requests and requests_oauthlib you can use pip:

.. code-block:: bash

    $ pip install requests requests_oauthlib

.. |build-status| image::
https://travis-ci.org/requests/requests-oauthlib.svg?branch=master
   :target: https://travis-ci.org/requests/requests-oauthlib
.. |coverage-status| image::
https://img.shields.io/coveralls/requests/requests-oauthlib.svg
   :target: https://coveralls.io/r/requests/requests-oauthlib
.. |docs| image:: https://readthedocs.org/projects/requests-oauthlib/badge/
   :alt: Documentation Status
   :scale: 100%
   :target: https://requests-oauthlib.readthedocs.io/


History
-------

UNRELEASED
++++++++++

nothing yet

v1.2.0 (14 January 2019)
++++++++++++++++++++++++

- This project now depends on OAuthlib 3.0.0 and above. It does **not**
support
  versions of OAuthlib before 3.0.0.
- Updated oauth2 tests to use 'sess' for an OAuth2Session instance instead
of `auth`
  because OAuth2Session objects and methods acceept an `auth` paramether
which is
  typically an instance of `requests.auth.HTTPBasicAuth`
- `OAuth2Session.fetch_token` previously tried to guess how and where to
provide
  "client" and "user" credentials incorrectly. This was incompatible with
some
  OAuth servers and incompatible with breaking changes in oauthlib that
seek to
  correctly provide the `client_id`. The older implementation also did not
raise
  the correct exceptions when username and password are not present on
Legacy
  clients.
- Avoid automatic netrc authentication for OAuth2Session.

v1.1.0 (9 January 2019)
+++++++++++++++++++++++

- Adjusted version specifier for ``oauthlib`` dependency: this project is
  not yet compatible with ``oauthlib`` 3.0.0.
- Dropped dependency on ``nose``.
- Minor changes to clean up the code and make it more
readable/maintainable.

v1.0.0 (4 June 2018)
++++++++++++++++++++

- **Removed support for Python 2.6 and Python 3.3.**
  This project now supports Python 2.7, and Python 3.4 and above.
- Added several examples to the documentation.
- Added plentymarkets compliance fix.
- Added a ``token`` property to OAuth1Session, to match the corresponding


[FILE:109:distinfo]
bd6533330e8748e94bf0b214775fed487d309b8b8fe823dc45641ebcd9a32f57        83381 requests-oauthlib-1.2.0.tar.gz

