# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-resolvelib
VERSION=		0.8.1
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Abstract dependencies resolver library (3.10)
SDESC[py39]=		Abstract dependencies resolver library (3.9)
HOMEPAGE=		https://github.com/sarugaku/resolvelib
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/98/c0/46cfa3f56e43033b705965120058c018375600fa8fdb44c4e53d75820673
DISTFILE[1]=		resolvelib-0.8.1-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		resolvelib-0.8.1.dist-info

GENERATED=		yes

[PY39].USES_ON=				python:py39,wheel

[PY310].USES_ON=			python:py310,wheel

[FILE:2582:descriptions/desc.single]
==========
ResolveLib
==========

ResolveLib at the highest level provides a Resolver class that includes
dependency resolution logic. You give it some things, and a little
information
on how it should interact with them, and it will spit out a resolution
result.

Intended Usage
==============

::

    import resolvelib

    # Things I want to resolve.
    requirements = [...]

    # Implement logic so the resolver understands the requirement format.
    class MyProvider:
        ...

    provider = MyProvider()
    reporter = resolvelib.BaseReporter()

    # Create the (reusable) resolver.
    resolver = resolvelib.Resolver(provider, reporter)

    # Kick off the resolution process, and get the final result.
    result = resolver.resolve(requirements)

The provider interface is specified in ``resolvelib.providers``. You don't
need to inherit anything, however, only need to implement the right
methods.

Terminology
===========

The intention of this section is to unify the terms we use when talking
about
this code base, and packaging in general, to avoid confusion. Class and
variable names in the code base should try to stick to terms defined here.

Things passed into ``Resolver.resolve()`` and provided by the provider are
all
considered opaque. They don't need to adhere to this set of terminologies.
Nothing can go wrong as long as the provider implementers can keep their
heads
straight.

Package
-------

A thing that can be installed. A Package can have one or more versions
available for installation.

Version
-------

A string, usually in a number form, describing a snapshot of a Package.
This
number should increase when a Package post a new snapshot, i.e. a higher
number
means a more up-to-date snapshot.

Specifier
---------

A collection of one or more Versions. This could be a wildcard, indicating
that
any Version is acceptable.

Candidate
---------

A combination of a Package and a Version, i.e. a "concrete requirement".
Python
people sometimes call this a "locked" or "pinned" dependency. Both of
"requirement" and "dependency", however, SHOULD NOT be used when describing
a
Candidate, to avoid confusion.

Some resolver architectures refer this as a "specification", but it is not
used here to avoid confusion with a *Specifier*.

Requirement
-----------

An intention to acquire a needed package, i.e. an "abstract requirement". A
"dependency", if not clarified otherwise, also refers to this concept.

A Requirement should specify two things: a Package, and a Specifier.

Contributing
============

Please see [developer documentation].



[FILE:116:distinfo]
d9b7907f055c3b3a2cfc56c914ffd940122915826ff5fb5b1de0c99778f4de98        16113 resolvelib-0.8.1-py2.py3-none-any.whl

