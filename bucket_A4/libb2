# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libb2
VERSION=		0.98.1
REVISION=		1
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	BLAKE2: fast secure hashing
HOMEPAGE=		https://blake2.net/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/BLAKE2:libb2:v0.98.1
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			autoreconf libtool pkgconfig

LICENSE=		CC0_10:single
LICENSE_FILE=		CC0_10:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/libb2

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-openmp
			--enable-native=no

INSTALL_TARGET=		install-strip
SOVERSION=		1.0.4

SET_DEBUGGING_ON=	yes
OPTIMIZER_LEVEL=	0

post-patch:
	# remove -O3 flags
	${REINPLACE_CMD} -e '/-O3/d' ${WRKSRC}/configure.ac

post-install:
	${INSTALL_DATA} ${WRKSRC}/src/.libs/libb2_pic.a \
		${STAGEDIR}${PREFIX}/lib

post-build:
	(cd ${WRKSRC}/src/.libs &&\
	 ${AR} cru libb2_pic.a *.o &&\
	 ranlib libb2_pic.a)

[FILE:481:descriptions/desc.single]
C library providing BLAKE2b, BLAKE2s, BLAKE2bp, BLAKE2sp

BLAKE2 is a cryptographic hash function faster than MD5, SHA-1, SHA-2, and
SHA-3, yet is at least as secure as the latest standard SHA-3.

BLAKE2 comes in two flavors:
  * BLAKE2b (or just BLAKE2) is optimized for 64-bit platforms - including
    NEON-enabled ARMs - and produces digests sized between 1 and 64 bytes
  * BLAKE2s is optimized for 8- to 32-bit platforms and produces digests
    sized between 1 and 32 bytes


[FILE:105:distinfo]
10053dbc2fa342516b780a6bbf6e7b2a2360b8d49c5ac426936bf3df82526732       280759 BLAKE2-libb2-0.98.1.tar.gz


[FILE:123:manifests/plist.single]
include/blake2.h
lib/
 libb2.a
 libb2.so
 libb2.so.%%SOMAJOR%%
 libb2.so.%%SOVERSION%%
 libb2_pic.a
lib/pkgconfig/libb2.pc


[FILE:1099:patches/patch-configure.ac]
--- configure.ac.orig	2019-03-10 15:35:26 UTC
+++ configure.ac
@@ -62,18 +62,18 @@ AC_HELP_STRING([--enable-native],
 
 AX_CHECK_COMPILE_FLAG([-O3], [CFLAGS=-O3])
 dnl Not all architectures support -march=native
-if test $enable_native == "yes"; then
+if test $enable_native = "yes"; then
   AX_CHECK_COMPILE_FLAG([-march=native], [], [enable_native=no])
 fi
 
-if test $enable_fat == "yes"; then
+if test $enable_fat = "yes"; then
   dnl Fat build needs compiler who knows all the possible instruction sets
   AX_CHECK_COMPILE_FLAG([-msse2],   [], AC_MSG_ERROR([Compiler does not know -msse2.]))
   AX_CHECK_COMPILE_FLAG([-mssse3],  [], AC_MSG_ERROR([Compiler does not know -mssse3.]))
   AX_CHECK_COMPILE_FLAG([-msse4.1], [], AC_MSG_ERROR([Compiler does not know -msse4.1.]))
   AX_CHECK_COMPILE_FLAG([-mavx],    [], AC_MSG_ERROR([Compiler does not know -mavx.]))
   AX_CHECK_COMPILE_FLAG([-mxop],    [], AC_MSG_ERROR([Compiler does not know -mxop.]))
-elif test $enable_native == "yes"; then
+elif test $enable_native = "yes"; then
   AX_EXT
   CFLAGS="${CFLAGS} -march=native ${SIMD_FLAGS}"
 fi

