# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-setuptools_git
VERSION=		1.2
KEYWORDS=		python devel
VARIANTS=		py27 py35 py36
SDESC[py35]=		Setuptools revision control system plugin  (PY 35)
SDESC[py36]=		Setuptools revision control system plugin  (PY 36)
SDESC[py27]=		Setuptools revision control system plugin  (PY 27)
HOMEPAGE=		https://github.com/msabramo/setuptools-git
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/s/setuptools_git
DISTFILE[1]=		setuptools-git-1.2.tar.gz:main
DF_INDEX=		1
SPKGS[py35]=		single
SPKGS[py36]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY35 PY36
OPTIONS_STANDARD=	none
VOPTS[py35]=		PY27=OFF PY35=ON PY36=OFF
VOPTS[py36]=		PY27=OFF PY35=OFF PY36=ON
VOPTS[py27]=		PY27=ON PY35=OFF PY36=OFF

DISTNAME=		setuptools-git-1.2

GENERATED=		yes

[PY35].USES_ON=				python:py35

[PY36].USES_ON=				python:py36

[PY27].USES_ON=				python:py27

[FILE:2862:descriptions/desc.single]
About
-----

This is a plugin for setuptools that enables git integration. Once
installed, Setuptools can be told to include in a package distribution
all the files tracked by git. This is an alternative to explicit
inclusion specifications with ``MANIFEST.in``.

A package distribution here refers to a package that you create using
setup.py, for example::

  $> python setup.py sdist
  $> python setup.py bdist_rpm
  $> python setup.py bdist_egg

This package was formerly known as gitlsfiles. The name change is the
result of an effort by the setuptools plugin developers to provide a
uniform naming convention.


Installation
------------

With easy_install::

  $> easy_install setuptools_git

Alternative manual installation::

  $> tar -zxvf setuptools_git-X.Y.Z.tar.gz
  $> cd setuptools_git-X.Y.Z
  $> python setup.py install

Where X.Y.Z is a version number.



Usage
-----

To activate this plugin, you must first package your python module
with ``setup.py`` and use setuptools. The former is well documented in
the `distutils manual <http://docs.python.org/dist/dist.html>`_.

To use setuptools instead of distutils, just edit ``setup.py`` and
change:

.. code-block:: python

  from distutils.core import setup

to:

.. code-block:: python

  from setuptools import setup, find_packages

When Setuptools builds a source package, it always includes all files
tracked by your revision control system, if it knows how to learn what
those files are.

When Setuptools builds a binary package, you can ask it to include all
files tracked by your revision control system, by adding these argument
to your invocation of `setup()`:

.. code-block:: python

  setup(...,
        packages=find_packages(),
        include_package_data=True,
        ...)

which will detect that a directory is a package if it contains a
``__init__.py`` file.  Alternatively, you can do without ``__init__.py``
files and tell Setuptools explicitly which packages to process:

.. code-block:: python

  setup(...,
        packages=["a_package", "another_one"],
        include_package_data=True,
        ...)

This plugin lets setuptools know what files are tracked by your git
revision control tool.  Setuptools ships with support for cvs and
subversion.  Other plugins like this one are available for bzr, darcs,
monotone, mercurial, and many others.

It might happen that you track files with your revision control system
that you don't want to include in your packages.  In that case, you
can prevent setuptools from packaging those files with a directive in
your ``MANIFEST.in``, for example::

  exclude .gitignore
  recursive-exclude images *.xcf *.blend

In this example, we prevent setuptools from packaging ``.gitignore`` and
the Gimp and Blender source files found under the ``images`` directory.

Files to exclude from the package can also be listed in the `setup()`


[FILE:104:distinfo]
ff64136da01aabba76ae88b050e7197918d8b2139ccbf6144e14d472b9c40445        10546 setuptools-git-1.2.tar.gz

