# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-typing-extensions
VERSION=		4.3.0
KEYWORDS=		python
VARIANTS=		py39 py310
SDESC[py310]=		Backported type hints for Python 3.5+ (3.10)
SDESC[py39]=		Backported type hints for Python 3.5+ (3.9)
HOMEPAGE=		none
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/ed/d6/2afc375a8d55b8be879d6b4986d4f69f01115e795e36827fd3a40166028b
DISTFILE[1]=		typing_extensions-4.3.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY39 PY310
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY39=OFF PY310=ON
VOPTS[py39]=		PY39=ON PY310=OFF

DISTNAME=		typing_extensions-4.3.0.dist-info

GENERATED=		yes

[PY39].USES_ON=				python:py39,wheel

[PY310].USES_ON=			python:py310,wheel

[FILE:2730:descriptions/desc.single]
# Typing Extensions

[![Chat at
https://gitter.im/python/typing]](https://gitter.im/python/typing)

## Overview

The `typing_extensions` module serves two related purposes:

- Enable use of new type system features on older Python versions. For
example,
  `typing.TypeGuard` is new in Python 3.10, but `typing_extensions` allows
  users on Python 3.6 through 3.9 to use it too.
- Enable experimentation with new type system PEPs before they are accepted
and
  added to the `typing` module.

New features may be added to `typing_extensions` as soon as they are
specified
in a PEP that has been added to the [python/peps]
repository. If the PEP is accepted, the feature will then be added to
`typing`
for the next CPython release. No typing PEP has been rejected so far, so we
haven't yet figured out how to deal with that possibility.

Starting with version 4.0.0, `typing_extensions` uses
[Semantic Versioning]. The
major version is incremented for all backwards-incompatible changes.
Therefore, it's safe to depend
on `typing_extensions` like this: `typing_extensions >=x.y, <(x+1)`,
where `x.y` is the first version that includes all features you need.

`typing_extensions` supports Python versions 3.7 and higher. In the future,
support for older Python versions will be dropped some time after that
version
reaches end of life.

## Included items

This module currently contains the following:

- Experimental features

  - (Currently none)

- In `typing` since Python 3.11

  - `assert_never`
  - `assert_type`
  - `clear_overloads`
  - `@dataclass_transform()` (see PEP 681)
  - `get_overloads`
  - `LiteralString` (see PEP 675)
  - `Never`
  - `NotRequired` (see PEP 655)
  - `reveal_type`
  - `Required` (see PEP 655)
  - `Self` (see PEP 673)
  - `TypeVarTuple` (see PEP 646)
  - `Unpack` (see PEP 646)

- In `typing` since Python 3.10

  - `Concatenate` (see PEP 612)
  - `ParamSpec` (see PEP 612)
  - `ParamSpecArgs` (see PEP 612)
  - `ParamSpecKwargs` (see PEP 612)
  - `TypeAlias` (see PEP 613)
  - `TypeGuard` (see PEP 647)
  - `is_typeddict`

- In `typing` since Python 3.9

  - `Annotated` (see PEP 593)

- In `typing` since Python 3.8

  - `final` (see PEP 591)
  - `Final` (see PEP 591)
  - `Literal` (see PEP 586)
  - `Protocol` (see PEP 544)
  - `runtime_checkable` (see PEP 544)
  - `TypedDict` (see PEP 589)
  - `get_origin` (`typing_extensions` provides this function only in Python
3.7+)
  - `get_args` (`typing_extensions` provides this function only in Python
3.7+)

- In `typing` since Python 3.7

  - `OrderedDict`

- In `typing` since Python 3.5 or 3.6 (see [the typing documentation] for
details)

  - `AsyncContextManager`
  - `AsyncGenerator`
  - `AsyncIterable`
  - `AsyncIterator`
  - `Awaitable`


[FILE:119:distinfo]
25642c956049920a5aa49edcdd6ab1e06d7e5d467fc00e0506c44ac86fbfca02        25596 typing_extensions-4.3.0-py3-none-any.whl

