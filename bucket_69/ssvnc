# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ssvnc
VERSION=		1.0.29
KEYWORDS=		net
VARIANTS=		standard
SDESC[standard]=	Enhanced TightVNC Viewer
HOMEPAGE=		https://sourceforge.net/projects/ssvnc/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		SF/ssvnc/ssvnc/1.0.29
DISTFILE[1]=		ssvnc-1.0.29.src.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		imake:single:standard
RUN_DEPENDS=		stunnel:complete:standard
			xterm:single:standard

USES=			gmake jpeg perl:run ssl zlib tcl:tk,run
XORG_COMPONENTS=	ice sm x11 xaw xext xi xmu xpm xt

LICENSE=		GPLv2+:primary
LICENSE_TERMS=		primary:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv2+:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"^\# You must have stunnel"
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/scripts/util/ss_vncviewer
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		net/ssvnc

MAKE_ARGS=		JSRC=""
MAKE_ENV=		ROOT="{{STAGEDIR}}"
			MANDIR="share/man"

post-patch:
	${REINPLACE_CMD} -e 's|netstat -ant|netstat -an|' \
		${WRKSRC}/scripts/util/ss_vncviewer
	${REINPLACE_CMD} \
		-e 's|B ssvnc|B ssvnc-gui|' \
		-e 's| ssvnc | ssvnc-gui |' \
		${WRKSRC}/man/man1/ssvnc.1

post-install:
	# relocate sample file
	${MV} ${STAGEDIR}${STD_DOCDIR}/stunnel-server.conf \
		${STAGEDIR}${PREFIX}/etc/stunnel-server.conf.sample

do-configure:
	(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${MAKE_CMD} ${MAKE_ARGS} config)

[FILE:702:descriptions/desc.primary]
The Enhanced TightVNC Viewer package started as a project to add some
patches to the long neglected Unix TightVNC Viewer. However, now the
front-end GUI and wrapper scripts features dwarf the original.

It adds a GUI for Windows, Mac OS X, and Unix that automatically starts up
STUNNEL SSL tunnel for SSL or SSH connections to x11vnc, and then launches
the TightVNC Viewer to use the tunnel. It also enables SSL encrypted VNC
connections to any other VNC Server running an SSL tunnel, such as STUNNEL,
at their end. It can be used to perform SSH tunnelled connections to any
VNC Server as well. The tool has many additional features.

The short name for this project is "ssvnc" for SSL/SSH VNC Viewer.


[FILE:102:distinfo]
74df32eb8eaa68b07c9693a232ebe42154617c7f3cbe1d4e68d3fe7c557d618d       552796 ssvnc-1.0.29.src.tar.gz


[FILE:335:manifests/plist.primary]
@sample etc/stunnel-server.conf.sample
bin/
 ssvnc-gui
 ssvnc-stunnel
 ssvnc-ts
 ssvncviewer
lib/ssvnc/
 lim_accept.so
 ssvnc
 ssvnc_cmd
 tsvnc
 ultravnc_dsm_helper
 unwrap.so
 vncstorepw
 vncviewer
lib/ssvnc/util/
 ss_vncviewer
 ssvnc.tcl
share/applications/ssvnc.desktop
share/man/man1/
 ssvnc-gui.1.gz
 ssvnc.1.gz
 ssvncviewer.1.gz


[FILE:23:manifests/plist.docs]
share/doc/ssvnc/README


[FILE:3195:patches/patch-Makefile]
--- Makefile.orig	2010-02-26 02:29:31 UTC
+++ Makefile
@@ -29,6 +29,7 @@ MAN      = man
 MANDIR  ?= $(MAN)
 APPS    ?= share/applications
 BINNAME ?= ssvncviewer
+DOCS    ?= share/doc/ssvnc
 
 
 VSRC = vnc_unixsrc
@@ -65,23 +66,30 @@ clean:
 	cd $(PSRC); $(MAKE) clean
 
 install: all
-	mkdir -p $(ROOT)$(PREFIX)/$(BIN) $(ROOT)$(PREFIX)/$(LIB) $(ROOT)$(PREFIX)/$(MANDIR)/man1
-	strip $(VIEWER)
-	cp -p $(VIEWER) $(ROOT)$(PREFIX)/$(LIB)
-	cp -p $(VNCSPW) $(ROOT)$(PREFIX)/$(LIB)
-	cp -p $(UNWRAP) $(ROOT)$(PREFIX)/$(LIB)
-	cp -p $(LIMACC) $(ROOT)$(PREFIX)/$(LIB)
-	cp -p $(ULTDSM) $(ROOT)$(PREFIX)/$(LIB)
-	cp -pR scripts/* $(ROOT)$(PREFIX)/$(LIB)
-	if [ "X$(JSRC)" != "X" ]; then cp -p $(ARCHIVE) $(ROOT)$(PREFIX)/$(LIB)/util; fi
-	cp -p $(MAN)/man1/ssvnc.1 $(ROOT)$(PREFIX)/$(MANDIR)/man1
-	./wr_tool $(ROOT)$(PREFIX)/$(BIN)/ssvnc  $(PREFIX)/$(LIB)/ssvnc
-	./wr_tool $(ROOT)$(PREFIX)/$(BIN)/tsvnc  $(PREFIX)/$(LIB)/tsvnc
-	./wr_tool $(ROOT)$(PREFIX)/$(BIN)/sshvnc $(PREFIX)/$(LIB)/sshvnc
+	mkdir -p $(ROOT)$(PREFIX)/$(BIN) $(ROOT)$(PREFIX)/$(LIB)/util $(ROOT)$(PREFIX)/$(MANDIR)/man1
+	${BSD_INSTALL_PROGRAM} $(VIEWER) $(ROOT)$(PREFIX)/$(LIB)
+	${BSD_INSTALL_PROGRAM} $(VNCSPW) $(ROOT)$(PREFIX)/$(LIB)
+	${BSD_INSTALL_LIB} $(UNWRAP) $(ROOT)$(PREFIX)/$(LIB)
+	${BSD_INSTALL_LIB} $(LIMACC) $(ROOT)$(PREFIX)/$(LIB)
+	${BSD_INSTALL_PROGRAM} $(ULTDSM) $(ROOT)$(PREFIX)/$(LIB)
+	${BSD_INSTALL_SCRIPT} scripts/ssvnc $(ROOT)$(PREFIX)/$(LIB)
+	${BSD_INSTALL_SCRIPT} scripts/ssvnc_cmd $(ROOT)$(PREFIX)/$(LIB)
+	${BSD_INSTALL_SCRIPT} scripts/tsvnc $(ROOT)$(PREFIX)/$(LIB)
+	${BSD_INSTALL_SCRIPT} scripts/util/ssvnc.tcl $(ROOT)$(PREFIX)/$(LIB)/util
+	${BSD_INSTALL_SCRIPT} scripts/util/ss_vncviewer $(ROOT)$(PREFIX)/$(LIB)/util
+	if [ "X$(JSRC)" != "X" ]; then ${BSD_INSTALL_DATA} $(ARCHIVE) $(ROOT)$(PREFIX)/$(LIB)/util; fi
+	${BSD_INSTALL_MAN} $(MAN)/man1/ssvnc.1 $(ROOT)$(PREFIX)/$(MANDIR)/man1/ssvnc.1
+	${BSD_INSTALL_MAN} $(MAN)/man1/ssvnc.1 $(ROOT)$(PREFIX)/$(MANDIR)/man1/ssvnc-gui.1
+	./wr_tool $(ROOT)$(PREFIX)/$(BIN)/ssvnc-gui  $(PREFIX)/$(LIB)/ssvnc
+	./wr_tool $(ROOT)$(PREFIX)/$(BIN)/ssvnc-ts  $(PREFIX)/$(LIB)/tsvnc
+	./wr_tool $(ROOT)$(PREFIX)/$(BIN)/ssvnc-stunnel  $(PREFIX)/$(LIB)/util/ss_vncviewer
 	if [ "X$(APPS)" != X ]; then mkdir -p $(ROOT)$(PREFIX)/$(APPS); fi
-	if [ "X$(APPS)" != X ]; then cp -p ssvnc.desktop $(ROOT)$(PREFIX)/$(APPS); fi
-	if [ "X$(BINNAME)" != X ]; then cp -p $(VIEWER) $(ROOT)$(PREFIX)/$(BIN)/$(BINNAME); fi
-	if [ "X$(BINNAME)" != X ]; then cp -p $(MAN)/man1/ssvncviewer.1 $(ROOT)$(PREFIX)/$(MANDIR)/man1/$(BINNAME).1; fi
+	if [ "X$(APPS)" != X ]; then ${BSD_INSTALL_DATA} ssvnc.desktop $(ROOT)$(PREFIX)/$(APPS); fi
+	if [ "X$(BINNAME)" != X ]; then ${BSD_INSTALL_PROGRAM} $(VIEWER) $(ROOT)$(PREFIX)/$(BIN)/$(BINNAME); fi
+	if [ "X$(BINNAME)" != X ]; then ${BSD_INSTALL_MAN} $(MAN)/man1/ssvncviewer.1 $(ROOT)$(PREFIX)/$(MANDIR)/man1/$(BINNAME).1; fi
+	if [ "X$(DOCS)" != X ]; then mkdir -p $(ROOT)$(PREFIX)/$(DOCS); fi
+	if [ "X$(DOCS)" != X ]; then ${BSD_INSTALL_DATA} scripts/util/stunnel-server.conf $(ROOT)$(PREFIX)/$(DOCS); fi
+	if [ "X$(DOCS)" != X ]; then ${BSD_INSTALL_MAN} README $(ROOT)$(PREFIX)/$(DOCS); fi
 
 
 #internal use only, a test install:


[FILE:1641:patches/patch-vncstorepw_Makefile]
--- vncstorepw/Makefile.orig	2010-04-22 03:22:40 UTC
+++ vncstorepw/Makefile
@@ -7,21 +7,18 @@ UNWRAP = unwrap.so
 LIMACC = lim_accept.so
 ULTDSM = ultravnc_dsm_helper
 
-# gcc must be used:
-CC = gcc
 
 all: $(CMD) $(UNWRAP) $(LIMACC) $(ULTDSM)
 
 $(CMD): vncauth.o vncstorepw.o d3des.o
 	PATH=$$PATH:$(EPATH) $(CC) -o $(CMD) vncstorepw.o vncauth.o d3des.o
-	PATH=$$PATH:$(EPATH) strip $(CMD)
 	@ls -l $(CMD)
 
 $(UNWRAP): unwrap.c
 	if [ `uname` = "Darwin" ]; then \
 		PATH=$$PATH:$(EPATH) $(CC) -o $(UNWRAP) -dynamiclib -fPIC unwrap.c; \
 	else \
-		PATH=$$PATH:$(EPATH) $(CC) -o $(UNWRAP) -shared     -fPIC unwrap.c; \
+		PATH=$$PATH:$(EPATH) $(CC) -o $(UNWRAP) -shared     $(CFLAGS) -fPIC unwrap.c; \
 	fi
 	@ls -l $(UNWRAP)
 
@@ -29,7 +26,7 @@ $(LIMACC): lim_accept.c
 	if [ `uname` = "Darwin" ]; then \
 		PATH=$$PATH:$(EPATH) $(CC) -o $(LIMACC) -dynamiclib -fPIC -nostartfiles lim_accept.c; \
 	else \
-		PATH=$$PATH:$(EPATH) $(CC) -o $(LIMACC) -shared     -fPIC -nostartfiles lim_accept.c; \
+		PATH=$$PATH:$(EPATH) $(CC) -o $(LIMACC) -shared     $(CFLAGS) -fPIC -nostartfiles lim_accept.c; \
 	fi
 	@ls -l $(LIMACC)
 
@@ -39,9 +36,8 @@ $(ULTDSM): ultravnc_dsm_helper.c
 	if [ `uname` = "SunOS" ]; then \
 		PATH=$$PATH:$(EPATH) $(CC) -o $(ULTDSM) $(CPP_SSL) ultravnc_dsm_helper.c $(LD_SSL) -lssl -lcrypto -lsocket -lnsl; \
 	else \
-		PATH=$$PATH:$(EPATH) $(CC) -o $(ULTDSM) $(CPP_SSL) ultravnc_dsm_helper.c $(LD_SSL) -lssl -lcrypto; \
+		PATH=$$PATH:$(EPATH) $(CC) -o $(ULTDSM) $(CPP_SSL) ultravnc_dsm_helper.c $(CFLAGS) $(LDFLAGS) -lssl -lcrypto; \
 	fi
-	PATH=$$PATH:$(EPATH) strip $(ULTDSM)
 	@ls -l $(ULTDSM)
 
 test: $(CMD)


[FILE:7015:patches/patch-vncstorepw_ultravnc__dsm__helper.c]
--- vncstorepw/ultravnc_dsm_helper.c.orig	2010-04-23 04:29:43 UTC
+++ vncstorepw/ultravnc_dsm_helper.c
@@ -414,7 +414,9 @@ void enc_do(char *ciph, char *keyfile, c
 		if (strstr(p, "md5+") == p) {
 			Digest = EVP_md5();        p += strlen("md5+");
 		} else if (strstr(p, "sha+") == p) {
-			Digest = EVP_sha();        p += strlen("sha+");
+			fprintf(stderr, "%s: obsolete hash algorithm: SHA-0\n",
+			    prog, s);
+			exit(1);
 		} else if (strstr(p, "sha1+") == p) {
 			Digest = EVP_sha1();       p += strlen("sha1+");
 		} else if (strstr(p, "ripe+") == p) {
@@ -655,8 +657,10 @@ static void enc_xfer(int sock_fr, int so
 	 */
 	unsigned char E_keystr[EVP_MAX_KEY_LENGTH];
 	unsigned char D_keystr[EVP_MAX_KEY_LENGTH];
-	EVP_CIPHER_CTX E_ctx, D_ctx;
-	EVP_CIPHER_CTX *ctx = NULL;
+	//openssl1.1.patch - Do NOT create two context and only use one
+	// - that's silly.
+	//EVP_CIPHER_CTX *E_ctx, *D_ctx;
+	EVP_CIPHER_CTX *ctx;
 
 	unsigned char buf[BSIZE], out[BSIZE];
 	unsigned char *psrc = NULL, *keystr;
@@ -698,11 +702,14 @@ static void enc_xfer(int sock_fr, int so
 	encsym = encrypt ? "+" : "-";
 
 	/* use the encryption/decryption context variables below */
+	ctx = EVP_CIPHER_CTX_new();
+	if (!ctx) {
+	    fprintf(stderr, "Failed to create encryption/decryption context.\n");
+	    goto finished;
+	}
 	if (encrypt) {
-		ctx = &E_ctx;
 		keystr = E_keystr;
 	} else {
-		ctx = &D_ctx;
 		keystr = D_keystr;
 	}
 
@@ -797,7 +804,6 @@ static void enc_xfer(int sock_fr, int so
 		if (whoops) {
 			fprintf(stderr, "%s: %s - WARNING: MSRC4 mode and IGNORING random salt\n", prog, encstr);
 			fprintf(stderr, "%s: %s - WARNING: and initialization vector!!\n", prog, encstr);
-			EVP_CIPHER_CTX_init(ctx);
 			if (pw_in) {
 			    /* for pw=xxxx a md5 hash is used */
 			    EVP_BytesToKey(Cipher, Digest, NULL, (unsigned char *) keydata,
@@ -816,7 +822,6 @@ static void enc_xfer(int sock_fr, int so
 
 			EVP_BytesToKey(Cipher, Digest, NULL, (unsigned char *) keydata,
 			    keydata_len, 1, keystr, ivec); 
-			EVP_CIPHER_CTX_init(ctx);
 			EVP_CipherInit_ex(ctx, Cipher, NULL, keystr, ivec,
 			    encrypt);
 		}
@@ -836,9 +841,9 @@ static void enc_xfer(int sock_fr, int so
 			in_salt = salt;
 		}
 
-		if (ivec_size < Cipher->iv_len && !securevnc) {
+		if (ivec_size < EVP_CIPHER_iv_length(Cipher) && !securevnc) {
 			fprintf(stderr, "%s: %s - WARNING: short IV %d < %d\n",
-			    prog, encstr, ivec_size, Cipher->iv_len);
+			    prog, encstr, ivec_size, EVP_CIPHER_iv_length(Cipher));
 		}
 
 		/* make the hashed value and place in keystr */
@@ -877,9 +882,6 @@ static void enc_xfer(int sock_fr, int so
 		}
 
 
-		/* initialize the context */
-		EVP_CIPHER_CTX_init(ctx);
-
 
 		/* set the cipher & initialize */
 
@@ -986,6 +988,7 @@ static void enc_xfer(int sock_fr, int so
 	/* transfer done (viewer exited or some error) */
 	finished:
 
+	if (ctx) EVP_CIPHER_CTX_free(ctx);
 	fprintf(stderr, "\n%s: %s - close sock_to\n", prog, encstr);
 	close(sock_to);
 
@@ -1060,14 +1063,14 @@ static int securevnc_server_rsa_save_dia
 }
 
 static char *rsa_md5_sum(unsigned char* rsabuf) {
-	EVP_MD_CTX md;
+	EVP_MD_CTX *md = EVP_MD_CTX_create();
 	char digest[EVP_MAX_MD_SIZE], tmp[16];
 	char md5str[EVP_MAX_MD_SIZE * 8];
 	unsigned int i, size = 0;
 
-	EVP_DigestInit(&md, EVP_md5());
-	EVP_DigestUpdate(&md, rsabuf, SECUREVNC_RSA_PUBKEY_SIZE);
-	EVP_DigestFinal(&md, (unsigned char *)digest, &size);
+	EVP_DigestInit(md, EVP_md5());
+	EVP_DigestUpdate(md, rsabuf, SECUREVNC_RSA_PUBKEY_SIZE);
+	EVP_DigestFinal(md, (unsigned char *)digest, &size);
 
 	memset(md5str, 0, sizeof(md5str));
 	for (i=0; i < size; i++) {
@@ -1075,6 +1078,7 @@ static char *rsa_md5_sum(unsigned char*
 		sprintf(tmp, "%02x", (int) uc);
 		strcat(md5str, tmp);
 	}
+	EVP_MD_CTX_destroy(md);
 	return strdup(md5str);
 }
 
@@ -1184,7 +1188,7 @@ static void sslexit(char *msg) {
 
 static void securevnc_setup(int conn1, int conn2) {
 	RSA *rsa = NULL;
-	EVP_CIPHER_CTX init_ctx;
+	EVP_CIPHER_CTX *init_ctx = EVP_CIPHER_CTX_new();
 	unsigned char keystr[EVP_MAX_KEY_LENGTH];
 	unsigned char *rsabuf, *rsasav;
 	unsigned char *encrypted_keybuf;
@@ -1203,6 +1207,8 @@ static void securevnc_setup(int conn1, i
 
 	ERR_load_crypto_strings();
 
+	if (!init_ctx) sslexit("securevnc_setup: EVP_CIPHER_CTX_new() failed");
+	
 	/* alloc and read from server the 270 comprising the rsa public key: */
 	rsabuf = (unsigned char *) calloc(SECUREVNC_RSA_PUBKEY_SIZE, 1);
 	rsasav = (unsigned char *) calloc(SECUREVNC_RSA_PUBKEY_SIZE, 1);
@@ -1323,8 +1329,7 @@ static void securevnc_setup(int conn1, i
 	/*
 	 * Back to the work involving the tmp obscuring key:
 	 */
-	EVP_CIPHER_CTX_init(&init_ctx);
-	rc = EVP_CipherInit_ex(&init_ctx, EVP_rc4(), NULL, initkey, NULL, 1);
+	rc = EVP_CipherInit_ex(init_ctx, EVP_rc4(), NULL, initkey, NULL, 1);
 	if (rc == 0) {
 		sslexit("securevnc_setup: EVP_CipherInit_ex(init_ctx) failed");
 	}
@@ -1340,13 +1345,13 @@ static void securevnc_setup(int conn1, i
 	/* decode with the tmp key */
 	if (n > 0) {
 		memset(to_viewer, 0, sizeof(to_viewer));
-		if (EVP_CipherUpdate(&init_ctx, to_viewer, &len, buf, n) == 0) {
+		if (EVP_CipherUpdate(init_ctx, to_viewer, &len, buf, n) == 0) {
 			sslexit("securevnc_setup: EVP_CipherUpdate(init_ctx) failed");
 			exit(1);
 		}
 		to_viewer_len = len;
 	}
-	EVP_CIPHER_CTX_cleanup(&init_ctx);
+	EVP_CIPHER_CTX_free(init_ctx);
 	free(initkey);
 
 	/* print what we would send to the viewer (sent below): */
@@ -1407,7 +1412,7 @@ static void securevnc_setup(int conn1, i
 
 	if (client_auth_req && client_auth) {
 		RSA *client_rsa = load_client_auth(client_auth);
-		EVP_MD_CTX dctx;
+		EVP_MD_CTX *dctx = EVP_MD_CTX_create();
 		unsigned char digest[EVP_MAX_MD_SIZE], *signature;
 		unsigned int ndig = 0, nsig = 0;
 
@@ -1421,8 +1426,8 @@ static void securevnc_setup(int conn1, i
 			exit(1);
 		}
 
-		EVP_DigestInit(&dctx, EVP_sha1());
-		EVP_DigestUpdate(&dctx, keystr, SECUREVNC_KEY_SIZE);
+		EVP_DigestInit(dctx, EVP_sha1());
+		EVP_DigestUpdate(dctx, keystr, SECUREVNC_KEY_SIZE);
 		/*
 		 * Without something like the following MITM is still possible.
 		 * This is because the MITM knows keystr and can use it with
@@ -1433,7 +1438,7 @@ static void securevnc_setup(int conn1, i
 		 * he doesn't have Viewer_ClientAuth.pkey.
 		 */
 		if (0) {
-			EVP_DigestUpdate(&dctx, rsasav, SECUREVNC_RSA_PUBKEY_SIZE);
+			EVP_DigestUpdate(dctx, rsasav, SECUREVNC_RSA_PUBKEY_SIZE);
 			if (!keystore_verified) {
 				fprintf(stderr, "securevnc_setup:\n");
 				fprintf(stderr, "securevnc_setup: Warning: even *WITH* Client Authentication in SecureVNC,\n");
@@ -1456,7 +1461,8 @@ static void securevnc_setup(int conn1, i
 				fprintf(stderr, "securevnc_setup:\n");
 			}
 		}
-		EVP_DigestFinal(&dctx, (unsigned char *)digest, &ndig);
+		EVP_DigestFinal(dctx, (unsigned char *)digest, &ndig);
+		EVP_MD_CTX_destroy(dctx);
 
 		signature = (unsigned char *) calloc(RSA_size(client_rsa), 1);
 		RSA_sign(NID_sha1, digest, ndig, signature, &nsig, client_rsa);


[FILE:160:patches/patch-wr__tool]
--- wr_tool.orig	2008-08-29 12:58:03 UTC
+++ wr_tool
@@ -6,4 +6,4 @@ cat > $wr <<END
 UNAME=.; export UNAME
 exec $cmd "\$@"
 END
-chmod 755 $wr
+chmod 555 $wr

