# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-greenlet
VERSION=		3.2.4
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Lightweight concurrent programming (3.12)
SDESC[v13]=		Lightweight concurrent programming (3.13)
HOMEPAGE=		https://greenlet.readthedocs.io/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/g/greenlet
DISTFILE[1]=		greenlet-3.2.4.tar.gz:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		set
			primary
			dev
SPKGS[v13]=		set
			primary
			dev

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

USES=			c++:primary

DISTNAME=		greenlet-3.2.4

GENERATED=		yes

[PY312].USES_ON=			python:v12,pep517

[PY313].USES_ON=			python:v13,pep517

[FILE:2063:descriptions/desc.primary]
.. This file is included into docs/history.rst

Greenlets are lightweight coroutines for in-process concurrent
programming.

The "greenlet" package is a spin-off of `Stackless`_, a version of
CPython that supports micro-threads called "tasklets". Tasklets run
pseudo-concurrently (typically in a single or a few OS-level threads)
and are synchronized with data exchanges on "channels".

A "greenlet", on the other hand, is a still more primitive notion of
micro-thread with no implicit scheduling; coroutines, in other words.
This is useful when you want to control exactly when your code runs.
You can build custom scheduled micro-threads on top of greenlet;
however, it seems that greenlets are useful on their own as a way to
make advanced control flow structures. For example, we can recreate
generators; the difference with Python's own generators is that our
generators can call nested functions and the nested functions can
yield values too. (Additionally, you don't need a "yield" keyword. See
the example in `test_generator.py
<https://github.com/python-greenlet/greenlet/blob/adca19bf1f287b3395896a8f41f3f4fd1797fdc7/src/greenlet/tests/test_generator.py#L1>`_).

Greenlets are provided as a C extension module for the regular unmodified
interpreter.

.. _`Stackless`: http://www.stackless.com

Who is using Greenlet?
======================

There are several libraries that use Greenlet as a more flexible
alternative to Python's built in coroutine support:

 - `Concurrence`_
 - `Eventlet`_
 - `Gevent`_

.. _Concurrence: http://opensource.hyves.org/concurrence/
.. _Eventlet: http://eventlet.net/
.. _Gevent: http://www.gevent.org/

Getting Greenlet
================

The easiest way to get Greenlet is to install it with pip::

  pip install greenlet

Source code archives and binary distributions are available on the
python package index at https://pypi.org/project/greenlet

The source code repository is hosted on github:
https://github.com/python-greenlet/greenlet

Documentation is available on readthedocs.org:
https://greenlet.readthedocs.io


[FILE:111:distinfo]
0dca0d95ff849f9a364385f36ab49f50065d76964944638be9691e1832e9f86d       188260 python-src/greenlet-3.2.4.tar.gz

