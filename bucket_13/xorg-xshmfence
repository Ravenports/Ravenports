# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		xorg-xshmfence
VERSION=		1.3
REVISION=		1
KEYWORDS=		x11
VARIANTS=		standard
SDESC[standard]=	Shared memory SyncFence synchronization primitive
HOMEPAGE=		https://www.x.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main pkgsrc
SITES[main]=		XORG/individual/lib
SITES[pkgsrc]=		https://raw.githubusercontent.com/NetBSD/pkgsrc/trunk/x11/libxshmfence/files/
DISTFILE[1]=		libxshmfence-1.3.tar.bz2:main
DISTFILE[2]=		xshmfence_semaphore.h:pkgsrc
DISTFILE[3]=		xshmfence_semaphore.c:pkgsrc
DIST_SUBDIR=		xorg-shmfence
DF_INDEX=		1 2 3
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			autoreconf libtool pkgconfig
XORG_COMPONENTS=	xorgproto

DISTNAME=		libxshmfence-1.3
EXTRACT_ONLY=		1

LICENSE=		HPND:single
LICENSE_FILE=		HPND:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		x11/libxshmfence

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--with-shared-memory-dir=/tmp

INSTALL_TARGET=		install-strip

TEST_TARGET=		check
VAR_OPSYS[linux]=	CONFIGURE_ENV=ac_cv_func_mkostemp=no
VAR_OPSYS[netbsd]=	CONFIGURE_ARGS=--disable-futex
			CONFIGURE_ARGS=--enable-semaphore
			CPPFLAGS=-DLIBXSHM_PAGESIZE=4096

pre-configure:
	# cd ${WRKSRC} && autoreconf -vif

post-extract-netbsd:
	${INSTALL_DATA} ${DISTDIR}/${DIST_SUBDIR}/xshmfence_semaphore.[ch] \
		${WRKSRC}/src

[FILE:166:descriptions/desc.single]
This library offers a CPU-based synchronization primitive compatible
with the X SyncFence objects that can be shared between processes
using file descriptor passing.


[FILE:345:distinfo]
b884300d26a14961a076fbebc762a39831cb75f92bed5ccf9836345b459220c7       308644 xorg-shmfence/libxshmfence-1.3.tar.bz2
f319d0ee6fe52cc075402541d009ab9d120bc31741d50c948f506a78d37dd199         2036 xorg-shmfence/xshmfence_semaphore.h
6741c12e2f0693f08b27b44de30c9b2782ebd1e85b90114c57b16dc2a7481d97         5453 xorg-shmfence/xshmfence_semaphore.c


[FILE:131:manifests/plist.single]
include/X11/xshmfence.h
lib/
 libxshmfence.a
 libxshmfence.so
 libxshmfence.so.1
 libxshmfence.so.1.0.0
lib/pkgconfig/xshmfence.pc


[FILE:262:patches/patch-config.h.in]
--- config.h.in.orig	2015-03-04 15:18:49 UTC
+++ config.h.in
@@ -22,6 +22,9 @@
 /* Define to 1 if you have the <memory.h> header file. */
 #undef HAVE_MEMORY_H
 
+/* Use mkostemp(3) */
+#undef HAVE_MKOSTEMP
+
 /* Use pthread primitives */
 #undef HAVE_PTHREAD
 


[FILE:1687:patches/patch-configure.ac]
--- configure.ac.orig	2018-02-26 17:26:59 UTC
+++ configure.ac
@@ -54,6 +54,9 @@ dnl
 AC_ARG_ENABLE(futex,	AS_HELP_STRING([--enable-futex], [Enable futexes (default: auto)]),
 		[FUTEX=$enableval], [FUTEX=auto])
 
+AC_ARG_ENABLE(semaphore,	AS_HELP_STRING([--enable-semaphore], [Enable POSIX named semaphores (default: no)]),
+		[SEMAPHORE=$enableval], [SEMAPHORE=no])
+
 if test "x$FUTEX" = "xauto"; then
 	AC_CHECK_HEADER([linux/futex.h], [FUTEX=yes])
 fi
@@ -67,23 +70,36 @@ if test "x$FUTEX" = "xauto"; then
 	fi
 fi
 
+if test "x$SEMAPHORE" = "xyes"; then
+	AC_CHECK_HEADER([semaphore.h], [], [AC_MSG_ERROR([No platform support for POSIX named semaphores])])
+fi
+
 if test "x$FUTEX" = "xyes"; then
 	PTHREAD=no
 	AC_DEFINE(HAVE_FUTEX,1,[Use futexes])
 else
-	PTHREAD=yes
-	AC_DEFINE(HAVE_PTHREAD,1,[Use pthread primitives])
+	if test "x$SEMAPHORE" = "xyes"; then
+		PTHREAD=no
+		AC_DEFINE(HAVE_SEMAPHORE,1,[Use semaphores])
+	else
+		PTHREAD=yes
+		AC_DEFINE(HAVE_PTHREAD,1,[Use pthread primitives])
+	fi
 fi
 
 PTHREAD_LIBS=
 if test "x$PTHREAD" = "xyes"; then
 	AC_CHECK_LIB(pthread,pthread_create,[PTHREAD_LIBS=-lpthread],[PTHREAD_LIBS=])
 fi
+if test "x$SEMAPHORE" = "xyes"; then
+	AC_CHECK_LIB(rt,sem_open,[PTHREAD_LIBS=-lrt])
+fi
 
 AC_SUBST([PTHREAD_LIBS])
 
 AM_CONDITIONAL([FUTEX], [test x"$FUTEX" = xyes])
 AM_CONDITIONAL([PTHREAD], [test x"$PTHREAD" = xyes])
+AM_CONDITIONAL([SEMAPHORE], [test x"$SEMAPHORE" = xyes])
 
 PKG_CHECK_MODULES(XPROTO, xproto)
 
@@ -91,6 +107,7 @@ AC_SUBST([XPROTO_CFLAGS])
 
 CFLAGS="$CFLAGS $XPROTO_CFLAGS"
 
+AC_CHECK_FUNCS(mkostemp)
 AC_CHECK_FUNCS(memfd_create)
 
 AC_CHECK_DECLS([__NR_memfd_create], [], [], [[#include <asm/unistd.h>]])


[FILE:580:patches/patch-src_Makefile.am]
$NetBSD: patch-src_Makefile.am,v 1.1 2015/09/24 23:34:16 tnn Exp $

--- src/Makefile.am.orig	2013-12-02 21:07:56.000000000 +0000
+++ src/Makefile.am
@@ -4,6 +4,10 @@ if PTHREAD
 PTHREAD_SOURCES=xshmfence_pthread.c xshmfence_pthread.h
 endif
 
+if SEMAPHORE
+SEMAPHORE_SOURCES=xshmfence_semaphore.c xshmfence_semaphore.h
+endif
+
 if FUTEX
 FUTEX_SOURCES=xshmfence_futex.c xshmfence_futex.h
 endif
@@ -12,6 +16,7 @@ libxshmfence_la_SOURCES = \
 	xshmfenceint.h \
 	xshmfence_alloc.c \
 	$(PTHREAD_SOURCES) \
+	$(SEMAPHORE_SOURCES) \
 	$(FUTEX_SOURCES)
 
 AM_CFLAGS = $(CWARNFLAGS)


[FILE:243:patches/patch-src__xshmfence_futex.h]
--- src/xshmfence_futex.h.orig	2014-06-17 16:46:42.000000000 -0400
+++ src/xshmfence_futex.h	2015-04-18 12:16:21.953572000 -0400
@@ -28,6 +28,7 @@
 
 #ifdef HAVE_UMTX
 
+#include <sys/limits.h>
 #include <sys/types.h>
 #include <sys/umtx.h>
 


[FILE:927:patches/patch-src_xshmfence__alloc.c]
--- src/xshmfence_alloc.c.orig	2018-02-26 17:26:59 UTC
+++ src/xshmfence_alloc.c
@@ -67,15 +67,19 @@ int
 xshmfence_alloc_shm(void)
 {
 	char	template[] = SHMDIR "/shmfd-XXXXXX";
-	int	fd;
+	int	fd = -1;
 
 #if HAVE_MEMFD_CREATE
 	fd = memfd_create("xshmfence", MFD_CLOEXEC|MFD_ALLOW_SEALING);
 	if (fd < 0)
 #endif
 	{
-#ifdef O_TMPFILE
+#if defined(O_CLOEXEC)
+#if defined(HAVE_MKOSTEMP)
+		fd = mkostemp(template, O_CLOEXEC);
+#elif defined(O_TMPFILE)
 		fd = open(SHMDIR, O_TMPFILE|O_RDWR|O_CLOEXEC|O_EXCL, 0666);
+#endif
 		if (fd < 0)
 #endif
 		{
@@ -110,6 +114,9 @@ xshmfence_map_shm(int fd)
 		close (fd);
 		return 0;
 	}
+#ifdef HAVE_SEMAPHORE
+	xshmfence_open_semaphore(addr);
+#endif
 	return addr;
 }
 
@@ -121,5 +128,8 @@ xshmfence_map_shm(int fd)
 void
 xshmfence_unmap_shm(struct xshmfence *f)
 {
+#ifdef HAVE_SEMAPHORE
+	xshmfence_close_semaphore(f);
+#endif
         munmap(f, sizeof (struct xshmfence));
 }


[FILE:413:patches/patch-src_xshmfenceint.h]
--- src/xshmfenceint.h.orig	2018-02-26 17:26:59 UTC
+++ src/xshmfenceint.h
@@ -23,6 +23,7 @@
 #ifndef _XSHMFENCEINT_H_
 #define _XSHMFENCEINT_H_
 
+#include <fcntl.h>
 #include <stdlib.h>
 #include <unistd.h>
 #include <sys/mman.h>
@@ -32,6 +33,10 @@
 #include "xshmfence_futex.h"
 #endif
 
+#if HAVE_SEMAPHORE
+#include "xshmfence_semaphore.h"
+#endif
+
 #if HAVE_PTHREAD
 #include "xshmfence_pthread.h"
 #endif

