# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		spidermonkey
VERSION=		52.7.4
REVISION=		1
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Standalone JS interpreter from Mozilla 52-esr
HOMEPAGE=		https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://queue.taskcluster.net/v1/task/B2xAyI3fRB6xm-9zjFFugA/runs/0/artifacts/public/build/
DISTFILE[1]=		mozjs-52.7.4.tar.bz2:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		autoconf213:single:standard
			zip:single:standard
BUILDRUN_DEPENDS=	icu:single:standard
			nspr:single:standard

USES=			gmake perl pkgconfig python:py27,build zlib readline

DISTNAME=		mozjs-52.7.4/js/src

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-debug
			--disable-debug-symbols
			--enable-readline
			--enable-release
			--enable-shared-js
			--enable-tests
			--with-intl-api
			--with-pthreads
			--with-system-nspr
			--with-system-icu
			--with-system-zlib

PLIST_SUB=		MOZJS_MAJOR=52
			MOZJS_MINOR=7

VAR_OPSYS[dragonfly]=	CONFIGURE_ARGS=--disable-jemalloc

post-patch:
	touch ${WRKSRC}/configure

post-install:
	${LN} -s libmozjs-52.so \
		${STAGEDIR}${PREFIX}/lib/libmozjs-52.7.so.1
	${LN} -s libmozjs-52.so \
		${STAGEDIR}${PREFIX}/lib/libmozjs-52.so.0
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/js52
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libmozjs-52.so

post-extract:
	${CP} /port/files/configure ${WRKSRC}

[FILE:126:descriptions/desc.single]
SpiderMonkey is Mozilla's JavaScript engine written in C and C++. It is 
used in various Mozilla products, including Firefox.


[FILE:99:distinfo]
7909da399c9345c8285d30ac33592dfb2fb31de304df37d2795804ee44c80dfc     30416764 mozjs-52.7.4.tar.bz2


[FILE:2662:manifests/plist.single]
%%ONLY-FREEBSD%%include/mozjs-%%MOZJS_MAJOR%%/
 jemalloc_types.h
 mozmemory.h
 mozmemory_wrap.h
 mozzconf.h
 zconf.h
 zlib.h
bin/
 js%%MOZJS_MAJOR%%
 js%%MOZJS_MAJOR%%-config
include/mozjs-%%MOZJS_MAJOR%%/
 fdlibm.h
 js-config.h
 js.msg
include/mozjs-%%MOZJS_MAJOR%%/js/
 CallArgs.h
 CallNonGenericMethod.h
 CharacterEncoding.h
 Class.h
 Conversions.h
 Date.h
 Debug.h
 GCAPI.h
 GCAnnotations.h
 GCHashTable.h
 GCPolicyAPI.h
 GCVariant.h
 GCVector.h
 HashTable.h
 HeapAPI.h
 Id.h
 Initialization.h
 LegacyIntTypes.h
 MemoryMetrics.h
 Principals.h
 ProfilingFrameIterator.h
 ProfilingStack.h
 Proxy.h
 Realm.h
 RequiredDefines.h
 RootingAPI.h
 SliceBudget.h
 StructuredClone.h
 SweepingAPI.h
 TraceKind.h
 TracingAPI.h
 TrackedOptimizationInfo.h
 TypeDecls.h
 UbiNode.h
 UbiNodeBreadthFirst.h
 UbiNodeCensus.h
 UbiNodeDominatorTree.h
 UbiNodePostOrder.h
 UbiNodeShortestPaths.h
 UniquePtr.h
 Utility.h
 Value.h
 Vector.h
 WeakMapPtr.h
include/mozjs-%%MOZJS_MAJOR%%/
 jsalloc.h
 jsapi.h
 jsbytecode.h
 jsclist.h
 jscpucfg.h
 jsfriendapi.h
 jsperf.h
 jsprf.h
 jsprototypes.h
 jspubtd.h
 jstypes.h
 jsversion.h
 jswrapper.h
include/mozjs-%%MOZJS_MAJOR%%/mozilla/
 Alignment.h
 AllocPolicy.h
 AlreadyAddRefed.h
 Array.h
 ArrayUtils.h
 Assertions.h
 Atomics.h
 Attributes.h
 BinarySearch.h
 BloomFilter.h
 BufferList.h
 Casting.h
 ChaosMode.h
 Char16.h
 CheckedInt.h
 Compiler.h
 Compression.h
 DebugOnly.h
 Decimal.h
 EndianUtils.h
 EnumSet.h
 EnumTypeTraits.h
 EnumeratedArray.h
 EnumeratedRange.h
 FastBernoulliTrial.h
 FloatingPoint.h
 Function.h
 GuardObjects.h
 HashFunctions.h
 IndexSequence.h
 IntegerPrintfMacros.h
 IntegerRange.h
 IntegerTypeTraits.h
 JSONWriter.h
 Likely.h
 LinkedList.h
 MacroArgs.h
 MacroForEach.h
 MathAlgorithms.h
 Maybe.h
 MaybeOneOf.h
 MemoryChecking.h
 MemoryReporting.h
 Move.h
 NotNull.h
 NullPtr.h
 Opaque.h
 OperatorNewExtensions.h
 Pair.h
 PodOperations.h
 Poison.h
 Range.h
 RangedArray.h
 RangedPtr.h
 ReentrancyGuard.h
 RefCountType.h
 RefCounted.h
 RefPtr.h
 ReverseIterator.h
 RollingMean.h
 SHA1.h
 Saturate.h
 ScopeExit.h
 Scoped.h
 SegmentedVector.h
 SizePrintfMacros.h
 SplayTree.h
 Sprintf.h
 StackWalk.h
 StaticAnalysisFunctions.h
 TaggedAnonymousMemory.h
 TemplateLib.h
 ThreadLocal.h
 TimeStamp.h
 ToString.h
 Tuple.h
 TypeTraits.h
 TypedEnumBits.h
 Types.h
 UniquePtr.h
 UniquePtrExtensions.h
 Unused.h
 Variant.h
 Vector.h
 WeakPtr.h
 XorShift128PlusRNG.h
 double-conversion.h
 fallible.h
 mozalloc.h
 mozalloc_abort.h
 mozalloc_oom.h
 utils.h
lib/
 libjs_static.ajs
 libmozjs-%%MOZJS_MAJOR%%.%%MOZJS_MINOR%%.so.1
 libmozjs-%%MOZJS_MAJOR%%.so
 libmozjs-%%MOZJS_MAJOR%%.so.0
lib/pkgconfig/mozjs-%%MOZJS_MAJOR%%.pc


[FILE:540:patches/patch-build_moz.configure_init.configure]
--- ../../build/moz.configure/init.configure.orig	2018-01-11 18:49:42 UTC
+++ ../../build/moz.configure/init.configure
@@ -344,8 +344,8 @@ def split_triplet(triplet):
     if cpu.endswith('86') or (cpu.startswith('i') and '86' in cpu):
         canonical_cpu = 'x86'
         endianness = 'little'
-    elif cpu in ('x86_64', 'ia64'):
-        canonical_cpu = cpu
+    elif cpu in ('x86_64', 'ia64', 'amd64'):
+        canonical_cpu = 'x86_64'
         endianness = 'little'
     elif cpu in ('s390', 's390x'):
         canonical_cpu = cpu


[FILE:552:patches/patch-config_rules.mk]
--- ../../config/rules.mk.orig	2018-01-11 18:49:42 UTC
+++ ../../config/rules.mk
@@ -418,7 +418,7 @@ endif # AIX
 #
 # Linux: add -Bsymbolic flag for components
 #
-ifeq ($(OS_ARCH),Linux)
+#ifeq ($(OS_ARCH),Linux)
 ifdef IS_COMPONENT
 EXTRA_DSO_LDOPTS += -Wl,-Bsymbolic
 endif
@@ -426,7 +426,8 @@ ifdef LD_VERSION_SCRIPT
 EXTRA_DSO_LDOPTS += -Wl,--version-script,$(LD_VERSION_SCRIPT)
 EXTRA_DEPS += $(LD_VERSION_SCRIPT)
 endif
-endif
+#endif
+EXTRA_DSO_LDOPTS += -Wl,-soname,lib$(JS_LIBRARY_NAME).so.0
 
 ifdef SYMBOLS_FILE
 ifeq ($(OS_TARGET),WINNT)


[FILE:908:patches/patch-js_src_old-configure.in]
--- old-configure.in.orig	2018-01-11 18:49:44 UTC
+++ old-configure.in
@@ -1623,16 +1623,21 @@ dnl ====================================
 dnl = Enable jemalloc
 dnl ========================================================
 
-case "${OS_TARGET}" in
-Android|WINNT|Darwin)
+dnl In stand-alone builds we always only want to link executables against mozglue.
+if test "$JS_STANDALONE"; then
   MOZ_GLUE_IN_PROGRAM=
-  ;;
-*)
-  dnl On !Android !Windows !OSX, we only want to link executables against mozglue
-  MOZ_GLUE_IN_PROGRAM=1
-  AC_DEFINE(MOZ_GLUE_IN_PROGRAM)
-  ;;
-esac
+else
+  case "${OS_TARGET}" in
+  Android|WINNT|Darwin)
+    MOZ_GLUE_IN_PROGRAM=
+    ;;
+  *)
+    dnl On !Android !Windows !OSX, we only want to link executables against mozglue
+    MOZ_GLUE_IN_PROGRAM=1
+    AC_DEFINE(MOZ_GLUE_IN_PROGRAM)
+    ;;
+  esac
+fi
 
 if test "$MOZ_MEMORY"; then
   if test "x$MOZ_DEBUG" = "x1"; then


[FILE:475:patches/patch-mozglue_build_moz.build]
--- ../../mozglue/build/moz.build.orig	2018-01-11 18:49:46 UTC
+++ ../../mozglue/build/moz.build
@@ -6,7 +6,7 @@
 
 # Build mozglue as a shared lib on Windows, OSX and Android.
 # If this is ever changed, update MOZ_SHARED_MOZGLUE in browser/installer/Makefile.in
-if CONFIG['OS_TARGET'] in ('WINNT', 'Darwin', 'Android'):
+if CONFIG['OS_TARGET'] in ('WINNT', 'Darwin', 'Android') and not CONFIG['JS_STANDALONE']:
     SharedLibrary('mozglue')
 else:
     Library('mozglue')


[FILE:379:patches/patch-python_mach_mach_mixin_process.py]
--- ../../python/mach/mach/mixin/process.py.orig	2018-04-01 13:37:29.893787000 +0200
+++ ../../python/mach/mach/mixin/process.py	2018-04-01 13:38:10.188973000 +0200
@@ -26,7 +26,7 @@
 elif 'COMSPEC' in os.environ:
     _current_shell = os.environ['COMSPEC']
 else:
-    raise Exception('Could not detect environment shell!')
+    _current_shell = "/bin/sh"
 
 _in_msys = False
 


[FILE:1099:patches/patch-python_mozbuild_mozbuild_backend_recursivemake.py]
--- ../../python/mozbuild/mozbuild/backend/recursivemake.py.orig	2018-01-11 18:49:46 UTC
+++ ../../python/mozbuild/mozbuild/backend/recursivemake.py
@@ -1307,11 +1307,11 @@ class RecursiveMakeBackend(CommonBackend
                                 raise Exception("Wildcards are only supported in the filename part of "
                                                 "srcdir-relative or absolute paths.")
 
-                            install_manifest.add_pattern_symlink(basepath, wild, path)
+                            install_manifest.add_pattern_copy(basepath, wild, path)
                         else:
-                            install_manifest.add_pattern_symlink(f.srcdir, f, path)
+                            install_manifest.add_pattern_copy(f.srcdir, f, path)
                     else:
-                        install_manifest.add_symlink(f.full_path, dest)
+                        install_manifest.add_copy(f.full_path, dest)
                 else:
                     install_manifest.add_optional_exists(dest)
                     backend_file.write('%s_FILES += %s\n' % (


[FILE:572:patches/patch-python_mozbuild_mozbuild_configure_____init____.py]
--- ../../python/mozbuild/mozbuild/configure/__init__.py.orig	2018-01-11 18:49:46 UTC
+++ ../../python/mozbuild/mozbuild/configure/__init__.py
@@ -356,7 +356,7 @@ class ConfigureSandbox(dict):
         # All options should have been removed (handled) by now.
         for arg in self._helper:
             without_value = arg.split('=', 1)[0]
-            raise InvalidOptionError('Unknown option: %s' % without_value)
+            print('Ignoring', without_value, ': Unknown option')
 
         # Run the execution queue
         for func, args in self._execution_queue:


[FILE:659:patches/patch-python_mozbuild_mozbuild_configure_options.py]
--- ../../python/mozbuild/mozbuild/configure/options.py.orig	2018-01-11 18:49:46 UTC
+++ ../../python/mozbuild/mozbuild/configure/options.py
@@ -402,7 +402,11 @@ class CommandLineHelper(object):
 
     def add(self, arg, origin='command-line', args=None):
         assert origin != 'default'
-        prefix, name, values = Option.split_option(arg)
+        try:
+            prefix, name, values = Option.split_option(arg)
+        except InvalidOptionError as e:
+            print('Ignoring', arg, ':', e)
+            return
         if args is None:
             args = self._extra_args
         if args is self._extra_args and name in self._extra_args:


[FILE:1175:files/configure]
#!/bin/sh
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Welcome to the new world of configure. We're working on moving to a
# python based configure. In the meanwhile, remains of the old autoconf
# based configure is in old-configure.in.
# If you need to add something, please come talk to the build system
# peers for now.
#
# Because adding a configure file in the tree is going to conflict with
# existing configure files in people's (and automation) work trees, and
# because some automation jobs are still running autoconf and configure
# "manually", this file is actually an m4 file that is processed by
# autoconf, but doesn't call any autoconf macros. The `divert` line
# below ensures the script that follows is output by autoconf.
: "divert(0)dnl"
#!/bin/sh

SRCDIR=$(dirname $0)
TOPSRCDIR="$SRCDIR"/../..
export OLD_CONFIGURE="$SRCDIR"/old-configure

set -- "$@" --enable-project=js

which python2.7 > /dev/null && exec python2.7 "$TOPSRCDIR/configure.py" "$@" || exec python "$TOPSRCDIR/configure.py" "$@"

