# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-django-celery
VERSION=		3.2.2
KEYWORDS=		python devel
VARIANTS=		py35 py36
SDESC[py35]=		Old django celery integration project (PY 35)
SDESC[py36]=		Old django celery integration project (PY 36)
HOMEPAGE=		http://celeryproject.org
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/d/django-celery
DISTFILE[1]=		django-celery-3.2.2.tar.gz:main
DF_INDEX=		1
SPKGS[py35]=		single
SPKGS[py36]=		single

OPTIONS_AVAILABLE=	PY35 PY36
OPTIONS_STANDARD=	none
VOPTS[py35]=		PY35=ON PY36=OFF
VOPTS[py36]=		PY35=OFF PY36=ON

DISTNAME=		django-celery-3.2.2

GENERATED=		yes

[PY35].BUILDRUN_DEPENDS_ON=		python-celery:single:py35
					python-Django:single:py35
[PY35].USES_ON=				python:py35

[PY36].BUILDRUN_DEPENDS_ON=		python-celery:single:py36
					python-Django:single:py36
[PY36].USES_ON=				python:py36

[FILE:3285:descriptions/desc.single]
===============================================
 django-celery - Celery Integration for Django
===============================================

.. image:: http://cloud.github.com/downloads/celery/celery/celery_128.png

:Version: 3.2.0
:Web: http://celeryproject.org/
:Download: http://pypi.python.org/pypi/django-celery/
:Source: http://github.com/celery/django-celery/
:Keywords: celery, task queue, job queue, asynchronous, rabbitmq, amqp,
redis,
  python, django, webhooks, queue, distributed

--

.. warning::

    **THIS PROJECT IS ONLY REQUIRED IF YOU WANT TO USE DJANGO RESULT
BACKEND
    AND ADMIN INTEGRATION**

    Please follow the new tutorial at:


http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html

django-celery provides Celery integration for Django; Using the Django ORM
and cache backend for storing results, autodiscovery of task modules
for applications listed in ``INSTALLED_APPS``, and more.

Using django-celery
===================

To enable ``django-celery`` for your project you need to add ``djcelery``
to
``INSTALLED_APPS``::

    INSTALLED_APPS += ("djcelery", )

then add the following lines to your ``settings.py``::

    import djcelery
    djcelery.setup_loader()

Everything works the same as described in the `Celery User Manual`_,
except you
need to invoke the programs through ``manage.py``:

=====================================
=====================================
**Program**                            **Replace with**
=====================================
=====================================
``celery``                             ``python manage.py celery``
``celery worker``                      ``python manage.py celery worker``
``celery beat``                        ``python manage.py celery beat``
``celery ...``                         ``python manage.py celery ...``
=====================================
=====================================

The other main difference is that configuration values are stored in
your Django projects' ``settings.py`` module rather than in
``celeryconfig.py``.

If you're trying celery for the first time you should start by reading
`Getting started with django-celery`_

Special note for mod_wsgi users
-------------------------------

If you're using ``mod_wsgi`` to deploy your Django application you need to
include the following in your ``.wsgi`` module::

    import djcelery
    djcelery.setup_loader()

Documentation
=============

The `Celery User Manual`_ contains user guides, tutorials and an API
reference. It also has a dedicated `subsection about the Django
integration`_.

.. _`Celery User Manual`: http://docs.celeryproject.org/
.. _`subsection about the Django integration`:
   http://docs.celeryproject.org/en/latest/django/
.. _`Getting started with django-celery`:

http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html

Installation
=============

You can install ``django-celery`` either via the Python Package Index
(PyPI)
or from source.

To install using ``pip``,::

    $ pip install django-celery

To install using ``easy_install``,::

    $ easy_install django-celery

You will then want to create the necessary tables. If you generating
schema migrations, you'll want to run::

    $ python manage.py migrate djcelery



[FILE:105:distinfo]
aaba492bf7777f231ec6b02c80aa3ea68758c39f4723864dd4164589b99ad703        90201 django-celery-3.2.2.tar.gz

