# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		meson
VERSION=		1.8.0
KEYWORDS=		devel python
VARIANTS=		std v13
SDESC[std]=		High performance build system
SDESC[v13]=		High performance build system (py 3.13)
HOMEPAGE=		https://mesonbuild.com
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/df/d7/f1c8acf0e597d4d07532f519780ee6e11ba285a9b092f18706b4c9118331
DISTFILE[1]=		meson-1.8.0-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[std]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY313
OPTIONS_STANDARD=	none
VOPTS[v13]=		PY313=ON

RUN_DEPENDS=		ninja:single:std

LICENSE=		APACHE20:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		APACHE20:stock
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/meson

PATCH_WRKSRC=		{{WRKSRC}}/{{PYTHON_SITELIBDIR}}

[PY313].USES_OFF=			python:v12,wheel
[PY313].USES_ON=			python:v13,wheel

pre-configure:
	${FIND} ${WRKSRC} -name "*.orig" -type f -delete

post-extract:
	${MKDIR} ${WRKSRC}
	${SETENV} AUTOPYTHON=${_PYTHON_VERSION} \
	pip install --verbose \
		--no-deps \
		--no-index \
		--no-compile \
		--progress-bar off \
		--root ${WRKSRC} \
		${DISTDIR}/${DIST_SUBDIR}/${DISTFILE_1:C/:.*//}
	# extract license terms
	${AWK} '/^from / {exit}; {print}' ${PATCH_WRKSRC}/mesonbuild/mesonmain.py > ${WRKDIR}/TERMS

do-install:
	${MKDIR} ${STAGEDIR}
	${MV} ${WRKSRC}${PREFIX} ${STAGEDIR}/
	(cd ${STAGEDIR} && ${PYTHON_CMD} -m compileall -d / . ||:)

[FILE:473:descriptions/desc.single]
Meson is a cross-platform build system designed to be both as fast and as
user friendly as possible. It supports many languages and compilers,
including GCC, Clang and Visual Studio. Its build definitions are written
in a simple non-turing complete DSL. The main design point of Meson is
that every moment a developer spends writing or debugging build
definitions is a second wasted.  So is every second spent waiting for the
build system to actually start compiling code.


[FILE:118:distinfo]
472b7b25da286447333d32872b82d1c6f1a34024fb8ee017d7308056c25fec1f      1012501 python-src/meson-1.8.0-py3-none-any.whl


[FILE:85:manifests/plist.single]
@comment rest is auto-generated
share/polkit-1/actions/com.mesonbuild.install.policy


[FILE:329:patches/patch-mesonbuild_cmake_toolchain.py]
--- mesonbuild/cmake/toolchain.py.orig	2025-04-06 19:57:59 UTC
+++ mesonbuild/cmake/toolchain.py
@@ -148,6 +148,7 @@ class CMakeToolchain:
             'linux': 'Linux',
             'windows': 'Windows',
             'freebsd': 'FreeBSD',
+            'midnightbsd': 'MidnightBSD',
             'darwin': 'Darwin',
         }
 


[FILE:683:patches/patch-mesonbuild_compilers_mixins_clike.py]
--- mesonbuild/compilers/mixins/clike.py.orig	2025-04-06 19:57:59 UTC
+++ mesonbuild/compilers/mixins/clike.py
@@ -73,7 +73,7 @@ class CLikeCompilerArgs(arglist.Compiler
         # This covers all ld.bfd, ld.gold, ld.gold, and xild on Linux, which
         # all act like (or are) gnu ld
         # TODO: this could probably be added to the DynamicLinker instead
-        if isinstance(self.compiler.linker, (GnuLikeDynamicLinkerMixin, SolarisDynamicLinker, CompCertDynamicLinker)):
+        if isinstance(self.compiler.linker, (GnuLikeDynamicLinkerMixin, CompCertDynamicLinker)):
             group_start = -1
             group_end = -1
             for i, each in enumerate(new):


[FILE:785:patches/patch-mesonbuild_compilers_mixins_gnu.py]
Do not default to -z ignore on SunOS, it breaks for example -fstack-protector.

--- mesonbuild/compilers/mixins/gnu.py.orig	2025-04-06 19:57:59 UTC
+++ mesonbuild/compilers/mixins/gnu.py
@@ -362,7 +362,7 @@ class GnuLikeCompiler(Compiler, metaclas
                                    'b_ndebug', 'b_staticpic', 'b_pie']}
         if not (self.info.is_windows() or self.info.is_cygwin() or self.info.is_openbsd()):
             self.base_options.add(OptionKey('b_lundef'))
-        if not self.info.is_windows() or self.info.is_cygwin():
+        if not (self.info.is_windows() or self.info.is_sunos()) or self.info.is_cygwin():
             self.base_options.add(OptionKey('b_asneeded'))
         if not self.info.is_hurd():
             self.base_options.add(OptionKey('b_sanitize'))


[FILE:407:patches/patch-mesonbuild_envconfig.py]
--- mesonbuild/envconfig.py.orig	2025-04-06 19:57:59 UTC
+++ mesonbuild/envconfig.py
@@ -345,7 +345,7 @@ class MachineInfo(HoldableObject):
 
     def is_freebsd(self) -> bool:
         """Machine is FreeBSD?"""
-        return self.system == 'freebsd'
+        return self.system == 'freebsd' or self.system == 'midnightbsd'
 
     def is_sunos(self) -> bool:
         """Machine is illumos or Solaris?"""


[FILE:1048:patches/patch-mesonbuild_linkers_linkers.py]
--- mesonbuild/linkers/linkers.py.orig	2025-04-06 19:57:59 UTC
+++ mesonbuild/linkers/linkers.py
@@ -670,7 +670,7 @@ class GnuLikeDynamicLinkerMixin(DynamicL
         return ['-pthread']
 
     def no_undefined_args(self) -> T.List[str]:
-        return self._apply_prefix('--no-undefined')
+        return []
 
     def fatal_warnings(self) -> T.List[str]:
         return self._apply_prefix('--fatal-warnings')
@@ -1454,7 +1454,12 @@ class SolarisDynamicLinker(PosixDynamicL
     def get_link_whole_for(self, args: T.List[str]) -> T.List[str]:
         if not args:
             return args
-        return self._apply_prefix('--whole-archive') + args + self._apply_prefix('--no-whole-archive')
+        result = [self.prefix_arg + '-z', self.prefix_arg + 'allextract']
+        for a in args:
+            result.append(a)
+        result.append(self.prefix_arg + '-z')
+        result.append(self.prefix_arg + 'defaultextract')
+        return result
 
     def get_pie_args(self) -> T.List[str]:
         # Available in Solaris 11.2 and later


[FILE:632:patches/patch-mesonbuild_modules_pkgconfig.py]
--- mesonbuild/modules/pkgconfig.py.orig	2025-05-04 03:21:23 UTC
+++ mesonbuild/modules/pkgconfig.py
@@ -702,7 +702,7 @@ class PkgConfigModule(NewExtensionModule
         pkgroot = pkgroot_name = kwargs['install_dir'] or default_install_dir
         if pkgroot is None:
             m = state.environment.machines.host
-            if m.is_freebsd():
+            if False:
                 pkgroot = os.path.join(_as_str(state.environment.coredata.optstore.get_value_for(OptionKey('prefix'))), 'libdata', 'pkgconfig')
                 pkgroot_name = os.path.join('{prefix}', 'libdata', 'pkgconfig')
             elif m.is_haiku():


[FILE:491:patches/patch-mesonbuild_scripts_depfixer.py]
--- mesonbuild/scripts/depfixer.py.orig	2025-04-06 19:57:59 UTC
+++ mesonbuild/scripts/depfixer.py
@@ -468,7 +468,7 @@ def fix_rpath(fname: str, rpath_dirs_to_
             return
         if isinstance(new_rpath, str):
             new_rpath = new_rpath.encode('utf8')
-        fix_elf(fname, rpath_dirs_to_remove, new_rpath, verbose)
+        # never adjust rpath (meson authors are idiots)
         return
     except SystemExit as e:
         if isinstance(e.code, int) and e.code == 0:


[FILE:25:files/special.mk]
stage-dir:
	# do nothing


[FILE:607:sunos/patch-mesonbuild_compilers_compilers.py]
--- mesonbuild/compilers/compilers.py.orig	2021-06-07 17:35:31 UTC
+++ mesonbuild/compilers/compilers.py
@@ -404,9 +404,6 @@ def get_base_link_args(options: 'KeyedOp
     # -bitcode_bundle is incompatible with -undefined and -bundle
     if bitcode and not is_shared_module:
         args.extend(linker.bitcode_args())
-    elif as_needed:
-        # -Wl,-dead_strip_dylibs is incompatible with bitcode
-        args.extend(linker.get_asneeded_args())
 
     # Apple's ld (the only one that supports bitcode) does not like -undefined
     # arguments or -headerpad_max_install_names when bitcode is enabled


[FILE:666:sunos/patch-mesonbuild_linkers_detect.py]
--- mesonbuild/linkers/detect.py.orig	2021-08-18 11:22:15 UTC
+++ mesonbuild/linkers/detect.py
@@ -141,6 +141,12 @@ def guess_nix_linker(env: 'Environment',
         check_args = comp_class.LINKER_PREFIX + ['--version'] + extra_args
 
     override = []  # type: T.List[str]
+    # sunos-only patch, hardcode to solaris (detection is broken)
+    linker = SolarisDynamicLinker(
+        compiler, for_machine, comp_class.LINKER_PREFIX, override,
+        version='unknown version')
+    return linker
+
     value = env.lookup_binary_entry(for_machine, comp_class.language + '_ld')
     if value is not None:
         override = comp_class.use_linker_args(value[0])

