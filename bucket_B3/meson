# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		meson
VERSION=		0.54.2
KEYWORDS=		devel python
VARIANTS=		standard
SDESC[standard]=	High performance build system
HOMEPAGE=		https://mesonbuild.com
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/mesonbuild/meson/releases/download/0.54.2/
DISTFILE[1]=		meson-0.54.2.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

RUN_DEPENDS=		ninja:single:standard

USES=			python

LICENSE=		APACHE20:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		APACHE20:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"^from "
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/meson.py
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/meson

[FILE:473:descriptions/desc.single]
Meson is a cross-platform build system designed to be both as fast and as
user friendly as possible. It supports many languages and compilers,
including GCC, Clang and Visual Studio. Its build definitions are written
in a simple non-turing complete DSL. The main design point of Meson is
that every moment a developer spends writing or debugging build
definitions is a second wasted.  So is every second spent waiting for the
build system to actually start compiling code.


[FILE:98:distinfo]
a7716eeae8f8dff002e4147642589ab6496ff839e4376a5aed761f83c1fa0455      1691270 meson-0.54.2.tar.gz


[FILE:85:manifests/plist.single]
@comment rest is auto-generated
share/polkit-1/actions/com.mesonbuild.install.policy


[FILE:547:patches/patch-mesonbuild_environment.py]
--- mesonbuild/environment.py.orig	2020-05-15 07:23:18 UTC
+++ mesonbuild/environment.py
@@ -890,7 +890,7 @@ class Environment:
             else:
                 cls = GnuBFDDynamicLinker
             linker = cls(compiler, for_machine, comp_class.LINKER_PREFIX, override, version=v)
-        elif 'Solaris' in e or 'Solaris' in o:
+        elif 'enforce a 64-bit link-edit' in e:
             linker = SolarisDynamicLinker(
                 compiler, for_machine, comp_class.LINKER_PREFIX, override,
                 version=search_version(e))


[FILE:705:patches/patch-mesonbuild_linkers.py]
--- mesonbuild/linkers.py.orig	2020-05-15 07:23:18 UTC
+++ mesonbuild/linkers.py
@@ -1078,7 +1078,12 @@ class SolarisDynamicLinker(PosixDynamicL
     def get_link_whole_for(self, args: T.List[str]) -> T.List[str]:
         if not args:
             return args
-        return self._apply_prefix('--whole-archive') + args + self._apply_prefix('--no-whole-archive')
+        result = [self.prefix_arg + '-z', self.prefix_arg + 'allextract']
+        for a in args:
+            result.append(a)
+        result.append(self.prefix_arg + '-z')
+        result.append(self.prefix_arg + 'defaultextract')
+        return result
 
     def no_undefined_args(self) -> T.List[str]:
         return ['-z', 'defs']


[FILE:889:patches/patch-mesonbuild_modules_pkgconfig.py]
--- mesonbuild/modules/pkgconfig.py.orig	2020-03-23 17:22:09 UTC
+++ mesonbuild/modules/pkgconfig.py
@@ -496,10 +496,7 @@ class PkgConfigModule(ExtensionModule):
         pcfile = filebase + '.pc'
         pkgroot = kwargs.get('install_dir', default_install_dir)
         if pkgroot is None:
-            if mesonlib.is_freebsd():
-                pkgroot = os.path.join(state.environment.coredata.get_builtin_option('prefix'), 'libdata', 'pkgconfig')
-            else:
-                pkgroot = os.path.join(state.environment.coredata.get_builtin_option('libdir'), 'pkgconfig')
+            pkgroot = os.path.join(state.environment.coredata.get_builtin_option('libdir'), 'pkgconfig')
         if not isinstance(pkgroot, str):
             raise mesonlib.MesonException('Install_dir must be a string.')
         self.generate_pkgconfig_file(state, deps, subdirs, name, description, url,


[FILE:845:patches/patch-mesonbuild_scripts_depfixer.py]
--- mesonbuild/scripts/depfixer.py.orig	2020-03-23 17:22:02 UTC
+++ mesonbuild/scripts/depfixer.py
@@ -441,15 +441,13 @@ def fix_rpath(fname, new_rpath, final_pa
         if fname.endswith('.jar'):
             fix_jar(fname)
             return
-        fix_elf(fname, new_rpath, verbose)
+        # never adjust rpath (meson authors are idiots)
         return
     except SystemExit as e:
         if isinstance(e.code, int) and e.code == 0:
             pass
         else:
             raise
-    # We don't look for this on import because it will do a useless PATH lookup
-    # on non-mac platforms. That can be expensive on some Windows machines
     # (upto 30ms), which is significant with --only-changed. For details, see:
     # https://github.com/mesonbuild/meson/pull/6612#discussion_r378581401
     if INSTALL_NAME_TOOL is False:


[FILE:1196:sunos/patch-mesonbuild_compilers_compilers.py]
--- mesonbuild/compilers/compilers.py.orig	2020-05-15 07:23:18 UTC
+++ mesonbuild/compilers/compilers.py
@@ -368,9 +368,6 @@ def get_base_link_args(options, linker,
     # -bitcode_bundle is incompatible with -undefined and -bundle
     if bitcode and not is_shared_module:
         args.extend(linker.bitcode_args())
-    elif as_needed:
-        # -Wl,-dead_strip_dylibs is incompatible with bitcode
-        args.extend(linker.get_asneeded_args())
 
     # Apple's ld (the only one that supports bitcode) does not like any
     # -undefined arguments at all, so don't pass these when using bitcode
@@ -607,10 +604,6 @@ class CompilerArgs(collections.abc.Mutab
                 if group_start < 0:
                     # First occurrence of a library
                     group_start = i
-            if group_start >= 0:
-                # Last occurrence of a library
-                new.insert(group_end + 1, '-Wl,--end-group')
-                new.insert(group_start, '-Wl,--start-group')
         # Remove system/default include paths added with -isystem
         if hasattr(self.compiler, 'get_default_include_dirs'):
             default_dirs = self.compiler.get_default_include_dirs()

