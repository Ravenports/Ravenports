# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		meson
VERSION=		0.57.2
KEYWORDS=		devel python
VARIANTS=		standard
SDESC[standard]=	High performance build system
HOMEPAGE=		https://mesonbuild.com
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/mesonbuild/meson/releases/download/0.57.2/
DISTFILE[1]=		meson-0.57.2.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

RUN_DEPENDS=		ninja:single:standard
			autoselect-python:single:standard

USES=			python:sutools

LICENSE=		APACHE20:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		APACHE20:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"^from "
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/meson.py
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/meson

[FILE:473:descriptions/desc.single]
Meson is a cross-platform build system designed to be both as fast and as
user friendly as possible. It supports many languages and compilers,
including GCC, Clang and Visual Studio. Its build definitions are written
in a simple non-turing complete DSL. The main design point of Meson is
that every moment a developer spends writing or debugging build
definitions is a second wasted.  So is every second spent waiting for the
build system to actually start compiling code.


[FILE:98:distinfo]
3a83e7b1c5de94fa991ec34d9b198d94f38ed699d3524cb0fdf3b99fd23d4cc5      1853721 meson-0.57.2.tar.gz


[FILE:85:manifests/plist.single]
@comment rest is auto-generated
share/polkit-1/actions/com.mesonbuild.install.policy


[FILE:683:patches/patch-mesonbuild_compilers_mixins_clike.py]
--- mesonbuild/compilers/mixins/clike.py.orig	2021-04-10 09:21:50 UTC
+++ mesonbuild/compilers/mixins/clike.py
@@ -81,7 +81,7 @@ class CLikeCompilerArgs(arglist.Compiler
         # This covers all ld.bfd, ld.gold, ld.gold, and xild on Linux, which
         # all act like (or are) gnu ld
         # TODO: this could probably be added to the DynamicLinker instead
-        if isinstance(self.compiler.linker, (GnuLikeDynamicLinkerMixin, SolarisDynamicLinker, CompCertDynamicLinker)):
+        if isinstance(self.compiler.linker, (GnuLikeDynamicLinkerMixin, CompCertDynamicLinker)):
             group_start = -1
             group_end = -1
             for i, each in enumerate(new):


[FILE:785:patches/patch-mesonbuild_compilers_mixins_gnu.py]
Do not default to -z ignore on SunOS, it breaks for example -fstack-protector.

--- mesonbuild/compilers/mixins/gnu.py.orig	2021-04-10 09:21:50 UTC
+++ mesonbuild/compilers/mixins/gnu.py
@@ -153,7 +153,7 @@ class GnuLikeCompiler(Compiler, metaclas
                                    'b_ndebug', 'b_staticpic', 'b_pie']}
         if not (self.info.is_windows() or self.info.is_cygwin() or self.info.is_openbsd()):
             self.base_options.add(OptionKey('b_lundef'))
-        if not self.info.is_windows() or self.info.is_cygwin():
+        if not (self.info.is_windows() or self.info.is_sunos()) or self.info.is_cygwin():
             self.base_options.add(OptionKey('b_asneeded'))
         if not self.info.is_hurd():
             self.base_options.add(OptionKey('b_sanitize'))


[FILE:547:patches/patch-mesonbuild_environment.py]
--- mesonbuild/environment.py.orig	2021-04-10 09:22:14 UTC
+++ mesonbuild/environment.py
@@ -1191,7 +1191,7 @@ class Environment:
             else:
                 cls = GnuBFDDynamicLinker
             linker = cls(compiler, for_machine, comp_class.LINKER_PREFIX, override, version=v)
-        elif 'Solaris' in e or 'Solaris' in o:
+        elif 'enforce a 64-bit link-edit' in e:
             for line in (o+e).split('\n'):
                 if 'ld: Software Generation Utilities' in line:
                     v = line.split(':')[2].lstrip()


[FILE:716:patches/patch-mesonbuild_linkers.py]
--- mesonbuild/linkers.py.orig	2021-04-10 09:21:50 UTC
+++ mesonbuild/linkers.py
@@ -1214,7 +1214,12 @@ class SolarisDynamicLinker(PosixDynamicL
     def get_link_whole_for(self, args: T.List[str]) -> T.List[str]:
         if not args:
             return args
-        return self._apply_prefix('--whole-archive') + args + self._apply_prefix('--no-whole-archive')
+        result = [self.prefix_arg + '-z', self.prefix_arg + 'allextract']
+        for a in args:
+            result.append(a)
+        result.append(self.prefix_arg + '-z')
+        result.append(self.prefix_arg + 'defaultextract')
+        return result
 
     def get_pie_args(self) -> T.List[str]:
         # Available in Solaris 11.2 and later


[FILE:925:patches/patch-mesonbuild_modules_pkgconfig.py]
--- mesonbuild/modules/pkgconfig.py.orig	2021-04-10 09:22:14 UTC
+++ mesonbuild/modules/pkgconfig.py
@@ -530,10 +530,7 @@ class PkgConfigModule(ExtensionModule):
         pcfile = filebase + '.pc'
         pkgroot = kwargs.get('install_dir', default_install_dir)
         if pkgroot is None:
-            if mesonlib.is_freebsd():
-                pkgroot = os.path.join(state.environment.coredata.get_option(mesonlib.OptionKey('prefix')), 'libdata', 'pkgconfig')
-            else:
-                pkgroot = os.path.join(state.environment.coredata.get_option(mesonlib.OptionKey('libdir')), 'pkgconfig')
+            pkgroot = os.path.join(state.environment.coredata.get_option(mesonlib.OptionKey('libdir')), 'pkgconfig')
         if not isinstance(pkgroot, str):
             raise mesonlib.MesonException('Install_dir must be a string.')
         self.generate_pkgconfig_file(state, deps, subdirs, name, description, url,


[FILE:491:patches/patch-mesonbuild_scripts_depfixer.py]
--- mesonbuild/scripts/depfixer.py.orig	2021-04-10 09:21:50 UTC
+++ mesonbuild/scripts/depfixer.py
@@ -465,7 +465,7 @@ def fix_rpath(fname: str, rpath_dirs_to_
             return
         if isinstance(new_rpath, str):
             new_rpath = new_rpath.encode('utf8')
-        fix_elf(fname, rpath_dirs_to_remove, new_rpath, verbose)
+        # never adjust rpath (meson authors are idiots)
         return
     except SystemExit as e:
         if isinstance(e.code, int) and e.code == 0:


[FILE:607:sunos/patch-mesonbuild_compilers_compilers.py]
--- mesonbuild/compilers/compilers.py.orig	2021-02-14 19:22:39 UTC
+++ mesonbuild/compilers/compilers.py
@@ -402,9 +402,6 @@ def get_base_link_args(options: 'KeyedOp
     # -bitcode_bundle is incompatible with -undefined and -bundle
     if bitcode and not is_shared_module:
         args.extend(linker.bitcode_args())
-    elif as_needed:
-        # -Wl,-dead_strip_dylibs is incompatible with bitcode
-        args.extend(linker.get_asneeded_args())
 
     # Apple's ld (the only one that supports bitcode) does not like -undefined
     # arguments or -headerpad_max_install_names when bitcode is enabled

