# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		meson
VERSION=		0.47.2
KEYWORDS=		devel python
VARIANTS=		standard
SDESC[standard]=	High performance build system
HOMEPAGE=		http://mesonbuild.com
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/mesonbuild/meson/releases/download/0.47.2/
DISTFILE[1]=		meson-0.47.2.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

RUN_DEPENDS=		ninja:single:standard

USES=			python

LICENSE=		APACHE20:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		APACHE20:{{WRKSRC}}/COPYING
LICENSE_AWK=		TERMS:"^from "
LICENSE_SOURCE=		TERMS:{{WRKSRC}}/meson.py
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/meson

[FILE:473:descriptions/desc.single]
Meson is a cross-platform build system designed to be both as fast and as
user friendly as possible. It supports many languages and compilers,
including GCC, Clang and Visual Studio. Its build definitions are written
in a simple non-turing complete DSL. The main design point of Meson is
that every moment a developer spends writing or debugging build
definitions is a second wasted.  So is every second spent waiting for the
build system to actually start compiling code.


[FILE:98:distinfo]
92d8afd921751261e36151643464efd3394162f69efbe8cd53e0a66b1cf395eb      1267981 meson-0.47.2.tar.gz


[FILE:85:manifests/plist.single]
@comment rest is auto-generated
share/polkit-1/actions/com.mesonbuild.install.policy


[FILE:450:patches/patch-mesonbuild_dependencies_base.py]
--- mesonbuild/dependencies/base.py.orig	2018-08-25 08:05:50 UTC
+++ mesonbuild/dependencies/base.py
@@ -1080,7 +1080,7 @@ class ExtraFrameworkDependency(ExternalD
     def detect(self, name, path):
         lname = name.lower()
         if path is None:
-            paths = ['/System/Library/Frameworks', '/Library/Frameworks']
+            paths = ['/System/Library/Frameworks']
         else:
             paths = [path]
         for p in paths:


[FILE:1149:patches/patch-mesonbuild_dependencies_misc.py]
--- mesonbuild/dependencies/misc.py.orig	2018-08-25 08:05:43 UTC
+++ mesonbuild/dependencies/misc.py
@@ -315,17 +315,6 @@ class Python3Dependency(ExternalDependen
         if not self.is_found:
             if mesonlib.is_windows() and DependencyMethods.SYSCONFIG in self.methods:
                 self._find_libpy3_windows(environment)
-            elif mesonlib.is_osx() and DependencyMethods.EXTRAFRAMEWORK in self.methods:
-                # In OSX the Python 3 framework does not have a version
-                # number in its name.
-                # There is a python in /System/Library/Frameworks, but that's
-                # python 2, Python 3 will always bin in /Library
-                fw = ExtraFrameworkDependency(
-                    'python', False, '/Library/Frameworks', self.env, self.language, kwargs)
-                if fw.found():
-                    self.compile_args = fw.get_compile_args()
-                    self.link_args = fw.get_link_args()
-                    self.is_found = True
         if self.is_found:
             mlog.log('Dependency', mlog.bold(self.name), 'found:', mlog.green('YES'))
         else:


[FILE:492:sunos/patch-mesonbuild_compilers_c.py]
--- mesonbuild/compilers/c.py.orig	2018-08-25 08:05:50 UTC
+++ mesonbuild/compilers/c.py
@@ -163,8 +163,8 @@ class CCompiler(Compiler):
                 # Apple ld
                 return ['-Wl,-undefined,dynamic_lookup']
             else:
-                # GNU ld and LLVM lld
-                return ['-Wl,--allow-shlib-undefined']
+                # sun linker
+                return []
         elif self.id == 'msvc':
             # link.exe
             return ['/FORCE:UNRESOLVED']


[FILE:2705:sunos/patch-mesonbuild_compilers_compilers.py]
--- mesonbuild/compilers/compilers.py.orig	2018-07-10 20:59:44 UTC
+++ mesonbuild/compilers/compilers.py
@@ -161,7 +161,7 @@ apple_buildtype_linker_args = {'plain':
 gnulike_buildtype_linker_args = {'plain': [],
                                  'debug': [],
                                  'debugoptimized': [],
-                                 'release': ['-Wl,-O1'],
+                                 'release': [],
                                  'minsize': [],
                                  }
 
@@ -1034,19 +1034,6 @@ class Compiler:
             # linked against local libraries will fail to resolve them.
             args.append('-Wl,-z,origin')
         args.append('-Wl,-rpath,' + paths)
-        if get_compiler_is_linuxlike(self):
-            # Rpaths to use while linking must be absolute. These are not
-            # written to the binary. Needed only with GNU ld:
-            # https://sourceware.org/bugzilla/show_bug.cgi?id=16936
-            # Not needed on Windows or other platforms that don't use RPATH
-            # https://github.com/mesonbuild/meson/issues/1897
-            lpaths = ':'.join([os.path.join(build_dir, p) for p in rpath_paths])
-
-            # clang expands '-Wl,rpath-link,' to ['-rpath-link'] instead of ['-rpath-link','']
-            # This eats the next argument, which happens to be 'ldstdc++', causing link failures.
-            # We can dodge this problem by not adding any rpath_paths if the argument is empty.
-            if lpaths.strip() != '':
-                args += ['-Wl,-rpath-link,' + lpaths]
         return args
 
     def thread_flags(self, env):
@@ -1118,10 +1105,6 @@ def get_compiler_is_linuxlike(compiler):
 def get_compiler_uses_gnuld(c):
     # FIXME: Perhaps we should detect the linker in the environment?
     # FIXME: Assumes that *BSD use GNU ld, but they might start using lld soon
-    if (getattr(c, 'gcc_type', None) in (GCC_STANDARD, GCC_MINGW, GCC_CYGWIN)) or \
-       (getattr(c, 'clang_type', None) in (CLANG_STANDARD, CLANG_WIN)) or \
-       (getattr(c, 'icc_type', None) in (ICC_STANDARD, ICC_WIN)):
-        return True
     return False
 
 def get_largefile_args(compiler):
@@ -1189,11 +1172,6 @@ class GnuCompiler:
         self.defines = defines or {}
         self.base_options = ['b_pch', 'b_lto', 'b_pgo', 'b_sanitize', 'b_coverage',
                              'b_colorout', 'b_ndebug', 'b_staticpic']
-        if self.gcc_type == GCC_OSX:
-            self.base_options.append('b_bitcode')
-        else:
-            self.base_options.append('b_lundef')
-        self.base_options.append('b_asneeded')
         # All GCC backends can do assembly
         self.can_compile_suffixes.add('s')
 

