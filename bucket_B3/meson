# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		meson
VERSION=		1.9.1
KEYWORDS=		devel python
VARIANTS=		std v13
SDESC[std]=		High performance build system
SDESC[v13]=		High performance build system (py 3.13)
HOMEPAGE=		https://mesonbuild.com
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/9c/07/b48592d325cb86682829f05216e4efb2dc881762b8f1bafb48b57442307a
DISTFILE[1]=		meson-1.9.1-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[std]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY313
OPTIONS_STANDARD=	none
VOPTS[v13]=		PY313=ON

RUN_DEPENDS=		ninja:single:std

LICENSE=		APACHE20:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		APACHE20:stock
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/meson

PATCH_WRKSRC=		{{WRKSRC}}/{{PYTHON_SITELIBDIR}}

[PY313].USES_OFF=			python:v12,wheel
[PY313].USES_ON=			python:v13,wheel

pre-configure:
	${FIND} ${WRKSRC} -name "*.orig" -type f -delete

post-extract:
	${MKDIR} ${WRKSRC}
	${SETENV} AUTOPYTHON=${_PYTHON_VERSION} \
	pip install --verbose \
		--no-deps \
		--no-index \
		--no-compile \
		--progress-bar off \
		--root ${WRKSRC} \
		${DISTDIR}/${DIST_SUBDIR}/${DISTFILE_1:C/:.*//}
	# extract license terms
	${AWK} '/^from / {exit}; {print}' ${PATCH_WRKSRC}/mesonbuild/mesonmain.py > ${WRKDIR}/TERMS

do-install:
	${MKDIR} ${STAGEDIR}
	${MV} ${WRKSRC}${PREFIX} ${STAGEDIR}/
	(cd ${STAGEDIR} && ${PYTHON_CMD} -m compileall -d / . ||:)

[FILE:473:descriptions/desc.single]
Meson is a cross-platform build system designed to be both as fast and as
user friendly as possible. It supports many languages and compilers,
including GCC, Clang and Visual Studio. Its build definitions are written
in a simple non-turing complete DSL. The main design point of Meson is
that every moment a developer spends writing or debugging build
definitions is a second wasted.  So is every second spent waiting for the
build system to actually start compiling code.


[FILE:118:distinfo]
f824ab770c041a202f532f69e114c971918ed2daff7ea56583d80642564598d0      1030356 python-src/meson-1.9.1-py3-none-any.whl


[FILE:85:manifests/plist.single]
@comment rest is auto-generated
share/polkit-1/actions/com.mesonbuild.install.policy


[FILE:329:patches/patch-mesonbuild_cmake_toolchain.py]
--- mesonbuild/cmake/toolchain.py.orig	2025-08-24 17:28:31 UTC
+++ mesonbuild/cmake/toolchain.py
@@ -149,6 +149,7 @@ class CMakeToolchain:
             'linux': 'Linux',
             'windows': 'Windows',
             'freebsd': 'FreeBSD',
+            'midnightbsd': 'MidnightBSD',
             'darwin': 'Darwin',
         }
 


[FILE:683:patches/patch-mesonbuild_compilers_mixins_clike.py]
--- mesonbuild/compilers/mixins/clike.py.orig	2025-04-06 19:57:59 UTC
+++ mesonbuild/compilers/mixins/clike.py
@@ -73,7 +73,7 @@ class CLikeCompilerArgs(arglist.Compiler
         # This covers all ld.bfd, ld.gold, ld.gold, and xild on Linux, which
         # all act like (or are) gnu ld
         # TODO: this could probably be added to the DynamicLinker instead
-        if isinstance(self.compiler.linker, (GnuLikeDynamicLinkerMixin, SolarisDynamicLinker, CompCertDynamicLinker)):
+        if isinstance(self.compiler.linker, (GnuLikeDynamicLinkerMixin, CompCertDynamicLinker)):
             group_start = -1
             group_end = -1
             for i, each in enumerate(new):


[FILE:785:patches/patch-mesonbuild_compilers_mixins_gnu.py]
Do not default to -z ignore on SunOS, it breaks for example -fstack-protector.

--- mesonbuild/compilers/mixins/gnu.py.orig	2025-08-24 17:28:31 UTC
+++ mesonbuild/compilers/mixins/gnu.py
@@ -364,7 +364,7 @@ class GnuLikeCompiler(Compiler, metaclas
                                    'b_ndebug', 'b_staticpic', 'b_pie']}
         if not (self.info.is_windows() or self.info.is_cygwin() or self.info.is_openbsd()):
             self.base_options.add(OptionKey('b_lundef'))
-        if not self.info.is_windows() or self.info.is_cygwin():
+        if not (self.info.is_windows() or self.info.is_sunos()) or self.info.is_cygwin():
             self.base_options.add(OptionKey('b_asneeded'))
         if not self.info.is_hurd():
             self.base_options.add(OptionKey('b_sanitize'))


[FILE:407:patches/patch-mesonbuild_envconfig.py]
--- mesonbuild/envconfig.py.orig	2025-08-24 17:28:31 UTC
+++ mesonbuild/envconfig.py
@@ -354,7 +354,7 @@ class MachineInfo(HoldableObject):
 
     def is_freebsd(self) -> bool:
         """Machine is FreeBSD?"""
-        return self.system == 'freebsd'
+        return self.system == 'freebsd' or self.system == 'midnightbsd'
 
     def is_sunos(self) -> bool:
         """Machine is illumos or Solaris?"""


[FILE:1048:patches/patch-mesonbuild_linkers_linkers.py]
--- mesonbuild/linkers/linkers.py.orig	2025-08-24 17:28:31 UTC
+++ mesonbuild/linkers/linkers.py
@@ -687,7 +687,7 @@ class GnuLikeDynamicLinkerMixin(DynamicL
         return ['-pthread']
 
     def no_undefined_args(self) -> T.List[str]:
-        return self._apply_prefix('--no-undefined')
+        return []
 
     def fatal_warnings(self) -> T.List[str]:
         return self._apply_prefix('--fatal-warnings')
@@ -1488,7 +1488,12 @@ class SolarisDynamicLinker(PosixDynamicL
     def get_link_whole_for(self, args: T.List[str]) -> T.List[str]:
         if not args:
             return args
-        return self._apply_prefix('--whole-archive') + args + self._apply_prefix('--no-whole-archive')
+        result = [self.prefix_arg + '-z', self.prefix_arg + 'allextract']
+        for a in args:
+            result.append(a)
+        result.append(self.prefix_arg + '-z')
+        result.append(self.prefix_arg + 'defaultextract')
+        return result
 
     def get_pie_args(self) -> T.List[str]:
         # Available in Solaris 11.2 and later


[FILE:632:patches/patch-mesonbuild_modules_pkgconfig.py]
--- mesonbuild/modules/pkgconfig.py.orig	2025-08-24 17:28:31 UTC
+++ mesonbuild/modules/pkgconfig.py
@@ -716,7 +716,7 @@ class PkgConfigModule(NewExtensionModule
         pkgroot = pkgroot_name = kwargs['install_dir'] or default_install_dir
         if pkgroot is None:
             m = state.environment.machines.host
-            if m.is_freebsd():
+            if False:
                 pkgroot = os.path.join(_as_str(state.environment.coredata.optstore.get_value_for(OptionKey('prefix'))), 'libdata', 'pkgconfig')
                 pkgroot_name = os.path.join('{prefix}', 'libdata', 'pkgconfig')
             elif m.is_haiku():


[FILE:491:patches/patch-mesonbuild_scripts_depfixer.py]
--- mesonbuild/scripts/depfixer.py.orig	2025-04-06 19:57:59 UTC
+++ mesonbuild/scripts/depfixer.py
@@ -468,7 +468,7 @@ def fix_rpath(fname: str, rpath_dirs_to_
             return
         if isinstance(new_rpath, str):
             new_rpath = new_rpath.encode('utf8')
-        fix_elf(fname, rpath_dirs_to_remove, new_rpath, verbose)
+        # never adjust rpath (meson authors are idiots)
         return
     except SystemExit as e:
         if isinstance(e.code, int) and e.code == 0:


[FILE:25:files/special.mk]
stage-dir:
	# do nothing

