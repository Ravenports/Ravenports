# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-anyio
VERSION=		4.11.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Layer built on asyncio or trio libraries (3.12)
SDESC[v13]=		Layer built on asyncio or trio libraries (3.13)
HOMEPAGE=		https://pypi.org/project/anyio/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/15/b3/9b1a8074496371342ec1e796a96f99c82c945a339cd81a8e73de28b4cf9e
DISTFILE[1]=		anyio-4.11.0-py3-none-any.whl:main
DIST_SUBDIR=		python-src
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		anyio-4.11.0.dist-info

GENERATED=		yes

[PY312].RUN_DEPENDS_ON=			python-idna:single:v12
					python-sniffio:single:v12
					python-typing-extensions:single:v12
[PY312].USES_ON=			python:v12,wheel

[PY313].RUN_DEPENDS_ON=			python-idna:single:v13
					python-sniffio:single:v13
[PY313].USES_ON=			python:v13,wheel

[FILE:2092:descriptions/desc.single]
  :alt: Build Status
  :alt: Code Coverage
  :alt: Documentation
  :alt: Gitter chat

AnyIO is an asynchronous networking and concurrency library that works on
top of either asyncio_ or
Trio_. It implements Trio-like `structured concurrency`_ (SC) on top of
asyncio and works in harmony
with the native SC of Trio itself.

Applications and libraries written against AnyIO's API will run unmodified
on either asyncio_ or
Trio_. AnyIO can also be adopted into a library or application
incrementally â€“ bit by bit, no full
refactoring necessary. It will blend in with the native libraries of your
chosen backend.

To find out why you might want to use AnyIO's APIs instead of asyncio's,
you can read about it
[here].

Documentation
-------------

View full documentation at: https://anyio.readthedocs.io/

Features
--------

AnyIO offers the following functionality:

* Task groups (nurseries_ in trio terminology)
* High-level networking (TCP, UDP and UNIX sockets)

  * `Happy eyeballs`_ algorithm for TCP connections (more robust than that
of asyncio on Python
    3.8)
  * async/await style UDP sockets (unlike asyncio where you still have to
use Transports and
    Protocols)

* A versatile API for byte streams and object streams
* Inter-task synchronization and communication (locks, conditions, events,
semaphores, object
  streams)
* Worker threads
* Subprocesses
* Subinterpreter support for code parallelization (on Python 3.13 and
later)
* Asynchronous file I/O (using worker threads)
* Signal handling

AnyIO also comes with its own pytest_ plugin which also supports
asynchronous fixtures.
It even works with the popular Hypothesis_ library.

.. _asyncio: https://docs.python.org/3/library/asyncio.html
.. _Trio: https://github.com/python-trio/trio
.. _structured concurrency:
https://en.wikipedia.org/wiki/Structured_concurrency
.. _nurseries:
https://trio.readthedocs.io/en/stable/reference-core.html#nurseries-and-spawning
.. _Happy eyeballs: https://en.wikipedia.org/wiki/Happy_Eyeballs
.. _pytest: https://docs.pytest.org/en/latest/
.. _Hypothesis: https://hypothesis.works/


[FILE:119:distinfo]
0287e96f4d26d4149305414d4e3bc32f0dcd0862365a4bddea19d7a1ec38c4fc       109097 python-src/anyio-4.11.0-py3-none-any.whl

