# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-anyio
VERSION=		4.0.0
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Layer built on asyncio or trio libraries (3.10)
SDESC[v11]=		Layer built on asyncio or trio libraries (3.11)
HOMEPAGE=		none
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/36/55/ad4de788d84a630656ece71059665e01ca793c04294c463fd84132f40fe6
DISTFILE[1]=		anyio-4.0.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		anyio-4.0.0.dist-info

GENERATED=		yes

[PY310].RUN_DEPENDS_ON=			python-idna:single:py310
					python-sniffio:single:py310
					python-exceptiongroup:single:py310
[PY310].USES_ON=			python:py310,wheel

[PY311].RUN_DEPENDS_ON=			python-idna:single:v11
					python-sniffio:single:v11
[PY311].USES_ON=			python:v11,wheel

[FILE:1911:descriptions/desc.single]
  :alt: Build Status
  :alt: Code Coverage
  :alt: Documentation
  :alt: Gitter chat

AnyIO is an asynchronous networking and concurrency library that works on
top of either asyncio_ or
trio_. It implements trio-like `structured concurrency`_ (SC) on top of
asyncio and works in harmony
with the native SC of trio itself.

Applications and libraries written against AnyIO's API will run unmodified
on either asyncio_ or
trio_. AnyIO can also be adopted into a library or application
incrementally â€“ bit by bit, no full
refactoring necessary. It will blend in with the native libraries of your
chosen backend.

Documentation
-------------

View full documentation at: https://anyio.readthedocs.io/

Features
--------

AnyIO offers the following functionality:

* Task groups (nurseries_ in trio terminology)
* High-level networking (TCP, UDP and UNIX sockets)

  * `Happy eyeballs`_ algorithm for TCP connections (more robust than that
of asyncio on Python
    3.8)
  * async/await style UDP sockets (unlike asyncio where you still have to
use Transports and
    Protocols)

* A versatile API for byte streams and object streams
* Inter-task synchronization and communication (locks, conditions, events,
semaphores, object
  streams)
* Worker threads
* Subprocesses
* Asynchronous file I/O (using worker threads)
* Signal handling

AnyIO also comes with its own pytest_ plugin which also supports
asynchronous fixtures.
It even works with the popular Hypothesis_ library.

.. _asyncio: https://docs.python.org/3/library/asyncio.html
.. _trio: https://github.com/python-trio/trio
.. _structured concurrency:
https://en.wikipedia.org/wiki/Structured_concurrency
.. _nurseries:
https://trio.readthedocs.io/en/stable/reference-core.html#nurseries-and-spawning
.. _Happy eyeballs: https://en.wikipedia.org/wiki/Happy_Eyeballs
.. _pytest: https://docs.pytest.org/en/latest/
.. _Hypothesis: https://hypothesis.works/


[FILE:107:distinfo]
cfdb2b588b9fc25ede96d8db56ed50848b0b649dca3dd1df0b11f683bb9e0b5f        83122 anyio-4.0.0-py3-none-any.whl

