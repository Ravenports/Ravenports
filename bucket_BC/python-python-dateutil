# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-python-dateutil
VERSION=		2.7.2
KEYWORDS=		python devel
VARIANTS=		py27 py35 py36
SDESC[py35]=		Extensions to the standard Python datetime (PY 35)
SDESC[py36]=		Extensions to the standard Python datetime (PY 36)
SDESC[py27]=		Extensions to the standard Python datetime (PY 27)
HOMEPAGE=		https://dateutil.readthedocs.io
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/p/python-dateutil
DISTFILE[1]=		python-dateutil-2.7.2.tar.gz:main
DF_INDEX=		1
SPKGS[py35]=		single
SPKGS[py36]=		single
SPKGS[py27]=		single

OPTIONS_AVAILABLE=	PY27 PY35 PY36
OPTIONS_STANDARD=	none
VOPTS[py35]=		PY27=OFF PY35=ON PY36=OFF
VOPTS[py36]=		PY27=OFF PY35=OFF PY36=ON
VOPTS[py27]=		PY27=ON PY35=OFF PY36=OFF

DISTNAME=		python-dateutil-2.7.2

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"Dual License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

GENERATED=		yes

[PY35].BUILDRUN_DEPENDS_ON=		python-six:single:py35
					python-setuptools_scm:single:py35
[PY35].USES_ON=				python:py35

[PY36].BUILDRUN_DEPENDS_ON=		python-six:single:py36
					python-setuptools_scm:single:py36
[PY36].USES_ON=				python:py36

[PY27].BUILDRUN_DEPENDS_ON=		python-six:single:py27
					python-setuptools_scm:single:py27
[PY27].USES_ON=				python:py27

[FILE:3889:descriptions/desc.single]
dateutil - powerful extensions to datetime
==========================================

.. image::
https://img.shields.io/pypi/v/python-dateutil.svg?style=flat-square
    :target: https://pypi.org/project/python-dateutil/
    :alt: pypi version

.. image::
https://img.shields.io/travis/dateutil/dateutil/master.svg?style=flat-squar
e
    :target: https://travis-ci.org/dateutil/dateutil
    :alt: travis build status

.. image::
https://img.shields.io/appveyor/ci/dateutil/dateutil/master.svg?style=flat-
square
    :target: https://ci.appveyor.com/project/dateutil/dateutil
    :alt: appveyor build status

.. image::
https://codecov.io/github/dateutil/dateutil/coverage.svg?branch=master
    :target: https://codecov.io/github/dateutil/dateutil?branch=master
    :alt: Code coverage

.. image:: https://badges.gitter.im/dateutil/dateutil.svg
   :alt: Join the chat at https://gitter.im/dateutil/dateutil
   :target: https://gitter.im/dateutil/dateutil


The `dateutil` module provides powerful extensions to
the standard `datetime` module, available in Python.


Download
========
dateutil is available on PyPI
https://pypi.org/project/python-dateutil/

The documentation is hosted at:
https://dateutil.readthedocs.io/en/stable/

Code
====
The code and issue tracker are hosted on Github:
https://github.com/dateutil/dateutil/

Features
========

* Computing of relative deltas (next month, next year,
  next monday, last week of month, etc);
* Computing of relative deltas between two given
  date and/or datetime objects;
* Computing of dates based on very flexible recurrence rules,
  using a superset of the `iCalendar
<https://www.ietf.org/rfc/rfc2445.txt>`_
  specification. Parsing of RFC strings is supported as well.
* Generic parsing of dates in almost any string format;
* Timezone (tzinfo) implementations for tzfile(5) format
  files (/etc/localtime, /usr/share/zoneinfo, etc), TZ
  environment string (in all known formats), iCalendar
  format files, given ranges (with help from relative deltas),
  local machine timezone, fixed offset timezone, UTC timezone,
  and Windows registry-based time zones.
* Internal up-to-date world timezone information based on
  Olson's database.
* Computing of Easter Sunday dates for any given year,
  using Western, Orthodox or Julian algorithms;
* A comprehensive test suite.

Quick example
=============
Here's a snapshot, just to give an idea about the power of the
package. For more examples, look at the documentation.

Suppose you want to know how much time is left, in
years/months/days/etc, before the next easter happening on a
year with a Friday 13th in August, and you want to get today's
date out of the "date" unix system command. Here is the code:

.. code-block:: python3

    >>> from dateutil.relativedelta import *
    >>> from dateutil.easter import *
    >>> from dateutil.rrule import *
    >>> from dateutil.parser import *
    >>> from datetime import *
    >>> now = parse("Sat Oct 11 17:13:46 UTC 2003")
    >>> today = now.date()
    >>> year =
rrule(YEARLY,dtstart=now,bymonth=8,bymonthday=13,byweekday=FR)[0].year
    >>> rdelta = relativedelta(easter(year), today)
    >>> print("Today is: %s" % today)
    Today is: 2003-10-11
    >>> print("Year with next Aug 13th on a Friday is: %s" % year)
    Year with next Aug 13th on a Friday is: 2004
    >>> print("How far is the Easter of that year: %s" % rdelta)
    How far is the Easter of that year: relativedelta(months=+6)
    >>> print("And the Easter of that year is: %s" % (today+rdelta))
    And the Easter of that year is: 2004-04-11

Being exactly 6 months ahead was **really** a coincidence :)

Contributing
============

We welcome many types of contributions - bug reports, pull requests (code,
infrastructure or documentation fixes). For more information about how to
contribute to the project, see the ``CONTRIBUTING.md`` file in the
repository.


[FILE:107:distinfo]
9d8074be4c993fbe4947878ce593052f71dac82932a677d49194d8ce9778002e       298000 python-dateutil-2.7.2.tar.gz

