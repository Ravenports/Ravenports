# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		ravensys-uname
VERSION=		1.0
KEYWORDS=		raven sysutils
VARIANTS=		standard
SDESC[standard]=	Fake uname for raven-sysroot
HOMEPAGE=		none
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	none
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

LICENSE=		BSD2CLAUSE:single
LICENSE_FILE=		BSD2CLAUSE:{{FILESDIR}}/LICENSE
LICENSE_SCHEME=		solo

do-extract:
	${MKDIR} ${WRKSRC}
	${SED} -e 's|@OPSYS@|${OPSYS}|g' \
		-e 's|@ARCH@|${SET_ARCH}|g' \
		-e 's|@PLATFORM@|${SET_PLATFORM}|g' \
		-e 's|@RELEASE@|${OSREL}-RAVEN|g' \
		-e 's|@USERVER@|${OSVERSION}|g' \
		${FILESDIR}/uname.c.in > ${WRKSRC}/uname.c

do-build:
	(cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${CC} -o ravensys-uname uname.c ${CFLAGS})

do-install:
	${INSTALL_PROGRAM} ${WRKSRC}/ravensys-uname ${STAGEDIR}${PREFIX}/bin/

[FILE:50:descriptions/desc.single]
Fake uname for explicit use with ravenports jail.


[FILE:19:manifests/plist.single]
bin/ravensys-uname


[FILE:1862:files/LICENSE]
/*-
 * Copyright (c) 2002 Juli Mallett.
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */


[FILE:515:files/special.mk]
# add ARCH_STANDARD conditions as multiple arches per OPSYS
# become supported

.if ${OPSYS:MFreeBSD}
SET_ARCH=	amd64
SET_PLATFORM=	amd64
.elif ${OPSYS:MDragonFly}
SET_ARCH=	x86_64
SET_PLATFORM=	x86_64
.elif ${OPSYS:MNetBSD}
SET_ARCH=	amd64
SET_PLATFORM=	amd64
.elif ${OPSYS:MOpenBSD}
SET_ARCH=	amd64
SET_PLATFORM=	amd64
.elif ${OPSYS:MMacOS}
SET_ARCH=	x86_64
SET_PLATFORM=	x86_64
.elif ${OPSYS:MSunOS}
SET_ARCH=	x86_64	#check
SET_PLATFORM=	x86_64
.elif ${OPSYS:MLinux}
SET_ARCH=	x86_64
SET_PLATFORM=	x86_64
.endif


[FILE:2145:files/uname.c.in]
#ifndef __sun__
#include <err.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#ifdef __APPLE__
#define u_int	unsigned int
#endif

#define	MFLAG	0x01
#define	NFLAG	0x02
#define	PFLAG	0x04
#define	RFLAG	0x08
#define	SFLAG	0x10
#define	VFLAG	0x20
#define	IFLAG	0x40
#define	UFLAG	0x80

static void print_uname(u_int);
static void usage(void);

static const char *sysname  = "@OPSYS@";
static const char *arch     = "@ARCH@";
static const char *platform = "@PLATFORM@";
static const char *release  = "@RELEASE@";
static const char *uservers = "@USERVER@";
static const char *ident    = "GENERIC";
static const char *version  = "@OPSYS@ @RELEASE@ #0 Sat Jul 29 09:00:00 CDT 2017 root@octavia.unreal.systems:/usr/obj/usr/src/sys/GENERIC";
static const char *hostname = "octavia.unreal.systems";
static int space;

int
main(int argc, char *argv[])
{
	u_int flags;
	int ch;

	flags = 0;

	while ((ch = getopt(argc, argv, "aimnoprsUv")) != -1)
		switch(ch) {
		case 'a':
			flags |= (MFLAG | NFLAG | RFLAG | SFLAG | VFLAG);
			break;
		case 'i':
			flags |= IFLAG;
			break;
		case 'm':
			flags |= MFLAG;
			break;
		case 'n':
			flags |= NFLAG;
			break;
		case 'p':
			flags |= PFLAG;
			break;
		case 'r':
			flags |= RFLAG;
			break;
		case 's':
		case 'o':
			flags |= SFLAG;
			break;
		case 'U':
			flags |= UFLAG;
			break;
		case 'v':
			flags |= VFLAG;
			break;
		case '?':
		default:
			usage();
		}

	argc -= optind;
	argv += optind;

	if (argc)
		usage();

	if (!flags)
		flags |= SFLAG;

	print_uname(flags);
	exit(0);
}

#define	PRINT_FLAG(flags,flag,var)		\
	if ((flags & flag) == flag) {		\
		if (space)			\
			printf(" ");		\
		else				\
			space++;		\
		printf("%s", var);		\
	}

static void
print_uname(u_int flags)
{
	PRINT_FLAG(flags, SFLAG, sysname);
	PRINT_FLAG(flags, NFLAG, hostname);
	PRINT_FLAG(flags, RFLAG, release);
	PRINT_FLAG(flags, VFLAG, version);
	PRINT_FLAG(flags, MFLAG, platform);
	PRINT_FLAG(flags, PFLAG, arch);
	PRINT_FLAG(flags, IFLAG, ident);
	PRINT_FLAG(flags, UFLAG, uservers);
	printf("\n");
}

static void
usage(void)
{
	fprintf(stderr, "usage: uname [-aiKmnoprsUv]\n");
	exit(1);
}

