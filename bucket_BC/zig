# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		zig
VERSION=		0.4.0
KEYWORDS=		devel lang
VARIANTS=		standard
SDESC[standard]=	Programming language
HOMEPAGE=		https://ziglang.org/
CONTACT=		Tse_[tse@tse.gratis]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/ziglang:zig:0.4.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

ONLY_FOR_OPSYS=		freebsd dragonfly netbsd linux

BUILDRUN_DEPENDS=	llvm:single:standard
			clang:compiler:standard
			lld:single:standard
RUN_DEPENDS=		libcxx:primary:standard

USES=			cmake

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/zig
	rm -r        ${STAGEDIR}/construction

post-extract:
	${MKDIR} ${WRKSRC}/zig-cache
	${MKDIR} ${WRKSRC}/std/os/dragonfly
	${MV}    ${FILESDIR}/c_dragonfly.zig  ${WRKSRC}/std/c/dragonfly.zig
	${MV}    ${FILESDIR}/os_dragonfly.zig ${WRKSRC}/std/os/dragonfly.zig
	${MV}    ${FILESDIR}/errno.zig        ${WRKSRC}/std/os/dragonfly/
	# native_libc.txt needs fixing up with os-specific values
	# could use os-patches, but it's effectively the same, at-least until os testing!!
	# ${MV}    ${FILESDIR}/native_libc.txt  ${WRKSRC}/zig-cache/
	cat ${FILESDIR}/native_libc.txt|sed "s/DragonFly/`uname`/" > ${WRKSRC}/zig-cache/native_libc.txt

[FILE:94:descriptions/desc.single]
General purpose programming language designed for robustness, optimality, and maintainability


[FILE:103:distinfo]
e1094dff9259366402d506de0c1b28e8153bf571eabed04c3e20f7598149e6f0      8924757 ziglang-zig-0.4.0.tar.gz


[FILE:93359:manifests/plist.single]
bin/zig
lib/zig/include/
 __clang_cuda_builtin_vars.h
 __clang_cuda_cmath.h
 __clang_cuda_complex_builtins.h
 __clang_cuda_device_functions.h
 __clang_cuda_intrinsics.h
 __clang_cuda_libdevice_declares.h
 __clang_cuda_math_forward_declares.h
 __clang_cuda_runtime_wrapper.h
 __stddef_max_align_t.h
 __wmmintrin_aes.h
 __wmmintrin_pclmul.h
 adxintrin.h
 altivec.h
 ammintrin.h
 arm64intr.h
 arm_acle.h
 arm_fp16.h
 arm_neon.h
 armintr.h
 avx2intrin.h
 avx512bitalgintrin.h
 avx512bwintrin.h
 avx512cdintrin.h
 avx512dqintrin.h
 avx512erintrin.h
 avx512fintrin.h
 avx512ifmaintrin.h
 avx512ifmavlintrin.h
 avx512pfintrin.h
 avx512vbmi2intrin.h
 avx512vbmiintrin.h
 avx512vbmivlintrin.h
 avx512vlbitalgintrin.h
 avx512vlbwintrin.h
 avx512vlcdintrin.h
 avx512vldqintrin.h
 avx512vlintrin.h
 avx512vlvbmi2intrin.h
 avx512vlvnniintrin.h
 avx512vnniintrin.h
 avx512vpopcntdqintrin.h
 avx512vpopcntdqvlintrin.h
 avxintrin.h
 bmi2intrin.h
 bmiintrin.h
 cetintrin.h
 cldemoteintrin.h
 clflushoptintrin.h
 clwbintrin.h
 clzerointrin.h
 cpuid.h
 emmintrin.h
 f16cintrin.h
 float.h
 fma4intrin.h
 fmaintrin.h
 fxsrintrin.h
 gfniintrin.h
 htmintrin.h
 htmxlintrin.h
 ia32intrin.h
 immintrin.h
 intrin.h
 inttypes.h
 invpcidintrin.h
 iso646.h
 limits.h
 lwpintrin.h
 lzcntintrin.h
 mm3dnow.h
 mm_malloc.h
 mmintrin.h
 module.modulemap
 movdirintrin.h
 msa.h
 mwaitxintrin.h
 nmmintrin.h
 opencl-c.h
 pconfigintrin.h
 pkuintrin.h
 pmmintrin.h
 popcntintrin.h
 prfchwintrin.h
 ptwriteintrin.h
 rdseedintrin.h
 rtmintrin.h
 s390intrin.h
 sgxintrin.h
 shaintrin.h
 smmintrin.h
 stdalign.h
 stdarg.h
 stdatomic.h
 stdbool.h
 stddef.h
 stdint.h
 stdnoreturn.h
 tbmintrin.h
 tgmath.h
 tmmintrin.h
 unwind.h
 vadefs.h
 vaesintrin.h
 varargs.h
 vecintrin.h
 vpclmulqdqintrin.h
 waitpkgintrin.h
 wbnoinvdintrin.h
 wmmintrin.h
 x86intrin.h
 xmmintrin.h
 xopintrin.h
 xsavecintrin.h
 xsaveintrin.h
 xsaveoptintrin.h
 xsavesintrin.h
 xtestintrin.h
lib/zig/include/cuda_wrappers/
 algorithm
 complex
 new
lib/zig/libc/dummy/
 c.zig
 dl.zig
 m.zig
 pthread.zig
 rt.zig
lib/zig/libc/dummy/c/
 i386.zig
 x86_64.zig
lib/zig/libc/glibc/bits/
 byteswap.h
 endian.h
 floatn-common.h
 libc-header-start.h
 long-double.h
 pthreadtypes.h
 select.h
 signum-generic.h
 stat.h
 stdint-intn.h
 stdlib-bsearch.h
 time64.h
 timesize.h
 typesizes.h
 uintn-identity.h
 waitflags.h
 waitstatus.h
lib/zig/libc/glibc/bits/types/
 __sigset_t.h
 struct_sched_param.h
lib/zig/libc/glibc/csu/
 abi-note.S
 abi-tag.h
 elf-init.c
lib/zig/libc/glibc/debug/stack_chk_fail_local.c
lib/zig/libc/glibc/elf/elf.h
lib/zig/libc/glibc/include/
 alloca.h
 config.h
 dso_handle.h
 elf.h
 endian.h
 features.h
 libc-modules.h
 libc-pointer-arith.h
 libc-symbols.h
 pthread.h
 signal.h
 stap-probe.h
 stdc-predef.h
 stdlib.h
 syscall.h
lib/zig/libc/glibc/include/bits/
 cpu-set.h
 statx.h
 stdlib-float.h
 types.h
lib/zig/libc/glibc/include/bits/types/
 __locale_t.h
 clock_t.h
 clockid_t.h
 locale_t.h
 sig_atomic_t.h
 sigset_t.h
 struct_itimerspec.h
 struct_timespec.h
 struct_timeval.h
 struct_tm.h
 time_t.h
 timer_t.h
lib/zig/libc/glibc/include/gnu/stubs.h
lib/zig/libc/glibc/include/sys/
 cdefs.h
 select.h
 signal.h
 stat.h
 types.h
lib/zig/libc/glibc/io/
 fstat.c
 fstat64.c
 fstatat.c
 fstatat64.c
 lstat.c
 lstat64.c
 mknod.c
 mknodat.c
 stat.c
 stat64.c
lib/zig/libc/glibc/io/bits/statx.h
lib/zig/libc/glibc/io/sys/stat.h
lib/zig/libc/glibc/locale/bits/types/
 __locale_t.h
 locale_t.h
lib/zig/libc/glibc/misc/syscall.h
lib/zig/libc/glibc/misc/sys/
 cdefs.h
 select.h
lib/zig/libc/glibc/nptl/pthread_atfork.c
lib/zig/libc/glibc/posix/bits/
 cpu-set.h
 types.h
lib/zig/libc/glibc/posix/sys/types.h
lib/zig/libc/glibc/signal/signal.h
lib/zig/libc/glibc/signal/bits/types/
 sig_atomic_t.h
 sigset_t.h
lib/zig/libc/glibc/signal/sys/signal.h
lib/zig/libc/glibc/stdlib/
 alloca.h
 at_quick_exit.c
 atexit.c
 exit.h
 stdlib.h
lib/zig/libc/glibc/stdlib/bits/stdlib-float.h
lib/zig/libc/glibc/string/endian.h
lib/zig/libc/glibc/sysdeps/aarch64/
 crti.S
 crtn.S
 dl-sysdep.h
 start.S
 sysdep.h
lib/zig/libc/glibc/sysdeps/aarch64/bits/endian.h
lib/zig/libc/glibc/sysdeps/aarch64/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/alpha/
 crti.S
 crtn.S
 dl-dtprocnum.h
 dl-sysdep.h
 start.S
lib/zig/libc/glibc/sysdeps/alpha/bits/endian.h
lib/zig/libc/glibc/sysdeps/alpha/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/arm/
 crti.S
 crtn.S
 dl-sysdep.h
 start.S
 sysdep.h
lib/zig/libc/glibc/sysdeps/arm/bits/endian.h
lib/zig/libc/glibc/sysdeps/arm/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/generic/
 dl-dtprocnum.h
 dl-sysdep.h
 dwarf2.h
 libc-lock.h
 symbol-hacks.h
 sysdep.h
 tls.h
lib/zig/libc/glibc/sysdeps/generic/sys/syscall.h
lib/zig/libc/glibc/sysdeps/hppa/
 crti.S
 crtn.S
 start.S
 sysdep.h
lib/zig/libc/glibc/sysdeps/hppa/bits/endian.h
lib/zig/libc/glibc/sysdeps/hppa/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/htl/
 libc-lockP.h
 pthread.h
lib/zig/libc/glibc/sysdeps/htl/bits/
 pthread.h
 thread-shared-types.h
lib/zig/libc/glibc/sysdeps/i386/
 crti.S
 crtn.S
 start.S
 symbol-hacks.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/i386/htl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/ia64/
 crti.S
 crtn.S
 dl-dtprocnum.h
 dl-sysdep.h
 start.S
 sysdep.h
lib/zig/libc/glibc/sysdeps/ia64/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/init_array/
 crti.S
 crtn.S
lib/zig/libc/glibc/sysdeps/m68k/
 crti.S
 crtn.S
 start.S
 symbol-hacks.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/m68k/bits/endian.h
lib/zig/libc/glibc/sysdeps/m68k/coldfire/sysdep.h
lib/zig/libc/glibc/sysdeps/m68k/m680x0/sysdep.h
lib/zig/libc/glibc/sysdeps/m68k/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/mach/
 libc-lock.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/mach/hurd/
 dl-sysdep.h
 kernel-features.h
lib/zig/libc/glibc/sysdeps/mach/hurd/bits/
 stat.h
 typesizes.h
lib/zig/libc/glibc/sysdeps/mach/i386/sysdep.h
lib/zig/libc/glibc/sysdeps/mach/sys/syscall.h
lib/zig/libc/glibc/sysdeps/microblaze/
 crti.S
 crtn.S
 start.S
 sysdep.h
lib/zig/libc/glibc/sysdeps/microblaze/bits/endian.h
lib/zig/libc/glibc/sysdeps/microblaze/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/mips/
 dl-dtprocnum.h
 start.S
lib/zig/libc/glibc/sysdeps/mips/bits/endian.h
lib/zig/libc/glibc/sysdeps/mips/mips32/
 crti.S
 crtn.S
lib/zig/libc/glibc/sysdeps/mips/mips64/n32/
 crti.S
 crtn.S
lib/zig/libc/glibc/sysdeps/mips/mips64/n64/
 crti.S
 crtn.S
lib/zig/libc/glibc/sysdeps/mips/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/nptl/
 libc-lock.h
 libc-lockP.h
 pthread.h
lib/zig/libc/glibc/sysdeps/nptl/bits/
 pthreadtypes.h
 thread-shared-types.h
lib/zig/libc/glibc/sysdeps/powerpc/sysdep.h
lib/zig/libc/glibc/sysdeps/powerpc/bits/endian.h
lib/zig/libc/glibc/sysdeps/powerpc/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/powerpc/powerpc32/
 crti.S
 crtn.S
 dl-dtprocnum.h
 start.S
 symbol-hacks.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/powerpc/powerpc64/
 crti.S
 crtn.S
 dl-dtprocnum.h
 start.S
 sysdep.h
lib/zig/libc/glibc/sysdeps/riscv/start.S
lib/zig/libc/glibc/sysdeps/riscv/bits/endian.h
lib/zig/libc/glibc/sysdeps/riscv/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/s390/bits/endian.h
lib/zig/libc/glibc/sysdeps/s390/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/s390/s390-32/
 crti.S
 crtn.S
 dl-sysdep.h
 start.S
 symbol-hacks.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/s390/s390-64/
 crti.S
 crtn.S
 start.S
 sysdep.h
lib/zig/libc/glibc/sysdeps/sh/
 crti.S
 crtn.S
 start.S
 sysdep.h
lib/zig/libc/glibc/sysdeps/sh/bits/endian.h
lib/zig/libc/glibc/sysdeps/sh/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/sparc/
 crti.S
 crtn.S
 dl-dtprocnum.h
 dl-sysdep.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/sparc/bits/endian.h
lib/zig/libc/glibc/sysdeps/sparc/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/sparc/sparc32/start.S
lib/zig/libc/glibc/sysdeps/sparc/sparc64/start.S
lib/zig/libc/glibc/sysdeps/unix/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/alpha/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/arm/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/i386/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/mips/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/mips/mips32/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/mips/mips64/n32/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/mips/mips64/n64/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/powerpc/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sh/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/
 dl-sysdep.h
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/aarch64/
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/aarch64/sys/elf.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/alpha/
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/alpha/bits/
 stat.h
 typesizes.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/arm/
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/arm/sys/elf.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/bits/
 stat.h
 timex.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/generic/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/generic/bits/
 stat.h
 typesizes.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/hppa/
 kernel-features.h
 pthread.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/i386/
 dl-sysdep.h
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/ia64/
 dl-sysdep.h
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/ia64/bits/
 endian.h
 stat.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/include/bits/syscall.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/include/sys/timex.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/m68k/
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/m68k/bits/stat.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/m68k/coldfire/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/m68k/m680x0/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/microblaze/
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/microblaze/bits/stat.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/mips/kernel-features.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/mips/bits/stat.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/mips/mips32/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/mips/mips64/n32/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/mips/mips64/n64/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/powerpc/kernel-features.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/powerpc/bits/stat.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/powerpc/powerpc32/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/powerpc/powerpc64/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/riscv/
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/s390/kernel-features.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/s390/bits/
 stat.h
 typesizes.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/s390/s390-32/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/s390/s390-64/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/s390/sys/elf.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/sh/
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/sh/sh4/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/sparc/
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/sparc/bits/
 stat.h
 typesizes.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/sparc/sparc32/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/sparc/sparc64/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/sys/
 syscall.h
 timex.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/x86/bits/
 stat.h
 typesizes.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/x86/sys/elf.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/x86_64/
 kernel-features.h
 sysdep.h
lib/zig/libc/glibc/sysdeps/unix/sysv/linux/x86_64/x32/sysdep.h
lib/zig/libc/glibc/sysdeps/unix/x86_64/sysdep.h
lib/zig/libc/glibc/sysdeps/wordsize-32/divdi3-symbol-hacks.h
lib/zig/libc/glibc/sysdeps/x86/sysdep.h
lib/zig/libc/glibc/sysdeps/x86/bits/
 endian.h
 select.h
 wordsize.h
lib/zig/libc/glibc/sysdeps/x86/nptl/bits/pthreadtypes-arch.h
lib/zig/libc/glibc/sysdeps/x86_64/
 crti.S
 crtn.S
 start.S
 sysdep.h
lib/zig/libc/glibc/sysdeps/x86_64/x32/
 symbol-hacks.h
 sysdep.h
lib/zig/libc/glibc/time/bits/types/
 clock_t.h
 clockid_t.h
 struct_itimerspec.h
 struct_timespec.h
 struct_timeval.h
 struct_tm.h
 time_t.h
 timer_t.h
lib/zig/libc/include/aarch64-linux-any/asm/
 auxvec.h
 bitsperlong.h
 bpf_perf_event.h
 byteorder.h
 fcntl.h
 hwcap.h
 kvm.h
 kvm_para.h
 param.h
 perf_regs.h
 posix_types.h
 ptrace.h
 setup.h
 sigcontext.h
 siginfo.h
 signal.h
 stat.h
 statfs.h
 ucontext.h
 unistd.h
lib/zig/libc/include/aarch64-linux-gnu/
 fpu_control.h
 ieee754.h
lib/zig/libc/include/aarch64-linux-gnu/bits/
 endian.h
 fcntl.h
 fenv.h
 floatn.h
 fp-fast.h
 hwcap.h
 ipc.h
 link.h
 local_lim.h
 long-double.h
 procfs.h
 pthreadtypes-arch.h
 semaphore.h
 setjmp.h
 sigstack.h
 stat.h
 statfs.h
 typesizes.h
 wordsize.h
lib/zig/libc/include/aarch64-linux-gnu/gnu/
 lib-names-lp64.h
 lib-names.h
 stubs-lp64.h
 stubs.h
lib/zig/libc/include/aarch64-linux-gnu/sys/
 elf.h
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/aarch64-linux-musleabi/bfd_stdint.h
lib/zig/libc/include/aarch64-linux-musleabi/bits/
 alltypes.h
 endian.h
 fenv.h
 float.h
 hwcap.h
 ipc.h
 limits.h
 posix.h
 reg.h
 sem.h
 setjmp.h
 signal.h
 socket.h
 stat.h
 syscall.h
 user.h
lib/zig/libc/include/aarch64_be-linux-any/asm/
 auxvec.h
 bitsperlong.h
 bpf_perf_event.h
 byteorder.h
 fcntl.h
 hwcap.h
 kvm.h
 kvm_para.h
 param.h
 perf_regs.h
 posix_types.h
 ptrace.h
 setup.h
 sigcontext.h
 siginfo.h
 signal.h
 stat.h
 statfs.h
 ucontext.h
 unistd.h
lib/zig/libc/include/aarch64_be-linux-gnu/
 fpu_control.h
 ieee754.h
lib/zig/libc/include/aarch64_be-linux-gnu/bits/
 endian.h
 fcntl.h
 fenv.h
 floatn.h
 fp-fast.h
 hwcap.h
 ipc.h
 link.h
 local_lim.h
 long-double.h
 procfs.h
 pthreadtypes-arch.h
 semaphore.h
 setjmp.h
 sigstack.h
 stat.h
 statfs.h
 typesizes.h
 wordsize.h
lib/zig/libc/include/aarch64_be-linux-gnu/gnu/
 lib-names-lp64_be.h
 lib-names.h
 stubs-lp64_be.h
 stubs.h
lib/zig/libc/include/aarch64_be-linux-gnu/sys/
 elf.h
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/aarch64_be-linux-musl/bfd_stdint.h
lib/zig/libc/include/aarch64_be-linux-musl/bits/
 alltypes.h
 endian.h
 fenv.h
 float.h
 hwcap.h
 ipc.h
 limits.h
 posix.h
 reg.h
 sem.h
 setjmp.h
 signal.h
 socket.h
 stat.h
 syscall.h
 user.h
lib/zig/libc/include/any-linux-any/asm/
 a.out.h
 auxvec.h
 bitfield.h
 bitsperlong.h
 boot.h
 bootparam.h
 bootx.h
 bpf_perf_event.h
 break.h
 byteorder.h
 cachectl.h
 cputable.h
 debugreg.h
 e820.h
 eeh.h
 elf.h
 epapr_hcalls.h
 errno.h
 fcntl.h
 hw_breakpoint.h
 hwcap.h
 hwcap2.h
 inst.h
 ioctl.h
 ioctls.h
 ipcbuf.h
 ist.h
 kvm.h
 kvm_para.h
 kvm_perf.h
 ldt.h
 mce.h
 mman.h
 msgbuf.h
 msr.h
 mtrr.h
 nvram.h
 opal-prd.h
 param.h
 perf_event.h
 perf_regs.h
 poll.h
 posix_types.h
 posix_types_32.h
 posix_types_64.h
 posix_types_x32.h
 prctl.h
 processor-flags.h
 ps3fb.h
 ptrace-abi.h
 ptrace.h
 reg.h
 resource.h
 sembuf.h
 setup.h
 sgidefs.h
 shmbuf.h
 sigcontext.h
 sigcontext32.h
 siginfo.h
 signal.h
 socket.h
 sockios.h
 spu_info.h
 stat.h
 statfs.h
 svm.h
 swab.h
 syscalls.h
 sysmips.h
 termbits.h
 termios.h
 tm.h
 types.h
 ucontext.h
 unistd-common.h
 unistd-eabi.h
 unistd-oabi.h
 unistd.h
 unistd_32.h
 unistd_64.h
 unistd_x32.h
 vm86.h
 vmx.h
 vsyscall.h
lib/zig/libc/include/any-linux-any/asm-generic/
 auxvec.h
 bitsperlong.h
 bpf_perf_event.h
 errno-base.h
 errno.h
 fcntl.h
 hugetlb_encode.h
 int-l64.h
 int-ll64.h
 ioctl.h
 ioctls.h
 ipcbuf.h
 kvm_para.h
 mman-common.h
 mman.h
 msgbuf.h
 param.h
 poll.h
 posix_types.h
 resource.h
 sembuf.h
 setup.h
 shmbuf.h
 shmparam.h
 siginfo.h
 signal-defs.h
 signal.h
 socket.h
 sockios.h
 stat.h
 statfs.h
 swab.h
 termbits.h
 termios.h
 types.h
 ucontext.h
 unistd.h
lib/zig/libc/include/any-linux-any/linux/
 a.out.h
 acct.h
 adb.h
 adfs_fs.h
 affs_hardblocks.h
 agpgart.h
 aio_abi.h
 am437x-vpfe.h
 apm_bios.h
 arcfb.h
 arm_sdei.h
 aspeed-lpc-ctrl.h
 atalk.h
 atm.h
 atm_eni.h
 atm_he.h
 atm_idt77105.h
 atm_nicstar.h
 atm_tcp.h
 atm_zatm.h
 atmapi.h
 atmarp.h
 atmbr2684.h
 atmclip.h
 atmdev.h
 atmioc.h
 atmlec.h
 atmmpc.h
 atmppp.h
 atmsap.h
 atmsvc.h
 audit.h
 auto_dev-ioctl.h
 auto_fs.h
 auto_fs4.h
 auxvec.h
 ax25.h
 b1lli.h
 batadv_packet.h
 batman_adv.h
 baycom.h
 bcache.h
 bcm933xx_hcs.h
 bfs_fs.h
 binfmts.h
 blkpg.h
 blktrace_api.h
 blkzoned.h
 bpf.h
 bpf_common.h
 bpf_perf_event.h
 bpfilter.h
 bpqether.h
 bsg.h
 bt-bmc.h
 btf.h
 btrfs.h
 btrfs_tree.h
 can.h
 capability.h
 capi.h
 cciss_defs.h
 cciss_ioctl.h
 cdrom.h
 cec-funcs.h
 cec.h
 cgroupstats.h
 chio.h
 cm4000_cs.h
 cn_proc.h
 coda.h
 coda_psdev.h
 coff.h
 connector.h
 const.h
 coresight-stm.h
 cramfs_fs.h
 cryptouser.h
 cuda.h
 cyclades.h
 cycx_cfm.h
 dcbnl.h
 dccp.h
 devlink.h
 dlm.h
 dlm_device.h
 dlm_netlink.h
 dlm_plock.h
 dlmconstants.h
 dm-ioctl.h
 dm-log-userspace.h
 dma-buf.h
 dn.h
 dqblk_xfs.h
 edd.h
 efs_fs_sb.h
 elf-em.h
 elf-fdpic.h
 elf.h
 elfcore.h
 errno.h
 errqueue.h
 erspan.h
 ethtool.h
 eventpoll.h
 fadvise.h
 falloc.h
 fanotify.h
 fb.h
 fcntl.h
 fd.h
 fdreg.h
 fib_rules.h
 fiemap.h
 filter.h
 firewire-cdev.h
 firewire-constants.h
 flat.h
 fou.h
 fpga-dfl.h
 fs.h
 fsi.h
 fsl_hypervisor.h
 fsmap.h
 fuse.h
 futex.h
 gameport.h
 gen_stats.h
 genetlink.h
 gfs2_ondisk.h
 gigaset_dev.h
 gpio.h
 gsmmux.h
 gtp.h
 hash_info.h
 hdlc.h
 hdlcdrv.h
 hdreg.h
 hid.h
 hiddev.h
 hidraw.h
 hpet.h
 hsr_netlink.h
 hw_breakpoint.h
 hyperv.h
 hysdn_if.h
 i2c-dev.h
 i2c.h
 i2o-dev.h
 i8k.h
 icmp.h
 icmpv6.h
 if.h
 if_addr.h
 if_addrlabel.h
 if_alg.h
 if_arcnet.h
 if_arp.h
 if_bonding.h
 if_bridge.h
 if_cablemodem.h
 if_eql.h
 if_ether.h
 if_fc.h
 if_fddi.h
 if_frad.h
 if_hippi.h
 if_infiniband.h
 if_link.h
 if_ltalk.h
 if_macsec.h
 if_packet.h
 if_phonet.h
 if_plip.h
 if_ppp.h
 if_pppol2tp.h
 if_pppox.h
 if_slip.h
 if_team.h
 if_tun.h
 if_tunnel.h
 if_vlan.h
 if_x25.h
 if_xdp.h
 ife.h
 igmp.h
 ila.h
 in.h
 in6.h
 in_route.h
 inet_diag.h
 inotify.h
 input-event-codes.h
 input.h
 ioctl.h
 ip.h
 ip6_tunnel.h
 ip_vs.h
 ipc.h
 ipmi.h
 ipmi_bmc.h
 ipmi_msgdefs.h
 ipsec.h
 ipv6.h
 ipv6_route.h
 ipx.h
 irqnr.h
 isdn.h
 isdn_divertif.h
 isdn_ppp.h
 isdnif.h
 iso_fs.h
 ivtv.h
 ivtvfb.h
 jffs2.h
 joystick.h
 kcm.h
 kcmp.h
 kcov.h
 kd.h
 kdev_t.h
 kernel-page-flags.h
 kernel.h
 kernelcapi.h
 kexec.h
 keyboard.h
 keyctl.h
 kfd_ioctl.h
 kvm.h
 kvm_para.h
 l2tp.h
 libc-compat.h
 lightnvm.h
 limits.h
 lirc.h
 llc.h
 loop.h
 lp.h
 lwtunnel.h
 magic.h
 major.h
 map_to_7segment.h
 matroxfb.h
 max2175.h
 mdio.h
 media-bus-format.h
 media.h
 mei.h
 membarrier.h
 memfd.h
 mempolicy.h
 meye.h
 mic_common.h
 mic_ioctl.h
 mii.h
 minix_fs.h
 mman.h
 mmtimer.h
 module.h
 mpls.h
 mpls_iptunnel.h
 mqueue.h
 mroute.h
 mroute6.h
 msdos_fs.h
 msg.h
 mtio.h
 n_r3964.h
 nbd-netlink.h
 nbd.h
 ncsi.h
 ndctl.h
 neighbour.h
 net.h
 net_dropmon.h
 net_namespace.h
 net_tstamp.h
 netconf.h
 netdevice.h
 netfilter.h
 netfilter_arp.h
 netfilter_bridge.h
 netfilter_decnet.h
 netfilter_ipv4.h
 netfilter_ipv6.h
 netlink.h
 netlink_diag.h
 netrom.h
 nfc.h
 nfs.h
 nfs2.h
 nfs3.h
 nfs4.h
 nfs4_mount.h
 nfs_fs.h
 nfs_idmap.h
 nfs_mount.h
 nfsacl.h
 nilfs2_api.h
 nilfs2_ondisk.h
 nl80211.h
 nsfs.h
 nubus.h
 nvme_ioctl.h
 nvram.h
 omap3isp.h
 omapfb.h
 oom.h
 openvswitch.h
 packet_diag.h
 param.h
 parport.h
 patchkey.h
 pci.h
 pci_regs.h
 pcitest.h
 perf_event.h
 personality.h
 pfkeyv2.h
 pg.h
 phantom.h
 phonet.h
 pkt_cls.h
 pkt_sched.h
 pktcdvd.h
 pmu.h
 poll.h
 posix_acl.h
 posix_acl_xattr.h
 posix_types.h
 ppdev.h
 ppp-comp.h
 ppp-ioctl.h
 ppp_defs.h
 pps.h
 pr.h
 prctl.h
 psample.h
 psci.h
 psp-sev.h
 ptp_clock.h
 ptrace.h
 qemu_fw_cfg.h
 qnx4_fs.h
 qnxtypes.h
 qrtr.h
 quota.h
 radeonfb.h
 random.h
 raw.h
 rds.h
 reboot.h
 reiserfs_fs.h
 reiserfs_xattr.h
 resource.h
 rfkill.h
 rio_cm_cdev.h
 rio_mport_cdev.h
 romfs_fs.h
 rose.h
 route.h
 rpmsg.h
 rseq.h
 rtc.h
 rtnetlink.h
 rxrpc.h
 scc.h
 sched.h
 scif_ioctl.h
 screen_info.h
 sctp.h
 sdla.h
 seccomp.h
 securebits.h
 sed-opal.h
 seg6.h
 seg6_genl.h
 seg6_hmac.h
 seg6_iptunnel.h
 seg6_local.h
 selinux_netlink.h
 sem.h
 serial.h
 serial_core.h
 serial_reg.h
 serio.h
 shm.h
 signal.h
 signalfd.h
 smc.h
 smc_diag.h
 smiapp.h
 snmp.h
 sock_diag.h
 socket.h
 sockios.h
 sonet.h
 sonypi.h
 sound.h
 soundcard.h
 stat.h
 stddef.h
 stm.h
 string.h
 suspend_ioctls.h
 swab.h
 switchtec_ioctl.h
 sync_file.h
 synclink.h
 sysctl.h
 sysinfo.h
 target_core_user.h
 taskstats.h
 tcp.h
 tcp_metrics.h
 tee.h
 termios.h
 thermal.h
 time.h
 timerfd.h
 times.h
 timex.h
 tiocl.h
 tipc.h
 tipc_config.h
 tipc_netlink.h
 tipc_sockets_diag.h
 tls.h
 toshiba.h
 tty.h
 tty_flags.h
 types.h
 udf_fs_i.h
 udp.h
 uhid.h
 uinput.h
 uio.h
 uleds.h
 ultrasound.h
 un.h
 unistd.h
 unix_diag.h
 usbdevice_fs.h
 usbip.h
 userfaultfd.h
 userio.h
 utime.h
 utsname.h
 uuid.h
 uvcvideo.h
 v4l2-common.h
 v4l2-controls.h
 v4l2-dv-timings.h
 v4l2-mediabus.h
 v4l2-subdev.h
 vbox_err.h
 vbox_vmmdev_types.h
 vboxguest.h
 version.h
 veth.h
 vfio.h
 vfio_ccw.h
 vhost.h
 videodev2.h
 virtio_9p.h
 virtio_balloon.h
 virtio_blk.h
 virtio_config.h
 virtio_console.h
 virtio_crypto.h
 virtio_gpu.h
 virtio_ids.h
 virtio_input.h
 virtio_mmio.h
 virtio_net.h
 virtio_pci.h
 virtio_ring.h
 virtio_rng.h
 virtio_scsi.h
 virtio_types.h
 virtio_vsock.h
 vm_sockets.h
 vm_sockets_diag.h
 vmcore.h
 vsockmon.h
 vt.h
 vtpm_proxy.h
 wait.h
 wanrouter.h
 watchdog.h
 wimax.h
 wireless.h
 wmi.h
 x25.h
 xattr.h
 xfrm.h
 xilinx-v4l2-controls.h
 zorro.h
 zorro_ids.h
lib/zig/libc/include/any-linux-any/linux/android/binder.h
lib/zig/libc/include/any-linux-any/linux/byteorder/
 big_endian.h
 little_endian.h
lib/zig/libc/include/any-linux-any/linux/caif/
 caif_socket.h
 if_caif.h
lib/zig/libc/include/any-linux-any/linux/can/
 bcm.h
 error.h
 gw.h
 netlink.h
 raw.h
 vxcan.h
lib/zig/libc/include/any-linux-any/linux/cifs/cifs_mount.h
lib/zig/libc/include/any-linux-any/linux/dvb/
 audio.h
 ca.h
 dmx.h
 frontend.h
 net.h
 osd.h
 version.h
 video.h
lib/zig/libc/include/any-linux-any/linux/genwqe/genwqe_card.h
lib/zig/libc/include/any-linux-any/linux/hdlc/ioctl.h
lib/zig/libc/include/any-linux-any/linux/hsi/
 cs-protocol.h
 hsi_char.h
lib/zig/libc/include/any-linux-any/linux/iio/
 events.h
 types.h
lib/zig/libc/include/any-linux-any/linux/isdn/capicmd.h
lib/zig/libc/include/any-linux-any/linux/mmc/ioctl.h
lib/zig/libc/include/any-linux-any/linux/netfilter/
 nf_conntrack_common.h
 nf_conntrack_ftp.h
 nf_conntrack_sctp.h
 nf_conntrack_tcp.h
 nf_conntrack_tuple_common.h
 nf_log.h
 nf_nat.h
 nf_tables.h
 nf_tables_compat.h
 nfnetlink.h
 nfnetlink_acct.h
 nfnetlink_compat.h
 nfnetlink_conntrack.h
 nfnetlink_cthelper.h
 nfnetlink_cttimeout.h
 nfnetlink_log.h
 nfnetlink_osf.h
 nfnetlink_queue.h
 x_tables.h
 xt_AUDIT.h
 xt_CHECKSUM.h
 xt_CLASSIFY.h
 xt_CONNSECMARK.h
 xt_CT.h
 xt_HMARK.h
 xt_IDLETIMER.h
 xt_LED.h
 xt_LOG.h
 xt_NFLOG.h
 xt_NFQUEUE.h
 xt_SECMARK.h
 xt_SYNPROXY.h
 xt_TCPOPTSTRIP.h
 xt_TEE.h
 xt_TPROXY.h
 xt_addrtype.h
 xt_bpf.h
 xt_cgroup.h
 xt_cluster.h
 xt_comment.h
 xt_connbytes.h
 xt_connlabel.h
 xt_connlimit.h
 xt_connmark.h
 xt_conntrack.h
 xt_cpu.h
 xt_dccp.h
 xt_devgroup.h
 xt_dscp.h
 xt_ecn.h
 xt_esp.h
 xt_hashlimit.h
 xt_helper.h
 xt_ipcomp.h
 xt_iprange.h
 xt_ipvs.h
 xt_l2tp.h
 xt_length.h
 xt_limit.h
 xt_mac.h
 xt_mark.h
 xt_multiport.h
 xt_nfacct.h
 xt_osf.h
 xt_owner.h
 xt_physdev.h
 xt_pkttype.h
 xt_policy.h
 xt_quota.h
 xt_rateest.h
 xt_realm.h
 xt_recent.h
 xt_rpfilter.h
 xt_sctp.h
 xt_set.h
 xt_socket.h
 xt_state.h
 xt_statistic.h
 xt_string.h
 xt_tcpmss.h
 xt_tcpudp.h
 xt_time.h
 xt_u32.h
lib/zig/libc/include/any-linux-any/linux/netfilter/ipset/
 ip_set.h
 ip_set_bitmap.h
 ip_set_hash.h
 ip_set_list.h
lib/zig/libc/include/any-linux-any/linux/netfilter_arp/
 arp_tables.h
 arpt_mangle.h
lib/zig/libc/include/any-linux-any/linux/netfilter_bridge/
 ebt_802_3.h
 ebt_among.h
 ebt_arp.h
 ebt_arpreply.h
 ebt_ip.h
 ebt_ip6.h
 ebt_limit.h
 ebt_log.h
 ebt_mark_m.h
 ebt_mark_t.h
 ebt_nat.h
 ebt_nflog.h
 ebt_pkttype.h
 ebt_redirect.h
 ebt_stp.h
 ebt_vlan.h
 ebtables.h
lib/zig/libc/include/any-linux-any/linux/netfilter_ipv4/
 ip_tables.h
 ipt_CLUSTERIP.h
 ipt_LOG.h
 ipt_REJECT.h
 ipt_ah.h
 ipt_ecn.h
 ipt_ttl.h
lib/zig/libc/include/any-linux-any/linux/netfilter_ipv6/
 ip6_tables.h
 ip6t_LOG.h
 ip6t_NPT.h
 ip6t_REJECT.h
 ip6t_ah.h
 ip6t_frag.h
 ip6t_hl.h
 ip6t_ipv6header.h
 ip6t_mh.h
 ip6t_opts.h
 ip6t_rt.h
 ip6t_srh.h
lib/zig/libc/include/any-linux-any/linux/nfsd/
 cld.h
 debug.h
 export.h
 nfsfh.h
 stats.h
lib/zig/libc/include/any-linux-any/linux/raid/
 md_p.h
 md_u.h
lib/zig/libc/include/any-linux-any/linux/sched/types.h
lib/zig/libc/include/any-linux-any/linux/spi/spidev.h
lib/zig/libc/include/any-linux-any/linux/sunrpc/debug.h
lib/zig/libc/include/any-linux-any/linux/tc_act/
 tc_bpf.h
 tc_connmark.h
 tc_csum.h
 tc_defact.h
 tc_gact.h
 tc_ife.h
 tc_ipt.h
 tc_mirred.h
 tc_nat.h
 tc_pedit.h
 tc_sample.h
 tc_skbedit.h
 tc_skbmod.h
 tc_tunnel_key.h
 tc_vlan.h
lib/zig/libc/include/any-linux-any/linux/tc_ematch/
 tc_em_cmp.h
 tc_em_ipt.h
 tc_em_meta.h
 tc_em_nbyte.h
 tc_em_text.h
lib/zig/libc/include/any-linux-any/linux/usb/
 audio.h
 cdc-wdm.h
 cdc.h
 ch11.h
 ch9.h
 charger.h
 functionfs.h
 g_printer.h
 g_uvc.h
 gadgetfs.h
 midi.h
 tmc.h
 video.h
lib/zig/libc/include/any-linux-any/linux/wimax/i2400m.h
lib/zig/libc/include/arm-linux-any/asm/
 fcntl.h
 ioctls.h
 mman.h
 statfs.h
 swab.h
 types.h
lib/zig/libc/include/arm-linux-gnueabi/fpu_control.h
lib/zig/libc/include/arm-linux-gnueabi/bits/
 endian.h
 fcntl.h
 fenv.h
 floatn.h
 hwcap.h
 link.h
 long-double.h
 procfs-id.h
 procfs.h
 pthreadtypes-arch.h
 semaphore.h
 setjmp.h
 shmlba.h
 stat.h
 wordsize.h
lib/zig/libc/include/arm-linux-gnueabi/gnu/
 lib-names.h
 stubs.h
lib/zig/libc/include/arm-linux-gnueabi/sys/
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/arm-linux-gnueabihf/fpu_control.h
lib/zig/libc/include/arm-linux-gnueabihf/bits/
 endian.h
 fcntl.h
 fenv.h
 floatn.h
 hwcap.h
 link.h
 long-double.h
 procfs-id.h
 procfs.h
 pthreadtypes-arch.h
 semaphore.h
 setjmp.h
 shmlba.h
 stat.h
 wordsize.h
lib/zig/libc/include/arm-linux-gnueabihf/gnu/
 lib-names.h
 stubs.h
lib/zig/libc/include/arm-linux-gnueabihf/sys/
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/arm-linux-musleabi/
 bfd.h
 bfd_stdint.h
lib/zig/libc/include/arm-linux-musleabi/bits/
 fcntl.h
 hwcap.h
 ioctl_fix.h
 msg.h
 ptrace.h
 shm.h
 stdint.h
lib/zig/libc/include/arm-linux-musleabihf/
 bfd.h
 bfd_stdint.h
lib/zig/libc/include/arm-linux-musleabihf/bits/
 fcntl.h
 hwcap.h
 ioctl_fix.h
 msg.h
 ptrace.h
 shm.h
 stdint.h
lib/zig/libc/include/armeb-linux-any/asm/
 fcntl.h
 ioctls.h
 mman.h
 statfs.h
 swab.h
 types.h
lib/zig/libc/include/armeb-linux-gnueabi/fpu_control.h
lib/zig/libc/include/armeb-linux-gnueabi/bits/
 endian.h
 fcntl.h
 fenv.h
 floatn.h
 hwcap.h
 link.h
 long-double.h
 procfs-id.h
 procfs.h
 pthreadtypes-arch.h
 semaphore.h
 setjmp.h
 shmlba.h
 stat.h
 wordsize.h
lib/zig/libc/include/armeb-linux-gnueabi/gnu/
 lib-names.h
 stubs.h
lib/zig/libc/include/armeb-linux-gnueabi/sys/
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/armeb-linux-gnueabihf/fpu_control.h
lib/zig/libc/include/armeb-linux-gnueabihf/bits/
 endian.h
 fcntl.h
 fenv.h
 floatn.h
 hwcap.h
 link.h
 long-double.h
 procfs-id.h
 procfs.h
 pthreadtypes-arch.h
 semaphore.h
 setjmp.h
 shmlba.h
 stat.h
 wordsize.h
lib/zig/libc/include/armeb-linux-gnueabihf/gnu/
 lib-names.h
 stubs.h
lib/zig/libc/include/armeb-linux-gnueabihf/sys/
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/armeb-linux-musleabi/
 bfd.h
 bfd_stdint.h
lib/zig/libc/include/armeb-linux-musleabi/bits/
 fcntl.h
 hwcap.h
 ioctl_fix.h
 msg.h
 ptrace.h
 shm.h
 stdint.h
lib/zig/libc/include/armeb-linux-musleabihf/
 bfd.h
 bfd_stdint.h
lib/zig/libc/include/armeb-linux-musleabihf/bits/
 fcntl.h
 hwcap.h
 ioctl_fix.h
 msg.h
 ptrace.h
 shm.h
 stdint.h
lib/zig/libc/include/generic-glibc/
 a.out.h
 aio.h
 aliases.h
 alloca.h
 ar.h
 argp.h
 argz.h
 assert.h
 byteswap.h
 complex.h
 cpio.h
 crypt.h
 ctype.h
 dirent.h
 dlfcn.h
 elf.h
 endian.h
 envz.h
 err.h
 errno.h
 error.h
 execinfo.h
 fcntl.h
 features.h
 fenv.h
 fmtmsg.h
 fnmatch.h
 fpregdef.h
 fpu_control.h
 fstab.h
 fts.h
 ftw.h
 gconv.h
 getopt.h
 glob.h
 gnu-versions.h
 grp.h
 gshadow.h
 iconv.h
 ieee754.h
 ifaddrs.h
 inttypes.h
 langinfo.h
 lastlog.h
 libgen.h
 libintl.h
 limits.h
 link.h
 locale.h
 malloc.h
 math.h
 mcheck.h
 memory.h
 mntent.h
 monetary.h
 mqueue.h
 netdb.h
 nl_types.h
 nss.h
 obstack.h
 paths.h
 poll.h
 printf.h
 proc_service.h
 pthread.h
 pty.h
 pwd.h
 re_comp.h
 regdef.h
 regex.h
 regexp.h
 resolv.h
 sched.h
 search.h
 semaphore.h
 setjmp.h
 sgidefs.h
 sgtty.h
 shadow.h
 signal.h
 spawn.h
 stab.h
 stdc-predef.h
 stdint.h
 stdio.h
 stdio_ext.h
 stdlib.h
 string.h
 strings.h
 stropts.h
 syscall.h
 sysexits.h
 syslog.h
 tar.h
 termio.h
 termios.h
 tgmath.h
 thread_db.h
 threads.h
 time.h
 ttyent.h
 uchar.h
 ucontext.h
 ulimit.h
 unistd.h
 utime.h
 utmp.h
 utmpx.h
 values.h
 wait.h
 wchar.h
 wctype.h
 wordexp.h
lib/zig/libc/include/generic-glibc/arpa/
 ftp.h
 inet.h
 nameser.h
 nameser_compat.h
 telnet.h
 tftp.h
lib/zig/libc/include/generic-glibc/bits/
 a.out.h
 argp-ldbl.h
 byteswap.h
 cmathcalls.h
 confname.h
 cpu-set.h
 dirent.h
 dlfcn.h
 elfclass.h
 endian.h
 environments.h
 epoll.h
 err-ldbl.h
 errno.h
 error-ldbl.h
 error.h
 eventfd.h
 fcntl-linux.h
 fcntl.h
 fcntl2.h
 fenv.h
 fenvinline.h
 floatn-common.h
 floatn.h
 flt-eval-method.h
 fp-fast.h
 fp-logb.h
 getopt_core.h
 getopt_ext.h
 getopt_posix.h
 hwcap.h
 in.h
 indirect-return.h
 initspin.h
 inotify.h
 ioctl-types.h
 ioctls.h
 ipc.h
 ipctypes.h
 iscanonical.h
 libc-header-start.h
 libm-simd-decl-stubs.h
 link.h
 local_lim.h
 locale.h
 long-double.h
 math-finite.h
 math-vector-fortran.h
 math-vector.h
 mathcalls-helper-functions.h
 mathcalls-narrow.h
 mathcalls.h
 mathdef.h
 mathinline.h
 mman-linux.h
 mman-map-flags-generic.h
 mman-shared.h
 mman.h
 monetary-ldbl.h
 mqueue.h
 mqueue2.h
 msq-pad.h
 msq.h
 netdb.h
 param.h
 poll.h
 poll2.h
 posix1_lim.h
 posix2_lim.h
 posix_opt.h
 ppc.h
 printf-ldbl.h
 procfs-extra.h
 procfs-id.h
 procfs-prregset.h
 procfs.h
 pthreadtypes-arch.h
 pthreadtypes.h
 ptrace-shared.h
 resource.h
 sched.h
 select.h
 select2.h
 sem-pad.h
 sem.h
 semaphore.h
 setjmp.h
 setjmp2.h
 shm-pad.h
 shm.h
 shmlba.h
 sigaction.h
 sigcontext.h
 sigevent-consts.h
 siginfo-arch.h
 siginfo-consts-arch.h
 siginfo-consts.h
 signalfd.h
 signum-generic.h
 signum.h
 sigstack.h
 sigthread.h
 sockaddr.h
 socket.h
 socket2.h
 socket_type.h
 ss_flags.h
 stab.def
 stat.h
 statfs.h
 statvfs.h
 statx.h
 stdint-intn.h
 stdint-uintn.h
 stdio-ldbl.h
 stdio.h
 stdio2.h
 stdio_lim.h
 stdlib-bsearch.h
 stdlib-float.h
 stdlib-ldbl.h
 stdlib.h
 string_fortified.h
 strings_fortified.h
 stropts.h
 sys_errlist.h
 syscall.h
 sysctl.h
 syslog-ldbl.h
 syslog-path.h
 syslog.h
 sysmacros.h
 termios-baud.h
 termios-c_cc.h
 termios-c_cflag.h
 termios-c_iflag.h
 termios-c_lflag.h
 termios-c_oflag.h
 termios-misc.h
 termios-struct.h
 termios-tcflow.h
 termios.h
 thread-shared-types.h
 time.h
 time64.h
 timerfd.h
 timesize.h
 timex.h
 types.h
 typesizes.h
 uintn-identity.h
 uio-ext.h
 uio_lim.h
 unistd.h
 unistd_ext.h
 utmp.h
 utmpx.h
 utsname.h
 waitflags.h
 waitstatus.h
 wchar-ldbl.h
 wchar.h
 wchar2.h
 wctype-wchar.h
 wordsize.h
 xopen_lim.h
 xtitypes.h
lib/zig/libc/include/generic-glibc/bits/types/
 FILE.h
 __FILE.h
 __fpos64_t.h
 __fpos_t.h
 __locale_t.h
 __mbstate_t.h
 __sigset_t.h
 __sigval_t.h
 clock_t.h
 clockid_t.h
 cookie_io_functions_t.h
 error_t.h
 locale_t.h
 mbstate_t.h
 res_state.h
 sig_atomic_t.h
 sigevent_t.h
 siginfo_t.h
 sigset_t.h
 sigval_t.h
 stack_t.h
 struct_FILE.h
 struct_iovec.h
 struct_itimerspec.h
 struct_osockaddr.h
 struct_rusage.h
 struct_sched_param.h
 struct_sigstack.h
 struct_timespec.h
 struct_timeval.h
 struct_tm.h
 time_t.h
 timer_t.h
 wint_t.h
lib/zig/libc/include/generic-glibc/gnu/
 lib-names-32.h
 lib-names-hard.h
 lib-names-n32_hard.h
 lib-names-n64_hard.h
 lib-names-o32_hard.h
 lib-names-soft.h
 lib-names.h
 libc-version.h
 stubs-32.h
 stubs-hard.h
 stubs-n32_hard.h
 stubs-n64_hard.h
 stubs-o32_hard.h
 stubs-soft.h
 stubs.h
lib/zig/libc/include/generic-glibc/net/
 ethernet.h
 if.h
 if_arp.h
 if_packet.h
 if_ppp.h
 if_shaper.h
 if_slip.h
 ppp-comp.h
 ppp_defs.h
 route.h
lib/zig/libc/include/generic-glibc/netash/ash.h
lib/zig/libc/include/generic-glibc/netatalk/at.h
lib/zig/libc/include/generic-glibc/netax25/ax25.h
lib/zig/libc/include/generic-glibc/neteconet/ec.h
lib/zig/libc/include/generic-glibc/netinet/
 ether.h
 icmp6.h
 if_ether.h
 if_fddi.h
 if_tr.h
 igmp.h
 in.h
 in_systm.h
 ip.h
 ip6.h
 ip_icmp.h
 tcp.h
 udp.h
lib/zig/libc/include/generic-glibc/netipx/ipx.h
lib/zig/libc/include/generic-glibc/netiucv/iucv.h
lib/zig/libc/include/generic-glibc/netpacket/packet.h
lib/zig/libc/include/generic-glibc/netrom/netrom.h
lib/zig/libc/include/generic-glibc/netrose/rose.h
lib/zig/libc/include/generic-glibc/nfs/nfs.h
lib/zig/libc/include/generic-glibc/protocols/
 routed.h
 rwhod.h
 talkd.h
 timed.h
lib/zig/libc/include/generic-glibc/rpc/netdb.h
lib/zig/libc/include/generic-glibc/scsi/
 scsi.h
 scsi_ioctl.h
 sg.h
lib/zig/libc/include/generic-glibc/sys/
 acct.h
 asm.h
 auxv.h
 bitypes.h
 cachectl.h
 cdefs.h
 debugreg.h
 dir.h
 elf.h
 epoll.h
 errno.h
 eventfd.h
 fanotify.h
 fcntl.h
 file.h
 fpregdef.h
 fsuid.h
 gmon.h
 gmon_out.h
 inotify.h
 io.h
 ioctl.h
 ipc.h
 kd.h
 klog.h
 mman.h
 mount.h
 msg.h
 mtio.h
 param.h
 pci.h
 perm.h
 personality.h
 poll.h
 prctl.h
 procfs.h
 profil.h
 ptrace.h
 queue.h
 quota.h
 random.h
 raw.h
 reboot.h
 reg.h
 regdef.h
 resource.h
 select.h
 sem.h
 sendfile.h
 shm.h
 signal.h
 signalfd.h
 socket.h
 socketvar.h
 soundcard.h
 stat.h
 statfs.h
 statvfs.h
 stropts.h
 swap.h
 syscall.h
 sysctl.h
 sysinfo.h
 syslog.h
 sysmacros.h
 sysmips.h
 tas.h
 termios.h
 time.h
 timeb.h
 timerfd.h
 times.h
 timex.h
 ttychars.h
 ttydefaults.h
 types.h
 ucontext.h
 uio.h
 un.h
 unistd.h
 user.h
 utsname.h
 vfs.h
 vlimit.h
 vm86.h
 vt.h
 vtimes.h
 wait.h
 xattr.h
lib/zig/libc/include/generic-glibc/sys/platform/ppc.h
lib/zig/libc/include/generic-musl/
 aio.h
 alloca.h
 ansidecl.h
 ar.h
 assert.h
 bfd.h
 bfdlink.h
 byteswap.h
 complex.h
 cpio.h
 crypt.h
 ctype.h
 diagnostics.h
 dirent.h
 dis-asm.h
 dlfcn.h
 elf.h
 endian.h
 err.h
 errno.h
 fcntl.h
 features.h
 fenv.h
 float.h
 fmtmsg.h
 fnmatch.h
 ftw.h
 getopt.h
 glob.h
 grp.h
 iconv.h
 ifaddrs.h
 inttypes.h
 iso646.h
 langinfo.h
 lastlog.h
 libgen.h
 libintl.h
 limits.h
 link.h
 locale.h
 malloc.h
 math.h
 memory.h
 mntent.h
 monetary.h
 mqueue.h
 netdb.h
 nl_types.h
 paths.h
 plugin-api.h
 poll.h
 pthread.h
 pty.h
 pwd.h
 regex.h
 resolv.h
 sched.h
 search.h
 semaphore.h
 setjmp.h
 shadow.h
 signal.h
 spawn.h
 stdalign.h
 stdarg.h
 stdbool.h
 stdc-predef.h
 stddef.h
 stdint.h
 stdio.h
 stdio_ext.h
 stdlib.h
 stdnoreturn.h
 string.h
 strings.h
 stropts.h
 symcat.h
 syscall.h
 sysexits.h
 syslog.h
 tar.h
 termios.h
 tgmath.h
 threads.h
 time.h
 uchar.h
 ucontext.h
 ulimit.h
 unistd.h
 utime.h
 utmp.h
 utmpx.h
 values.h
 wait.h
 wchar.h
 wctype.h
 wordexp.h
lib/zig/libc/include/generic-musl/arpa/
 ftp.h
 inet.h
 nameser.h
 nameser_compat.h
 telnet.h
 tftp.h
lib/zig/libc/include/generic-musl/bits/
 alltypes.h
 endian.h
 errno.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 io.h
 ioctl.h
 ioctl_fix.h
 ipc.h
 kd.h
 limits.h
 link.h
 mman.h
 msg.h
 poll.h
 posix.h
 ptrace.h
 reg.h
 resource.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 soundcard.h
 stat.h
 statfs.h
 stdint.h
 syscall.h
 termios.h
 user.h
 vt.h
lib/zig/libc/include/generic-musl/drm/
 amdgpu_drm.h
 armada_drm.h
 drm.h
 drm_fourcc.h
 drm_mode.h
 drm_sarea.h
 etnaviv_drm.h
 exynos_drm.h
 i810_drm.h
 i915_drm.h
 mga_drm.h
 msm_drm.h
 nouveau_drm.h
 omap_drm.h
 qxl_drm.h
 r128_drm.h
 radeon_drm.h
 savage_drm.h
 sis_drm.h
 tegra_drm.h
 v3d_drm.h
 vc4_drm.h
 vgem_drm.h
 via_drm.h
 virtgpu_drm.h
 vmwgfx_drm.h
lib/zig/libc/include/generic-musl/misc/
 cxl.h
 ocxl.h
lib/zig/libc/include/generic-musl/mtd/
 inftl-user.h
 mtd-abi.h
 mtd-user.h
 nftl-user.h
 ubi-user.h
lib/zig/libc/include/generic-musl/net/
 ethernet.h
 if.h
 if_arp.h
 route.h
lib/zig/libc/include/generic-musl/netinet/
 ether.h
 icmp6.h
 if_ether.h
 igmp.h
 in.h
 in_systm.h
 ip.h
 ip6.h
 ip_icmp.h
 tcp.h
 udp.h
lib/zig/libc/include/generic-musl/netpacket/packet.h
lib/zig/libc/include/generic-musl/rdma/
 bnxt_re-abi.h
 cxgb3-abi.h
 cxgb4-abi.h
 hns-abi.h
 i40iw-abi.h
 ib_user_cm.h
 ib_user_ioctl_cmds.h
 ib_user_ioctl_verbs.h
 ib_user_mad.h
 ib_user_sa.h
 ib_user_verbs.h
 mlx4-abi.h
 mlx5-abi.h
 mlx5_user_ioctl_cmds.h
 mlx5_user_ioctl_verbs.h
 mthca-abi.h
 nes-abi.h
 ocrdma-abi.h
 qedr-abi.h
 rdma_netlink.h
 rdma_user_cm.h
 rdma_user_ioctl.h
 rdma_user_ioctl_cmds.h
 rdma_user_rxe.h
 vmw_pvrdma-abi.h
lib/zig/libc/include/generic-musl/rdma/hfi/
 hfi1_ioctl.h
 hfi1_user.h
lib/zig/libc/include/generic-musl/scsi/
 cxlflash_ioctl.h
 scsi.h
 scsi_bsg_fc.h
 scsi_ioctl.h
 scsi_netlink.h
 scsi_netlink_fc.h
 sg.h
lib/zig/libc/include/generic-musl/scsi/fc/
 fc_els.h
 fc_fs.h
 fc_gs.h
 fc_ns.h
lib/zig/libc/include/generic-musl/sound/
 asequencer.h
 asoc.h
 asound.h
 asound_fm.h
 compress_offload.h
 compress_params.h
 emu10k1.h
 firewire.h
 hdsp.h
 hdspm.h
 sb16_csp.h
 sfnt_info.h
 skl-tplg-interface.h
 snd_sst_tokens.h
 tlv.h
 usb_stream.h
lib/zig/libc/include/generic-musl/sys/
 acct.h
 auxv.h
 cachectl.h
 dir.h
 epoll.h
 errno.h
 eventfd.h
 fanotify.h
 fcntl.h
 file.h
 fsuid.h
 inotify.h
 io.h
 ioctl.h
 ipc.h
 kd.h
 klog.h
 mman.h
 mount.h
 msg.h
 mtio.h
 param.h
 personality.h
 poll.h
 prctl.h
 procfs.h
 ptrace.h
 quota.h
 random.h
 reboot.h
 reg.h
 resource.h
 select.h
 sem.h
 sendfile.h
 shm.h
 signal.h
 signalfd.h
 socket.h
 soundcard.h
 stat.h
 statfs.h
 statvfs.h
 stropts.h
 swap.h
 syscall.h
 sysinfo.h
 syslog.h
 sysmacros.h
 termios.h
 time.h
 timeb.h
 timerfd.h
 times.h
 timex.h
 ttydefaults.h
 types.h
 ucontext.h
 uio.h
 un.h
 user.h
 utsname.h
 vfs.h
 vt.h
 wait.h
 xattr.h
lib/zig/libc/include/generic-musl/video/
 edid.h
 sisfb.h
 uvesafb.h
lib/zig/libc/include/generic-musl/xen/
 evtchn.h
 gntalloc.h
 gntdev.h
 privcmd.h
lib/zig/libc/include/i386-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 kvm.h
 kvm_para.h
 mman.h
 msgbuf.h
 perf_regs.h
 posix_types.h
 ptrace.h
 sembuf.h
 setup.h
 shmbuf.h
 sigcontext.h
 siginfo.h
 signal.h
 stat.h
 statfs.h
 swab.h
 types.h
 ucontext.h
 unistd.h
lib/zig/libc/include/i386-linux-gnu/fpu_control.h
lib/zig/libc/include/i386-linux-gnu/bits/
 a.out.h
 endian.h
 environments.h
 epoll.h
 fcntl.h
 fenv.h
 floatn.h
 flt-eval-method.h
 fp-logb.h
 indirect-return.h
 ipctypes.h
 iscanonical.h
 link.h
 long-double.h
 math-vector-fortran.h
 math-vector.h
 mman.h
 procfs-id.h
 procfs.h
 pthreadtypes-arch.h
 select.h
 sem-pad.h
 semaphore.h
 setjmp.h
 sigcontext.h
 siginfo-arch.h
 stat.h
 sysctl.h
 timesize.h
 typesizes.h
 wordsize.h
 xtitypes.h
lib/zig/libc/include/i386-linux-gnu/gnu/
 lib-names.h
 stubs.h
lib/zig/libc/include/i386-linux-gnu/sys/
 elf.h
 io.h
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/i386-linux-musl/
 bfd.h
 bfd_stdint.h
lib/zig/libc/include/i386-linux-musl/bits/
 alltypes.h
 endian.h
 fcntl.h
 fenv.h
 float.h
 io.h
 limits.h
 mman.h
 msg.h
 ptrace.h
 reg.h
 setjmp.h
 shm.h
 signal.h
 stdint.h
 syscall.h
 user.h
lib/zig/libc/include/mips-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 errno.h
 fcntl.h
 hwcap.h
 ioctl.h
 ioctls.h
 kvm.h
 kvm_para.h
 mman.h
 msgbuf.h
 param.h
 poll.h
 posix_types.h
 ptrace.h
 resource.h
 sembuf.h
 setup.h
 shmbuf.h
 sigcontext.h
 siginfo.h
 signal.h
 socket.h
 sockios.h
 stat.h
 statfs.h
 swab.h
 termbits.h
 termios.h
 types.h
 unistd.h
lib/zig/libc/include/mips-linux-gnu/ieee754.h
lib/zig/libc/include/mips-linux-gnu/bits/
 dlfcn.h
 errno.h
 eventfd.h
 inotify.h
 ioctl-types.h
 ipc.h
 ipctypes.h
 local_lim.h
 mman.h
 msq-pad.h
 poll.h
 resource.h
 sem-pad.h
 shm-pad.h
 shmlba.h
 sigaction.h
 sigcontext.h
 siginfo-arch.h
 signalfd.h
 signum.h
 socket_type.h
 statfs.h
 termios-c_cc.h
 termios-c_lflag.h
 termios-struct.h
 termios-tcflow.h
 timerfd.h
lib/zig/libc/include/mips-linux-gnu/bits/types/stack_t.h
lib/zig/libc/include/mips-linux-musl/
 bfd.h
 bfd_stdint.h
lib/zig/libc/include/mips-linux-musl/bits/
 alltypes.h
 endian.h
 errno.h
 fcntl.h
 fenv.h
 hwcap.h
 ioctl.h
 mman.h
 msg.h
 poll.h
 ptrace.h
 reg.h
 resource.h
 sem.h
 setjmp.h
 signal.h
 socket.h
 stat.h
 statfs.h
 stdint.h
 syscall.h
 termios.h
 user.h
lib/zig/libc/include/mips64-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 errno.h
 fcntl.h
 hwcap.h
 ioctl.h
 ioctls.h
 kvm.h
 kvm_para.h
 mman.h
 msgbuf.h
 param.h
 poll.h
 posix_types.h
 ptrace.h
 resource.h
 sembuf.h
 setup.h
 shmbuf.h
 sigcontext.h
 siginfo.h
 signal.h
 socket.h
 sockios.h
 stat.h
 statfs.h
 swab.h
 termbits.h
 termios.h
 types.h
 unistd.h
lib/zig/libc/include/mips64-linux-gnuabi64/ieee754.h
lib/zig/libc/include/mips64-linux-gnuabi64/bits/
 dlfcn.h
 errno.h
 eventfd.h
 inotify.h
 ioctl-types.h
 ipc.h
 ipctypes.h
 local_lim.h
 mman.h
 msq-pad.h
 poll.h
 resource.h
 sem-pad.h
 shm-pad.h
 shmlba.h
 sigaction.h
 sigcontext.h
 siginfo-arch.h
 signalfd.h
 signum.h
 socket_type.h
 statfs.h
 termios-c_cc.h
 termios-c_lflag.h
 termios-struct.h
 termios-tcflow.h
 timerfd.h
lib/zig/libc/include/mips64-linux-gnuabi64/bits/types/stack_t.h
lib/zig/libc/include/mips64-linux-gnuabin32/ieee754.h
lib/zig/libc/include/mips64-linux-gnuabin32/bits/
 dlfcn.h
 errno.h
 eventfd.h
 inotify.h
 ioctl-types.h
 ipc.h
 ipctypes.h
 local_lim.h
 mman.h
 msq-pad.h
 poll.h
 resource.h
 sem-pad.h
 shm-pad.h
 shmlba.h
 sigaction.h
 sigcontext.h
 siginfo-arch.h
 signalfd.h
 signum.h
 socket_type.h
 statfs.h
 termios-c_cc.h
 termios-c_lflag.h
 termios-struct.h
 termios-tcflow.h
 timerfd.h
lib/zig/libc/include/mips64-linux-gnuabin32/bits/types/stack_t.h
lib/zig/libc/include/mips64-linux-musl/bfd_stdint.h
lib/zig/libc/include/mips64-linux-musl/bits/
 alltypes.h
 endian.h
 errno.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 ioctl.h
 ipc.h
 limits.h
 mman.h
 poll.h
 posix.h
 ptrace.h
 reg.h
 resource.h
 sem.h
 setjmp.h
 signal.h
 socket.h
 stat.h
 statfs.h
 syscall.h
 termios.h
 user.h
lib/zig/libc/include/mips64el-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 errno.h
 fcntl.h
 hwcap.h
 ioctl.h
 ioctls.h
 kvm.h
 kvm_para.h
 mman.h
 msgbuf.h
 param.h
 poll.h
 posix_types.h
 ptrace.h
 resource.h
 sembuf.h
 setup.h
 shmbuf.h
 sigcontext.h
 siginfo.h
 signal.h
 socket.h
 sockios.h
 stat.h
 statfs.h
 swab.h
 termbits.h
 termios.h
 types.h
 unistd.h
lib/zig/libc/include/mips64el-linux-gnuabi64/ieee754.h
lib/zig/libc/include/mips64el-linux-gnuabi64/bits/
 dlfcn.h
 errno.h
 eventfd.h
 inotify.h
 ioctl-types.h
 ipc.h
 ipctypes.h
 local_lim.h
 mman.h
 msq-pad.h
 poll.h
 resource.h
 sem-pad.h
 shm-pad.h
 shmlba.h
 sigaction.h
 sigcontext.h
 siginfo-arch.h
 signalfd.h
 signum.h
 socket_type.h
 statfs.h
 termios-c_cc.h
 termios-c_lflag.h
 termios-struct.h
 termios-tcflow.h
 timerfd.h
lib/zig/libc/include/mips64el-linux-gnuabi64/bits/types/stack_t.h
lib/zig/libc/include/mips64el-linux-gnuabin32/ieee754.h
lib/zig/libc/include/mips64el-linux-gnuabin32/bits/
 dlfcn.h
 errno.h
 eventfd.h
 inotify.h
 ioctl-types.h
 ipc.h
 ipctypes.h
 local_lim.h
 mman.h
 msq-pad.h
 poll.h
 resource.h
 sem-pad.h
 shm-pad.h
 shmlba.h
 sigaction.h
 sigcontext.h
 siginfo-arch.h
 signalfd.h
 signum.h
 socket_type.h
 statfs.h
 termios-c_cc.h
 termios-c_lflag.h
 termios-struct.h
 termios-tcflow.h
 timerfd.h
lib/zig/libc/include/mips64el-linux-gnuabin32/bits/types/stack_t.h
lib/zig/libc/include/mips64el-linux-musl/bfd_stdint.h
lib/zig/libc/include/mips64el-linux-musl/bits/
 alltypes.h
 endian.h
 errno.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 ioctl.h
 ipc.h
 limits.h
 mman.h
 poll.h
 posix.h
 ptrace.h
 reg.h
 resource.h
 sem.h
 setjmp.h
 signal.h
 socket.h
 stat.h
 statfs.h
 syscall.h
 termios.h
 user.h
lib/zig/libc/include/mipsel-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 errno.h
 fcntl.h
 hwcap.h
 ioctl.h
 ioctls.h
 kvm.h
 kvm_para.h
 mman.h
 msgbuf.h
 param.h
 poll.h
 posix_types.h
 ptrace.h
 resource.h
 sembuf.h
 setup.h
 shmbuf.h
 sigcontext.h
 siginfo.h
 signal.h
 socket.h
 sockios.h
 stat.h
 statfs.h
 swab.h
 termbits.h
 termios.h
 types.h
 unistd.h
lib/zig/libc/include/mipsel-linux-gnu/ieee754.h
lib/zig/libc/include/mipsel-linux-gnu/bits/
 dlfcn.h
 errno.h
 eventfd.h
 inotify.h
 ioctl-types.h
 ipc.h
 ipctypes.h
 local_lim.h
 mman.h
 msq-pad.h
 poll.h
 resource.h
 sem-pad.h
 shm-pad.h
 shmlba.h
 sigaction.h
 sigcontext.h
 siginfo-arch.h
 signalfd.h
 signum.h
 socket_type.h
 statfs.h
 termios-c_cc.h
 termios-c_lflag.h
 termios-struct.h
 termios-tcflow.h
 timerfd.h
lib/zig/libc/include/mipsel-linux-gnu/bits/types/stack_t.h
lib/zig/libc/include/mipsel-linux-musl/
 bfd.h
 bfd_stdint.h
lib/zig/libc/include/mipsel-linux-musl/bits/
 alltypes.h
 endian.h
 errno.h
 fcntl.h
 fenv.h
 hwcap.h
 ioctl.h
 mman.h
 msg.h
 poll.h
 ptrace.h
 reg.h
 resource.h
 sem.h
 setjmp.h
 signal.h
 socket.h
 stat.h
 statfs.h
 stdint.h
 syscall.h
 termios.h
 user.h
lib/zig/libc/include/powerpc-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 errno.h
 fcntl.h
 ioctl.h
 ioctls.h
 ipcbuf.h
 kvm.h
 kvm_para.h
 mman.h
 msgbuf.h
 perf_regs.h
 posix_types.h
 ptrace.h
 sembuf.h
 setup.h
 shmbuf.h
 sigcontext.h
 siginfo.h
 signal.h
 socket.h
 stat.h
 swab.h
 termbits.h
 termios.h
 types.h
 ucontext.h
 unistd.h
lib/zig/libc/include/powerpc-linux-gnu/
 fpu_control.h
 ieee754.h
lib/zig/libc/include/powerpc-linux-gnu/bits/
 endian.h
 environments.h
 fcntl.h
 fenv.h
 fenvinline.h
 floatn.h
 fp-fast.h
 hwcap.h
 ioctl-types.h
 ipc.h
 iscanonical.h
 link.h
 local_lim.h
 long-double.h
 mman.h
 msq-pad.h
 procfs.h
 pthreadtypes-arch.h
 sem-pad.h
 semaphore.h
 setjmp.h
 shm-pad.h
 sigstack.h
 stat.h
 termios-baud.h
 termios-c_cc.h
 termios-c_cflag.h
 termios-c_iflag.h
 termios-c_lflag.h
 termios-c_oflag.h
 termios-misc.h
 wordsize.h
lib/zig/libc/include/powerpc-linux-gnu/gnu/
 lib-names-32.h
 lib-names.h
 stubs.h
lib/zig/libc/include/powerpc-linux-gnu/sys/
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/powerpc-linux-musl/
 bfd.h
 bfd_stdint.h
lib/zig/libc/include/powerpc-linux-musl/bits/
 alltypes.h
 endian.h
 errno.h
 fcntl.h
 fenv.h
 hwcap.h
 ioctl.h
 ipc.h
 mman.h
 msg.h
 ptrace.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 stdint.h
 syscall.h
 termios.h
 user.h
lib/zig/libc/include/powerpc64-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 errno.h
 fcntl.h
 ioctl.h
 ioctls.h
 ipcbuf.h
 kvm.h
 kvm_para.h
 mman.h
 msgbuf.h
 perf_regs.h
 posix_types.h
 ptrace.h
 sembuf.h
 setup.h
 shmbuf.h
 sigcontext.h
 siginfo.h
 signal.h
 socket.h
 stat.h
 swab.h
 termbits.h
 termios.h
 types.h
 ucontext.h
 unistd.h
lib/zig/libc/include/powerpc64-linux-gnu/
 fpu_control.h
 ieee754.h
lib/zig/libc/include/powerpc64-linux-gnu/bits/
 endian.h
 environments.h
 fcntl.h
 fenv.h
 fenvinline.h
 floatn.h
 fp-fast.h
 hwcap.h
 ioctl-types.h
 ipc.h
 iscanonical.h
 link.h
 local_lim.h
 long-double.h
 mman.h
 msq-pad.h
 procfs.h
 pthreadtypes-arch.h
 sem-pad.h
 semaphore.h
 setjmp.h
 shm-pad.h
 sigstack.h
 stat.h
 termios-baud.h
 termios-c_cc.h
 termios-c_cflag.h
 termios-c_iflag.h
 termios-c_lflag.h
 termios-c_oflag.h
 termios-misc.h
 wordsize.h
lib/zig/libc/include/powerpc64-linux-gnu/gnu/
 lib-names-64-v1.h
 lib-names.h
 stubs-64-v1.h
 stubs.h
lib/zig/libc/include/powerpc64-linux-gnu/sys/
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/powerpc64-linux-musl/bfd_stdint.h
lib/zig/libc/include/powerpc64-linux-musl/bits/
 alltypes.h
 endian.h
 errno.h
 fcntl.h
 fenv.h
 hwcap.h
 ioctl.h
 ipc.h
 limits.h
 mman.h
 msg.h
 posix.h
 ptrace.h
 reg.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 syscall.h
 termios.h
 user.h
lib/zig/libc/include/powerpc64le-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 errno.h
 fcntl.h
 ioctl.h
 ioctls.h
 ipcbuf.h
 kvm.h
 kvm_para.h
 mman.h
 msgbuf.h
 perf_regs.h
 posix_types.h
 ptrace.h
 sembuf.h
 setup.h
 shmbuf.h
 sigcontext.h
 siginfo.h
 signal.h
 socket.h
 stat.h
 swab.h
 termbits.h
 termios.h
 types.h
 ucontext.h
 unistd.h
lib/zig/libc/include/powerpc64le-linux-gnu/
 fpu_control.h
 ieee754.h
lib/zig/libc/include/powerpc64le-linux-gnu/bits/
 endian.h
 environments.h
 fcntl.h
 fenv.h
 fenvinline.h
 floatn.h
 fp-fast.h
 hwcap.h
 ioctl-types.h
 ipc.h
 iscanonical.h
 link.h
 local_lim.h
 long-double.h
 mman.h
 msq-pad.h
 procfs.h
 pthreadtypes-arch.h
 sem-pad.h
 semaphore.h
 setjmp.h
 shm-pad.h
 sigstack.h
 stat.h
 termios-baud.h
 termios-c_cc.h
 termios-c_cflag.h
 termios-c_iflag.h
 termios-c_lflag.h
 termios-c_oflag.h
 termios-misc.h
 wordsize.h
lib/zig/libc/include/powerpc64le-linux-gnu/gnu/
 lib-names-64-v2.h
 lib-names.h
 stubs-64-v2.h
 stubs.h
lib/zig/libc/include/powerpc64le-linux-gnu/sys/
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/powerpc64le-linux-musl/bfd_stdint.h
lib/zig/libc/include/powerpc64le-linux-musl/bits/
 alltypes.h
 endian.h
 errno.h
 fcntl.h
 fenv.h
 hwcap.h
 ioctl.h
 ipc.h
 limits.h
 mman.h
 msg.h
 posix.h
 ptrace.h
 reg.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 syscall.h
 termios.h
 user.h
lib/zig/libc/include/riscv32-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 elf.h
 hwcap.h
 posix_types.h
 ptrace.h
 setup.h
 sigcontext.h
 siginfo.h
 signal.h
 stat.h
 ucontext.h
 unistd.h
lib/zig/libc/include/riscv32-linux-musl/
 bfd.h
 bfd_stdint.h
 elf.h
 signal.h
lib/zig/libc/include/riscv32-linux-musl/bits/
 alltypes.h
 endian.h
 fenv.h
 float.h
 ipc.h
 posix.h
 reg.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 stdint.h
 syscall.h
 user.h
lib/zig/libc/include/riscv32-linux-musl/netinet/
 tcp.h
 udp.h
lib/zig/libc/include/riscv32-linux-musl/sys/
 signalfd.h
 socket.h
lib/zig/libc/include/riscv64-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 elf.h
 hwcap.h
 posix_types.h
 ptrace.h
 setup.h
 sigcontext.h
 siginfo.h
 signal.h
 stat.h
 ucontext.h
 unistd.h
lib/zig/libc/include/riscv64-linux-gnu/
 fpu_control.h
 ieee754.h
lib/zig/libc/include/riscv64-linux-gnu/bits/
 endian.h
 fcntl.h
 fenv.h
 floatn.h
 link.h
 long-double.h
 procfs.h
 pthreadtypes-arch.h
 semaphore.h
 setjmp.h
 sigcontext.h
 stat.h
 statfs.h
 typesizes.h
 wordsize.h
lib/zig/libc/include/riscv64-linux-gnu/gnu/
 lib-names-lp64.h
 lib-names.h
 stubs-lp64.h
 stubs.h
lib/zig/libc/include/riscv64-linux-gnu/sys/
 asm.h
 cachectl.h
 ucontext.h
 user.h
lib/zig/libc/include/riscv64-linux-musl/
 bfd_stdint.h
 elf.h
 signal.h
lib/zig/libc/include/riscv64-linux-musl/bits/
 alltypes.h
 endian.h
 fenv.h
 float.h
 ipc.h
 limits.h
 mman.h
 posix.h
 reg.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 syscall.h
 user.h
lib/zig/libc/include/riscv64-linux-musl/netinet/
 tcp.h
 udp.h
lib/zig/libc/include/riscv64-linux-musl/sys/
 signalfd.h
 socket.h
lib/zig/libc/include/s390x-linux-any/asm/
 auxvec.h
 bitsperlong.h
 bpf_perf_event.h
 byteorder.h
 chpid.h
 chsc.h
 clp.h
 cmb.h
 dasd.h
 debug.h
 guarded_storage.h
 hypfs.h
 ioctls.h
 ipcbuf.h
 kvm.h
 kvm_para.h
 kvm_perf.h
 monwriter.h
 perf_regs.h
 pkey.h
 posix_types.h
 ptrace.h
 qeth.h
 runtime_instr.h
 schid.h
 sclp_ctl.h
 setup.h
 sie.h
 sigcontext.h
 siginfo.h
 signal.h
 socket.h
 stat.h
 statfs.h
 sthyi.h
 tape390.h
 termios.h
 types.h
 ucontext.h
 unistd.h
 unistd_32.h
 unistd_64.h
 virtio-ccw.h
 vmcp.h
 vtoc.h
 zcrypt.h
lib/zig/libc/include/s390x-linux-gnu/
 fpu_control.h
 ieee754.h
lib/zig/libc/include/s390x-linux-gnu/bits/
 elfclass.h
 endian.h
 environments.h
 fcntl.h
 fenv.h
 floatn.h
 flt-eval-method.h
 hwcap.h
 ipc.h
 link.h
 long-double.h
 procfs-extra.h
 procfs-id.h
 procfs.h
 pthreadtypes-arch.h
 semaphore.h
 setjmp.h
 sigaction.h
 stat.h
 statfs.h
 typesizes.h
 utmp.h
 utmpx.h
 wordsize.h
 xtitypes.h
lib/zig/libc/include/s390x-linux-gnu/gnu/
 lib-names-64.h
 lib-names.h
 stubs-64.h
 stubs.h
lib/zig/libc/include/s390x-linux-gnu/sys/
 elf.h
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/s390x-linux-musl/bfd_stdint.h
lib/zig/libc/include/s390x-linux-musl/bits/
 alltypes.h
 endian.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 ioctl_fix.h
 ipc.h
 limits.h
 link.h
 msg.h
 posix.h
 ptrace.h
 reg.h
 sem.h
 setjmp.h
 signal.h
 socket.h
 stat.h
 statfs.h
 syscall.h
 user.h
lib/zig/libc/include/sparc-linux-gnu/
 a.out.h
 fpu_control.h
 ieee754.h
lib/zig/libc/include/sparc-linux-gnu/bits/
 a.out.h
 endian.h
 environments.h
 epoll.h
 errno.h
 eventfd.h
 fcntl.h
 fenv.h
 floatn.h
 hwcap.h
 inotify.h
 ioctls.h
 ipc.h
 link.h
 local_lim.h
 long-double.h
 mman.h
 msq-pad.h
 poll.h
 procfs-extra.h
 procfs-id.h
 procfs.h
 pthreadtypes-arch.h
 resource.h
 sem-pad.h
 semaphore.h
 setjmp.h
 shm-pad.h
 shmlba.h
 sigaction.h
 sigcontext.h
 siginfo-arch.h
 siginfo-consts-arch.h
 signalfd.h
 signum.h
 sigstack.h
 socket_type.h
 stat.h
 termios-baud.h
 termios-c_cc.h
 termios-c_oflag.h
 termios-struct.h
 timerfd.h
 typesizes.h
 wordsize.h
lib/zig/libc/include/sparc-linux-gnu/gnu/
 lib-names-64.h
 lib-names.h
 stubs-64.h
 stubs.h
lib/zig/libc/include/sparc-linux-gnu/sys/
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/sparcv9-linux-gnu/
 a.out.h
 fpu_control.h
 ieee754.h
lib/zig/libc/include/sparcv9-linux-gnu/bits/
 a.out.h
 endian.h
 environments.h
 epoll.h
 errno.h
 eventfd.h
 fcntl.h
 fenv.h
 floatn.h
 hwcap.h
 inotify.h
 ioctls.h
 ipc.h
 link.h
 local_lim.h
 long-double.h
 mman.h
 msq-pad.h
 poll.h
 procfs-extra.h
 procfs-id.h
 procfs.h
 pthreadtypes-arch.h
 resource.h
 sem-pad.h
 semaphore.h
 setjmp.h
 shm-pad.h
 shmlba.h
 sigaction.h
 sigcontext.h
 siginfo-arch.h
 siginfo-consts-arch.h
 signalfd.h
 signum.h
 sigstack.h
 socket_type.h
 stat.h
 termios-baud.h
 termios-c_cc.h
 termios-c_oflag.h
 termios-struct.h
 timerfd.h
 typesizes.h
 wordsize.h
lib/zig/libc/include/sparcv9-linux-gnu/gnu/
 lib-names.h
 stubs-32.h
 stubs.h
lib/zig/libc/include/sparcv9-linux-gnu/sys/
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/x86_64-linux-any/asm/
 auxvec.h
 bitsperlong.h
 byteorder.h
 kvm.h
 kvm_para.h
 mman.h
 msgbuf.h
 perf_regs.h
 posix_types.h
 ptrace.h
 sembuf.h
 setup.h
 shmbuf.h
 sigcontext.h
 siginfo.h
 signal.h
 stat.h
 statfs.h
 swab.h
 types.h
 ucontext.h
 unistd.h
lib/zig/libc/include/x86_64-linux-gnu/fpu_control.h
lib/zig/libc/include/x86_64-linux-gnu/bits/
 a.out.h
 endian.h
 environments.h
 epoll.h
 fcntl.h
 fenv.h
 floatn.h
 flt-eval-method.h
 fp-logb.h
 indirect-return.h
 ipctypes.h
 iscanonical.h
 link.h
 long-double.h
 math-vector-fortran.h
 math-vector.h
 mman.h
 procfs-id.h
 procfs.h
 pthreadtypes-arch.h
 select.h
 sem-pad.h
 semaphore.h
 setjmp.h
 sigcontext.h
 siginfo-arch.h
 stat.h
 sysctl.h
 timesize.h
 typesizes.h
 wordsize.h
 xtitypes.h
lib/zig/libc/include/x86_64-linux-gnu/gnu/
 lib-names-64.h
 lib-names.h
 stubs-64.h
 stubs.h
lib/zig/libc/include/x86_64-linux-gnu/sys/
 elf.h
 io.h
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/x86_64-linux-gnux32/fpu_control.h
lib/zig/libc/include/x86_64-linux-gnux32/bits/
 a.out.h
 endian.h
 environments.h
 epoll.h
 fcntl.h
 fenv.h
 floatn.h
 flt-eval-method.h
 fp-logb.h
 indirect-return.h
 ipctypes.h
 iscanonical.h
 link.h
 long-double.h
 math-vector-fortran.h
 math-vector.h
 mman.h
 procfs-id.h
 procfs.h
 pthreadtypes-arch.h
 select.h
 sem-pad.h
 semaphore.h
 setjmp.h
 sigcontext.h
 siginfo-arch.h
 stat.h
 sysctl.h
 timesize.h
 typesizes.h
 wordsize.h
 xtitypes.h
lib/zig/libc/include/x86_64-linux-gnux32/gnu/
 lib-names-x32.h
 lib-names.h
 stubs-x32.h
 stubs.h
lib/zig/libc/include/x86_64-linux-gnux32/sys/
 elf.h
 io.h
 ptrace.h
 ucontext.h
 user.h
lib/zig/libc/include/x86_64-linux-musl/bfd_stdint.h
lib/zig/libc/include/x86_64-linux-musl/bits/
 alltypes.h
 endian.h
 fcntl.h
 fenv.h
 float.h
 io.h
 ipc.h
 limits.h
 mman.h
 msg.h
 posix.h
 ptrace.h
 reg.h
 setjmp.h
 signal.h
 socket.h
 stat.h
 syscall.h
 user.h
lib/zig/libc/musl/arch/aarch64/
 atomic_arch.h
 crt_arch.h
 pthread_arch.h
 reloc.h
 syscall_arch.h
lib/zig/libc/musl/arch/aarch64/bits/
 alltypes.h.in
 endian.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 ipc.h
 limits.h
 msg.h
 posix.h
 reg.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 stdint.h
 syscall.h.in
 user.h
lib/zig/libc/musl/arch/arm/
 atomic_arch.h
 crt_arch.h
 pthread_arch.h
 reloc.h
 syscall_arch.h
lib/zig/libc/musl/arch/arm/bits/
 alltypes.h.in
 endian.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 ioctl_fix.h
 limits.h
 posix.h
 ptrace.h
 reg.h
 setjmp.h
 signal.h
 stat.h
 stdint.h
 syscall.h.in
 user.h
lib/zig/libc/musl/arch/generic/bits/
 errno.h
 fcntl.h
 fenv.h
 hwcap.h
 io.h
 ioctl.h
 ioctl_fix.h
 ipc.h
 kd.h
 link.h
 mman.h
 msg.h
 poll.h
 ptrace.h
 resource.h
 sem.h
 shm.h
 socket.h
 soundcard.h
 statfs.h
 termios.h
 vt.h
lib/zig/libc/musl/arch/i386/
 atomic_arch.h
 crt_arch.h
 pthread_arch.h
 reloc.h
 syscall_arch.h
lib/zig/libc/musl/arch/i386/bits/
 alltypes.h.in
 endian.h
 fenv.h
 float.h
 io.h
 limits.h
 mman.h
 posix.h
 ptrace.h
 reg.h
 setjmp.h
 signal.h
 stat.h
 stdint.h
 syscall.h.in
 user.h
lib/zig/libc/musl/arch/mips/
 atomic_arch.h
 crt_arch.h
 ksigaction.h
 pthread_arch.h
 reloc.h
 syscall_arch.h
lib/zig/libc/musl/arch/mips/bits/
 alltypes.h.in
 endian.h
 errno.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 ioctl.h
 limits.h
 mman.h
 msg.h
 poll.h
 posix.h
 ptrace.h
 reg.h
 resource.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 statfs.h
 stdint.h
 syscall.h.in
 termios.h
 user.h
lib/zig/libc/musl/arch/mips64/
 atomic_arch.h
 crt_arch.h
 ksigaction.h
 pthread_arch.h
 reloc.h
 syscall_arch.h
lib/zig/libc/musl/arch/mips64/bits/
 alltypes.h.in
 endian.h
 errno.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 ioctl.h
 ipc.h
 limits.h
 mman.h
 msg.h
 poll.h
 posix.h
 ptrace.h
 reg.h
 resource.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 statfs.h
 stdint.h
 syscall.h.in
 termios.h
 user.h
lib/zig/libc/musl/arch/powerpc/
 atomic_arch.h
 crt_arch.h
 pthread_arch.h
 reloc.h
 syscall_arch.h
lib/zig/libc/musl/arch/powerpc/bits/
 alltypes.h.in
 endian.h
 errno.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 ioctl.h
 ipc.h
 limits.h
 mman.h
 msg.h
 posix.h
 ptrace.h
 reg.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 stdint.h
 syscall.h.in
 termios.h
 user.h
lib/zig/libc/musl/arch/powerpc64/
 atomic_arch.h
 crt_arch.h
 pthread_arch.h
 reloc.h
 syscall_arch.h
lib/zig/libc/musl/arch/powerpc64/bits/
 alltypes.h.in
 endian.h
 errno.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 ioctl.h
 ipc.h
 limits.h
 mman.h
 msg.h
 posix.h
 ptrace.h
 reg.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 stdint.h
 syscall.h.in
 termios.h
 user.h
lib/zig/libc/musl/arch/s390x/
 atomic_arch.h
 crt_arch.h
 pthread_arch.h
 reloc.h
 syscall_arch.h
lib/zig/libc/musl/arch/s390x/bits/
 alltypes.h.in
 endian.h
 fcntl.h
 fenv.h
 float.h
 hwcap.h
 ioctl_fix.h
 ipc.h
 limits.h
 link.h
 msg.h
 posix.h
 ptrace.h
 reg.h
 sem.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 statfs.h
 stdint.h
 syscall.h.in
 user.h
lib/zig/libc/musl/arch/x86_64/
 atomic_arch.h
 crt_arch.h
 ksigaction.h
 pthread_arch.h
 reloc.h
 syscall_arch.h
lib/zig/libc/musl/arch/x86_64/bits/
 alltypes.h.in
 endian.h
 fcntl.h
 fenv.h
 float.h
 io.h
 ipc.h
 limits.h
 mman.h
 msg.h
 posix.h
 ptrace.h
 reg.h
 setjmp.h
 shm.h
 signal.h
 socket.h
 stat.h
 stdint.h
 syscall.h.in
 user.h
lib/zig/libc/musl/crt/
 Scrt1.c
 crt1.c
 crti.c
 crtn.c
 rcrt1.c
lib/zig/libc/musl/crt/aarch64/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/arm/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/i386/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/microblaze/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/mips/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/mips64/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/mipsn32/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/or1k/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/powerpc/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/powerpc64/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/s390x/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/sh/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/x32/
 crti.s
 crtn.s
lib/zig/libc/musl/crt/x86_64/
 crti.s
 crtn.s
lib/zig/libc/musl/src/aio/
 aio.c
 aio_suspend.c
 lio_listio.c
lib/zig/libc/musl/src/complex/
 __cexp.c
 __cexpf.c
 cabs.c
 cabsf.c
 cabsl.c
 cacos.c
 cacosf.c
 cacosh.c
 cacoshf.c
 cacoshl.c
 cacosl.c
 carg.c
 cargf.c
 cargl.c
 casin.c
 casinf.c
 casinh.c
 casinhf.c
 casinhl.c
 casinl.c
 catan.c
 catanf.c
 catanh.c
 catanhf.c
 catanhl.c
 catanl.c
 ccos.c
 ccosf.c
 ccosh.c
 ccoshf.c
 ccoshl.c
 ccosl.c
 cexp.c
 cexpf.c
 cexpl.c
 cimag.c
 cimagf.c
 cimagl.c
 clog.c
 clogf.c
 clogl.c
 conj.c
 conjf.c
 conjl.c
 cpow.c
 cpowf.c
 cpowl.c
 cproj.c
 cprojf.c
 cprojl.c
 creal.c
 crealf.c
 creall.c
 csin.c
 csinf.c
 csinh.c
 csinhf.c
 csinhl.c
 csinl.c
 csqrt.c
 csqrtf.c
 csqrtl.c
 ctan.c
 ctanf.c
 ctanh.c
 ctanhf.c
 ctanhl.c
 ctanl.c
lib/zig/libc/musl/src/conf/
 confstr.c
 fpathconf.c
 legacy.c
 pathconf.c
 sysconf.c
lib/zig/libc/musl/src/crypt/
 crypt.c
 crypt_blowfish.c
 crypt_des.c
 crypt_des.h
 crypt_md5.c
 crypt_r.c
 crypt_sha256.c
 crypt_sha512.c
 encrypt.c
lib/zig/libc/musl/src/ctype/
 __ctype_b_loc.c
 __ctype_get_mb_cur_max.c
 __ctype_tolower_loc.c
 __ctype_toupper_loc.c
 alpha.h
 isalnum.c
 isalpha.c
 isascii.c
 isblank.c
 iscntrl.c
 isdigit.c
 isgraph.c
 islower.c
 isprint.c
 ispunct.c
 isspace.c
 isupper.c
 iswalnum.c
 iswalpha.c
 iswblank.c
 iswcntrl.c
 iswctype.c
 iswdigit.c
 iswgraph.c
 iswlower.c
 iswprint.c
 iswpunct.c
 iswspace.c
 iswupper.c
 iswxdigit.c
 isxdigit.c
 nonspacing.h
 punct.h
 toascii.c
 tolower.c
 toupper.c
 towctrans.c
 wcswidth.c
 wctrans.c
 wcwidth.c
 wide.h
lib/zig/libc/musl/src/dirent/
 __dirent.h
 alphasort.c
 closedir.c
 dirfd.c
 fdopendir.c
 opendir.c
 readdir.c
 readdir_r.c
 rewinddir.c
 scandir.c
 seekdir.c
 telldir.c
 versionsort.c
lib/zig/libc/musl/src/env/
 __environ.c
 __init_tls.c
 __libc_start_main.c
 __reset_tls.c
 __stack_chk_fail.c
 clearenv.c
 getenv.c
 putenv.c
 setenv.c
 unsetenv.c
lib/zig/libc/musl/src/errno/
 __errno_location.c
 __strerror.h
 strerror.c
lib/zig/libc/musl/src/exit/
 _Exit.c
 abort.c
 assert.c
 at_quick_exit.c
 atexit.c
 exit.c
 quick_exit.c
lib/zig/libc/musl/src/exit/arm/__aeabi_atexit.c
lib/zig/libc/musl/src/fcntl/
 creat.c
 fcntl.c
 open.c
 openat.c
 posix_fadvise.c
 posix_fallocate.c
lib/zig/libc/musl/src/fenv/
 __flt_rounds.c
 fegetexceptflag.c
 feholdexcept.c
 fenv.c
 fesetexceptflag.c
 fesetround.c
 feupdateenv.c
lib/zig/libc/musl/src/fenv/aarch64/fenv.s
lib/zig/libc/musl/src/fenv/arm/
 fenv-hf.S
 fenv.c
lib/zig/libc/musl/src/fenv/i386/fenv.s
lib/zig/libc/musl/src/fenv/m68k/fenv.c
lib/zig/libc/musl/src/fenv/mips/
 fenv-sf.c
 fenv.S
lib/zig/libc/musl/src/fenv/mips64/
 fenv-sf.c
 fenv.S
lib/zig/libc/musl/src/fenv/mipsn32/
 fenv-sf.c
 fenv.S
lib/zig/libc/musl/src/fenv/powerpc/
 fenv-sf.c
 fenv.S
lib/zig/libc/musl/src/fenv/powerpc64/fenv.c
lib/zig/libc/musl/src/fenv/s390x/fenv.c
lib/zig/libc/musl/src/fenv/sh/
 fenv-nofpu.c
 fenv.S
lib/zig/libc/musl/src/fenv/x32/fenv.s
lib/zig/libc/musl/src/fenv/x86_64/fenv.s
lib/zig/libc/musl/src/include/
 crypt.h
 errno.h
 features.h
 langinfo.h
 pthread.h
 resolv.h
 signal.h
 stdio.h
 stdlib.h
 string.h
 time.h
 unistd.h
lib/zig/libc/musl/src/include/arpa/inet.h
lib/zig/libc/musl/src/include/sys/
 auxv.h
 mman.h
 sysinfo.h
 time.h
lib/zig/libc/musl/src/internal/
 atomic.h
 dynlink.h
 fdpic_crt.h
 floatscan.c
 floatscan.h
 futex.h
 intscan.c
 intscan.h
 ksigaction.h
 libc.c
 libc.h
 libm.h
 locale_impl.h
 lock.h
 malloc_impl.h
 procfdname.c
 pthread_impl.h
 shgetc.c
 shgetc.h
 stdio_impl.h
 syscall.c
 syscall.h
 syscall_ret.c
 vdso.c
 version.c
 version.h
lib/zig/libc/musl/src/internal/aarch64/syscall.s
lib/zig/libc/musl/src/internal/arm/syscall.s
lib/zig/libc/musl/src/internal/i386/syscall.s
lib/zig/libc/musl/src/internal/m68k/syscall.s
lib/zig/libc/musl/src/internal/microblaze/syscall.s
lib/zig/libc/musl/src/internal/mips/syscall.s
lib/zig/libc/musl/src/internal/mips64/syscall.s
lib/zig/libc/musl/src/internal/mipsn32/syscall.s
lib/zig/libc/musl/src/internal/or1k/syscall.s
lib/zig/libc/musl/src/internal/powerpc/syscall.s
lib/zig/libc/musl/src/internal/powerpc64/syscall.s
lib/zig/libc/musl/src/internal/s390x/syscall.s
lib/zig/libc/musl/src/internal/sh/
 __shcall.c
 syscall.s
lib/zig/libc/musl/src/internal/x32/syscall.s
lib/zig/libc/musl/src/internal/x86_64/syscall.s
lib/zig/libc/musl/src/ipc/
 ftok.c
 ipc.h
 msgctl.c
 msgget.c
 msgrcv.c
 msgsnd.c
 semctl.c
 semget.c
 semop.c
 semtimedop.c
 shmat.c
 shmctl.c
 shmdt.c
 shmget.c
lib/zig/libc/musl/src/ldso/
 __dlsym.c
 dl_iterate_phdr.c
 dladdr.c
 dlclose.c
 dlerror.c
 dlinfo.c
 dlopen.c
 dlsym.c
 tlsdesc.c
lib/zig/libc/musl/src/ldso/aarch64/
 dlsym.s
 tlsdesc.s
lib/zig/libc/musl/src/ldso/arm/
 dlsym.s
 find_exidx.c
 tlsdesc.S
lib/zig/libc/musl/src/ldso/i386/
 dlsym.s
 tlsdesc.s
lib/zig/libc/musl/src/ldso/m68k/dlsym.s
lib/zig/libc/musl/src/ldso/microblaze/dlsym.s
lib/zig/libc/musl/src/ldso/mips/dlsym.s
lib/zig/libc/musl/src/ldso/mips64/dlsym.s
lib/zig/libc/musl/src/ldso/mipsn32/dlsym.s
lib/zig/libc/musl/src/ldso/or1k/dlsym.s
lib/zig/libc/musl/src/ldso/powerpc/dlsym.s
lib/zig/libc/musl/src/ldso/powerpc64/dlsym.s
lib/zig/libc/musl/src/ldso/s390x/dlsym.s
lib/zig/libc/musl/src/ldso/sh/dlsym.s
lib/zig/libc/musl/src/ldso/x32/dlsym.s
lib/zig/libc/musl/src/ldso/x86_64/
 dlsym.s
 tlsdesc.s
lib/zig/libc/musl/src/legacy/
 cuserid.c
 daemon.c
 err.c
 euidaccess.c
 ftw.c
 futimes.c
 getdtablesize.c
 getloadavg.c
 getpagesize.c
 getpass.c
 getusershell.c
 isastream.c
 lutimes.c
 ulimit.c
 utmpx.c
 valloc.c
lib/zig/libc/musl/src/linux/
 adjtime.c
 adjtimex.c
 arch_prctl.c
 brk.c
 cache.c
 cap.c
 chroot.c
 clock_adjtime.c
 clone.c
 epoll.c
 eventfd.c
 fallocate.c
 fanotify.c
 flock.c
 getdents.c
 getrandom.c
 inotify.c
 ioperm.c
 iopl.c
 klogctl.c
 memfd_create.c
 mlock2.c
 module.c
 mount.c
 name_to_handle_at.c
 open_by_handle_at.c
 personality.c
 pivot_root.c
 ppoll.c
 prctl.c
 prlimit.c
 process_vm.c
 ptrace.c
 quotactl.c
 readahead.c
 reboot.c
 remap_file_pages.c
 sbrk.c
 sendfile.c
 setfsgid.c
 setfsuid.c
 setgroups.c
 sethostname.c
 setns.c
 settimeofday.c
 signalfd.c
 splice.c
 stime.c
 swap.c
 sync_file_range.c
 syncfs.c
 sysinfo.c
 tee.c
 timerfd.c
 unshare.c
 utimes.c
 vhangup.c
 vmsplice.c
 wait3.c
 wait4.c
 xattr.c
lib/zig/libc/musl/src/linux/x32/sysinfo.c
lib/zig/libc/musl/src/locale/
 __lctrans.c
 __mo_lookup.c
 big5.h
 bind_textdomain_codeset.c
 c_locale.c
 catclose.c
 catgets.c
 catopen.c
 codepages.h
 dcngettext.c
 duplocale.c
 freelocale.c
 gb18030.h
 hkscs.h
 iconv.c
 iconv_close.c
 jis0208.h
 ksc.h
 langinfo.c
 legacychars.h
 locale_map.c
 localeconv.c
 newlocale.c
 pleval.c
 pleval.h
 revjis.h
 setlocale.c
 strcoll.c
 strfmon.c
 strxfrm.c
 textdomain.c
 uselocale.c
 wcscoll.c
 wcsxfrm.c
lib/zig/libc/musl/src/malloc/
 DESIGN
 aligned_alloc.c
 expand_heap.c
 lite_malloc.c
 malloc.c
 malloc_usable_size.c
 memalign.c
 posix_memalign.c
lib/zig/libc/musl/src/math/
 __cos.c
 __cosdf.c
 __cosl.c
 __expo2.c
 __expo2f.c
 __fpclassify.c
 __fpclassifyf.c
 __fpclassifyl.c
 __invtrigl.c
 __invtrigl.h
 __polevll.c
 __rem_pio2.c
 __rem_pio2_large.c
 __rem_pio2f.c
 __rem_pio2l.c
 __signbit.c
 __signbitf.c
 __signbitl.c
 __sin.c
 __sindf.c
 __sinl.c
 __tan.c
 __tandf.c
 __tanl.c
 acos.c
 acosf.c
 acosh.c
 acoshf.c
 acoshl.c
 acosl.c
 asin.c
 asinf.c
 asinh.c
 asinhf.c
 asinhl.c
 asinl.c
 atan.c
 atan2.c
 atan2f.c
 atan2l.c
 atanf.c
 atanh.c
 atanhf.c
 atanhl.c
 atanl.c
 cbrt.c
 cbrtf.c
 cbrtl.c
 ceil.c
 ceilf.c
 ceill.c
 copysign.c
 copysignf.c
 copysignl.c
 cos.c
 cosf.c
 cosh.c
 coshf.c
 coshl.c
 cosl.c
 erf.c
 erff.c
 erfl.c
 exp.c
 exp10.c
 exp10f.c
 exp10l.c
 exp2.c
 exp2f.c
 exp2l.c
 expf.c
 expl.c
 expm1.c
 expm1f.c
 expm1l.c
 fabs.c
 fabsf.c
 fabsl.c
 fdim.c
 fdimf.c
 fdiml.c
 finite.c
 finitef.c
 floor.c
 floorf.c
 floorl.c
 fma.c
 fmaf.c
 fmal.c
 fmax.c
 fmaxf.c
 fmaxl.c
 fmin.c
 fminf.c
 fminl.c
 fmod.c
 fmodf.c
 fmodl.c
 frexp.c
 frexpf.c
 frexpl.c
 hypot.c
 hypotf.c
 hypotl.c
 ilogb.c
 ilogbf.c
 ilogbl.c
 j0.c
 j0f.c
 j1.c
 j1f.c
 jn.c
 jnf.c
 ldexp.c
 ldexpf.c
 ldexpl.c
 lgamma.c
 lgamma_r.c
 lgammaf.c
 lgammaf_r.c
 lgammal.c
 llrint.c
 llrintf.c
 llrintl.c
 llround.c
 llroundf.c
 llroundl.c
 log.c
 log10.c
 log10f.c
 log10l.c
 log1p.c
 log1pf.c
 log1pl.c
 log2.c
 log2f.c
 log2l.c
 logb.c
 logbf.c
 logbl.c
 logf.c
 logl.c
 lrint.c
 lrintf.c
 lrintl.c
 lround.c
 lroundf.c
 lroundl.c
 modf.c
 modff.c
 modfl.c
 nan.c
 nanf.c
 nanl.c
 nearbyint.c
 nearbyintf.c
 nearbyintl.c
 nextafter.c
 nextafterf.c
 nextafterl.c
 nexttoward.c
 nexttowardf.c
 nexttowardl.c
 pow.c
 powf.c
 powl.c
 remainder.c
 remainderf.c
 remainderl.c
 remquo.c
 remquof.c
 remquol.c
 rint.c
 rintf.c
 rintl.c
 round.c
 roundf.c
 roundl.c
 scalb.c
 scalbf.c
 scalbln.c
 scalblnf.c
 scalblnl.c
 scalbn.c
 scalbnf.c
 scalbnl.c
 signgam.c
 significand.c
 significandf.c
 sin.c
 sincos.c
 sincosf.c
 sincosl.c
 sinf.c
 sinh.c
 sinhf.c
 sinhl.c
 sinl.c
 sqrt.c
 sqrtf.c
 sqrtl.c
 tan.c
 tanf.c
 tanh.c
 tanhf.c
 tanhl.c
 tanl.c
 tgamma.c
 tgammaf.c
 tgammal.c
 trunc.c
 truncf.c
 truncl.c
lib/zig/libc/musl/src/math/aarch64/
 ceil.c
 ceilf.c
 fabs.c
 fabsf.c
 floor.c
 floorf.c
 fma.c
 fmaf.c
 fmax.c
 fmaxf.c
 fmin.c
 fminf.c
 llrint.c
 llrintf.c
 llround.c
 llroundf.c
 lrint.c
 lrintf.c
 lround.c
 lroundf.c
 nearbyint.c
 nearbyintf.c
 rint.c
 rintf.c
 round.c
 roundf.c
 sqrt.c
 sqrtf.c
 trunc.c
 truncf.c
lib/zig/libc/musl/src/math/arm/
 fabs.c
 fabsf.c
 fma.c
 fmaf.c
 sqrt.c
 sqrtf.c
lib/zig/libc/musl/src/math/i386/
 __invtrigl.s
 acos.s
 acosf.s
 acosl.s
 asin.s
 asinf.s
 asinl.s
 atan.s
 atan2.s
 atan2f.s
 atan2l.s
 atanf.s
 atanl.s
 ceil.s
 ceilf.s
 ceill.s
 exp.s
 exp2.s
 exp2f.s
 exp2l.s
 expf.s
 expl.s
 expm1.s
 expm1f.s
 expm1l.s
 fabs.s
 fabsf.s
 fabsl.s
 floor.s
 floorf.s
 floorl.s
 fmod.s
 fmodf.s
 fmodl.s
 hypot.s
 hypotf.s
 ldexp.s
 ldexpf.s
 ldexpl.s
 llrint.s
 llrintf.s
 llrintl.s
 log.s
 log10.s
 log10f.s
 log10l.s
 log1p.s
 log1pf.s
 log1pl.s
 log2.s
 log2f.s
 log2l.s
 logf.s
 logl.s
 lrint.s
 lrintf.s
 lrintl.s
 remainder.s
 remainderf.s
 remainderl.s
 remquo.s
 remquof.s
 remquol.s
 rint.s
 rintf.s
 rintl.s
 scalbln.s
 scalblnf.s
 scalblnl.s
 scalbn.s
 scalbnf.s
 scalbnl.s
 sqrt.s
 sqrtf.s
 sqrtl.s
 trunc.s
 truncf.s
 truncl.s
lib/zig/libc/musl/src/math/powerpc/
 fabs.c
 fabsf.c
 fma.c
 fmaf.c
 sqrt.c
 sqrtf.c
lib/zig/libc/musl/src/math/powerpc64/
 ceil.c
 ceilf.c
 fabs.c
 fabsf.c
 floor.c
 floorf.c
 fma.c
 fmaf.c
 fmax.c
 fmaxf.c
 fmin.c
 fminf.c
 lrint.c
 lrintf.c
 lround.c
 lroundf.c
 round.c
 roundf.c
 sqrt.c
 sqrtf.c
 trunc.c
 truncf.c
lib/zig/libc/musl/src/math/s390x/
 ceil.c
 ceilf.c
 ceill.c
 fabs.c
 fabsf.c
 fabsl.c
 floor.c
 floorf.c
 floorl.c
 fma.c
 fmaf.c
 nearbyint.c
 nearbyintf.c
 nearbyintl.c
 rint.c
 rintf.c
 rintl.c
 round.c
 roundf.c
 roundl.c
 sqrt.c
 sqrtf.c
 sqrtl.c
 trunc.c
 truncf.c
 truncl.c
lib/zig/libc/musl/src/math/x32/
 __invtrigl.s
 acosl.s
 asinl.s
 atan2l.s
 atanl.s
 ceill.s
 exp2l.s
 expl.s
 expm1l.s
 fabs.s
 fabsf.s
 fabsl.s
 floorl.s
 fma.c
 fmaf.c
 fmodl.s
 llrint.s
 llrintf.s
 llrintl.s
 log10l.s
 log1pl.s
 log2l.s
 logl.s
 lrint.s
 lrintf.s
 lrintl.s
 remainderl.s
 rintl.s
 sqrt.s
 sqrtf.s
 sqrtl.s
 truncl.s
lib/zig/libc/musl/src/math/x86_64/
 __invtrigl.s
 acosl.s
 asinl.s
 atan2l.s
 atanl.s
 ceill.s
 exp2l.s
 expl.s
 expm1l.s
 fabs.s
 fabsf.s
 fabsl.s
 floorl.s
 fma.c
 fmaf.c
 fmodl.s
 llrint.s
 llrintf.s
 llrintl.s
 log10l.s
 log1pl.s
 log2l.s
 logl.s
 lrint.s
 lrintf.s
 lrintl.s
 remainderl.s
 rintl.s
 sqrt.s
 sqrtf.s
 sqrtl.s
 truncl.s
lib/zig/libc/musl/src/misc/
 a64l.c
 basename.c
 dirname.c
 ffs.c
 ffsl.c
 ffsll.c
 fmtmsg.c
 forkpty.c
 get_current_dir_name.c
 getauxval.c
 getdomainname.c
 getentropy.c
 gethostid.c
 getopt.c
 getopt_long.c
 getpriority.c
 getresgid.c
 getresuid.c
 getrlimit.c
 getrusage.c
 getsubopt.c
 initgroups.c
 ioctl.c
 issetugid.c
 lockf.c
 login_tty.c
 mntent.c
 nftw.c
 openpty.c
 ptsname.c
 pty.c
 realpath.c
 setdomainname.c
 setpriority.c
 setrlimit.c
 syscall.c
 syslog.c
 uname.c
 wordexp.c
lib/zig/libc/musl/src/mman/
 madvise.c
 mincore.c
 mlock.c
 mlockall.c
 mmap.c
 mprotect.c
 mremap.c
 msync.c
 munlock.c
 munlockall.c
 munmap.c
 posix_madvise.c
 shm_open.c
lib/zig/libc/musl/src/mq/
 mq_close.c
 mq_getattr.c
 mq_notify.c
 mq_open.c
 mq_receive.c
 mq_send.c
 mq_setattr.c
 mq_timedreceive.c
 mq_timedsend.c
 mq_unlink.c
lib/zig/libc/musl/src/multibyte/
 btowc.c
 c16rtomb.c
 c32rtomb.c
 internal.c
 internal.h
 mblen.c
 mbrlen.c
 mbrtoc16.c
 mbrtoc32.c
 mbrtowc.c
 mbsinit.c
 mbsnrtowcs.c
 mbsrtowcs.c
 mbstowcs.c
 mbtowc.c
 wcrtomb.c
 wcsnrtombs.c
 wcsrtombs.c
 wcstombs.c
 wctob.c
 wctomb.c
lib/zig/libc/musl/src/network/
 accept.c
 accept4.c
 bind.c
 connect.c
 dn_comp.c
 dn_expand.c
 dn_skipname.c
 dns_parse.c
 ent.c
 ether.c
 freeaddrinfo.c
 gai_strerror.c
 getaddrinfo.c
 gethostbyaddr.c
 gethostbyaddr_r.c
 gethostbyname.c
 gethostbyname2.c
 gethostbyname2_r.c
 gethostbyname_r.c
 getifaddrs.c
 getnameinfo.c
 getpeername.c
 getservbyname.c
 getservbyname_r.c
 getservbyport.c
 getservbyport_r.c
 getsockname.c
 getsockopt.c
 h_errno.c
 herror.c
 hstrerror.c
 htonl.c
 htons.c
 if_freenameindex.c
 if_indextoname.c
 if_nameindex.c
 if_nametoindex.c
 in6addr_any.c
 in6addr_loopback.c
 inet_addr.c
 inet_aton.c
 inet_legacy.c
 inet_ntoa.c
 inet_ntop.c
 inet_pton.c
 listen.c
 lookup.h
 lookup_ipliteral.c
 lookup_name.c
 lookup_serv.c
 netlink.c
 netlink.h
 netname.c
 ns_parse.c
 ntohl.c
 ntohs.c
 proto.c
 recv.c
 recvfrom.c
 recvmmsg.c
 recvmsg.c
 res_init.c
 res_mkquery.c
 res_msend.c
 res_query.c
 res_querydomain.c
 res_send.c
 res_state.c
 resolvconf.c
 send.c
 sendmmsg.c
 sendmsg.c
 sendto.c
 serv.c
 setsockopt.c
 shutdown.c
 sockatmark.c
 socket.c
 socketpair.c
lib/zig/libc/musl/src/passwd/
 fgetgrent.c
 fgetpwent.c
 fgetspent.c
 getgr_a.c
 getgr_r.c
 getgrent.c
 getgrent_a.c
 getgrouplist.c
 getpw_a.c
 getpw_r.c
 getpwent.c
 getpwent_a.c
 getspent.c
 getspnam.c
 getspnam_r.c
 lckpwdf.c
 nscd.h
 nscd_query.c
 putgrent.c
 putpwent.c
 putspent.c
 pwf.h
lib/zig/libc/musl/src/prng/
 __rand48_step.c
 __seed48.c
 drand48.c
 lcong48.c
 lrand48.c
 mrand48.c
 rand.c
 rand48.h
 rand_r.c
 random.c
 seed48.c
 srand48.c
lib/zig/libc/musl/src/process/
 execl.c
 execle.c
 execlp.c
 execv.c
 execve.c
 execvp.c
 fdop.h
 fexecve.c
 fork.c
 posix_spawn.c
 posix_spawn_file_actions_addclose.c
 posix_spawn_file_actions_adddup2.c
 posix_spawn_file_actions_addopen.c
 posix_spawn_file_actions_destroy.c
 posix_spawn_file_actions_init.c
 posix_spawnattr_destroy.c
 posix_spawnattr_getflags.c
 posix_spawnattr_getpgroup.c
 posix_spawnattr_getsigdefault.c
 posix_spawnattr_getsigmask.c
 posix_spawnattr_init.c
 posix_spawnattr_sched.c
 posix_spawnattr_setflags.c
 posix_spawnattr_setpgroup.c
 posix_spawnattr_setsigdefault.c
 posix_spawnattr_setsigmask.c
 posix_spawnp.c
 system.c
 vfork.c
 wait.c
 waitid.c
 waitpid.c
lib/zig/libc/musl/src/process/arm/vfork.s
lib/zig/libc/musl/src/process/i386/vfork.s
lib/zig/libc/musl/src/process/s390x/vfork.s
lib/zig/libc/musl/src/process/sh/vfork.s
lib/zig/libc/musl/src/process/x32/vfork.s
lib/zig/libc/musl/src/process/x86_64/vfork.s
lib/zig/libc/musl/src/regex/
 fnmatch.c
 glob.c
 regcomp.c
 regerror.c
 regexec.c
 tre-mem.c
 tre.h
lib/zig/libc/musl/src/sched/
 affinity.c
 sched_cpucount.c
 sched_get_priority_max.c
 sched_getcpu.c
 sched_getparam.c
 sched_getscheduler.c
 sched_rr_get_interval.c
 sched_setparam.c
 sched_setscheduler.c
 sched_yield.c
lib/zig/libc/musl/src/search/
 hsearch.c
 insque.c
 lsearch.c
 tdelete.c
 tdestroy.c
 tfind.c
 tsearch.c
 tsearch.h
 twalk.c
lib/zig/libc/musl/src/select/
 poll.c
 pselect.c
 select.c
lib/zig/libc/musl/src/setjmp/
 longjmp.c
 setjmp.c
lib/zig/libc/musl/src/setjmp/aarch64/
 longjmp.s
 setjmp.s
lib/zig/libc/musl/src/setjmp/arm/
 longjmp.s
 setjmp.s
lib/zig/libc/musl/src/setjmp/i386/
 longjmp.s
 setjmp.s
lib/zig/libc/musl/src/setjmp/m68k/
 longjmp.s
 setjmp.s
lib/zig/libc/musl/src/setjmp/microblaze/
 longjmp.s
 setjmp.s
lib/zig/libc/musl/src/setjmp/mips/
 longjmp.S
 setjmp.S
lib/zig/libc/musl/src/setjmp/mips64/
 longjmp.S
 setjmp.S
lib/zig/libc/musl/src/setjmp/mipsn32/
 longjmp.S
 setjmp.S
lib/zig/libc/musl/src/setjmp/or1k/
 longjmp.s
 setjmp.s
lib/zig/libc/musl/src/setjmp/powerpc/
 longjmp.S
 setjmp.S
lib/zig/libc/musl/src/setjmp/powerpc64/
 longjmp.s
 setjmp.s
lib/zig/libc/musl/src/setjmp/s390x/
 longjmp.s
 setjmp.s
lib/zig/libc/musl/src/setjmp/sh/
 longjmp.S
 setjmp.S
lib/zig/libc/musl/src/setjmp/x32/
 longjmp.s
 setjmp.s
lib/zig/libc/musl/src/setjmp/x86_64/
 longjmp.s
 setjmp.s
lib/zig/libc/musl/src/signal/
 block.c
 getitimer.c
 kill.c
 killpg.c
 psiginfo.c
 psignal.c
 raise.c
 restore.c
 setitimer.c
 sigaction.c
 sigaddset.c
 sigaltstack.c
 sigandset.c
 sigdelset.c
 sigemptyset.c
 sigfillset.c
 sighold.c
 sigignore.c
 siginterrupt.c
 sigisemptyset.c
 sigismember.c
 siglongjmp.c
 signal.c
 sigorset.c
 sigpause.c
 sigpending.c
 sigprocmask.c
 sigqueue.c
 sigrelse.c
 sigrtmax.c
 sigrtmin.c
 sigset.c
 sigsetjmp.c
 sigsetjmp_tail.c
 sigsuspend.c
 sigtimedwait.c
 sigwait.c
 sigwaitinfo.c
lib/zig/libc/musl/src/signal/aarch64/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/arm/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/i386/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/m68k/sigsetjmp.s
lib/zig/libc/musl/src/signal/microblaze/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/mips/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/mips64/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/mipsn32/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/or1k/sigsetjmp.s
lib/zig/libc/musl/src/signal/powerpc/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/powerpc64/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/s390x/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/sh/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/x32/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/signal/x86_64/
 restore.s
 sigsetjmp.s
lib/zig/libc/musl/src/stat/
 __xstat.c
 chmod.c
 fchmod.c
 fchmodat.c
 fstat.c
 fstatat.c
 futimens.c
 futimesat.c
 lchmod.c
 lstat.c
 mkdir.c
 mkdirat.c
 mkfifo.c
 mkfifoat.c
 mknod.c
 mknodat.c
 stat.c
 statvfs.c
 umask.c
 utimensat.c
lib/zig/libc/musl/src/stdio/
 __fclose_ca.c
 __fdopen.c
 __fmodeflags.c
 __fopen_rb_ca.c
 __lockfile.c
 __overflow.c
 __stdio_close.c
 __stdio_exit.c
 __stdio_read.c
 __stdio_seek.c
 __stdio_write.c
 __stdout_write.c
 __string_read.c
 __toread.c
 __towrite.c
 __uflow.c
 asprintf.c
 clearerr.c
 dprintf.c
 ext.c
 ext2.c
 fclose.c
 feof.c
 ferror.c
 fflush.c
 fgetc.c
 fgetln.c
 fgetpos.c
 fgets.c
 fgetwc.c
 fgetws.c
 fileno.c
 flockfile.c
 fmemopen.c
 fopen.c
 fopencookie.c
 fprintf.c
 fputc.c
 fputs.c
 fputwc.c
 fputws.c
 fread.c
 freopen.c
 fscanf.c
 fseek.c
 fsetpos.c
 ftell.c
 ftrylockfile.c
 funlockfile.c
 fwide.c
 fwprintf.c
 fwrite.c
 fwscanf.c
 getc.c
 getc.h
 getc_unlocked.c
 getchar.c
 getchar_unlocked.c
 getdelim.c
 getline.c
 gets.c
 getw.c
 getwc.c
 getwchar.c
 ofl.c
 ofl_add.c
 open_memstream.c
 open_wmemstream.c
 pclose.c
 perror.c
 popen.c
 printf.c
 putc.c
 putc.h
 putc_unlocked.c
 putchar.c
 putchar_unlocked.c
 puts.c
 putw.c
 putwc.c
 putwchar.c
 remove.c
 rename.c
 rewind.c
 scanf.c
 setbuf.c
 setbuffer.c
 setlinebuf.c
 setvbuf.c
 snprintf.c
 sprintf.c
 sscanf.c
 stderr.c
 stdin.c
 stdout.c
 swprintf.c
 swscanf.c
 tempnam.c
 tmpfile.c
 tmpnam.c
 ungetc.c
 ungetwc.c
 vasprintf.c
 vdprintf.c
 vfprintf.c
 vfscanf.c
 vfwprintf.c
 vfwscanf.c
 vprintf.c
 vscanf.c
 vsnprintf.c
 vsprintf.c
 vsscanf.c
 vswprintf.c
 vswscanf.c
 vwprintf.c
 vwscanf.c
 wprintf.c
 wscanf.c
lib/zig/libc/musl/src/stdlib/
 abs.c
 atof.c
 atoi.c
 atol.c
 atoll.c
 bsearch.c
 div.c
 ecvt.c
 fcvt.c
 gcvt.c
 imaxabs.c
 imaxdiv.c
 labs.c
 ldiv.c
 llabs.c
 lldiv.c
 qsort.c
 strtod.c
 strtol.c
 wcstod.c
 wcstol.c
lib/zig/libc/musl/src/string/
 bcmp.c
 bcopy.c
 bzero.c
 explicit_bzero.c
 index.c
 memccpy.c
 memchr.c
 memcmp.c
 memcpy.c
 memmem.c
 memmove.c
 mempcpy.c
 memrchr.c
 memset.c
 rindex.c
 stpcpy.c
 stpncpy.c
 strcasecmp.c
 strcasestr.c
 strcat.c
 strchr.c
 strchrnul.c
 strcmp.c
 strcpy.c
 strcspn.c
 strdup.c
 strerror_r.c
 strlcat.c
 strlcpy.c
 strlen.c
 strncasecmp.c
 strncat.c
 strncmp.c
 strncpy.c
 strndup.c
 strnlen.c
 strpbrk.c
 strrchr.c
 strsep.c
 strsignal.c
 strspn.c
 strstr.c
 strtok.c
 strtok_r.c
 strverscmp.c
 swab.c
 wcpcpy.c
 wcpncpy.c
 wcscasecmp.c
 wcscasecmp_l.c
 wcscat.c
 wcschr.c
 wcscmp.c
 wcscpy.c
 wcscspn.c
 wcsdup.c
 wcslen.c
 wcsncasecmp.c
 wcsncasecmp_l.c
 wcsncat.c
 wcsncmp.c
 wcsncpy.c
 wcsnlen.c
 wcspbrk.c
 wcsrchr.c
 wcsspn.c
 wcsstr.c
 wcstok.c
 wcswcs.c
 wmemchr.c
 wmemcmp.c
 wmemcpy.c
 wmemmove.c
 wmemset.c
lib/zig/libc/musl/src/string/arm/
 __aeabi_memcpy.s
 __aeabi_memset.s
 memcpy.c
 memcpy_le.S
lib/zig/libc/musl/src/string/i386/
 memcpy.s
 memmove.s
 memset.s
lib/zig/libc/musl/src/string/x86_64/
 memcpy.s
 memmove.s
 memset.s
lib/zig/libc/musl/src/temp/
 __randname.c
 mkdtemp.c
 mkostemp.c
 mkostemps.c
 mkstemp.c
 mkstemps.c
 mktemp.c
lib/zig/libc/musl/src/termios/
 cfgetospeed.c
 cfmakeraw.c
 cfsetospeed.c
 tcdrain.c
 tcflow.c
 tcflush.c
 tcgetattr.c
 tcgetsid.c
 tcsendbreak.c
 tcsetattr.c
lib/zig/libc/musl/src/thread/
 __lock.c
 __set_thread_area.c
 __syscall_cp.c
 __timedwait.c
 __tls_get_addr.c
 __unmapself.c
 __wait.c
 call_once.c
 clone.c
 cnd_broadcast.c
 cnd_destroy.c
 cnd_init.c
 cnd_signal.c
 cnd_timedwait.c
 cnd_wait.c
 default_attr.c
 lock_ptc.c
 mtx_destroy.c
 mtx_init.c
 mtx_lock.c
 mtx_timedlock.c
 mtx_trylock.c
 mtx_unlock.c
 pthread_atfork.c
 pthread_attr_destroy.c
 pthread_attr_get.c
 pthread_attr_init.c
 pthread_attr_setdetachstate.c
 pthread_attr_setguardsize.c
 pthread_attr_setinheritsched.c
 pthread_attr_setschedparam.c
 pthread_attr_setschedpolicy.c
 pthread_attr_setscope.c
 pthread_attr_setstack.c
 pthread_attr_setstacksize.c
 pthread_barrier_destroy.c
 pthread_barrier_init.c
 pthread_barrier_wait.c
 pthread_barrierattr_destroy.c
 pthread_barrierattr_init.c
 pthread_barrierattr_setpshared.c
 pthread_cancel.c
 pthread_cleanup_push.c
 pthread_cond_broadcast.c
 pthread_cond_destroy.c
 pthread_cond_init.c
 pthread_cond_signal.c
 pthread_cond_timedwait.c
 pthread_cond_wait.c
 pthread_condattr_destroy.c
 pthread_condattr_init.c
 pthread_condattr_setclock.c
 pthread_condattr_setpshared.c
 pthread_create.c
 pthread_detach.c
 pthread_equal.c
 pthread_getattr_np.c
 pthread_getconcurrency.c
 pthread_getcpuclockid.c
 pthread_getschedparam.c
 pthread_getspecific.c
 pthread_join.c
 pthread_key_create.c
 pthread_key_delete.c
 pthread_kill.c
 pthread_mutex_consistent.c
 pthread_mutex_destroy.c
 pthread_mutex_getprioceiling.c
 pthread_mutex_init.c
 pthread_mutex_lock.c
 pthread_mutex_setprioceiling.c
 pthread_mutex_timedlock.c
 pthread_mutex_trylock.c
 pthread_mutex_unlock.c
 pthread_mutexattr_destroy.c
 pthread_mutexattr_init.c
 pthread_mutexattr_setprotocol.c
 pthread_mutexattr_setpshared.c
 pthread_mutexattr_setrobust.c
 pthread_mutexattr_settype.c
 pthread_once.c
 pthread_rwlock_destroy.c
 pthread_rwlock_init.c
 pthread_rwlock_rdlock.c
 pthread_rwlock_timedrdlock.c
 pthread_rwlock_timedwrlock.c
 pthread_rwlock_tryrdlock.c
 pthread_rwlock_trywrlock.c
 pthread_rwlock_unlock.c
 pthread_rwlock_wrlock.c
 pthread_rwlockattr_destroy.c
 pthread_rwlockattr_init.c
 pthread_rwlockattr_setpshared.c
 pthread_self.c
 pthread_setattr_default_np.c
 pthread_setcancelstate.c
 pthread_setcanceltype.c
 pthread_setconcurrency.c
 pthread_setname_np.c
 pthread_setschedparam.c
 pthread_setschedprio.c
 pthread_setspecific.c
 pthread_sigmask.c
 pthread_spin_destroy.c
 pthread_spin_init.c
 pthread_spin_lock.c
 pthread_spin_trylock.c
 pthread_spin_unlock.c
 pthread_testcancel.c
 sem_destroy.c
 sem_getvalue.c
 sem_init.c
 sem_open.c
 sem_post.c
 sem_timedwait.c
 sem_trywait.c
 sem_unlink.c
 sem_wait.c
 synccall.c
 syscall_cp.c
 thrd_create.c
 thrd_exit.c
 thrd_join.c
 thrd_sleep.c
 thrd_yield.c
 tls.c
 tss_create.c
 tss_delete.c
 tss_set.c
 vmlock.c
lib/zig/libc/musl/src/thread/aarch64/
 __set_thread_area.s
 __unmapself.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/arm/
 __aeabi_read_tp.s
 __set_thread_area.c
 __unmapself.s
 atomics.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/i386/
 __set_thread_area.s
 __unmapself.s
 clone.s
 syscall_cp.s
 tls.s
lib/zig/libc/musl/src/thread/m68k/
 __m68k_read_tp.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/microblaze/
 __set_thread_area.s
 __unmapself.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/mips/
 __unmapself.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/mips64/
 __unmapself.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/mipsn32/
 __unmapself.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/or1k/
 __set_thread_area.s
 __unmapself.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/powerpc/
 __set_thread_area.s
 __unmapself.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/powerpc64/
 __set_thread_area.s
 __unmapself.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/s390x/
 __set_thread_area.s
 __tls_get_offset.s
 __unmapself.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/sh/
 __set_thread_area.c
 __unmapself.c
 __unmapself_mmu.s
 atomics.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/thread/x32/
 __set_thread_area.s
 __unmapself.s
 clone.s
 syscall_cp.s
 syscall_cp_fixup.c
lib/zig/libc/musl/src/thread/x86_64/
 __set_thread_area.s
 __unmapself.s
 clone.s
 syscall_cp.s
lib/zig/libc/musl/src/time/
 __map_file.c
 __month_to_secs.c
 __secs_to_tm.c
 __tm_to_secs.c
 __tz.c
 __year_to_secs.c
 asctime.c
 asctime_r.c
 clock.c
 clock_getcpuclockid.c
 clock_getres.c
 clock_gettime.c
 clock_nanosleep.c
 clock_settime.c
 ctime.c
 ctime_r.c
 difftime.c
 ftime.c
 getdate.c
 gettimeofday.c
 gmtime.c
 gmtime_r.c
 localtime.c
 localtime_r.c
 mktime.c
 nanosleep.c
 strftime.c
 strptime.c
 time.c
 time_impl.h
 timegm.c
 timer_create.c
 timer_delete.c
 timer_getoverrun.c
 timer_gettime.c
 timer_settime.c
 times.c
 timespec_get.c
 utime.c
 wcsftime.c
lib/zig/libc/musl/src/unistd/
 _exit.c
 access.c
 acct.c
 alarm.c
 chdir.c
 chown.c
 close.c
 ctermid.c
 dup.c
 dup2.c
 dup3.c
 faccessat.c
 fchdir.c
 fchown.c
 fchownat.c
 fdatasync.c
 fsync.c
 ftruncate.c
 getcwd.c
 getegid.c
 geteuid.c
 getgid.c
 getgroups.c
 gethostname.c
 getlogin.c
 getlogin_r.c
 getpgid.c
 getpgrp.c
 getpid.c
 getppid.c
 getsid.c
 getuid.c
 isatty.c
 lchown.c
 link.c
 linkat.c
 lseek.c
 nice.c
 pause.c
 pipe.c
 pipe2.c
 posix_close.c
 pread.c
 preadv.c
 pwrite.c
 pwritev.c
 read.c
 readlink.c
 readlinkat.c
 readv.c
 renameat.c
 rmdir.c
 setegid.c
 seteuid.c
 setgid.c
 setpgid.c
 setpgrp.c
 setregid.c
 setresgid.c
 setresuid.c
 setreuid.c
 setsid.c
 setuid.c
 setxid.c
 sleep.c
 symlink.c
 symlinkat.c
 sync.c
 tcgetpgrp.c
 tcsetpgrp.c
 truncate.c
 ttyname.c
 ttyname_r.c
 ualarm.c
 unlink.c
 unlinkat.c
 usleep.c
 write.c
 writev.c
lib/zig/libc/musl/src/unistd/mips/pipe.s
lib/zig/libc/musl/src/unistd/mips64/pipe.s
lib/zig/libc/musl/src/unistd/mipsn32/pipe.s
lib/zig/libc/musl/src/unistd/sh/pipe.s
lib/zig/libcxx/include/
 __bit_reference
 __bsd_locale_defaults.h
 __bsd_locale_fallbacks.h
 __config
 __config_site.in
 __debug
 __errc
 __functional_03
 __functional_base
 __functional_base_03
 __hash_table
 __libcpp_version
 __locale
 __mutex_base
 __node_handle
 __nullptr
 __split_buffer
 __sso_allocator
 __std_stream
 __string
 __threading_support
 __tree
 __tuple
 __undef_macros
 algorithm
 any
 array
 atomic
 bit
 bitset
 cassert
 ccomplex
 cctype
 cerrno
 cfenv
 cfloat
 charconv
 chrono
 cinttypes
 ciso646
 climits
 clocale
 cmath
 codecvt
 compare
 complex
 complex.h
 condition_variable
 csetjmp
 csignal
 cstdarg
 cstdbool
 cstddef
 cstdint
 cstdio
 cstdlib
 cstring
 ctgmath
 ctime
 ctype.h
 cwchar
 cwctype
 deque
 errno.h
 exception
 filesystem
 float.h
 forward_list
 fstream
 functional
 future
 initializer_list
 inttypes.h
 iomanip
 ios
 iosfwd
 iostream
 istream
 iterator
 limits
 limits.h
 list
 locale
 locale.h
 map
 math.h
 memory
 module.modulemap
 mutex
 new
 numeric
 optional
 ostream
 queue
 random
 ratio
 regex
 scoped_allocator
 set
 setjmp.h
 shared_mutex
 span
 sstream
 stack
 stdbool.h
 stddef.h
 stdexcept
 stdint.h
 stdio.h
 stdlib.h
 streambuf
 string
 string.h
 string_view
 strstream
 system_error
 tgmath.h
 thread
 tuple
 type_traits
 typeindex
 typeinfo
 unordered_map
 unordered_set
 utility
 valarray
 variant
 vector
 version
 wchar.h
 wctype.h
lib/zig/libcxx/include/experimental/
 __config
 __memory
 algorithm
 any
 chrono
 coroutine
 deque
 filesystem
 forward_list
 functional
 iterator
 list
 map
 memory_resource
 numeric
 optional
 propagate_const
 ratio
 regex
 set
 simd
 string
 string_view
 system_error
 tuple
 type_traits
 unordered_map
 unordered_set
 utility
 vector
lib/zig/libcxx/include/ext/
 __hash
 hash_map
 hash_set
lib/zig/libcxx/include/support/android/locale_bionic.h
lib/zig/libcxx/include/support/fuchsia/xlocale.h
lib/zig/libcxx/include/support/ibm/
 limits.h
 locale_mgmt_aix.h
 support.h
 xlocale.h
lib/zig/libcxx/include/support/musl/xlocale.h
lib/zig/libcxx/include/support/newlib/xlocale.h
lib/zig/libcxx/include/support/solaris/
 floatingpoint.h
 wchar.h
 xlocale.h
lib/zig/libcxx/include/support/win32/
 limits_msvc_win32.h
 locale_win32.h
lib/zig/libcxx/include/support/xlocale/
 __nop_locale_mgmt.h
 __posix_l_fallback.h
 __strtonum_fallback.h
 xlocale.h
lib/zig/libunwind/include/
 __libunwind_config.h
 libunwind.h
 unwind.h
lib/zig/libunwind/include/mach-o/compact_unwind_encoding.h
lib/zig/libunwind/src/
 AddressSpace.hpp
 CompactUnwinder.hpp
 DwarfInstructions.hpp
 DwarfParser.hpp
 EHHeaderParser.hpp
 RWMutex.hpp
 Registers.hpp
 Unwind-EHABI.cpp
 Unwind-EHABI.h
 Unwind-seh.cpp
 Unwind-sjlj.c
 UnwindCursor.hpp
 UnwindLevel1-gcc-ext.c
 UnwindLevel1.c
 UnwindRegistersRestore.S
 UnwindRegistersSave.S
 Unwind_AppleExtras.cpp
 assembly.h
 config.h
 dwarf2.h
 libunwind.cpp
 libunwind_ext.h
lib/zig/std/
 array_list.zig
 ascii.zig
 atomic.zig
 base64.zig
 buf_map.zig
 buf_set.zig
 buffer.zig
 build.zig
 c.zig
 coff.zig
 crypto.zig
 cstr.zig
 debug.zig
 dwarf.zig
 dynamic_library.zig
 elf.zig
 event.zig
 fmt.zig
 hash.zig
 hash_map.zig
 heap.zig
 io.zig
 json.zig
 lazy_init.zig
 linked_list.zig
 macho.zig
 math.zig
 mem.zig
 meta.zig
 mutex.zig
 net.zig
 os.zig
 pdb.zig
 priority_queue.zig
 rand.zig
 rb.zig
 segmented_list.zig
 sort.zig
 spinlock.zig
 statically_initialized_mutex.zig
 std.zig
 testing.zig
 unicode.zig
 valgrind.zig
 zig.zig
lib/zig/std/atomic/
 int.zig
 queue.zig
 stack.zig
lib/zig/std/build/fmt.zig
lib/zig/std/c/
 darwin.zig
 dragonfly.zig
 freebsd.zig
 linux.zig
 netbsd.zig
 windows.zig
lib/zig/std/crypto/
 blake2.zig
 chacha20.zig
 hmac.zig
 md5.zig
 poly1305.zig
 sha1.zig
 sha2.zig
 sha3.zig
 x25519.zig
lib/zig/std/debug/failing_allocator.zig
lib/zig/std/event/
 channel.zig
 fs.zig
 future.zig
 group.zig
 io.zig
 lock.zig
 locked.zig
 loop.zig
 net.zig
 rwlock.zig
 rwlocked.zig
lib/zig/std/fmt/
 errol.zig
 parse_float.zig
lib/zig/std/fmt/errol/
 enum3.zig
 lookup.zig
lib/zig/std/hash/
 adler.zig
 crc.zig
 fnv.zig
 siphash.zig
lib/zig/std/io/seekable_stream.zig
lib/zig/std/math/
 acos.zig
 acosh.zig
 asin.zig
 asinh.zig
 atan.zig
 atan2.zig
 atanh.zig
 big.zig
 cbrt.zig
 ceil.zig
 complex.zig
 copysign.zig
 cos.zig
 cosh.zig
 exp.zig
 exp2.zig
 expm1.zig
 expo2.zig
 fabs.zig
 floor.zig
 fma.zig
 frexp.zig
 hypot.zig
 ilogb.zig
 inf.zig
 isfinite.zig
 isinf.zig
 isnan.zig
 isnormal.zig
 ln.zig
 log.zig
 log10.zig
 log1p.zig
 log2.zig
 modf.zig
 nan.zig
 pow.zig
 powi.zig
 round.zig
 scalbn.zig
 signbit.zig
 sin.zig
 sinh.zig
 sqrt.zig
 tan.zig
 tanh.zig
 trunc.zig
lib/zig/std/math/big/int.zig
lib/zig/std/math/complex/
 abs.zig
 acos.zig
 acosh.zig
 arg.zig
 asin.zig
 asinh.zig
 atan.zig
 atanh.zig
 conj.zig
 cos.zig
 cosh.zig
 exp.zig
 ldexp.zig
 log.zig
 pow.zig
 proj.zig
 sin.zig
 sinh.zig
 sqrt.zig
 tan.zig
 tanh.zig
lib/zig/std/meta/trait.zig
lib/zig/std/os/
 child_process.zig
 darwin.zig
 dragonfly.zig
 epoch.zig
 file.zig
 freebsd.zig
 get_app_data_dir.zig
 get_user_id.zig
 linux.zig
 netbsd.zig
 path.zig
 time.zig
 uefi.zig
 windows.zig
 zen.zig
lib/zig/std/os/darwin/errno.zig
lib/zig/std/os/dragonfly/errno.zig
lib/zig/std/os/freebsd/errno.zig
lib/zig/std/os/linux/
 arm64.zig
 errno.zig
 vdso.zig
 x86_64.zig
lib/zig/std/os/netbsd/errno.zig
lib/zig/std/os/windows/
 advapi32.zig
 error.zig
 kernel32.zig
 ntdll.zig
 ole32.zig
 shell32.zig
 util.zig
lib/zig/std/rand/ziggurat.zig
lib/zig/std/special/
 bootstrap.zig
 bootstrap_lib.zig
 bootstrap_windows_tls.zig
 build_runner.zig
 builtin.zig
 compiler_rt.zig
 fmt_runner.zig
 panic.zig
 test_runner.zig
lib/zig/std/special/compiler_rt/
 addXf3.zig
 aulldiv.zig
 aullrem.zig
 comparetf2.zig
 divdf3.zig
 divsf3.zig
 divti3.zig
 extendXfYf2.zig
 fixdfdi.zig
 fixdfsi.zig
 fixdfti.zig
 fixint.zig
 fixsfdi.zig
 fixsfsi.zig
 fixsfti.zig
 fixtfdi.zig
 fixtfsi.zig
 fixtfti.zig
 fixuint.zig
 fixunsdfdi.zig
 fixunsdfsi.zig
 fixunsdfti.zig
 fixunssfdi.zig
 fixunssfsi.zig
 fixunssfti.zig
 fixunstfdi.zig
 fixunstfsi.zig
 fixunstfti.zig
 floattidf.zig
 floattisf.zig
 floattitf.zig
 floatunditf.zig
 floatunsitf.zig
 floatuntidf.zig
 floatuntisf.zig
 floatuntitf.zig
 modti3.zig
 mulXf3.zig
 muloti4.zig
 multi3.zig
 negXf2.zig
 popcountdi2.zig
 truncXfYf2.zig
 udivmod.zig
 udivmoddi4.zig
 udivmodti4.zig
 udivti3.zig
 umodti3.zig
lib/zig/std/special/fmt/
 arg.zig
 errmsg.zig
 main.zig
lib/zig/std/special/init-exe/build.zig
lib/zig/std/special/init-exe/src/main.zig
lib/zig/std/special/init-lib/build.zig
lib/zig/std/special/init-lib/src/main.zig
lib/zig/std/valgrind/
 callgrind.zig
 memcheck.zig
lib/zig/std/zig/
 ast.zig
 parse.zig
 parse_string_literal.zig
 render.zig
 tokenizer.zig


[FILE:480:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2019-04-08 19:41:41 UTC
+++ CMakeLists.txt
@@ -461,6 +461,7 @@ set(ZIG_STD_FILES
     "c.zig"
     "c/darwin.zig"
     "c/freebsd.zig"
+    "c/dragonfly.zig"
     "c/linux.zig"
     "c/netbsd.zig"
     "c/windows.zig"
@@ -594,6 +595,8 @@ set(ZIG_STD_FILES
     "os/file.zig"
     "os/freebsd.zig"
     "os/freebsd/errno.zig"
+    "os/dragonfly.zig"
+    "os/dragonfly/errno.zig"
     "os/get_app_data_dir.zig"
     "os/get_user_id.zig"
     "os/linux.zig"


[FILE:471:patches/patch-build.zig]
--- build.zig.orig	2019-04-08 19:41:41 UTC
+++ build.zig
@@ -312,7 +312,7 @@ fn configureStage2(b: *Builder, exe: var
     }
     dependOnLib(b, exe, ctx.llvm);
 
-    if (exe.target.getOs() == builtin.Os.linux) {
+    if (exe.target.getOs() == builtin.Os.linux or exe.target.isDragonFly()) {
         try addCxxKnownPath(b, ctx, exe, "libstdc++.a",
             \\Unable to determine path to libstdc++.a
             \\On Fedora, install libstdc++-static and try again.


[FILE:538:patches/patch-src_libc__installation.cpp]
--- src/libc_installation.cpp.orig	2019-04-08 19:41:41 UTC
+++ src/libc_installation.cpp
@@ -459,7 +459,7 @@ Error zig_libc_find_native(ZigLibCInstal
 #else
     if ((err = zig_libc_find_native_include_dir_posix(self, verbose)))
         return err;
-#if defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD)
+#if defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD) || defined(ZIG_OS_DRAGONFLY)
     buf_init_from_str(&self->crt_dir, "/usr/lib");
 #elif defined(ZIG_OS_LINUX)
     if ((err = zig_libc_find_native_crt_dir_posix(self, verbose)))


[FILE:1491:patches/patch-src_link.cpp]
--- src/link.cpp.orig	2019-04-08 19:41:41 UTC
+++ src/link.cpp
@@ -872,7 +872,7 @@ static const char *getLDMOption(const Zi
                 return "elf32_x86_64";
             }
             // Any target elf will use the freebsd osabi if suffixed with "_fbsd".
-            if (t->os == OsFreeBSD) {
+            if (t->os == OsFreeBSD || t->os == OsDragonFly) {
                 return "elf_x86_64_fbsd";
             }
             return "elf_x86_64";
@@ -1043,6 +1043,17 @@ static void construct_linker_job_elf(Lin
                 lj->args.append("-lm");
                 lj->args.append("--end-group");
             } else {
+                if (g->zig_target->os == OsDragonFly) {
+                    // path to libgcc.a
+                    lj->args.append(
+                        "-L/raven/share/raven/toolchain/gcc8/lib/gcc/x86_64-raven-dragonfly5.4/8.3.0");
+                    // path to libgcc_s.so
+                    lj->args.append(
+                        "-L/raven/share/raven/toolchain/gcc8/lib");
+                    // prefer .a over .so
+                    // fixes: lld: warning: found local symbol '__thread_locale' in global part of symbol table in file /raven/share/raven/sysroot/DragonFly/usr/lib/libc.so
+                    lj->args.append("/raven/share/raven/sysroot/DragonFly/usr/lib/libc.a");
+                }
                 lj->args.append("-lgcc");
                 lj->args.append("--as-needed");
                 lj->args.append("-lgcc_s");


[FILE:2503:patches/patch-src_os.cpp]
--- src/os.cpp.orig	2019-04-08 19:41:41 UTC
+++ src/os.cpp
@@ -51,7 +51,7 @@ typedef SSIZE_T ssize_t;
 
 #endif
 
-#if defined(ZIG_OS_LINUX) || defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD)
+#if defined(ZIG_OS_LINUX) || defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD) || defined(ZIG_OS_DRAGONFLY)
 #include <link.h>
 #endif
 
@@ -59,7 +59,7 @@ typedef SSIZE_T ssize_t;
 #include <sys/auxv.h>
 #endif
 
-#if defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD)
+#if defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD) || defined(ZIG_OS_DRAGONFLY)
 #include <sys/sysctl.h>
 #endif
 
@@ -84,7 +84,7 @@ static clock_serv_t macos_monotonic_cloc
 #if defined(__APPLE__) && !defined(environ)
 #include <crt_externs.h>
 #define environ (*_NSGetEnviron())
-#elif defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD)
+#elif defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD) || defined(ZIG_OS_DRAGONFLY)
 extern char **environ;
 #endif
 
@@ -1365,7 +1365,7 @@ static void init_rand() {
         zig_panic("unable to open /dev/urandom");
     }
     char bytes[sizeof(unsigned)];
-    size_t amt_read;
+    ssize_t amt_read;
     while ((amt_read = read(fd, bytes, sizeof(unsigned))) == -1) {
         if (errno == EINTR) continue;
         zig_panic("unable to read /dev/urandom");
@@ -1443,7 +1443,7 @@ Error os_self_exe_path(Buf *out_path) {
     }
     buf_resize(out_path, amt);
     return ErrorNone;
-#elif defined(ZIG_OS_FREEBSD)
+#elif defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_DRAGONFLY)
     buf_resize(out_path, PATH_MAX);
     int mib[4] = { CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME, -1 };
     size_t cb = PATH_MAX;
@@ -1779,7 +1779,7 @@ Error os_get_app_data_dir(Buf *out_path,
 }
 
 
-#if defined(ZIG_OS_LINUX) || defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD)
+#if defined(ZIG_OS_LINUX) || defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD) || defined(ZIG_OS_DRAGONFLY)
 static int self_exe_shared_libs_callback(struct dl_phdr_info *info, size_t size, void *data) {
     ZigList<Buf *> *libs = reinterpret_cast< ZigList<Buf *> *>(data);
     if (info->dlpi_name[0] == '/') {
@@ -1790,7 +1790,7 @@ static int self_exe_shared_libs_callback
 #endif
 
 Error os_self_exe_shared_libs(ZigList<Buf *> &paths) {
-#if defined(ZIG_OS_LINUX) || defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD)
+#if defined(ZIG_OS_LINUX) || defined(ZIG_OS_FREEBSD) || defined(ZIG_OS_NETBSD) || defined(ZIG_OS_DRAGONFLY)
     paths.resize(0);
     dl_iterate_phdr(self_exe_shared_libs_callback, &paths);
     return ErrorNone;


[FILE:246:patches/patch-src_os.hpp]
--- src/os.hpp.orig	2019-04-08 19:41:41 UTC
+++ src/os.hpp
@@ -27,6 +27,8 @@
 #define ZIG_OS_FREEBSD
 #elif defined(__NetBSD__)
 #define ZIG_OS_NETBSD
+#elif defined(__DragonFly__)
+#define ZIG_OS_DRAGONFLY
 #else
 #define ZIG_OS_UNKNOWN
 #endif


[FILE:1996:patches/patch-src_target.cpp]
--- src/target.cpp.orig	2019-04-08 19:41:41 UTC
+++ src/target.cpp
@@ -857,6 +857,7 @@ uint32_t target_c_type_size_in_bits(cons
         case OsLinux:
         case OsMacOSX:
         case OsZen:
+        case OsDragonFly:
         case OsFreeBSD:
         case OsNetBSD:
         case OsOpenBSD:
@@ -896,7 +897,6 @@ uint32_t target_c_type_size_in_bits(cons
             }
         case OsAnanas:
         case OsCloudABI:
-        case OsDragonFly:
         case OsIOS:
         case OsKFreeBSD:
         case OsLv2:
@@ -1009,6 +1009,8 @@ static bool is_64_bit(ZigLLVM_ArchType a
 
 const char *target_dynamic_linker(const ZigTarget *target) {
     switch (target->os) {
+        case OsDragonFly:
+            return "/libexec/ld-elf.so.2";
         case OsFreeBSD:
             return "/libexec/ld-elf.so.1";
         case OsNetBSD:
@@ -1133,7 +1135,6 @@ const char *target_dynamic_linker(const
 
         case OsAnanas:
         case OsCloudABI:
-        case OsDragonFly:
         case OsFuchsia:
         case OsKFreeBSD:
         case OsLv2:
@@ -1327,7 +1328,7 @@ bool target_os_requires_libc(Os os) {
     // On Darwin, we always link libSystem which contains libc.
     // Similarly on FreeBSD and NetBSD we always link system libc
     // since this is the stable syscall interface.
-    return (target_os_is_darwin(os) || os == OsFreeBSD || os == OsNetBSD);
+    return (target_os_is_darwin(os) || os == OsFreeBSD || os == OsNetBSD || os == OsDragonFly);
 }
 
 bool target_supports_fpic(const ZigTarget *target) {
@@ -1355,7 +1356,6 @@ ZigLLVM_EnvironmentType target_default_a
         case OsFreestanding:
         case OsAnanas:
         case OsCloudABI:
-        case OsDragonFly:
         case OsLv2:
         case OsSolaris:
         case OsHaiku:
@@ -1378,6 +1378,7 @@ ZigLLVM_EnvironmentType target_default_a
         case OsOpenBSD:
         case OsMacOSX:
         case OsFreeBSD:
+        case OsDragonFly:
         case OsIOS:
         case OsTvOS:
         case OsWatchOS:


[FILE:329:patches/patch-src_zig__llvm.cpp]
--- src/zig_llvm.cpp.orig	2019-04-08 19:41:41 UTC
+++ src/zig_llvm.cpp
@@ -883,6 +883,7 @@ bool ZigLLVMWriteArchive(const char *arc
             break;
         case ZigLLVM_OpenBSD:
         case ZigLLVM_FreeBSD:
+        case ZigLLVM_DragonFly:
             kind = object::Archive::K_BSD;
             break;
         default:


[FILE:428:patches/patch-std_build.zig]
--- std/build.zig.orig	2019-04-08 19:41:41 UTC
+++ std/build.zig
@@ -894,6 +894,13 @@ pub const Target = union(enum) {
         };
     }
 
+    pub fn isDragonFly(self: *const Target) bool {
+        return switch (self.getOs()) {
+            builtin.Os.dragonfly => true,
+            else => false,
+        };
+    }
+
     pub fn wantSharedLibSymLinks(self: *const Target) bool {
         return !self.isWindows();
     }


[FILE:321:patches/patch-std_c.zig]
--- std/c.zig.orig	2019-04-08 19:41:41 UTC
+++ std/c.zig
@@ -7,6 +7,7 @@ pub use switch (builtin.os) {
     Os.macosx, Os.ios => @import("c/darwin.zig"),
     Os.freebsd => @import("c/freebsd.zig"),
     Os.netbsd => @import("c/netbsd.zig"),
+    Os.dragonfly => @import("c/dragonfly.zig"),
     else => struct {},
 };
 


[FILE:1852:patches/patch-std_debug.zig]
--- std/debug.zig.orig	2019-04-08 19:41:41 UTC
+++ std/debug.zig
@@ -290,7 +290,7 @@ pub fn writeCurrentStackTraceWindows(
 pub fn printSourceAtAddress(debug_info: *DebugInfo, out_stream: var, address: usize, tty_color: bool) !void {
     switch (builtin.os) {
         builtin.Os.macosx => return printSourceAtAddressMacOs(debug_info, out_stream, address, tty_color),
-        builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd => return printSourceAtAddressLinux(debug_info, out_stream, address, tty_color),
+        builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => return printSourceAtAddressLinux(debug_info, out_stream, address, tty_color),
         builtin.Os.windows => return printSourceAtAddressWindows(debug_info, out_stream, address, tty_color),
         else => return error.UnsupportedOperatingSystem,
     }
@@ -775,7 +775,7 @@ pub const OpenSelfDebugInfoError = error
 
 pub fn openSelfDebugInfo(allocator: *mem.Allocator) !DebugInfo {
     switch (builtin.os) {
-        builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd => return openSelfDebugInfoLinux(allocator),
+        builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => return openSelfDebugInfoLinux(allocator),
         builtin.Os.macosx, builtin.Os.ios => return openSelfDebugInfoMacOs(allocator),
         builtin.Os.windows => return openSelfDebugInfoWindows(allocator),
         else => return error.UnsupportedOperatingSystem,
@@ -1200,7 +1200,7 @@ pub const DebugInfo = switch (builtin.os
         sect_contribs: []pdb.SectionContribEntry,
         modules: []Module,
     },
-    builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd => DwarfInfo,
+    builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => DwarfInfo,
     else => @compileError("Unsupported OS"),
 };
 


[FILE:7095:patches/patch-std_event_fs.zig]
--- std/event/fs.zig.orig	2019-04-08 19:41:41 UTC
+++ std/event/fs.zig
@@ -86,6 +86,7 @@ pub async fn pwritev(loop: *Loop, fd: os
         builtin.Os.linux,
         builtin.Os.freebsd,
         builtin.Os.netbsd,
+        builtin.Os.dragonfly,
         => {
             const iovecs = try loop.allocator.alloc(os.posix.iovec_const, data.len);
             defer loop.allocator.free(iovecs);
@@ -224,6 +225,7 @@ pub async fn preadv(loop: *Loop, fd: os.
         builtin.Os.linux,
         builtin.Os.freebsd,
         builtin.Os.netbsd,
+        builtin.Os.dragonfly,
         => {
             const iovecs = try loop.allocator.alloc(os.posix.iovec, data.len);
             defer loop.allocator.free(iovecs);
@@ -404,7 +406,7 @@ pub async fn openPosix(
 
 pub async fn openRead(loop: *Loop, path: []const u8) os.File.OpenError!os.FileHandle {
     switch (builtin.os) {
-        builtin.Os.macosx, builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd => {
+        builtin.Os.macosx, builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
             const flags = posix.O_LARGEFILE | posix.O_RDONLY | posix.O_CLOEXEC;
             return await (async openPosix(loop, path, flags, os.File.default_mode) catch unreachable);
         },
@@ -434,6 +436,7 @@ pub async fn openWriteMode(loop: *Loop,
         builtin.Os.linux,
         builtin.Os.freebsd,
         builtin.Os.netbsd,
+        builtin.Os.dragonfly,
         => {
             const flags = posix.O_LARGEFILE | posix.O_WRONLY | posix.O_CREAT | posix.O_CLOEXEC | posix.O_TRUNC;
             return await (async openPosix(loop, path, flags, os.File.default_mode) catch unreachable);
@@ -456,7 +459,7 @@ pub async fn openReadWrite(
     mode: os.File.Mode,
 ) os.File.OpenError!os.FileHandle {
     switch (builtin.os) {
-        builtin.Os.macosx, builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd => {
+        builtin.Os.macosx, builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
             const flags = posix.O_LARGEFILE | posix.O_RDWR | posix.O_CREAT | posix.O_CLOEXEC;
             return await (async openPosix(loop, path, flags, mode) catch unreachable);
         },
@@ -484,7 +487,7 @@ pub const CloseOperation = struct {
     os_data: OsData,
 
     const OsData = switch (builtin.os) {
-        builtin.Os.linux, builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => OsDataPosix,
+        builtin.Os.linux, builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => OsDataPosix,
 
         builtin.Os.windows => struct {
             handle: ?os.FileHandle,
@@ -503,7 +506,7 @@ pub const CloseOperation = struct {
         self.* = CloseOperation{
             .loop = loop,
             .os_data = switch (builtin.os) {
-                builtin.Os.linux, builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => initOsDataPosix(self),
+                builtin.Os.linux, builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => initOsDataPosix(self),
                 builtin.Os.windows => OsData{ .handle = null },
                 else => @compileError("Unsupported OS"),
             },
@@ -534,6 +537,7 @@ pub const CloseOperation = struct {
             builtin.Os.macosx,
             builtin.Os.freebsd,
             builtin.Os.netbsd,
+            builtin.Os.dragonfly,
             => {
                 if (self.os_data.have_fd) {
                     self.loop.posixFsRequest(&self.os_data.close_req_node);
@@ -557,6 +561,7 @@ pub const CloseOperation = struct {
             builtin.Os.macosx,
             builtin.Os.freebsd,
             builtin.Os.netbsd,
+            builtin.Os.dragonfly,
             => {
                 self.os_data.close_req_node.data.msg.Close.fd = handle;
                 self.os_data.have_fd = true;
@@ -575,6 +580,7 @@ pub const CloseOperation = struct {
             builtin.Os.macosx,
             builtin.Os.freebsd,
             builtin.Os.netbsd,
+            builtin.Os.dragonfly,
             => {
                 self.os_data.have_fd = false;
             },
@@ -591,6 +597,7 @@ pub const CloseOperation = struct {
             builtin.Os.macosx,
             builtin.Os.freebsd,
             builtin.Os.netbsd,
+            builtin.Os.dragonfly,
             => {
                 assert(self.os_data.have_fd);
                 return self.os_data.close_req_node.data.msg.Close.fd;
@@ -616,6 +623,7 @@ pub async fn writeFileMode(loop: *Loop,
         builtin.Os.macosx,
         builtin.Os.freebsd,
         builtin.Os.netbsd,
+        builtin.Os.dragonfly,
         => return await (async writeFileModeThread(loop, path, contents, mode) catch unreachable),
         builtin.Os.windows => return await (async writeFileWindows(loop, path, contents) catch unreachable),
         else => @compileError("Unsupported OS"),
@@ -721,7 +729,7 @@ pub fn Watch(comptime V: type) type {
         os_data: OsData,
 
         const OsData = switch (builtin.os) {
-            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => struct {
+            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => struct {
                 file_table: FileTable,
                 table_lock: event.Lock,
 
@@ -810,7 +818,7 @@ pub fn Watch(comptime V: type) type {
                     return self;
                 },
 
-                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
                     const self = try loop.allocator.create(Self);
                     errdefer loop.allocator.destroy(self);
 
@@ -830,7 +838,7 @@ pub fn Watch(comptime V: type) type {
         /// All addFile calls and removeFile calls must have completed.
         pub fn destroy(self: *Self) void {
             switch (builtin.os) {
-                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
                     // TODO we need to cancel the coroutines before destroying the lock
                     self.os_data.table_lock.deinit();
                     var it = self.os_data.file_table.iterator();
@@ -872,7 +880,7 @@ pub fn Watch(comptime V: type) type {
 
         pub async fn addFile(self: *Self, file_path: []const u8, value: V) !?V {
             switch (builtin.os) {
-                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => return await (async addFileKEvent(self, file_path, value) catch unreachable),
+                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => return await (async addFileKEvent(self, file_path, value) catch unreachable),
                 builtin.Os.linux => return await (async addFileLinux(self, file_path, value) catch unreachable),
                 builtin.Os.windows => return await (async addFileWindows(self, file_path, value) catch unreachable),
                 else => @compileError("Unsupported OS"),


[FILE:5536:patches/patch-std_event_loop.zig]
--- std/event/loop.zig.orig	2019-04-08 19:41:41 UTC
+++ std/event/loop.zig
@@ -50,7 +50,7 @@ pub const Loop = struct {
         };
 
         pub const EventFd = switch (builtin.os) {
-            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => KEventFd,
+            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => KEventFd,
             builtin.Os.linux => struct {
                 base: ResumeNode,
                 epoll_op: u32,
@@ -69,7 +69,7 @@ pub const Loop = struct {
         };
 
         pub const Basic = switch (builtin.os) {
-            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => KEventBasic,
+            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => KEventBasic,
             builtin.Os.linux => struct {
                 base: ResumeNode,
             },
@@ -221,7 +221,7 @@ pub const Loop = struct {
                     self.extra_threads[extra_thread_index] = try os.spawnThread(self, workerRun);
                 }
             },
-            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
                 self.os_data.kqfd = try os.bsdKQueue();
                 errdefer os.close(self.os_data.kqfd);
 
@@ -386,7 +386,7 @@ pub const Loop = struct {
                 os.close(self.os_data.epollfd);
                 self.allocator.free(self.eventfd_resume_nodes);
             },
-            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
                 os.close(self.os_data.kqfd);
                 os.close(self.os_data.fs_kqfd);
             },
@@ -501,7 +501,7 @@ pub const Loop = struct {
             const eventfd_node = &resume_stack_node.data;
             eventfd_node.base.handle = next_tick_node.data;
             switch (builtin.os) {
-                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
                     const kevent_array = (*const [1]posix.Kevent)(&eventfd_node.kevent);
                     const empty_kevs = ([*]posix.Kevent)(undefined)[0..0];
                     _ = os.bsdKEvent(self.os_data.kqfd, kevent_array, empty_kevs, null) catch {
@@ -565,6 +565,7 @@ pub const Loop = struct {
             builtin.Os.macosx,
             builtin.Os.freebsd,
             builtin.Os.netbsd,
+            builtin.Os.dragonfly,
             => self.os_data.fs_thread.wait(),
             else => {},
         }
@@ -629,7 +630,7 @@ pub const Loop = struct {
                     os.posixWrite(self.os_data.final_eventfd, wakeup_bytes) catch unreachable;
                     return;
                 },
-                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
                     self.posixFsRequest(&self.os_data.fs_end_request);
                     const final_kevent = (*const [1]posix.Kevent)(&self.os_data.final_kevent);
                     const empty_kevs = ([*]posix.Kevent)(undefined)[0..0];
@@ -687,7 +688,7 @@ pub const Loop = struct {
                         }
                     }
                 },
-                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
                     var eventlist: [1]posix.Kevent = undefined;
                     const empty_kevs = ([*]posix.Kevent)(undefined)[0..0];
                     const count = os.bsdKEvent(self.os_data.kqfd, empty_kevs, eventlist[0..], null) catch unreachable;
@@ -750,7 +751,7 @@ pub const Loop = struct {
         self.beginOneEvent(); // finished in posixFsRun after processing the msg
         self.os_data.fs_queue.put(request_node);
         switch (builtin.os) {
-            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+            builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
                 const fs_kevs = (*const [1]posix.Kevent)(&self.os_data.fs_kevent_wake);
                 const empty_kevs = ([*]posix.Kevent)(undefined)[0..0];
                 _ = os.bsdKEvent(self.os_data.fs_kqfd, fs_kevs, empty_kevs, null) catch unreachable;
@@ -820,7 +821,7 @@ pub const Loop = struct {
                         else => unreachable,
                     }
                 },
-                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+                builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
                     const fs_kevs = (*const [1]posix.Kevent)(&self.os_data.fs_kevent_wait);
                     var out_kevs: [1]posix.Kevent = undefined;
                     _ = os.bsdKEvent(self.os_data.fs_kqfd, fs_kevs, out_kevs[0..], null) catch unreachable;
@@ -832,7 +833,7 @@ pub const Loop = struct {
 
     const OsData = switch (builtin.os) {
         builtin.Os.linux => LinuxOsData,
-        builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => KEventData,
+        builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => KEventData,
         builtin.Os.windows => struct {
             io_port: windows.HANDLE,
             extra_thread_count: usize,


[FILE:594:patches/patch-std_event_net.zig]
--- std/event/net.zig.orig	2019-04-08 19:41:41 UTC
+++ std/event/net.zig
@@ -202,7 +202,7 @@ pub async fn writevPosix(loop: *Loop, fd
 pub async fn readvPosix(loop: *std.event.Loop, fd: i32, iov: [*]posix.iovec, count: usize) !usize {
     while (true) {
         switch (builtin.os) {
-            builtin.Os.linux, builtin.Os.freebsd, builtin.Os.macosx => {
+            builtin.Os.macosx, builtin.Os.linux, builtin.Os.freebsd, builtin.Os.dragonfly => {
                 const rc = posix.readv(fd, iov, count);
                 const err = posix.getErrno(rc);
                 switch (err) {


[FILE:1701:patches/patch-std_heap.zig]
--- std/heap.zig.orig	2019-04-08 19:41:41 UTC
+++ std/heap.zig
@@ -61,7 +61,7 @@ pub const DirectAllocator = struct {
         const self = @fieldParentPtr(DirectAllocator, "allocator", allocator);
 
         switch (builtin.os) {
-            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
                 const p = os.posix;
                 const alloc_size = if (alignment <= os.page_size) n else n + alignment;
                 const addr = p.mmap(null, alloc_size, p.PROT_READ | p.PROT_WRITE, p.MAP_PRIVATE | p.MAP_ANONYMOUS, -1, 0);
@@ -108,7 +108,7 @@ pub const DirectAllocator = struct {
 
     fn shrink(allocator: *Allocator, old_mem: []u8, old_align: u29, new_size: usize, new_align: u29) []u8 {
         switch (builtin.os) {
-            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
                 const base_addr = @ptrToInt(old_mem.ptr);
                 const old_addr_end = base_addr + old_mem.len;
                 const new_addr_end = base_addr + new_size;
@@ -133,7 +133,7 @@ pub const DirectAllocator = struct {
 
     fn realloc(allocator: *Allocator, old_mem: []u8, old_align: u29, new_size: usize, new_align: u29) ![]u8 {
         switch (builtin.os) {
-            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
                 if (new_size <= old_mem.len and new_align <= old_align) {
                     return shrink(allocator, old_mem, old_align, new_size, new_align);
                 }


[FILE:14806:patches/patch-std_os.zig]
--- std/os.zig.orig	2019-04-08 19:41:41 UTC
+++ std/os.zig
@@ -3,7 +3,7 @@ const builtin = @import("builtin");
 const Os = builtin.Os;
 const is_windows = builtin.os == Os.windows;
 const is_posix = switch (builtin.os) {
-    builtin.Os.linux, builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => true,
+    Os.linux, Os.macosx, Os.freebsd, Os.netbsd, Os.dragonfly => true,
     else => false,
 };
 const os = @This();
@@ -31,6 +31,7 @@ pub const darwin = @import("os/darwin.zi
 pub const linux = @import("os/linux.zig");
 pub const freebsd = @import("os/freebsd.zig");
 pub const netbsd = @import("os/netbsd.zig");
+pub const dragonfly = @import("os/dragonfly.zig");
 pub const zen = @import("os/zen.zig");
 pub const uefi = @import("os/uefi.zig");
 
@@ -39,6 +40,7 @@ pub const posix = switch (builtin.os) {
     Os.macosx, Os.ios => darwin,
     Os.freebsd => freebsd,
     Os.netbsd => netbsd,
+    Os.dragonfly => dragonfly,
     Os.zen => zen,
     else => @compileError("Unsupported OS"),
 };
@@ -52,7 +54,7 @@ pub const time = @import("os/time.zig");
 
 pub const page_size = 4 * 1024;
 pub const MAX_PATH_BYTES = switch (builtin.os) {
-    Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => posix.PATH_MAX,
+    Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => posix.PATH_MAX,
     // Each UTF-16LE character may be expanded to 3 UTF-8 bytes.
     // If it would require 4 UTF-8 bytes, then there would be a surrogate
     // pair in the UTF-16LE, and we (over)account 3 bytes for it that way.
@@ -127,7 +129,7 @@ pub fn getRandomBytes(buf: []u8) !void {
                 else => return unexpectedErrorPosix(errno),
             }
         },
-        Os.macosx, Os.ios, Os.freebsd, Os.netbsd => return getRandomBytesDevURandom(buf),
+        Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => return getRandomBytesDevURandom(buf),
         Os.windows => {
             // Call RtlGenRandom() instead of CryptGetRandom() on Windows
             // https://github.com/rust-lang-nursery/rand/issues/111
@@ -187,7 +189,7 @@ pub fn abort() noreturn {
         c.abort();
     }
     switch (builtin.os) {
-        Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+        Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
             _ = posix.raise(posix.SIGABRT);
             _ = posix.raise(posix.SIGKILL);
             while (true) {}
@@ -220,7 +222,7 @@ pub fn exit(status: u8) noreturn {
                 linux.exit_group(status);
             }
         },
-        Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+        Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
             posix.exit(status);
         },
         Os.windows => {
@@ -299,7 +301,7 @@ pub fn posixRead(fd: i32, buf: []u8) Pos
 /// Number of bytes read is returned. Upon reading end-of-file, zero is returned.
 pub fn posix_preadv(fd: i32, iov: [*]const posix.iovec, count: usize, offset: u64) PosixReadError!usize {
     switch (builtin.os) {
-        builtin.Os.macosx => {
+        Os.macosx => {
             // Darwin does not have preadv but it does have pread.
             var off: usize = 0;
             var iov_i: usize = 0;
@@ -336,7 +338,7 @@ pub fn posix_preadv(fd: i32, iov: [*]con
                 }
             }
         },
-        builtin.Os.linux, builtin.Os.freebsd, Os.netbsd => while (true) {
+        Os.linux, Os.freebsd, Os.netbsd, Os.dragonfly => while (true) {
             const rc = posix.preadv(fd, iov, count, offset);
             const err = posix.getErrno(rc);
             switch (err) {
@@ -404,7 +406,7 @@ pub fn posixWrite(fd: i32, bytes: []cons
 
 pub fn posix_pwritev(fd: i32, iov: [*]const posix.iovec_const, count: usize, offset: u64) PosixWriteError!void {
     switch (builtin.os) {
-        builtin.Os.macosx => {
+        Os.macosx => {
             // Darwin does not have pwritev but it does have pwrite.
             var off: usize = 0;
             var iov_i: usize = 0;
@@ -443,7 +445,7 @@ pub fn posix_pwritev(fd: i32, iov: [*]co
                 }
             }
         },
-        builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd => while (true) {
+        Os.linux, Os.freebsd, Os.netbsd, Os.dragonfly => while (true) {
             const rc = posix.pwritev(fd, iov, count, offset);
             const err = posix.getErrno(rc);
             switch (err) {
@@ -700,7 +702,7 @@ pub fn linuxGetAuxVal(index: usize) usiz
 
 pub fn getBaseAddress() usize {
     switch (builtin.os) {
-        builtin.Os.linux => {
+        Os.linux => {
             const base = linuxGetAuxVal(std.elf.AT_BASE);
             if (base != 0) {
                 return base;
@@ -708,10 +710,10 @@ pub fn getBaseAddress() usize {
             const phdr = linuxGetAuxVal(std.elf.AT_PHDR);
             return phdr - @sizeOf(std.elf.Ehdr);
         },
-        builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+        Os.macosx, Os.freebsd, Os.netbsd, Os.dragonfly => {
             return @ptrToInt(&std.c._mh_execute_header);
         },
-        builtin.Os.windows => return @ptrToInt(windows.GetModuleHandleW(null)),
+        Os.windows => return @ptrToInt(windows.GetModuleHandleW(null)),
         else => @compileError("Unsupported OS"),
     }
 }
@@ -1350,7 +1352,7 @@ pub fn deleteDirC(dir_path: [*]const u8)
             const dir_path_w = try windows_util.cStrToPrefixedFileW(dir_path);
             return deleteDirW(&dir_path_w);
         },
-        Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+        Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
             const err = posix.getErrno(posix.rmdir(dir_path));
             switch (err) {
                 0 => return,
@@ -1393,7 +1395,7 @@ pub fn deleteDir(dir_path: []const u8) D
             const dir_path_w = try windows_util.sliceToPrefixedFileW(dir_path);
             return deleteDirW(&dir_path_w);
         },
-        Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+        Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
             const dir_path_c = try toPosixPath(dir_path);
             return deleteDirC(&dir_path_c);
         },
@@ -1512,7 +1514,7 @@ pub const Dir = struct {
     allocator: *Allocator,
 
     pub const Handle = switch (builtin.os) {
-        Os.macosx, Os.ios, Os.freebsd, Os.netbsd => struct {
+        Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => struct {
             fd: i32,
             seek: i64,
             buf: []u8,
@@ -1589,7 +1591,7 @@ pub const Dir = struct {
                         .name_data = undefined,
                     };
                 },
-                Os.macosx, Os.ios, Os.freebsd, Os.netbsd => Handle{
+                Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => Handle{
                     .fd = try posixOpen(
                         dir_path,
                         posix.O_RDONLY | posix.O_NONBLOCK | posix.O_DIRECTORY | posix.O_CLOEXEC,
@@ -1620,7 +1622,7 @@ pub const Dir = struct {
             Os.windows => {
                 _ = windows.FindClose(self.handle.handle);
             },
-            Os.macosx, Os.ios, Os.linux, Os.freebsd, Os.netbsd => {
+            Os.macosx, Os.ios, Os.linux, Os.freebsd, Os.netbsd, Os.dragonfly => {
                 self.allocator.free(self.handle.buf);
                 os.close(self.handle.fd);
             },
@@ -1637,6 +1639,7 @@ pub const Dir = struct {
             Os.windows => return self.nextWindows(),
             Os.freebsd => return self.nextFreebsd(),
             Os.netbsd => return self.nextFreebsd(),
+            Os.dragonfly => return self.nextFreebsd(),
             else => @compileError("unimplemented"),
         }
     }
@@ -2262,7 +2265,7 @@ pub fn unexpectedErrorWindows(err: windo
 pub fn openSelfExe() !os.File {
     switch (builtin.os) {
         Os.linux => return os.File.openReadC(c"/proc/self/exe"),
-        Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+        Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
             var buf: [MAX_PATH_BYTES]u8 = undefined;
             const self_exe_path = try selfExePath(&buf);
             buf[self_exe_path.len] = 0;
@@ -2279,7 +2282,7 @@ pub fn openSelfExe() !os.File {
 
 test "openSelfExe" {
     switch (builtin.os) {
-        Os.linux, Os.macosx, Os.ios, Os.windows, Os.freebsd => (try openSelfExe()).close(),
+        Os.linux, Os.macosx, Os.ios, Os.windows, Os.freebsd, Os.dragonfly => (try openSelfExe()).close(),
         else => return error.SkipZigTest, // Unsupported OS.
     }
 }
@@ -2310,7 +2313,7 @@ pub fn selfExePathW(out_buffer: *[window
 pub fn selfExePath(out_buffer: *[MAX_PATH_BYTES]u8) ![]u8 {
     switch (builtin.os) {
         Os.linux => return readLink(out_buffer, "/proc/self/exe"),
-        Os.freebsd => {
+        Os.freebsd, Os.dragonfly => {
             var mib = [4]c_int{ posix.CTL_KERN, posix.KERN_PROC, posix.KERN_PROC_PATHNAME, -1 };
             var out_len: usize = out_buffer.len;
             const err = posix.getErrno(posix.sysctl(&mib, 4, out_buffer, &out_len, null, 0));
@@ -2374,7 +2377,7 @@ pub fn selfExeDirPath(out_buffer: *[MAX_
             // will not return null.
             return path.dirname(full_exe_path).?;
         },
-        Os.windows, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+        Os.windows, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
             const self_exe_path = try selfExePath(out_buffer);
             // Assume that the OS APIs return absolute paths, and therefore dirname
             // will not return null.
@@ -2910,8 +2913,8 @@ pub const Thread = struct {
     pub const Handle = if (use_pthreads)
         c.pthread_t
     else switch (builtin.os) {
-        builtin.Os.linux => i32,
-        builtin.Os.windows => windows.HANDLE,
+        Os.linux => i32,
+        Os.windows => windows.HANDLE,
         else => @compileError("Unsupported OS"),
     };
 
@@ -2919,7 +2922,7 @@ pub const Thread = struct {
     /// May be an integer or pointer depending on the platform.
     /// On Linux and POSIX, this is the same as Handle.
     pub const Id = switch (builtin.os) {
-        builtin.Os.windows => windows.DWORD,
+        Os.windows => windows.DWORD,
         else => Handle,
     };
 
@@ -2930,12 +2933,12 @@ pub const Thread = struct {
             mmap_len: usize,
         }
     else switch (builtin.os) {
-        builtin.Os.linux => struct {
+        Os.linux => struct {
             handle: Thread.Handle,
             mmap_addr: usize,
             mmap_len: usize,
         },
-        builtin.Os.windows => struct {
+        Os.windows => struct {
             handle: Thread.Handle,
             alloc_start: *c_void,
             heap_handle: windows.HANDLE,
@@ -2951,8 +2954,8 @@ pub const Thread = struct {
             return c.pthread_self();
         } else
             return switch (builtin.os) {
-            builtin.Os.linux => linux.gettid(),
-            builtin.Os.windows => windows.GetCurrentThreadId(),
+            Os.linux => linux.gettid(),
+            Os.windows => windows.GetCurrentThreadId(),
             else => @compileError("Unsupported OS"),
         };
     }
@@ -2979,7 +2982,7 @@ pub const Thread = struct {
             }
             assert(posix.munmap(self.data.mmap_addr, self.data.mmap_len) == 0);
         } else switch (builtin.os) {
-            builtin.Os.linux => {
+            Os.linux => {
                 while (true) {
                     const pid_value = @atomicLoad(i32, &self.data.handle, .SeqCst);
                     if (pid_value == 0) break;
@@ -2993,7 +2996,7 @@ pub const Thread = struct {
                 }
                 assert(posix.munmap(self.data.mmap_addr, self.data.mmap_len) == 0);
             },
-            builtin.Os.windows => {
+            Os.windows => {
                 assert(windows.WaitForSingleObject(self.data.handle, windows.INFINITE) == windows.WAIT_OBJECT_0);
                 assert(windows.CloseHandle(self.data.handle) != 0);
                 assert(windows.HeapFree(self.data.heap_handle, 0, self.data.alloc_start) != 0);
@@ -3046,7 +3049,7 @@ pub fn spawnThread(context: var, comptim
     const Context = @typeOf(context);
     comptime assert(@ArgType(@typeOf(startFn), 0) == Context);
 
-    if (builtin.os == builtin.Os.windows) {
+    if (builtin.os == Os.windows) {
         const WinThread = struct {
             const OuterContext = struct {
                 thread: Thread,
@@ -3120,7 +3123,7 @@ pub fn spawnThread(context: var, comptim
         }
     };
 
-    const MAP_GROWSDOWN = if (builtin.os == builtin.Os.linux) linux.MAP_GROWSDOWN else 0;
+    const MAP_GROWSDOWN = if (builtin.os == Os.linux) linux.MAP_GROWSDOWN else 0;
 
     var stack_end_offset: usize = undefined;
     var thread_start_offset: usize = undefined;
@@ -3183,7 +3186,7 @@ pub fn spawnThread(context: var, comptim
             posix.EINVAL => unreachable,
             else => return unexpectedErrorPosix(@intCast(usize, err)),
         }
-    } else if (builtin.os == builtin.Os.linux) {
+    } else if (builtin.os == Os.linux) {
         var flags: u32 = posix.CLONE_VM | posix.CLONE_FS | posix.CLONE_FILES | posix.CLONE_SIGHAND |
             posix.CLONE_THREAD | posix.CLONE_SYSVSEM | posix.CLONE_PARENT_SETTID | posix.CLONE_CHILD_CLEARTID |
             posix.CLONE_DETACHED;
@@ -3251,11 +3254,11 @@ pub const CpuCountError = error{
 
 pub fn cpuCount(fallback_allocator: *mem.Allocator) CpuCountError!usize {
     switch (builtin.os) {
-        builtin.Os.macosx, builtin.Os.freebsd, builtin.Os.netbsd => {
+        Os.macosx, Os.freebsd, Os.netbsd, Os.dragonfly => {
             var count: c_int = undefined;
             var count_len: usize = @sizeOf(c_int);
             const rc = posix.sysctlbyname(switch (builtin.os) {
-                builtin.Os.macosx => c"hw.logicalcpu",
+                Os.macosx => c"hw.logicalcpu",
                 else => c"hw.ncpu",
             }, @ptrCast(*c_void, &count), &count_len, null, 0);
             const err = posix.getErrno(rc);
@@ -3271,7 +3274,7 @@ pub fn cpuCount(fallback_allocator: *mem
                 else => return os.unexpectedErrorPosix(err),
             }
         },
-        builtin.Os.linux => {
+        Os.linux => {
             const usize_count = 16;
             const allocator = std.heap.stackFallback(usize_count * @sizeOf(usize), fallback_allocator).get();
 
@@ -3303,7 +3306,7 @@ pub fn cpuCount(fallback_allocator: *mem
                 }
             }
         },
-        builtin.Os.windows => {
+        Os.windows => {
             var system_info: windows.SYSTEM_INFO = undefined;
             windows.GetSystemInfo(&system_info);
             return @intCast(usize, system_info.dwNumberOfProcessors);


[FILE:1464:patches/patch-std_os_file.zig]
--- std/os/file.zig.orig	2019-04-08 19:41:41 UTC
+++ std/os/file.zig
@@ -237,7 +237,7 @@ pub const File = struct {
 
     pub fn seekForward(self: File, amount: isize) SeekError!void {
         switch (builtin.os) {
-            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
                 const result = posix.lseek(self.handle, amount, posix.SEEK_CUR);
                 const err = posix.getErrno(result);
                 if (err > 0) {
@@ -268,7 +268,7 @@ pub const File = struct {
 
     pub fn seekTo(self: File, pos: usize) SeekError!void {
         switch (builtin.os) {
-            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
                 const ipos = try math.cast(isize, pos);
                 const result = posix.lseek(self.handle, ipos, posix.SEEK_SET);
                 const err = posix.getErrno(result);
@@ -309,7 +309,7 @@ pub const File = struct {
 
     pub fn getPos(self: File) GetSeekPosError!usize {
         switch (builtin.os) {
-            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+            Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
                 const result = posix.lseek(self.handle, 0, posix.SEEK_CUR);
                 const err = posix.getErrno(result);
                 if (err > 0) {


[FILE:616:patches/patch-std_os_get__app__data__dir.zig]
--- std/os/get_app_data_dir.zig.orig	2019-04-08 19:41:41 UTC
+++ std/os/get_app_data_dir.zig
@@ -43,7 +43,7 @@ pub fn getAppDataDir(allocator: *mem.All
             };
             return os.path.join(allocator, [][]const u8{ home_dir, "Library", "Application Support", appname });
         },
-        builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd => {
+        builtin.Os.linux, builtin.Os.freebsd, builtin.Os.netbsd, builtin.Os.dragonfly => {
             const home_dir = os.getEnvPosix("HOME") orelse {
                 // TODO look in /etc/passwd
                 return error.AppDataDirUnavailable;


[FILE:516:patches/patch-std_os_get__user__id.zig]
--- std/os/get_user_id.zig.orig	2019-04-08 19:41:41 UTC
+++ std/os/get_user_id.zig
@@ -11,7 +11,7 @@ pub const UserInfo = struct {
 /// POSIX function which gets a uid from username.
 pub fn getUserInfo(name: []const u8) !UserInfo {
     return switch (builtin.os) {
-        Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => posixGetUserInfo(name),
+        Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => posixGetUserInfo(name),
         else => @compileError("Unsupported OS"),
     };
 }


[FILE:1079:patches/patch-std_os_path.zig]
--- std/os/path.zig.orig	2019-04-08 19:41:41 UTC
+++ std/os/path.zig
@@ -1226,7 +1226,7 @@ pub fn realC(out_buffer: *[os.MAX_PATH_B
             const pathname_w = try windows_util.cStrToPrefixedFileW(pathname);
             return realW(out_buffer, pathname_w);
         },
-        Os.freebsd, Os.netbsd, Os.macosx, Os.ios => {
+        Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
             // TODO instead of calling the libc function here, port the implementation to Zig
             const err = posix.getErrno(posix.realpath(pathname, out_buffer));
             switch (err) {
@@ -1267,7 +1267,7 @@ pub fn real(out_buffer: *[os.MAX_PATH_BY
             const pathname_w = try windows_util.sliceToPrefixedFileW(pathname);
             return realW(out_buffer, &pathname_w);
         },
-        Os.macosx, Os.ios, Os.linux, Os.freebsd, Os.netbsd => {
+        Os.macosx, Os.ios, Os.linux, Os.freebsd, Os.netbsd, Os.dragonfly => {
             const pathname_c = try os.toPosixPath(pathname);
             return realC(out_buffer, &pathname_c);
         },


[FILE:2343:patches/patch-std_os_time.zig]
--- std/os/time.zig.orig	2019-04-08 19:41:41 UTC
+++ std/os/time.zig
@@ -14,7 +14,7 @@ pub const epoch = @import("epoch.zig");
 /// Sleep for the specified duration
 pub fn sleep(nanoseconds: u64) void {
     switch (builtin.os) {
-        Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd => {
+        Os.linux, Os.macosx, Os.ios, Os.freebsd, Os.netbsd, Os.dragonfly => {
             const s = nanoseconds / ns_per_s;
             const ns = nanoseconds % ns_per_s;
             posixSleep(@intCast(u63, s), @intCast(u63, ns));
@@ -62,7 +62,7 @@ pub fn timestamp() u64 {
 /// Get the posix timestamp, UTC, in milliseconds
 pub const milliTimestamp = switch (builtin.os) {
     Os.windows => milliTimestampWindows,
-    Os.linux, Os.freebsd, Os.netbsd => milliTimestampPosix,
+    Os.linux, Os.freebsd, Os.netbsd, Os.dragonfly => milliTimestampPosix,
     Os.macosx, Os.ios => milliTimestampDarwin,
     else => @compileError("Unsupported OS"),
 };
@@ -178,7 +178,7 @@ pub const Timer = struct {
                 debug.assert(err != windows.FALSE);
                 self.start_time = @intCast(u64, start_time);
             },
-            Os.linux, Os.freebsd, Os.netbsd => {
+            Os.linux, Os.freebsd, Os.netbsd, Os.dragonfly => {
                 //On Linux, seccomp can do arbitrary things to our ability to call
                 //  syscalls, including return any errno value it wants and
                 //  inconsistently throwing errors. Since we can't account for
@@ -214,7 +214,7 @@ pub const Timer = struct {
         var clock = clockNative() - self.start_time;
         return switch (builtin.os) {
             Os.windows => @divFloor(clock * ns_per_s, self.frequency),
-            Os.linux, Os.freebsd, Os.netbsd => clock,
+            Os.linux, Os.freebsd, Os.netbsd, Os.dragonfly => clock,
             Os.macosx, Os.ios => @divFloor(clock * self.frequency.numer, self.frequency.denom),
             else => @compileError("Unsupported OS"),
         };
@@ -235,7 +235,7 @@ pub const Timer = struct {
 
     const clockNative = switch (builtin.os) {
         Os.windows => clockWindows,
-        Os.linux, Os.freebsd, Os.netbsd => clockLinux,
+        Os.linux, Os.freebsd, Os.netbsd, Os.dragonfly => clockLinux,
         Os.macosx, Os.ios => clockDarwin,
         else => @compileError("Unsupported OS"),
     };


[FILE:3065:files/c_dragonfly.zig]
extern "c" threadlocal var errno: c_int;
pub fn _errno() *c_int {
    return &errno;
}

pub extern "c" fn kqueue() c_int;
pub extern "c" fn kevent(
    kq: c_int,
    changelist: [*]const Kevent,
    nchanges: c_int,
    eventlist: [*]Kevent,
    nevents: c_int,
    timeout: ?*const timespec,
) c_int;
pub extern "c" fn sysctl(name: [*]c_int, namelen: c_uint, oldp: ?*c_void, oldlenp: ?*usize, newp: ?*c_void, newlen: usize) c_int;
pub extern "c" fn sysctlbyname(name: [*]const u8, oldp: ?*c_void, oldlenp: ?*usize, newp: ?*c_void, newlen: usize) c_int;
pub extern "c" fn sysctlnametomib(name: [*]const u8, mibp: ?*c_int, sizep: ?*usize) c_int;
pub extern "c" fn getdirentries(fd: c_int, buf_ptr: [*]u8, nbytes: usize, basep: *i64) usize;
pub extern "c" fn getdents(fd: c_int, buf_ptr: [*]u8, nbytes: usize) usize;
pub extern "c" fn pipe2(arg0: *[2]c_int, arg1: u32) c_int;
pub extern "c" fn preadv(fd: c_int, iov: *const c_void, iovcnt: c_int, offset: usize) isize;
pub extern "c" fn pwritev(fd: c_int, iov: *const c_void, iovcnt: c_int, offset: usize) isize;
pub extern "c" fn openat(fd: c_int, path: ?[*]const u8, flags: c_int) c_int;
pub extern "c" fn setgid(ruid: c_uint, euid: c_uint) c_int;
pub extern "c" fn setuid(uid: c_uint) c_int;
pub extern "c" fn kill(pid: c_int, sig: c_int) c_int;
pub extern "c" fn clock_gettime(clk_id: c_int, tp: *timespec) c_int;
pub extern "c" fn clock_getres(clk_id: c_int, tp: *timespec) c_int;

/// Renamed from `kevent` to `Kevent` to avoid conflict with function name.
pub const Kevent = extern struct {
    ident: usize,
    filter: i16,
    flags: u16,
    fflags: u32,
    data: i64,
    udata: usize,
    // TODO ext
};

pub const pthread_attr_t = extern struct {
    __size: [56]u8,
    __align: c_long,
};

pub const msghdr = extern struct {
    msg_name: *u8,
    msg_namelen: socklen_t,
    msg_iov: *iovec,
    msg_iovlen: i32,
    __pad1: i32,
    msg_control: *u8,
    msg_controllen: socklen_t,
    __pad2: socklen_t,
    msg_flags: i32,
};

pub const Stat = extern struct {
    dev: u64,
    ino: u64,
    nlink: usize,

    mode: u16,
    __pad0: u16,
    uid: u32,
    gid: u32,
    __pad1: u32,
    rdev: u64,

    atim: timespec,
    mtim: timespec,
    ctim: timespec,
    birthtim: timespec,

    size: i64,
    blocks: i64,
    blksize: isize,
    flags: u32,
    gen: u64,
    __spare: [10]u64,
};

pub const timespec = extern struct {
    tv_sec: isize,
    tv_nsec: isize,
};

pub const dirent = extern struct {
    d_fileno: usize,
    d_off: i64,
    d_reclen: u16,
    d_type: u8,
    d_pad0: u8,
    d_namlen: u16,
    d_pad1: u16,
    d_name: [256]u8,
};

pub const in_port_t = u16;
pub const sa_family_t = u16;

pub const sockaddr = extern union {
    in: sockaddr_in,
    in6: sockaddr_in6,
};

pub const sockaddr_in = extern struct {
    len: u8,
    family: sa_family_t,
    port: in_port_t,
    addr: [16]u8,
    zero: [8]u8,
};

pub const sockaddr_in6 = extern struct {
    len: u8,
    family: sa_family_t,
    port: in_port_t,
    flowinfo: u32,
    addr: [16]u8,
    scope_id: u32,
};


[FILE:5109:files/errno.zig]
pub const EPERM = 1; // Operation not permitted
pub const ENOENT = 2; // No such file or directory
pub const ESRCH = 3; // No such process
pub const EINTR = 4; // Interrupted system call
pub const EIO = 5; // Input/output error
pub const ENXIO = 6; // Device not configured
pub const E2BIG = 7; // Argument list too long
pub const ENOEXEC = 8; // Exec format error
pub const EBADF = 9; // Bad file descriptor
pub const ECHILD = 10; // No child processes
pub const EDEADLK = 11; // Resource deadlock avoided
// 11 was EAGAIN
pub const ENOMEM = 12; // Cannot allocate memory
pub const EACCES = 13; // Permission denied
pub const EFAULT = 14; // Bad address
pub const ENOTBLK = 15; // Block device required
pub const EBUSY = 16; // Device busy
pub const EEXIST = 17; // File exists
pub const EXDEV = 18; // Cross-device link
pub const ENODEV = 19; // Operation not supported by device
pub const ENOTDIR = 20; // Not a directory
pub const EISDIR = 21; // Is a directory
pub const EINVAL = 22; // Invalid argument
pub const ENFILE = 23; // Too many open files in system
pub const EMFILE = 24; // Too many open files
pub const ENOTTY = 25; // Inappropriate ioctl for device
pub const ETXTBSY = 26; // Text file busy
pub const EFBIG = 27; // File too large
pub const ENOSPC = 28; // No space left on device
pub const ESPIPE = 29; // Illegal seek
pub const EROFS = 30; // Read-only filesystem
pub const EMLINK = 31; // Too many links
pub const EPIPE = 32; // Broken pipe

// math software
pub const EDOM = 33; // Numerical argument out of domain
pub const ERANGE = 34; // Result too large

// non-blocking and interrupt i/o
pub const EAGAIN = 35; // Resource temporarily unavailable
pub const EWOULDBLOCK = EAGAIN; // Operation would block
pub const EINPROGRESS = 36; // Operation now in progress
pub const EALREADY = 37; // Operation already in progress

// ipc/network software -- argument errors
pub const ENOTSOCK = 38; // Socket operation on non-socket
pub const EDESTADDRREQ = 39; // Destination address required
pub const EMSGSIZE = 40; // Message too long
pub const EPROTOTYPE = 41; // Protocol wrong type for socket
pub const ENOPROTOOPT = 42; // Protocol not available
pub const EPROTONOSUPPORT = 43; // Protocol not supported
pub const ESOCKTNOSUPPORT = 44; // Socket type not supported
pub const EOPNOTSUPP = 45; // Operation not supported
pub const ENOTSUP = EOPNOTSUPP; // Operation not supported
pub const EPFNOSUPPORT = 46; // Protocol family not supported
pub const EAFNOSUPPORT = 47; // Address family not supported by protocol family
pub const EADDRINUSE = 48; // Address already in use
pub const EADDRNOTAVAIL = 49; // Can't assign requested address

// ipc/network software -- operational errors
pub const ENETDOWN = 50; // Network is down
pub const ENETUNREACH = 51; // Network is unreachable
pub const ENETRESET = 52; // Network dropped connection on reset
pub const ECONNABORTED = 53; // Software caused connection abort
pub const ECONNRESET = 54; // Connection reset by peer
pub const ENOBUFS = 55; // No buffer space available
pub const EISCONN = 56; // Socket is already connected
pub const ENOTCONN = 57; // Socket is not connected
pub const ESHUTDOWN = 58; // Can't send after socket shutdown
pub const ETOOMANYREFS = 59; // Too many references: can't splice
pub const ETIMEDOUT = 60; // Operation timed out
pub const ECONNREFUSED = 61; // Connection refused

pub const ELOOP = 62; // Too many levels of symbolic links
pub const ENAMETOOLONG = 63; // File name too long

// should be rearranged
pub const EHOSTDOWN = 64; // Host is down
pub const EHOSTUNREACH = 65; // No route to host
pub const ENOTEMPTY = 66; // Directory not empty

// quotas & mush
pub const EPROCLIM = 67; // Too many processes
pub const EUSERS = 68; // Too many users
pub const EDQUOT = 69; // Disc quota exceeded

// Network File System
pub const ESTALE = 70; // Stale NFS file handle
pub const EREMOTE = 71; // Too many levels of remote in path
pub const EBADRPC = 72; // RPC struct is bad
pub const ERPCMISMATCH = 73; // RPC version wrong
pub const EPROGUNAVAIL = 74; // RPC prog. not avail
pub const EPROGMISMATCH = 75; // Program version wrong
pub const EPROCUNAVAIL = 76; // Bad procedure for program

pub const ENOLCK = 77; // No locks available
pub const ENOSYS = 78; // Function not implemented

pub const EFTYPE = 79; // Inappropriate file type or format
pub const EAUTH = 80; // Authentication error
pub const ENEEDAUTH = 81; // Need authenticator
pub const EIDRM = 82; // Identifier removed
pub const ENOMSG = 83; // No message of desired type
pub const EOVERFLOW = 84; // Value too large to be stored in data type
pub const ECANCELED = 85; // Operation canceled
pub const EILSEQ = 86; // Illegal byte sequence
pub const ENOATTR = 87; // Attribute not found

pub const EDOOFUS = 88; // Programming error

pub const EBADMSG = 89; // Bad message
pub const EMULTIHOP = 90; // Multihop attempted
pub const ENOLINK = 91; // Link has been severed
pub const EPROTO = 92; // Protocol error

pub const ENOMEDIUM = 93; // Linux

pub const EASYNC = 99; // XXX

pub const ELAST = 99; // Must be equal largest errno


[FILE:826:files/native_libc.txt]
# The directory that contains `stdlib.h`.
# On POSIX-like systems, include directories be found with: `cc -E -Wp,-v -xc /dev/null`
include_dir=/raven/include
# The system-specific include directory. May be the same as `include_dir`.
# On Windows it's the directory that includes `vcruntime.h`.
# On POSIX it's the directory that includes `sys/errno.h`.
sys_include_dir=/raven/share/raven/sysroot/DragonFly/usr/include

# The directory that contains `crt1.o`.
# On POSIX, can be found with `cc -print-file-name=crt1.o`.
# Not needed when targeting MacOS.
crt_dir=/raven/share/raven/sysroot/DragonFly/usr/lib

# The directory that contains `vcruntime.lib`.
# Only needed when targeting MSVC on Windows.
msvc_lib_dir=

# The directory that contains `kernel32.lib`.
# Only needed when targeting MSVC on Windows.
kernel32_lib_dir=


[FILE:21978:files/os_dragonfly.zig]
const builtin = @import("builtin");

pub use @import("dragonfly/errno.zig");

const std = @import("../std.zig");
const c = std.c;

const assert = std.debug.assert;
const maxInt = std.math.maxInt;
pub const Kevent = c.Kevent;

pub const CTL_KERN = 1;
pub const CTL_DEBUG = 5;

pub const KERN_PROC = 14; // struct: process entries
pub const KERN_PROC_PATHNAME = 12; // path to executable

pub const PATH_MAX = 1024;

pub const STDIN_FILENO = 0;
pub const STDOUT_FILENO = 1;
pub const STDERR_FILENO = 2;

pub const PROT_NONE = 0;
pub const PROT_READ = 1;
pub const PROT_WRITE = 2;
pub const PROT_EXEC = 4;

pub const CLOCK_REALTIME = 0;
pub const CLOCK_VIRTUAL = 1;
pub const CLOCK_PROF = 2;
pub const CLOCK_MONOTONIC = 4;
pub const CLOCK_UPTIME = 5;
pub const CLOCK_UPTIME_PRECISE = 7;
pub const CLOCK_UPTIME_FAST = 8;
pub const CLOCK_REALTIME_PRECISE = 9;
pub const CLOCK_REALTIME_FAST = 10;
pub const CLOCK_MONOTONIC_PRECISE = 11;
pub const CLOCK_MONOTONIC_FAST = 12;
pub const CLOCK_SECOND = 13;
pub const CLOCK_THREAD_CPUTIME_ID = 14;
pub const CLOCK_PROCESS_CPUTIME_ID = 15;

pub const MAP_FAILED = maxInt(usize);
pub const MAP_SHARED = 0x0001;
pub const MAP_PRIVATE = 0x0002;
pub const MAP_FIXED = 0x0010;
pub const MAP_STACK = 0x0400;
pub const MAP_NOSYNC = 0x0800;
pub const MAP_ANON = 0x1000;
pub const MAP_ANONYMOUS = MAP_ANON;
pub const MAP_FILE = 0;
pub const MAP_NORESERVE = 0;

pub const MAP_GUARD = 0x00002000;
pub const MAP_EXCL = 0x00004000;
pub const MAP_NOCORE = 0x00020000;
pub const MAP_PREFAULT_READ = 0x00040000;
pub const MAP_32BIT = 0x00080000;

pub const WNOHANG = 1;
pub const WUNTRACED = 2;
pub const WSTOPPED = WUNTRACED;
pub const WCONTINUED = 4;
pub const WNOWAIT = 8;
pub const WEXITED = 16;
pub const WTRAPPED = 32;

pub const SA_ONSTACK = 0x0001;
pub const SA_RESTART = 0x0002;
pub const SA_RESETHAND = 0x0004;
pub const SA_NOCLDSTOP = 0x0008;
pub const SA_NODEFER = 0x0010;
pub const SA_NOCLDWAIT = 0x0020;
pub const SA_SIGINFO = 0x0040;

pub const SIGHUP = 1;
pub const SIGINT = 2;
pub const SIGQUIT = 3;
pub const SIGILL = 4;
pub const SIGTRAP = 5;
pub const SIGABRT = 6;
pub const SIGIOT = SIGABRT;
pub const SIGEMT = 7;
pub const SIGFPE = 8;
pub const SIGKILL = 9;
pub const SIGBUS = 10;
pub const SIGSEGV = 11;
pub const SIGSYS = 12;
pub const SIGPIPE = 13;
pub const SIGALRM = 14;
pub const SIGTERM = 15;
pub const SIGURG = 16;
pub const SIGSTOP = 17;
pub const SIGTSTP = 18;
pub const SIGCONT = 19;
pub const SIGCHLD = 20;
pub const SIGTTIN = 21;
pub const SIGTTOU = 22;
pub const SIGIO = 23;
pub const SIGXCPU = 24;
pub const SIGXFSZ = 25;
pub const SIGVTALRM = 26;
pub const SIGPROF = 27;
pub const SIGWINCH = 28;
pub const SIGINFO = 29;
pub const SIGUSR1 = 30;
pub const SIGUSR2 = 31;
pub const SIGTHR = 32;
pub const SIGLWP = SIGTHR;
pub const SIGLIBRT = 33;

pub const SIGRTMIN = 65;
pub const SIGRTMAX = 126;

// access function
pub const F_OK = 0; // test for existence of file
pub const X_OK = 1; // test for execute or search permission
pub const W_OK = 2; // test for write permission
pub const R_OK = 4; // test for read permission

pub const O_RDONLY = 0x0000;
pub const O_WRONLY = 0x0001;
pub const O_RDWR = 0x0002;
pub const O_ACCMODE = 0x0003;

pub const O_CREAT = 0x0200;
pub const O_EXCL = 0x0800;
pub const O_NOCTTY = 0x8000;
pub const O_TRUNC = 0x0400;
pub const O_APPEND = 0x0008;
pub const O_NONBLOCK = 0x0004;
pub const O_DSYNC = 0o10000;
pub const O_SYNC = 0x0080;
pub const O_RSYNC = 0o4010000;
pub const O_DIRECTORY = 0o200000;
pub const O_NOFOLLOW = 0x0100;
pub const O_CLOEXEC = 0x00100000;

pub const O_ASYNC = 0x0040;
pub const O_DIRECT = 0x00010000;
pub const O_LARGEFILE = 0;
pub const O_NOATIME = 0o1000000;
pub const O_PATH = 0o10000000;
pub const O_TMPFILE = 0o20200000;
pub const O_NDELAY = O_NONBLOCK;

pub const F_DUPFD = 0;
pub const F_GETFD = 1;
pub const F_SETFD = 2;
pub const F_GETFL = 3;
pub const F_SETFL = 4;

pub const F_SETOWN = 8;
pub const F_GETOWN = 9;
pub const F_SETSIG = 10;
pub const F_GETSIG = 11;

pub const F_GETLK = 5;
pub const F_SETLK = 6;
pub const F_SETLKW = 7;

pub const F_SETOWN_EX = 15;
pub const F_GETOWN_EX = 16;

pub const F_GETOWNER_UIDS = 17;

pub const SEEK_SET = 0;
pub const SEEK_CUR = 1;
pub const SEEK_END = 2;

pub const SIG_BLOCK = 1;
pub const SIG_UNBLOCK = 2;
pub const SIG_SETMASK = 3;

pub const SOCK_STREAM = 1;
pub const SOCK_DGRAM = 2;
pub const SOCK_RAW = 3;
pub const SOCK_RDM = 4;
pub const SOCK_SEQPACKET = 5;

pub const SOCK_CLOEXEC = 0x10000000;
pub const SOCK_NONBLOCK = 0x20000000;

pub const PROTO_ip = 0o000;
pub const PROTO_icmp = 0o001;
pub const PROTO_igmp = 0o002;
pub const PROTO_ggp = 0o003;
pub const PROTO_ipencap = 0o004;
pub const PROTO_st = 0o005;
pub const PROTO_tcp = 0o006;
pub const PROTO_egp = 0o010;
pub const PROTO_pup = 0o014;
pub const PROTO_udp = 0o021;
pub const PROTO_hmp = 0o024;
pub const PROTO_xns_idp = 0o026;
pub const PROTO_rdp = 0o033;
pub const PROTO_iso_tp4 = 0o035;
pub const PROTO_xtp = 0o044;
pub const PROTO_ddp = 0o045;
pub const PROTO_idpr_cmtp = 0o046;
pub const PROTO_ipv6 = 0o051;
pub const PROTO_ipv6_route = 0o053;
pub const PROTO_ipv6_frag = 0o054;
pub const PROTO_idrp = 0o055;
pub const PROTO_rsvp = 0o056;
pub const PROTO_gre = 0o057;
pub const PROTO_esp = 0o062;
pub const PROTO_ah = 0o063;
pub const PROTO_skip = 0o071;
pub const PROTO_ipv6_icmp = 0o072;
pub const PROTO_ipv6_nonxt = 0o073;
pub const PROTO_ipv6_opts = 0o074;
pub const PROTO_rspf = 0o111;
pub const PROTO_vmtp = 0o121;
pub const PROTO_ospf = 0o131;
pub const PROTO_ipip = 0o136;
pub const PROTO_encap = 0o142;
pub const PROTO_pim = 0o147;
pub const PROTO_raw = 0o377;

pub const PF_UNSPEC = 0;
pub const PF_LOCAL = 1;
pub const PF_UNIX = PF_LOCAL;
pub const PF_FILE = PF_LOCAL;
pub const PF_INET = 2;
pub const PF_AX25 = 3;
pub const PF_IPX = 4;
pub const PF_APPLETALK = 5;
pub const PF_NETROM = 6;
pub const PF_BRIDGE = 7;
pub const PF_ATMPVC = 8;
pub const PF_X25 = 9;
pub const PF_INET6 = 10;
pub const PF_ROSE = 11;
pub const PF_DECnet = 12;
pub const PF_NETBEUI = 13;
pub const PF_SECURITY = 14;
pub const PF_KEY = 15;
pub const PF_NETLINK = 16;
pub const PF_ROUTE = PF_NETLINK;
pub const PF_PACKET = 17;
pub const PF_ASH = 18;
pub const PF_ECONET = 19;
pub const PF_ATMSVC = 20;
pub const PF_RDS = 21;
pub const PF_SNA = 22;
pub const PF_IRDA = 23;
pub const PF_PPPOX = 24;
pub const PF_WANPIPE = 25;
pub const PF_LLC = 26;
pub const PF_IB = 27;
pub const PF_MPLS = 28;
pub const PF_CAN = 29;
pub const PF_TIPC = 30;
pub const PF_BLUETOOTH = 31;
pub const PF_IUCV = 32;
pub const PF_RXRPC = 33;
pub const PF_ISDN = 34;
pub const PF_PHONET = 35;
pub const PF_IEEE802154 = 36;
pub const PF_CAIF = 37;
pub const PF_ALG = 38;
pub const PF_NFC = 39;
pub const PF_VSOCK = 40;
pub const PF_MAX = 41;

pub const AF_UNSPEC = PF_UNSPEC;
pub const AF_LOCAL = PF_LOCAL;
pub const AF_UNIX = AF_LOCAL;
pub const AF_FILE = AF_LOCAL;
pub const AF_INET = PF_INET;
pub const AF_AX25 = PF_AX25;
pub const AF_IPX = PF_IPX;
pub const AF_APPLETALK = PF_APPLETALK;
pub const AF_NETROM = PF_NETROM;
pub const AF_BRIDGE = PF_BRIDGE;
pub const AF_ATMPVC = PF_ATMPVC;
pub const AF_X25 = PF_X25;
pub const AF_INET6 = PF_INET6;
pub const AF_ROSE = PF_ROSE;
pub const AF_DECnet = PF_DECnet;
pub const AF_NETBEUI = PF_NETBEUI;
pub const AF_SECURITY = PF_SECURITY;
pub const AF_KEY = PF_KEY;
pub const AF_NETLINK = PF_NETLINK;
pub const AF_ROUTE = PF_ROUTE;
pub const AF_PACKET = PF_PACKET;
pub const AF_ASH = PF_ASH;
pub const AF_ECONET = PF_ECONET;
pub const AF_ATMSVC = PF_ATMSVC;
pub const AF_RDS = PF_RDS;
pub const AF_SNA = PF_SNA;
pub const AF_IRDA = PF_IRDA;
pub const AF_PPPOX = PF_PPPOX;
pub const AF_WANPIPE = PF_WANPIPE;
pub const AF_LLC = PF_LLC;
pub const AF_IB = PF_IB;
pub const AF_MPLS = PF_MPLS;
pub const AF_CAN = PF_CAN;
pub const AF_TIPC = PF_TIPC;
pub const AF_BLUETOOTH = PF_BLUETOOTH;
pub const AF_IUCV = PF_IUCV;
pub const AF_RXRPC = PF_RXRPC;
pub const AF_ISDN = PF_ISDN;
pub const AF_PHONET = PF_PHONET;
pub const AF_IEEE802154 = PF_IEEE802154;
pub const AF_CAIF = PF_CAIF;
pub const AF_ALG = PF_ALG;
pub const AF_NFC = PF_NFC;
pub const AF_VSOCK = PF_VSOCK;
pub const AF_MAX = PF_MAX;

pub const DT_UNKNOWN = 0;
pub const DT_FIFO = 1;
pub const DT_CHR = 2;
pub const DT_DIR = 4;
pub const DT_BLK = 6;
pub const DT_REG = 8;
pub const DT_LNK = 10;
pub const DT_SOCK = 12;
pub const DT_WHT = 14;

/// add event to kq (implies enable)
pub const EV_ADD = 0x0001;

/// delete event from kq
pub const EV_DELETE = 0x0002;

/// enable event
pub const EV_ENABLE = 0x0004;

/// disable event (not reported)
pub const EV_DISABLE = 0x0008;

/// only report one occurrence
pub const EV_ONESHOT = 0x0010;

/// clear event state after reporting
pub const EV_CLEAR = 0x0020;

/// force immediate event output
/// ... with or without EV_ERROR
/// ... use KEVENT_FLAG_ERROR_EVENTS
///     on syscalls supporting flags
pub const EV_RECEIPT = 0x0040;

/// disable event after reporting
pub const EV_DISPATCH = 0x0080;

pub const EVFILT_READ = -1;
pub const EVFILT_WRITE = -2;

/// attached to aio requests
pub const EVFILT_AIO = -3;

/// attached to vnodes
pub const EVFILT_VNODE = -4;

/// attached to struct proc
pub const EVFILT_PROC = -5;

/// attached to struct proc
pub const EVFILT_SIGNAL = -6;

/// timers
pub const EVFILT_TIMER = -7;

/// Process descriptors
pub const EVFILT_PROCDESC = -8;

/// Filesystem events
pub const EVFILT_FS = -9;

pub const EVFILT_LIO = -10;

/// User events
pub const EVFILT_USER = -11;

/// Sendfile events
pub const EVFILT_SENDFILE = -12;

pub const EVFILT_EMPTY = -13;

/// On input, NOTE_TRIGGER causes the event to be triggered for output.
pub const NOTE_TRIGGER = 0x01000000;

/// ignore input fflags
pub const NOTE_FFNOP = 0x00000000;

/// and fflags
pub const NOTE_FFAND = 0x40000000;

/// or fflags
pub const NOTE_FFOR = 0x80000000;

/// copy fflags
pub const NOTE_FFCOPY = 0xc0000000;

/// mask for operations
pub const NOTE_FFCTRLMASK = 0xc0000000;
pub const NOTE_FFLAGSMASK = 0x00ffffff;

/// low water mark
pub const NOTE_LOWAT = 0x00000001;

/// behave like poll()
pub const NOTE_FILE_POLL = 0x00000002;

/// vnode was removed
pub const NOTE_DELETE = 0x00000001;

/// data contents changed
pub const NOTE_WRITE = 0x00000002;

/// size increased
pub const NOTE_EXTEND = 0x00000004;

/// attributes changed
pub const NOTE_ATTRIB = 0x00000008;

/// link count changed
pub const NOTE_LINK = 0x00000010;

/// vnode was renamed
pub const NOTE_RENAME = 0x00000020;

/// vnode access was revoked
pub const NOTE_REVOKE = 0x00000040;

/// vnode was opened
pub const NOTE_OPEN = 0x00000080;

/// file closed, fd did not allow write
pub const NOTE_CLOSE = 0x00000100;

/// file closed, fd did allow write
pub const NOTE_CLOSE_WRITE = 0x00000200;

/// file was read
pub const NOTE_READ = 0x00000400;

/// process exited
pub const NOTE_EXIT = 0x80000000;

/// process forked
pub const NOTE_FORK = 0x40000000;

/// process exec'd
pub const NOTE_EXEC = 0x20000000;

/// mask for signal & exit status
pub const NOTE_PDATAMASK = 0x000fffff;
pub const NOTE_PCTRLMASK = (~NOTE_PDATAMASK);

/// data is seconds
pub const NOTE_SECONDS = 0x00000001;

/// data is milliseconds
pub const NOTE_MSECONDS = 0x00000002;

/// data is microseconds
pub const NOTE_USECONDS = 0x00000004;

/// data is nanoseconds
pub const NOTE_NSECONDS = 0x00000008;

/// timeout is absolute
pub const NOTE_ABSTIME = 0x00000010;

pub const TCGETS = 0x5401;
pub const TCSETS = 0x5402;
pub const TCSETSW = 0x5403;
pub const TCSETSF = 0x5404;
pub const TCGETA = 0x5405;
pub const TCSETA = 0x5406;
pub const TCSETAW = 0x5407;
pub const TCSETAF = 0x5408;
pub const TCSBRK = 0x5409;
pub const TCXONC = 0x540A;
pub const TCFLSH = 0x540B;
pub const TIOCEXCL = 0x540C;
pub const TIOCNXCL = 0x540D;
pub const TIOCSCTTY = 0x540E;
pub const TIOCGPGRP = 0x540F;
pub const TIOCSPGRP = 0x5410;
pub const TIOCOUTQ = 0x5411;
pub const TIOCSTI = 0x5412;
pub const TIOCGWINSZ = 0x5413;
pub const TIOCSWINSZ = 0x5414;
pub const TIOCMGET = 0x5415;
pub const TIOCMBIS = 0x5416;
pub const TIOCMBIC = 0x5417;
pub const TIOCMSET = 0x5418;
pub const TIOCGSOFTCAR = 0x5419;
pub const TIOCSSOFTCAR = 0x541A;
pub const FIONREAD = 0x541B;
pub const TIOCINQ = FIONREAD;
pub const TIOCLINUX = 0x541C;
pub const TIOCCONS = 0x541D;
pub const TIOCGSERIAL = 0x541E;
pub const TIOCSSERIAL = 0x541F;
pub const TIOCPKT = 0x5420;
pub const FIONBIO = 0x5421;
pub const TIOCNOTTY = 0x5422;
pub const TIOCSETD = 0x5423;
pub const TIOCGETD = 0x5424;
pub const TCSBRKP = 0x5425;
pub const TIOCSBRK = 0x5427;
pub const TIOCCBRK = 0x5428;
pub const TIOCGSID = 0x5429;
pub const TIOCGRS485 = 0x542E;
pub const TIOCSRS485 = 0x542F;
pub const TIOCGPTN = 0x80045430;
pub const TIOCSPTLCK = 0x40045431;
pub const TIOCGDEV = 0x80045432;
pub const TCGETX = 0x5432;
pub const TCSETX = 0x5433;
pub const TCSETXF = 0x5434;
pub const TCSETXW = 0x5435;
pub const TIOCSIG = 0x40045436;
pub const TIOCVHANGUP = 0x5437;
pub const TIOCGPKT = 0x80045438;
pub const TIOCGPTLCK = 0x80045439;
pub const TIOCGEXCL = 0x80045440;

pub const sockaddr = c.sockaddr;
pub const sockaddr_in = c.sockaddr_in;
pub const sockaddr_in6 = c.sockaddr_in6;

fn unsigned(s: i32) u32 {
    return @bitCast(u32, s);
}
fn signed(s: u32) i32 {
    return @bitCast(i32, s);
}
pub fn WEXITSTATUS(s: i32) i32 {
    return signed((unsigned(s) & 0xff00) >> 8);
}
pub fn WTERMSIG(s: i32) i32 {
    return signed(unsigned(s) & 0x7f);
}
pub fn WSTOPSIG(s: i32) i32 {
    return WEXITSTATUS(s);
}
pub fn WIFEXITED(s: i32) bool {
    return WTERMSIG(s) == 0;
}
pub fn WIFSTOPPED(s: i32) bool {
    return @intCast(u16, (((unsigned(s) & 0xffff) *% 0x10001) >> 8)) > 0x7f00;
}
pub fn WIFSIGNALED(s: i32) bool {
    return (unsigned(s) & 0xffff) -% 1 < 0xff;
}

pub const winsize = extern struct {
    ws_row: u16,
    ws_col: u16,
    ws_xpixel: u16,
    ws_ypixel: u16,
};

/// Get the errno from a syscall return value, or 0 for no error.
pub fn getErrno(r: usize) usize {
    const signed_r = @bitCast(isize, r);
    return if (signed_r > -4096 and signed_r < 0) @intCast(usize, -signed_r) else 0;
}

pub fn dup2(old: i32, new: i32) usize {
    return errnoWrap(c.dup2(old, new));
}

pub fn chdir(path: [*]const u8) usize {
    return errnoWrap(c.chdir(path));
}

pub fn execve(path: [*]const u8, argv: [*]const ?[*]const u8, envp: [*]const ?[*]const u8) usize {
    return errnoWrap(c.execve(path, argv, envp));
}

pub fn fork() usize {
    return errnoWrap(c.fork());
}

pub fn access(path: [*]const u8, mode: u32) usize {
    return errnoWrap(c.access(path, mode));
}

pub fn getcwd(buf: [*]u8, size: usize) usize {
    return if (c.getcwd(buf, size) == null) @bitCast(usize, -isize(c._errno().*)) else 0;
}

pub fn getdents(fd: i32, dirp: [*]u8, count: usize) usize {
    return errnoWrap(@bitCast(isize, c.getdents(fd, drip, count)));
}

pub fn getdirentries(fd: i32, buf_ptr: [*]u8, buf_len: usize, basep: *i64) usize {
    return errnoWrap(@bitCast(isize, c.getdirentries(fd, buf_ptr, buf_len, basep)));
}

pub fn realpath(noalias filename: [*]const u8, noalias resolved_name: [*]u8) usize {
    return if (c.realpath(filename, resolved_name) == null) @bitCast(usize, -isize(c._errno().*)) else 0;
}

pub fn isatty(fd: i32) bool {
    return c.isatty(fd) != 0;
}

pub fn readlink(noalias path: [*]const u8, noalias buf_ptr: [*]u8, buf_len: usize) usize {
    return errnoWrap(c.readlink(path, buf_ptr, buf_len));
}

pub fn mkdir(path: [*]const u8, mode: u32) usize {
    return errnoWrap(c.mkdir(path, mode));
}

pub fn mmap(address: ?[*]u8, length: usize, prot: usize, flags: u32, fd: i32, offset: isize) usize {
    const ptr_result = c.mmap(
        @ptrCast(?*c_void, address),
        length,
        @bitCast(c_int, @intCast(c_uint, prot)),
        @bitCast(c_int, c_uint(flags)),
        fd,
        offset,
    );
    const isize_result = @bitCast(isize, @ptrToInt(ptr_result));
    return errnoWrap(isize_result);
}

pub fn munmap(address: usize, length: usize) usize {
    return errnoWrap(c.munmap(@intToPtr(?*c_void, address), length));
}

pub fn read(fd: i32, buf: [*]u8, nbyte: usize) usize {
    return errnoWrap(c.read(fd, @ptrCast(*c_void, buf), nbyte));
}

pub fn rmdir(path: [*]const u8) usize {
    return errnoWrap(c.rmdir(path));
}

pub fn symlink(existing: [*]const u8, new: [*]const u8) usize {
    return errnoWrap(c.symlink(existing, new));
}

pub fn pread(fd: i32, buf: [*]u8, nbyte: usize, offset: u64) usize {
    return errnoWrap(c.pread(fd, @ptrCast(*c_void, buf), nbyte, offset));
}

pub fn preadv(fd: i32, iov: [*]const iovec, count: usize, offset: usize) usize {
    return errnoWrap(c.preadv(fd, @ptrCast(*const c_void, iov), @intCast(c_int, count), offset));
}

pub fn pipe(fd: *[2]i32) usize {
    return pipe2(fd, 0);
}

pub fn pipe2(fd: *[2]i32, flags: u32) usize {
    comptime assert(i32.bit_count == c_int.bit_count);
    return errnoWrap(c.pipe2(@ptrCast(*[2]c_int, fd), flags));
}

pub fn write(fd: i32, buf: [*]const u8, nbyte: usize) usize {
    return errnoWrap(c.write(fd, @ptrCast(*const c_void, buf), nbyte));
}

pub fn pwrite(fd: i32, buf: [*]const u8, nbyte: usize, offset: u64) usize {
    return errnoWrap(c.pwrite(fd, @ptrCast(*const c_void, buf), nbyte, offset));
}

pub fn pwritev(fd: i32, iov: [*]const iovec_const, count: usize, offset: usize) usize {
    return errnoWrap(c.pwritev(fd, @ptrCast(*const c_void, iov), @intCast(c_int, count), offset));
}

pub fn rename(old: [*]const u8, new: [*]const u8) usize {
    return errnoWrap(c.rename(old, new));
}

pub fn open(path: [*]const u8, flags: u32, mode: usize) usize {
    return errnoWrap(c.open(path, @bitCast(c_int, flags), mode));
}

pub fn create(path: [*]const u8, perm: usize) usize {
    return arch.syscall2(SYS_creat, @ptrToInt(path), perm);
}

pub fn openat(dirfd: i32, path: [*]const u8, flags: usize, mode: usize) usize {
    return errnoWrap(c.openat(@bitCast(usize, isize(dirfd)), @ptrToInt(path), flags, mode));
}

pub fn close(fd: i32) usize {
    return errnoWrap(c.close(fd));
}

pub fn lseek(fd: i32, offset: isize, whence: c_int) usize {
    return errnoWrap(c.lseek(fd, offset, whence));
}

pub fn exit(code: i32) noreturn {
    c.exit(code);
}

pub fn kill(pid: i32, sig: i32) usize {
    return errnoWrap(c.kill(pid, sig));
}

pub fn unlink(path: [*]const u8) usize {
    return errnoWrap(c.unlink(path));
}

pub fn waitpid(pid: i32, status: *i32, options: u32) usize {
    comptime assert(i32.bit_count == c_int.bit_count);
    return errnoWrap(c.waitpid(pid, @ptrCast(*c_int, status), @bitCast(c_int, options)));
}

pub fn nanosleep(req: *const timespec, rem: ?*timespec) usize {
    return errnoWrap(c.nanosleep(req, rem));
}

pub fn clock_gettime(clk_id: i32, tp: *timespec) usize {
    return errnoWrap(c.clock_gettime(clk_id, tp));
}

pub fn clock_getres(clk_id: i32, tp: *timespec) usize {
    return errnoWrap(c.clock_getres(clk_id, tp));
}

pub fn setuid(uid: u32) usize {
    return errnoWrap(c.setuid(uid));
}

pub fn setgid(gid: u32) usize {
    return errnoWrap(c.setgid(gid));
}

pub fn setreuid(ruid: u32, euid: u32) usize {
    return errnoWrap(c.setreuid(ruid, euid));
}

pub fn setregid(rgid: u32, egid: u32) usize {
    return errnoWrap(c.setregid(rgid, egid));
}

const NSIG = 32;

pub const SIG_ERR = @intToPtr(extern fn (i32) void, maxInt(usize));
pub const SIG_DFL = @intToPtr(extern fn (i32) void, 0);
pub const SIG_IGN = @intToPtr(extern fn (i32) void, 1);

/// Renamed from `sigaction` to `Sigaction` to avoid conflict with the syscall.
pub const Sigaction = extern struct {
    /// signal handler
    __sigaction_u: extern union {
        __sa_handler: extern fn (i32) void,
        __sa_sigaction: extern fn (i32, *__siginfo, usize) void,
    },

    /// see signal options
    sa_flags: u32,

    /// signal mask to apply
    sa_mask: sigset_t,
};

pub const _SIG_WORDS = 4;
pub const _SIG_MAXSIG = 128;

pub inline fn _SIG_IDX(sig: usize) usize {
    return sig - 1;
}
pub inline fn _SIG_WORD(sig: usize) usize {
    return_SIG_IDX(sig) >> 5;
}
pub inline fn _SIG_BIT(sig: usize) usize {
    return 1 << (_SIG_IDX(sig) & 31);
}
pub inline fn _SIG_VALID(sig: usize) usize {
    return sig <= _SIG_MAXSIG and sig > 0;
}

pub const sigset_t = extern struct {
    __bits: [_SIG_WORDS]u32,
};

pub fn raise(sig: i32) usize {
    return errnoWrap(c.raise(sig));
}

pub const Stat = c.Stat;
pub const dirent = c.dirent;
pub const timespec = c.timespec;

pub fn fstat(fd: i32, buf: *c.Stat) usize {
    return errnoWrap(c.fstat(fd, buf));
}
pub const iovec = extern struct {
    iov_base: [*]u8,
    iov_len: usize,
};

pub const iovec_const = extern struct {
    iov_base: [*]const u8,
    iov_len: usize,
};

// TODO avoid libc dependency
pub fn kqueue() usize {
    return errnoWrap(c.kqueue());
}

// TODO avoid libc dependency
pub fn kevent(kq: i32, changelist: []const Kevent, eventlist: []Kevent, timeout: ?*const timespec) usize {
    return errnoWrap(c.kevent(
        kq,
        changelist.ptr,
        @intCast(c_int, changelist.len),
        eventlist.ptr,
        @intCast(c_int, eventlist.len),
        timeout,
    ));
}

// TODO avoid libc dependency
pub fn sysctl(name: [*]c_int, namelen: c_uint, oldp: ?*c_void, oldlenp: ?*usize, newp: ?*c_void, newlen: usize) usize {
    return errnoWrap(c.sysctl(name, namelen, oldp, oldlenp, newp, newlen));
}

// TODO avoid libc dependency
pub fn sysctlbyname(name: [*]const u8, oldp: ?*c_void, oldlenp: ?*usize, newp: ?*c_void, newlen: usize) usize {
    return errnoWrap(c.sysctlbyname(name, oldp, oldlenp, newp, newlen));
}

// TODO avoid libc dependency
pub fn sysctlnametomib(name: [*]const u8, mibp: ?*c_int, sizep: ?*usize) usize {
    return errnoWrap(c.sysctlnametomib(name, wibp, sizep));
}

// TODO avoid libc dependency

/// Takes the return value from a syscall and formats it back in the way
/// that the kernel represents it to libc. Errno was a mistake, let's make
/// it go away forever.
fn errnoWrap(value: isize) usize {
    return @bitCast(usize, if (value == -1) -isize(c._errno().*) else value);
}

