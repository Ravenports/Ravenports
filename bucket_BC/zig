# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		zig
VERSION=		0.11.0
KEYWORDS=		devel lang
VARIANTS=		standard
SDESC[standard]=	Programming language
HOMEPAGE=		https://ziglang.org/
CONTACT=		Tse_[tse@tse.gratis]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/ziglang:zig:0.11.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BROKEN[linux]=		final linking: undefined reference to `getrandom'
BROKEN[netbsd]=		The .build/zig2 build-exe command fails
ONLY_FOR_OPSYS=		freebsd dragonfly netbsd linux midnightbsd

BUILD_DEPENDS=		clang:compiler:standard
			lld:dev:standard
			lld:primary:standard
			llvm:tools:standard
			llvm:dev:standard
BUILDRUN_DEPENDS=	clang:dynlibs:standard

USES=			cmake ncurses execinfo zlib
GNOME_COMPONENTS=	libxml2

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		lang/zig

INSTALL_REQ_TOOLCHAIN=	yes

VAR_OPSYS[midnightbsd]=	MAKEFILE_LINE=CONFIGURE_TARGET=x86_64-raven-freebsd12.3

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/zig
	# remove empty directories
	${FIND} ${STAGEDIR}${PREFIX}/lib -type d -empty -delete
	# remove licenses out of place
	${RM} ${STAGEDIR}${PREFIX}/lib/zig/*/LICENSE.TXT
	${RM} ${STAGEDIR}${PREFIX}/lib/zig/libc/glibc/LICENSES
	# automatic plist for much of the manifest (influenced by clang)
	@(cd ${STAGEDIR}${PREFIX} && ${FIND} \
		lib/zig/compiler_rt \
		lib/zig/include \
		lib/zig/libc \
		lib/zig/libcxx \
		lib/zig/libcxxabi \
		lib/zig/std \
		lib/zig/tsan \
	\( -type f -o -type l \) 2>/dev/null | ${SORT}) \
	>> ${WRKDIR}/.manifest.single.mktmp

pre-configure:
	${REINPLACE_CMD} \
		-e 's|@GCC_TARGET_LIBDIR@|${LOCALBASE}/toolchain/ravensys-gcc/${ASLIB}/gcc/${CONFIGURE_TARGET}/11.2.0|' \
		${WRKSRC}/src/link/Elf.zig
	${REINPLACE_CMD} \
		-e 's|@GCC_TARGET_LIBDIR@|${LOCALBASE}/toolchain/ravensys-gcc/${ASLIB}/gcc/${CONFIGURE_TARGET}/11.2.0|' \
		-e 's|@GCC_LIBDIR@|${LOCALBASE}/toolchain/ravensys-gcc/${ASLIB}|' \
		-e 's|@LOCALBASE@|${LOCALBASE}|' \
		${WRKSRC}/build.zig
	${REINPLACE_CMD} -e 's|/usr/local|${PREFIX}|g' \
		${WRKSRC}/cmake/Findclang.cmake \
		${WRKSRC}/cmake/Findllvm.cmake \
		${WRKSRC}/cmake/Findlld.cmake
	${FIND} ${WRKSRC} -name "*.orig" -delete

[FILE:94:descriptions/desc.single]
General purpose programming language designed for robustness, optimality, and maintainability


[FILE:104:distinfo]
71de3e958293dffaa17f7ad1438c775389f5406991c96b533bb1501178092b02     24606916 ziglang-zig-0.11.0.tar.gz


[FILE:1012:manifests/plist.single]
@comment lib/zig autolist: compiler_rt, include, libc, libcxx, libcxxabi, std, tsan
bin/zig
lib/zig/
 build_runner.zig
 c.zig
 compiler_rt.zig
 ssp.zig
 test_runner.zig
 zig.h
lib/zig/docs/
 commonmark.js
 index.html
 main.js
 ziglexer.js
lib/zig/init-exe/build.zig
lib/zig/init-exe/src/main.zig
lib/zig/init-lib/build.zig
lib/zig/init-lib/src/main.zig
lib/zig/libunwind/include/
 __libunwind_config.h
 libunwind.h
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
lib/zig/libunwind/include/mach-o/compact_unwind_encoding.h
lib/zig/libunwind/src/
 AddressSpace.hpp
 CompactUnwinder.hpp
 DwarfInstructions.hpp
 DwarfParser.hpp
 EHHeaderParser.hpp
 FrameHeaderCache.hpp
 RWMutex.hpp
 Registers.hpp
 Unwind-EHABI.cpp
 Unwind-EHABI.h
 Unwind-seh.cpp
 Unwind-sjlj.c
 UnwindCursor.hpp
 UnwindLevel1-gcc-ext.c
 UnwindLevel1.c
 UnwindRegistersRestore.S
 UnwindRegistersSave.S
 Unwind_AIXExtras.cpp
 Unwind_AppleExtras.cpp
 assembly.h
 cet_unwind.h
 config.h
 dwarf2.h
 gcc_personality_v0.c
 libunwind.cpp
 libunwind_ext.h


[FILE:267:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2023-08-03 18:22:03 UTC
+++ CMakeLists.txt
@@ -877,6 +877,7 @@ set(ZIG_BUILD_ARGS
   "-Dtarget=${ZIG_TARGET_TRIPLE}"
   "-Dcpu=${ZIG_TARGET_MCPU}"
   "-Dversion-string=${RESOLVED_ZIG_VERSION}"
+  "--verbose"
 )
 
 add_custom_target(stage3 ALL


[FILE:1778:patches/patch-build.zig]
--- build.zig.orig	2023-08-03 18:22:03 UTC
+++ build.zig
@@ -646,25 +646,14 @@ fn addCmakeCfgOptionsToExe(
             .windows => {
                 if (exe.target.getAbi() != .msvc) exe.linkLibCpp();
             },
-            .freebsd => {
-                if (static) {
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libc++.{s}", .{lib_suffix}), null, need_cpp_includes);
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libgcc_eh.{s}", .{lib_suffix}), null, need_cpp_includes);
-                } else {
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libc++.{s}", .{lib_suffix}), null, need_cpp_includes);
-                }
-            },
             .openbsd => {
                 try addCxxKnownPath(b, cfg, exe, b.fmt("libc++.{s}", .{lib_suffix}), null, need_cpp_includes);
                 try addCxxKnownPath(b, cfg, exe, b.fmt("libc++abi.{s}", .{lib_suffix}), null, need_cpp_includes);
             },
-            .netbsd, .dragonfly => {
-                if (static) {
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libstdc++.{s}", .{lib_suffix}), null, need_cpp_includes);
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libgcc_eh.{s}", .{lib_suffix}), null, need_cpp_includes);
-                } else {
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libstdc++.{s}", .{lib_suffix}), null, need_cpp_includes);
-                }
+            .netbsd, .dragonfly, .freebsd => {
+                exe.addObjectFile(.{ .cwd_relative = "@GCC_LIBDIR@/libstdc++.a" });
+                exe.addObjectFile(.{ .cwd_relative = "@GCC_TARGET_LIBDIR@/libgcc_eh.a" });
+                exe.addRPath(.{ .cwd_relative = "@LOCALBASE@/lib" });
             },
             else => {},
         }


[FILE:1350:patches/patch-lib_std_c_dragonfly.zig]
--- lib/std/c/dragonfly.zig.orig	2023-08-03 18:22:03 UTC
+++ lib/std/c/dragonfly.zig
@@ -1143,3 +1143,51 @@ pub const POLL = struct {
     pub const HUP = 0x0010;
     pub const NVAL = 0x0020;
 };
+
+pub const mcontext_t = switch (builtin.cpu.arch) {
+    .x86_64 => extern struct {
+        mc_onstack: c_long,
+        mc_rdi: c_long,
+        mc_rsi: c_long,
+        mc_rdx: c_long,
+        mc_rcx: c_long,
+        mc_r8: c_long,
+        mc_r9: c_long,
+        mc_rax: c_long,
+        mc_rbx: c_long,
+        mc_rbp: c_long,
+        mc_r10: c_long,
+        mc_r11: c_long,
+        mc_r12: c_long,
+        mc_r13: c_long,
+        mc_r14: c_long,
+        mc_r15: c_long,
+        mc_xflags: c_long,
+        mc_trapno: c_long,
+        mc_addr: c_long,
+        mc_flags: c_long,
+        mc_err: c_long,
+        mc_rip: c_long,
+        mc_cs: c_long,
+        mc_rflags: c_long,
+        mc_rsp: c_long,
+        mc_ss: c_long,
+        mc_len: c_uint,
+        mc_fpformat: c_uint,
+        mc_ownedfp: c_uint,
+        mc_reserved: c_uint,
+        mc_unused: [8]c_uint,
+    },
+    else => struct {},
+};
+
+pub const ucontext_t = extern struct {
+    uc_sigmask: sigset_t,
+    uc_mcontext: mcontext_t,
+    uc_link: ?*ucontext_t,
+    uc_stack: stack_t,
+    uc_cofunc: void,
+    uc_arg: void,
+    __spare__: [4]c_int,
+};
+


[FILE:424:patches/patch-lib_tsan_sanitizer__common_sanitizer__freebsd.h]
--- lib/tsan/sanitizer_common/sanitizer_freebsd.h.orig	2023-08-03 18:22:03 UTC
+++ lib/tsan/sanitizer_common/sanitizer_freebsd.h
@@ -19,8 +19,7 @@
 // x86-64 FreeBSD 9.2 and older define 'ucontext_t' incorrectly in
 // 32-bit mode.
 #if SANITIZER_FREEBSD && (SANITIZER_WORDSIZE == 32)
-#include <osreldate.h>
-#if __FreeBSD_version <= 902001  // v9.2
+#if 0
 #include <link.h>
 #include <sys/param.h>
 #include <ucontext.h>


[FILE:444:patches/patch-lib_tsan_sanitizer__common_sanitizer__linux.cpp]
--- lib/tsan/sanitizer_common/sanitizer_linux.cpp.orig	2023-08-03 18:22:03 UTC
+++ lib/tsan/sanitizer_common/sanitizer_linux.cpp
@@ -142,7 +142,7 @@ const int FUTEX_WAKE_PRIVATE = FUTEX_WAK
 # define SANITIZER_USE_GETRANDOM 0
 #endif  // SANITIZER_LINUX && defined(__NR_getrandom)
 
-#if SANITIZER_FREEBSD && __FreeBSD_version >= 1200000
+#if SANITIZER_FREEBSD
 #  define SANITIZER_USE_GETENTROPY 1
 #else
 #  define SANITIZER_USE_GETENTROPY 0


[FILE:467:patches/patch-lib_tsan_sanitizer__common_sanitizer__linux__libcdep.cpp]
--- lib/tsan/sanitizer_common/sanitizer_linux_libcdep.cpp.orig	2023-08-03 18:22:03 UTC
+++ lib/tsan/sanitizer_common/sanitizer_linux_libcdep.cpp
@@ -577,7 +577,7 @@ void GetThreadStackAndTls(bool main, upt
 
 #if !SANITIZER_FREEBSD
 typedef ElfW(Phdr) Elf_Phdr;
-#elif SANITIZER_WORDSIZE == 32 && __FreeBSD_version <= 902001  // v9.2
+#elif 0
 #define Elf_Phdr XElf32_Phdr
 #define dl_phdr_info xdl_phdr_info
 #define dl_iterate_phdr(c, b) xdl_iterate_phdr((c), (b))


[FILE:461:patches/patch-lib_tsan_sanitizer__common_sanitizer__procmaps__bsd.cpp]
--- lib/tsan/sanitizer_common/sanitizer_procmaps_bsd.cpp.orig	2023-08-03 18:22:03 UTC
+++ lib/tsan/sanitizer_common/sanitizer_procmaps_bsd.cpp
@@ -29,13 +29,6 @@
 
 #include <limits.h>
 
-// Fix 'kinfo_vmentry' definition on FreeBSD prior v9.2 in 32-bit mode.
-#if SANITIZER_FREEBSD && (SANITIZER_WORDSIZE == 32)
-#include <osreldate.h>
-#if __FreeBSD_version <= 902001 // v9.2
-#define kinfo_vmentry xkinfo_vmentry
-#endif
-#endif
 
 namespace __sanitizer {
 


[FILE:2402:patches/patch-src_link_Elf.zig]
--- src/link/Elf.zig.orig	2023-08-03 18:22:03 UTC
+++ src/link/Elf.zig
@@ -3409,19 +3409,22 @@ const CsuObjects = struct {
             const crt_dir_path = lci.crt_dir orelse return error.LibCInstallationMissingCRTDir;
             switch (link_options.target.os.tag) {
                 .dragonfly => {
+                    const gcc_dir_path = "@GCC_TARGET_LIBDIR@";
                     if (result.crt0) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
                     if (result.crti) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
                     if (result.crtn) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
 
-                    var gccv: []const u8 = undefined;
-                    if (link_options.target.os.version_range.semver.isAtLeast(.{ .major = 5, .minor = 4, .patch = 0 }) orelse true) {
-                        gccv = "gcc80";
-                    } else {
-                        gccv = "gcc54";
-                    }
+                    if (result.crtbegin) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ gcc_dir_path, obj.* });
+                    if (result.crtend) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ gcc_dir_path, obj.* });
+                },
+                .freebsd => {
+                    const gcc_dir_path = "@GCC_TARGET_LIBDIR@";
+                    if (result.crt0) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
+                    if (result.crti) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
+                    if (result.crtn) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
 
-                    if (result.crtbegin) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, gccv, obj.* });
-                    if (result.crtend) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, gccv, obj.* });
+                    if (result.crtbegin) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ gcc_dir_path, obj.* });
+                    if (result.crtend) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ gcc_dir_path, obj.* });
                 },
                 .haiku => {
                     const gcc_dir_path = lci.gcc_dir orelse return error.LibCInstallationMissingCRTDir;


[FILE:474:patches/patch-src_target.zig]
--- src/target.zig.orig	2023-08-03 18:22:03 UTC
+++ src/target.zig
@@ -466,7 +466,7 @@ pub fn libcFullLinkFlags(target: std.Tar
     // The linking order of these is significant and should match the order other
     // c compilers such as gcc or clang use.
     return switch (target.os.tag) {
-        .netbsd, .openbsd => &[_][]const u8{
+        .netbsd, .openbsd, .freebsd, .dragonfly => &[_][]const u8{
             "-lm",
             "-lpthread",
             "-lc",

