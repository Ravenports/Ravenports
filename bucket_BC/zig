# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		zig
VERSION=		0.13.0
KEYWORDS=		devel lang
VARIANTS=		std
SDESC[std]=		Programming language
HOMEPAGE=		https://ziglang.org/
CONTACT=		Tse_[tse@tse.gratis]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/ziglang:zig:0.13.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[std]=		single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BROKEN[midnightbsd]=	error: UnknownOperatingSystem
ONLY_FOR_OPSYS=		freebsd dragonfly netbsd linux midnightbsd

BUILD_DEPENDS=		clang18:compiler:std
			lld18:dev:std
			lld18:primary:std
			llvm18:tools:std
			llvm18:dev:std
BUILDRUN_DEPENDS=	clang18:dynlibs:std

USES=			cmake ncurses execinfo zlib
GNOME_COMPONENTS=	libxml2

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		lang/zig

INSTALL_REQ_TOOLCHAIN=	yes

VAR_OPSYS[midnightbsd]=	MAKEFILE_LINE=CONFIGURE_TARGET=x86_64-raven-freebsd12.3

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/zig
	# remove empty directories
	${FIND} ${STAGEDIR}${PREFIX}/lib -type d -empty -delete
	# remove licenses out of place
	${RM} ${STAGEDIR}${PREFIX}/lib/zig/*/LICENSE.TXT
	${RM} ${STAGEDIR}${PREFIX}/lib/zig/libc/glibc/LICENSES
	# automatic plist for much of the manifest (influenced by clang)
	@(cd ${STAGEDIR}${PREFIX} && ${FIND} \
		lib/zig/compiler_rt \
		lib/zig/include \
		lib/zig/libc \
		lib/zig/libcxx \
		lib/zig/libcxxabi \
		lib/zig/std \
		lib/zig/tsan \
	\( -type f -o -type l \) 2>/dev/null | ${SORT}) \
	>> ${WRKDIR}/.manifest.single.mktmp

pre-configure:
	${REINPLACE_CMD} \
		-e 's|@GCC_TARGET_LIBDIR@|${LOCALBASE}/toolchain/ravensys-gcc/${ASLIB}/gcc/${CONFIGURE_TARGET}/13.2.0|' \
		${WRKSRC}/src/link/Elf.zig
	${REINPLACE_CMD} \
		-e 's|@GCC_TARGET_LIBDIR@|${LOCALBASE}/toolchain/ravensys-gcc/${ASLIB}/gcc/${CONFIGURE_TARGET}/13.2.0|' \
		-e 's|@GCC_LIBDIR@|${LOCALBASE}/toolchain/ravensys-gcc/${ASLIB}|' \
		-e 's|@LOCALBASE@|${LOCALBASE}|' \
		${WRKSRC}/build.zig
	${REINPLACE_CMD} -e 's|/usr/local|${PREFIX}|g' \
		${WRKSRC}/cmake/Findclang.cmake \
		${WRKSRC}/cmake/Findllvm.cmake \
		${WRKSRC}/cmake/Findlld.cmake
	${FIND} ${WRKSRC} -name "*.orig" -delete

[FILE:94:descriptions/desc.single]
General purpose programming language designed for robustness, optimality, and maintainability


[FILE:104:distinfo]
d3912858003e340f315224bf177d0f441d86b81f62854f5c141b6d51ab6b5516     26656532 ziglang-zig-0.13.0.tar.gz


[FILE:2608:manifests/plist.single]
@comment lib/zig autolist: compiler_rt, include, libc, libcxx, libcxxabi, std, tsan
bin/zig
lib/zig/
 c.zig
 compiler_rt.zig
 zig.h
lib/zig/compiler/
 aro_translate_c.zig
 build_runner.zig
 fmt.zig
 libc.zig
 objcopy.zig
 reduce.zig
 std-docs.zig
 test_runner.zig
lib/zig/compiler/aro/
 aro.zig
 backend.zig
lib/zig/compiler/aro/aro/
 Attribute.zig
 Builtins.zig
 CodeGen.zig
 Compilation.zig
 Diagnostics.zig
 Driver.zig
 Hideset.zig
 InitList.zig
 LangOpts.zig
 Parser.zig
 Pragma.zig
 Preprocessor.zig
 Source.zig
 StringInterner.zig
 SymbolStack.zig
 Tokenizer.zig
 Toolchain.zig
 Tree.zig
 Type.zig
 Value.zig
 char_info.zig
 features.zig
 record_layout.zig
 target.zig
 text_literal.zig
 tracy.zig
lib/zig/compiler/aro/aro/Attribute/names.zig
lib/zig/compiler/aro/aro/Builtins/
 Builtin.zig
 Properties.zig
 TypeDescription.zig
lib/zig/compiler/aro/aro/Diagnostics/messages.zig
lib/zig/compiler/aro/aro/Driver/
 Distro.zig
 Filesystem.zig
 GCCDetector.zig
 GCCVersion.zig
 Multilib.zig
lib/zig/compiler/aro/aro/Tree/number_affixes.zig
lib/zig/compiler/aro/aro/char_info/identifier_tables.zig
lib/zig/compiler/aro/aro/pragmas/
 gcc.zig
 message.zig
 once.zig
 pack.zig
lib/zig/compiler/aro/aro/toolchains/Linux.zig
lib/zig/compiler/aro/backend/
 Interner.zig
 Ir.zig
 Object.zig
lib/zig/compiler/aro/backend/Ir/x86/Renderer.zig
lib/zig/compiler/aro/backend/Object/Elf.zig
lib/zig/compiler/aro_translate_c/ast.zig
lib/zig/compiler/reduce/Walk.zig
lib/zig/compiler/resinator/
 ani.zig
 ast.zig
 bmp.zig
 cli.zig
 code_pages.zig
 comments.zig
 compile.zig
 errors.zig
 ico.zig
 lang.zig
 lex.zig
 literals.zig
 main.zig
 parse.zig
 preprocess.zig
 rc.zig
 res.zig
 source_mapping.zig
 utils.zig
 windows1252.zig
lib/zig/docs/
 index.html
 main.js
lib/zig/docs/wasm/
 Decl.zig
 Walk.zig
 main.zig
 markdown.zig
lib/zig/docs/wasm/markdown/
 Document.zig
 Parser.zig
 renderer.zig
lib/zig/init/
 build.zig
 build.zig.zon
lib/zig/init/src/
 main.zig
 root.zig
lib/zig/libunwind/include/
 __libunwind_config.h
 libunwind.h
 unwind.h
 unwind_arm_ehabi.h
 unwind_itanium.h
lib/zig/libunwind/include/mach-o/compact_unwind_encoding.h
lib/zig/libunwind/src/
 AddressSpace.hpp
 CompactUnwinder.hpp
 DwarfInstructions.hpp
 DwarfParser.hpp
 EHHeaderParser.hpp
 FrameHeaderCache.hpp
 RWMutex.hpp
 Registers.hpp
 Unwind-EHABI.cpp
 Unwind-EHABI.h
 Unwind-seh.cpp
 Unwind-sjlj.c
 Unwind-wasm.c
 UnwindCursor.hpp
 UnwindLevel1-gcc-ext.c
 UnwindLevel1.c
 UnwindRegistersRestore.S
 UnwindRegistersSave.S
 Unwind_AIXExtras.cpp
 assembly.h
 cet_unwind.h
 config.h
 dwarf2.h
 gcc_personality_v0.c
 libunwind.cpp
 libunwind_ext.h


[FILE:2240:patches/patch-build.zig]
--- build.zig.orig	2024-06-06 19:05:11 UTC
+++ build.zig
@@ -707,6 +707,7 @@ fn addCmakeCfgOptionsToExe(
                     else => |e| return e,
                 };
                 exe.linkSystemLibrary("unwind");
+                exe.addRPath(.{ .cwd_relative = "@GCC_LIBDIR@" });
             },
             .ios, .macos, .watchos, .tvos, .visionos => {
                 exe.linkLibCpp();
@@ -714,25 +715,14 @@ fn addCmakeCfgOptionsToExe(
             .windows => {
                 if (exe.rootModuleTarget().abi != .msvc) exe.linkLibCpp();
             },
-            .freebsd => {
-                if (static) {
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libc++.{s}", .{lib_suffix}), null, need_cpp_includes);
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libgcc_eh.{s}", .{lib_suffix}), null, need_cpp_includes);
-                } else {
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libc++.{s}", .{lib_suffix}), null, need_cpp_includes);
-                }
-            },
             .openbsd => {
                 try addCxxKnownPath(b, cfg, exe, b.fmt("libc++.{s}", .{lib_suffix}), null, need_cpp_includes);
                 try addCxxKnownPath(b, cfg, exe, b.fmt("libc++abi.{s}", .{lib_suffix}), null, need_cpp_includes);
             },
-            .netbsd, .dragonfly => {
-                if (static) {
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libstdc++.{s}", .{lib_suffix}), null, need_cpp_includes);
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libgcc_eh.{s}", .{lib_suffix}), null, need_cpp_includes);
-                } else {
-                    try addCxxKnownPath(b, cfg, exe, b.fmt("libstdc++.{s}", .{lib_suffix}), null, need_cpp_includes);
-                }
+            .netbsd, .dragonfly, .freebsd => {
+                exe.addObjectFile(.{ .cwd_relative = "@GCC_LIBDIR@/libstdc++.a" });
+                exe.addObjectFile(.{ .cwd_relative = "@GCC_TARGET_LIBDIR@/libgcc_eh.a" });
+                exe.addRPath(.{ .cwd_relative = "@LOCALBASE@/lib" });
             },
             .solaris, .illumos => {
                 try addCxxKnownPath(b, cfg, exe, b.fmt("libstdc++.{s}", .{lib_suffix}), null, need_cpp_includes);


[FILE:1463:patches/patch-lib_std_c_dragonfly.zig]
--- lib/std/c/dragonfly.zig.orig	2024-06-06 19:05:11 UTC
+++ lib/std/c/dragonfly.zig
@@ -563,6 +563,33 @@ pub const NOTE_FFCTRLMASK = 3221225472;
 pub const NOTE_FFCOPY = 3221225472;
 pub const NOTE_PCTRLMASK = 4026531840;
 
+pub const T = struct {
+    pub const IOCEXCL = 0x2000740d;
+    pub const IOCNXCL = 0x2000740e;
+    pub const IOCSCTTY = 0x20007461;
+    pub const IOCGPGRP = 0x40047477;
+    pub const IOCSPGRP = 0x80047476;
+    pub const IOCOUTQ = 0x40047473;
+    pub const IOCSTI = 0x80017472;
+    pub const IOCGWINSZ = 0x40087468;
+    pub const IOCSWINSZ = 0x80087467;
+    pub const IOCMGET = 0x4004746a;
+    pub const IOCMBIS = 0x8004746c;
+    pub const IOCMBIC = 0x8004746b;
+    pub const IOCMSET = 0x8004746d;
+    pub const FIONREAD = 0x4004667f;
+    pub const IOCCONS = 0x80047462;
+    pub const IOCPKT = 0x80047470;
+    pub const FIONBIO = 0x8004667e;
+    pub const IOCNOTTY = 0x20007471;
+    pub const IOCSETD = 0x8004741b;
+    pub const IOCGETD = 0x4004741a;
+    pub const IOCSBRK = 0x2000747b;
+    pub const IOCCBRK = 0x2000747a;
+    pub const IOCGSID = 0x40047463;
+    pub const IOCSIG = 0x2004745f;
+};
+
 pub const TCSA = enum(c_uint) {
     NOW,
     DRAIN,
@@ -570,6 +597,13 @@ pub const TCSA = enum(c_uint) {
     _,
 };
 
+pub const winsize = extern struct {
+    ws_row: u16,
+    ws_col: u16,
+    ws_xpixel: u16,
+    ws_ypixel: u16,
+};
+
 pub const stack_t = extern struct {
     sp: [*]u8,
     size: isize,


[FILE:424:patches/patch-lib_tsan_sanitizer__common_sanitizer__freebsd.h]
--- lib/tsan/sanitizer_common/sanitizer_freebsd.h.orig	2024-06-06 19:05:11 UTC
+++ lib/tsan/sanitizer_common/sanitizer_freebsd.h
@@ -19,8 +19,7 @@
 // x86-64 FreeBSD 9.2 and older define 'ucontext_t' incorrectly in
 // 32-bit mode.
 #if SANITIZER_FREEBSD && (SANITIZER_WORDSIZE == 32)
-#include <osreldate.h>
-#if __FreeBSD_version <= 902001  // v9.2
+#if 0
 #include <link.h>
 #include <sys/param.h>
 #include <ucontext.h>


[FILE:444:patches/patch-lib_tsan_sanitizer__common_sanitizer__linux.cpp]
--- lib/tsan/sanitizer_common/sanitizer_linux.cpp.orig	2024-06-06 19:05:11 UTC
+++ lib/tsan/sanitizer_common/sanitizer_linux.cpp
@@ -148,7 +148,7 @@ const int FUTEX_WAKE_PRIVATE = FUTEX_WAK
 # define SANITIZER_USE_GETRANDOM 0
 #endif  // SANITIZER_LINUX && defined(__NR_getrandom)
 
-#if SANITIZER_FREEBSD && __FreeBSD_version >= 1200000
+#if SANITIZER_FREEBSD
 #  define SANITIZER_USE_GETENTROPY 1
 #else
 #  define SANITIZER_USE_GETENTROPY 0


[FILE:467:patches/patch-lib_tsan_sanitizer__common_sanitizer__linux__libcdep.cpp]
--- lib/tsan/sanitizer_common/sanitizer_linux_libcdep.cpp.orig	2024-06-06 19:05:11 UTC
+++ lib/tsan/sanitizer_common/sanitizer_linux_libcdep.cpp
@@ -628,7 +628,7 @@ void GetThreadStackAndTls(bool main, upt
 
 #if !SANITIZER_FREEBSD
 typedef ElfW(Phdr) Elf_Phdr;
-#elif SANITIZER_WORDSIZE == 32 && __FreeBSD_version <= 902001  // v9.2
+#elif 0
 #define Elf_Phdr XElf32_Phdr
 #define dl_phdr_info xdl_phdr_info
 #define dl_iterate_phdr(c, b) xdl_iterate_phdr((c), (b))


[FILE:461:patches/patch-lib_tsan_sanitizer__common_sanitizer__procmaps__bsd.cpp]
--- lib/tsan/sanitizer_common/sanitizer_procmaps_bsd.cpp.orig	2024-06-06 19:05:11 UTC
+++ lib/tsan/sanitizer_common/sanitizer_procmaps_bsd.cpp
@@ -29,13 +29,6 @@
 
 #include <limits.h>
 
-// Fix 'kinfo_vmentry' definition on FreeBSD prior v9.2 in 32-bit mode.
-#if SANITIZER_FREEBSD && (SANITIZER_WORDSIZE == 32)
-#include <osreldate.h>
-#if __FreeBSD_version <= 902001 // v9.2
-#define kinfo_vmentry xkinfo_vmentry
-#endif
-#endif
 
 namespace __sanitizer {
 


[FILE:2376:patches/patch-src_link_Elf.zig]
--- src/link/Elf.zig.orig	2024-06-06 19:05:11 UTC
+++ src/link/Elf.zig
@@ -5281,19 +5281,22 @@ const CsuObjects = struct {
             const crt_dir_path = lci.crt_dir orelse return error.LibCInstallationMissingCRTDir;
             switch (target.os.tag) {
                 .dragonfly => {
+                    const gcc_dir_path = "@GCC_TARGET_LIBDIR@";
                     if (result.crt0) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
                     if (result.crti) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
                     if (result.crtn) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
 
-                    var gccv: []const u8 = undefined;
-                    if (target.os.version_range.semver.isAtLeast(.{ .major = 5, .minor = 4, .patch = 0 }) orelse true) {
-                        gccv = "gcc80";
-                    } else {
-                        gccv = "gcc54";
-                    }
+                    if (result.crtbegin) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ gcc_dir_path, obj.* });
+                    if (result.crtend) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ gcc_dir_path, obj.* });
+                },
+                .freebsd => {
+                    const gcc_dir_path = "@GCC_TARGET_LIBDIR@";
+                    if (result.crt0) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
+                    if (result.crti) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
+                    if (result.crtn) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, obj.* });
 
-                    if (result.crtbegin) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, gccv, obj.* });
-                    if (result.crtend) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ crt_dir_path, gccv, obj.* });
+                    if (result.crtbegin) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ gcc_dir_path, obj.* });
+                    if (result.crtend) |*obj| obj.* = try fs.path.join(arena, &[_][]const u8{ gcc_dir_path, obj.* });
                 },
                 .haiku => {
                     const gcc_dir_path = lci.gcc_dir orelse return error.LibCInstallationMissingCRTDir;


[FILE:474:patches/patch-src_target.zig]
--- src/target.zig.orig	2024-06-06 19:05:11 UTC
+++ src/target.zig
@@ -291,7 +291,7 @@ pub fn libcFullLinkFlags(target: std.Tar
     // The linking order of these is significant and should match the order other
     // c compilers such as gcc or clang use.
     return switch (target.os.tag) {
-        .netbsd, .openbsd => &[_][]const u8{
+        .netbsd, .openbsd, .freebsd, .dragonfly => &[_][]const u8{
             "-lm",
             "-lpthread",
             "-lc",

