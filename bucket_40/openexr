# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		openexr
VERSION=		2.5.3
KEYWORDS=		graphics devel
VARIANTS=		standard
SDESC[standard]=	High dynamic-range (HDR) image file format
HOMEPAGE=		https://www.openexr.com/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/AcademySoftwareFoundation:openexr:v2.5.3
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	complete
			primary
			docs
			examples

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	ilmbase:single:standard

USES=			cpe cmake pkgconfig c++:primary zlib

DISTNAME=		openexr-2.5.3/OpenEXR

LICENSE=		BSD3CLAUSE:primary
LICENSE_FILE=		BSD3CLAUSE:{{WRKDIR}}/LICENSE
LICENSE_AWK=		BSD3CLAUSE:"^$$"
LICENSE_SOURCE=		BSD3CLAUSE:{{WRKSRC}}/IlmImf/ImfLut.h
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		graphics/openexr

SOVERSION=		25.0.2
PLIST_SUB=		MAJOR=2_5

CPPFLAGS=		-I.
			-I../IlmImf
LDFLAGS=		-lpthread
CMAKE_ARGS=		-DCMAKE_INSTALL_PREFIX={{PREFIX}}
			--target
			install

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/*-2_5.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/exr*

[FILE:1302:descriptions/desc.primary]
OpenEXR is a high dynamic-range (HDR) image file format developed by
Industrial Light & Magic for use in computer imaging applications.

OpenEXR is used by ILM on all motion pictures currently in production.
The first movies to employ OpenEXR were Harry Potter and the Sorcerers
Stone, Men in Black II, Gangs of New York, and Signs. Since then, OpenEXR
has become ILM's main image file format.

OpenEXR's features include:
* Higher dynamic range and color precision than existing 8- and 10-bit
  image file formats.
* Support for 16-bit floating-point, 32-bit floating-point, and 32-bit
  integer pixels. The 16-bit floating-point format, called "half", is
  compatible with the half data type in NVIDIA's Cg graphics language and
  is supported natively on their new GeForce FX and Quadro FX 3D graphics
  solutions.
* Multiple lossless image compression algorithms. Some of the included
  codecs can achieve 2:1 lossless compression ratios on images with film
  grain.
* Extensibility. New compression codecs and image types can easily be added
  by extending the C++ classes included in the OpenEXR software
  distribution. New image attributes (strings, vectors, integers, etc.) can
  be added to OpenEXR image headers without affecting backward compatibility
  with existing OpenEXR applications.


[FILE:125:distinfo]
6a6525e6e3907715c6a55887716d7e42d09b54d2457323fcee35a0376960bebf     27534825 AcademySoftwareFoundation-openexr-2.5.3.tar.gz


[FILE:2562:manifests/plist.primary]
bin/
 exr2aces
 exrenvmap
 exrheader
 exrmakepreview
 exrmaketiled
 exrmultipart
 exrmultiview
 exrstdattr
include/OpenEXR/
 ImfAcesFile.h
 ImfArray.h
 ImfAttribute.h
 ImfB44Compressor.h
 ImfBoxAttribute.h
 ImfCRgbaFile.h
 ImfChannelList.h
 ImfChannelListAttribute.h
 ImfChromaticities.h
 ImfChromaticitiesAttribute.h
 ImfCompositeDeepScanLine.h
 ImfCompression.h
 ImfCompressionAttribute.h
 ImfConvert.h
 ImfDeepCompositing.h
 ImfDeepFrameBuffer.h
 ImfDeepImage.h
 ImfDeepImageChannel.h
 ImfDeepImageIO.h
 ImfDeepImageLevel.h
 ImfDeepImageState.h
 ImfDeepImageStateAttribute.h
 ImfDeepScanLineInputFile.h
 ImfDeepScanLineInputPart.h
 ImfDeepScanLineOutputFile.h
 ImfDeepScanLineOutputPart.h
 ImfDeepTiledInputFile.h
 ImfDeepTiledInputPart.h
 ImfDeepTiledOutputFile.h
 ImfDeepTiledOutputPart.h
 ImfDoubleAttribute.h
 ImfEnvmap.h
 ImfEnvmapAttribute.h
 ImfExport.h
 ImfFlatImage.h
 ImfFlatImageChannel.h
 ImfFlatImageIO.h
 ImfFlatImageLevel.h
 ImfFloatAttribute.h
 ImfFloatVectorAttribute.h
 ImfForward.h
 ImfFrameBuffer.h
 ImfFramesPerSecond.h
 ImfGenericInputFile.h
 ImfGenericOutputFile.h
 ImfHeader.h
 ImfHuf.h
 ImfIO.h
 ImfImage.h
 ImfImageChannel.h
 ImfImageChannelRenaming.h
 ImfImageDataWindow.h
 ImfImageIO.h
 ImfImageLevel.h
 ImfInputFile.h
 ImfInputPart.h
 ImfInt64.h
 ImfIntAttribute.h
 ImfKeyCode.h
 ImfKeyCodeAttribute.h
 ImfLineOrder.h
 ImfLineOrderAttribute.h
 ImfLut.h
 ImfMatrixAttribute.h
 ImfMultiPartInputFile.h
 ImfMultiPartOutputFile.h
 ImfMultiView.h
 ImfName.h
 ImfNamespace.h
 ImfOpaqueAttribute.h
 ImfOutputFile.h
 ImfOutputPart.h
 ImfPartHelper.h
 ImfPartType.h
 ImfPixelType.h
 ImfPreviewImage.h
 ImfPreviewImageAttribute.h
 ImfRational.h
 ImfRationalAttribute.h
 ImfRgba.h
 ImfRgbaFile.h
 ImfRgbaYca.h
 ImfSampleCountChannel.h
 ImfStandardAttributes.h
 ImfStdIO.h
 ImfStringAttribute.h
 ImfStringVectorAttribute.h
 ImfTestFile.h
 ImfThreading.h
 ImfTileDescription.h
 ImfTileDescriptionAttribute.h
 ImfTiledInputFile.h
 ImfTiledInputPart.h
 ImfTiledOutputFile.h
 ImfTiledOutputPart.h
 ImfTiledRgbaFile.h
 ImfTimeCode.h
 ImfTimeCodeAttribute.h
 ImfUtilExport.h
 ImfVecAttribute.h
 ImfVersion.h
 ImfWav.h
 ImfXdr.h
 OpenEXRConfig.h
lib/
 libIlmImf-%%MAJOR%%.so
 libIlmImf-%%MAJOR%%.so.%%SOMAJOR%%
 libIlmImf-%%MAJOR%%.so.%%SOVERSION%%
 libIlmImf.so
 libIlmImfUtil-%%MAJOR%%.so
 libIlmImfUtil-%%MAJOR%%.so.%%SOMAJOR%%
 libIlmImfUtil-%%MAJOR%%.so.%%SOVERSION%%
 libIlmImfUtil.so
lib/cmake/OpenEXR/
 OpenEXRConfig.cmake
 OpenEXRConfigVersion.cmake
 OpenEXRTargets-%%CMAKE_BUILD_TYPE%%.cmake
 OpenEXRTargets.cmake
lib/pkgconfig/OpenEXR.pc


[FILE:174:manifests/plist.docs]
share/doc/openexr/
 InterpretingDeepPixels.pdf
 MultiViewOpenEXR.pdf
 OpenEXRFileLayout.pdf
 ReadingAndWritingImageFiles.pdf
 TechnicalIntroduction.pdf
 TheoryDeepPixels.pdf


[FILE:416:manifests/plist.examples]
share/examples/openexr/
 drawImage.cpp
 drawImage.h
 generalInterfaceExamples.cpp
 generalInterfaceExamples.h
 generalInterfaceTiledExamples.cpp
 generalInterfaceTiledExamples.h
 lowLevelIoExamples.cpp
 lowLevelIoExamples.h
 main.cpp
 namespaceAlias.h
 previewImageExamples.cpp
 previewImageExamples.h
 rgbaInterfaceExamples.cpp
 rgbaInterfaceExamples.h
 rgbaInterfaceTiledExamples.cpp
 rgbaInterfaceTiledExamples.h


[FILE:421:patches/patch-IlmImfExamples_CMakeLists.txt]
--- IlmImfExamples/CMakeLists.txt.orig	2020-06-14 01:26:22 UTC
+++ IlmImfExamples/CMakeLists.txt
@@ -33,7 +33,7 @@ install(
     previewImageExamples.h
     namespaceAlias.h
   DESTINATION
-    ${CMAKE_INSTALL_DOCDIR}/examples
+    ${CMAKE_INSTALL_PREFIX}/share/examples/openexr
   )
 if(WIN32 AND (BUILD_SHARED_LIBS OR OPENEXR_BUILD_BOTH_STATIC_SHARED))
   target_compile_definitions(IlmImfExamples PRIVATE OPENEXR_DLL)


[FILE:365:patches/patch-IlmImfTest_bswap__32.h]
--- IlmImfTest/bswap_32.h.orig	2020-06-14 01:26:22 UTC
+++ IlmImfTest/bswap_32.h
@@ -12,7 +12,7 @@
 #elif defined(__sun) || defined(sun)
 #include <sys/byteorder.h>
 #define bswap_32(x) BSWAP_32(x)
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/endian.h>
 #define bswap_32(x) bswap32(x)
 #elif defined(__OpenBSD__)


[FILE:536:patches/patch-IlmImf_ImfSystemSpecific.h]
--- IlmImf/ImfSystemSpecific.h.orig	2020-06-14 01:26:22 UTC
+++ IlmImf/ImfSystemSpecific.h
@@ -59,6 +59,8 @@ EXRAllocAligned (size_t size, size_t ali
     return _aligned_malloc (size, alignment);
 #elif defined(__INTEL_COMPILER) || defined(__ICL) || defined(__ICC) || defined(__ECC)
     return _mm_malloc (size, alignment);
+#elif defined(__sun)
+    return memalign(alignment, size);
 #elif defined(_POSIX_C_SOURCE) && (_POSIX_C_SOURCE >= 200112L)
     void* ptr = 0;
     // With fortify_source on, just doing the (void) cast trick


[FILE:557:patches/patch-config_OpenEXRSetup.cmake]
--- config/OpenEXRSetup.cmake.orig	2020-06-14 01:26:22 UTC
+++ config/OpenEXRSetup.cmake
@@ -42,10 +42,6 @@ set(OPENEXR_OUTPUT_SUBDIR OpenEXR CACHE
 # but is pretty harmless to set globally
 set(CMAKE_INCLUDE_CURRENT_DIR ON)
 
-# Suffix for debug configuration libraries
-# (if you should choose to install those)
-set(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "Suffix for debug builds")
-
 # Usual cmake option to build shared libraries or not
 option(BUILD_SHARED_LIBS "Build shared library" ON)
 # This allows a "double library" setup, where we compile both

