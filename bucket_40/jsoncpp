# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		jsoncpp
VERSION=		1.8.0
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	JSON reader and writer library for C++
HOMEPAGE=		https://github.com/open-source-parsers/jsoncpp
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/open-source-parsers:jsoncpp:1.8.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

USES=			dos2unix scons

LICENSE=		MIT:single
LICENSE_SCHEME=		solo
LICENSE_FILE=		MIT:{{WRKSRC}}/LICENSE

MAKE_ARGS=		platform=linux-gcc

do-install:
	@${MKDIR} ${STAGEDIR}${PREFIX}/include/jsoncpp
	(cd ${WRKSRC}/include/ && \
		${COPYTREE_SHARE} json/ ${STAGEDIR}${PREFIX}/include/jsoncpp/)
	${INSTALL_DATA} ${WRKSRC}/libs/linux-gcc-Raven/libjsoncpp.a \
		${STAGEDIR}${PREFIX}/lib
	${INSTALL_LIB} ${WRKSRC}/libs/linux-gcc-Raven/libjsoncpp.so.1.8.0 \
		${STAGEDIR}${PREFIX}/lib
	${LN} -s libjsoncpp.so.1.8.0 \
		${STAGEDIR}${PREFIX}/lib/libjsoncpp.so.1
	${LN} -s libjsoncpp.so.1.8.0 \
		${STAGEDIR}${PREFIX}/lib/libjsoncpp.so
	${SED}  -e 's|@CMAKE_INSTALL_PREFIX@|${PREFIX}|g' \
		-e 's|@CMAKE_INSTALL_LIBDIR@|lib|g' \
		-e 's|@CMAKE_INSTALL_INCLUDEDIR@|include/jsoncpp|g' \
		-e 's|@JSONCPP_VERSION@|1.8.0|g' \
		${WRKSRC}/pkg-config/jsoncpp.pc.in \
		> ${STAGEDIR}${PREFIX}/lib/pkgconfig/jsoncpp.pc

[FILE:412:descriptions/desc.single]
JSON is a lightweight data-interchange format. It can represent numbers,
strings, ordered sequences of values, and collections of name/value pairs.

JsonCpp is a C++ library that allows manipulating JSON values, including
serialization and deserialization to and from strings. It can also
preserve existing comment in unserialization/serialization steps, making
it a convenient format to store user input files.


[FILE:119:distinfo]
5deb2462cbf0c0121c9d6c9823ec72fe71417e34242e3509bc7c003d526465bc       206659 open-source-parsers-jsoncpp-1.8.0.tar.gz


[FILE:240:manifests/plist.single]
include/jsoncpp/json/
 allocator.h
 assertions.h
 autolink.h
 config.h
 features.h
 forwards.h
 json.h
 reader.h
 value.h
 version.h
 writer.h
lib/
 libjsoncpp.a
 libjsoncpp.so
 libjsoncpp.so.1
 libjsoncpp.so.1.8.0
lib/pkgconfig/jsoncpp.pc


[FILE:2785:patches/patch-SConstruct]
--- SConstruct.orig	2016-05-09 23:15:49 UTC
+++ SConstruct
@@ -26,7 +26,7 @@ try:
     if platform == 'linux-gcc':
         CXX = 'g++' # not quite right, but env is not yet available.
         import commands
-        version = commands.getoutput('%s -dumpversion' %CXX)
+        version = 'Raven'
         platform = 'linux-gcc-%s' %version
         print "Using platform '%s'" %platform
         LD_LIBRARY_PATH = os.environ.get('LD_LIBRARY_PATH', '')
@@ -65,7 +65,7 @@ def make_environ_vars():
 	return vars
 	
 
-env = Environment( ENV = make_environ_vars(),
+env = Environment( ENV = os.environ,
                    toolpath = ['scons-tools'],
                    tools=[] ) #, tools=['default'] )
 
@@ -121,6 +121,7 @@ elif platform.startswith('linux-gcc'):
     env.Tool( 'default' )
     env.Append( LIBS = ['pthread'], CCFLAGS = os.environ.get("CXXFLAGS", "-Wall"), LINKFLAGS=os.environ.get("LDFLAGS", "") )
     env['SHARED_LIB_ENABLED'] = True
+    env['CXX'] = os.environ['CXX']
 else:
     print "UNSUPPORTED PLATFORM."
     env.Exit(1)
@@ -147,6 +148,11 @@ env['JSONCPP_VERSION'] = JSONCPP_VERSION
 env['BUILD_DIR'] = env.Dir(build_dir)
 env['ROOTBUILD_DIR'] = env.Dir(rootbuild_dir)
 env['DIST_DIR'] = DIST_DIR
+
+# Set SHLIBVERSION for env.InstallVersionedLib(). We use the version number
+# without the "-rcXX" part.
+env['SHLIBVERSION'] = JSONCPP_VERSION.partition('-')[0]
+
 if 'TarGz' in env['BUILDERS']:
 	class SrcDistAdder:
 		def __init__( self, env ):
@@ -164,7 +170,7 @@ env['SRCDIST_ADD'] = SrcDistAdder( env )
 env['SRCDIST_TARGET'] = os.path.join( DIST_DIR, 'jsoncpp-src-%s.tar.gz' % env['JSONCPP_VERSION'] )
                       
 env_testing = env.Clone( )
-env_testing.Append( LIBS = ['json_${LIB_NAME_SUFFIX}'] )
+env_testing.Append( LIBS = ['jsoncpp'] )
 
 def buildJSONExample( env, target_sources, target_name ):
     env = env.Clone()
@@ -187,14 +193,14 @@ def buildUnitTests( env, target_sources,
     env.AlwaysBuild( check_alias_target )
 
 def buildLibrary( env, target_sources, target_name ):
-    static_lib = env.StaticLibrary( target=target_name + '_${LIB_NAME_SUFFIX}',
+    static_lib = env.StaticLibrary( target=target_name,
                                     source=target_sources )
     global lib_dir
     env.Install( lib_dir, static_lib )
     if env['SHARED_LIB_ENABLED']:
-        shared_lib = env.SharedLibrary( target=target_name + '_${LIB_NAME_SUFFIX}',
+        shared_lib = env.SharedLibrary( target=target_name,
                                         source=target_sources )
-        env.Install( lib_dir, shared_lib )
+        env.InstallVersionedLib( lib_dir, shared_lib )
     env['SRCDIST_ADD']( source=[target_sources] )
 
 Export( 'env env_testing buildJSONExample buildLibrary buildJSONTests buildUnitTests' )


[FILE:396:patches/patch-src_lib__json_json__reader.cpp]
--- src/lib_json/json_reader.cpp.orig	2016-10-30 21:28:16 UTC
+++ src/lib_json/json_reader.cpp
@@ -3,6 +3,11 @@
 // recognized in your jurisdiction.
 // See file LICENSE for detail or copy at http://jsoncpp.sourceforge.net/LICENSE
 
+// fix for lang/gcc5+
+#if __GNUC__ == 5
+#include <cstdio>
+#endif
+
 #if !defined(JSON_IS_AMALGAMATION)
 #include <json/assertions.h>
 #include <json/reader.h>


[FILE:390:patches/patch-src_lib__json_json__writer.cpp]
--- src/lib_json/json_writer.cpp.orig	2016-10-30 21:27:18 UTC
+++ src/lib_json/json_writer.cpp
@@ -3,6 +3,11 @@
 // recognized in your jurisdiction.
 // See file LICENSE for detail or copy at http://jsoncpp.sourceforge.net/LICENSE
 
+// fix for lang/gcc5+
+#if __GNUC__ == 5
+#include <cstdio>
+#endif
+
 #if !defined(JSON_IS_AMALGAMATION)
 #include <json/writer.h>
 #include "json_tool.h"


[FILE:217:patches/patch-src_lib__json_sconscript]
--- src/lib_json/sconscript.orig	2016-05-09 23:15:49 UTC
+++ src/lib_json/sconscript
@@ -5,4 +5,4 @@ buildLibrary( env, Split( """
     json_value.cpp 
     json_writer.cpp
      """ ),
-    'json' )
+    'jsoncpp' )

