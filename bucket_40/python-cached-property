# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-cached-property
VERSION=		1.5.1
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Decorator for caching properties in classes (PY37)
SDESC[py38]=		Decorator for caching properties in classes (PY38)
HOMEPAGE=		https://github.com/pydanny/cached-property
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/c/cached-property
DISTFILE[1]=		cached-property-1.5.1.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		cached-property-1.5.1

GENERATED=		yes

[PY37].USES_ON=				python:py37

[PY38].USES_ON=				python:py38

[FILE:2695:descriptions/desc.single]
===============================
cached-property
===============================

    :alt: Code style: black        

A decorator for caching properties in classes.

Why?
-----

* Makes caching of time or computational expensive properties quick and
easy.
* Because I got tired of copy/pasting this code from non-web project to
non-web project.
* I needed something really simple that worked in Python 2 and 3.

How to use it
--------------

Let's define a class with an expensive property. Every time you stay there
the
price goes up by $50!

History
-------

1.5.1 (2018-08-05)
++++++++++++++++++

* Added formal support for Python 3.7
* Removed formal support for Python 3.3

1.4.3  (2018-06-14)
+++++++++++++++++++

* Catch SyntaxError from asyncio import on older versions of Python, thanks
to @asottile

1.4.2 (2018-04-08)
++++++++++++++++++

* Really fixed tests, thanks to @pydanny

1.4.1 (2018-04-08)
++++++++++++++++++

* Added conftest.py to manifest so tests work properly off the tarball,
thanks to @dotlambda
* Ensured new asyncio tests didn't break Python 2.7 builds on Debian,
thanks to @pydanny
* Code formatting via black, thanks to @pydanny and @ambv

1.4.0 (2018-02-25)
++++++++++++++++++

* Added asyncio support, thanks to @vbraun
* Remove Python 2.6 support, whose end of life was 5 years ago, thanks to
@pydanny

1.3.1 (2017-09-21)
++++++++++++++++++

* Validate for Python 3.6

1.3.0 (2015-11-24)
++++++++++++++++++

* Drop some non-ASCII characters from HISTORY.rst, thanks to @AdamWill
* Added official support for Python 3.5, thanks to @pydanny and @audreyr
* Removed confusingly placed lock from example, thanks to @ionelmc
* Corrected invalidation cache documentation, thanks to @proofit404
* Updated to latest Travis-CI environment, thanks to @audreyr

1.2.0 (2015-04-28)
++++++++++++++++++

* Overall code and test refactoring, thanks to @gsakkis
* Allow the del statement for resetting cached properties with ttl instead
of del obj._cache[attr], thanks to @gsakkis.
* Uncovered a bug in PyPy,
https://bitbucket.org/pypy/pypy/issue/2033/attributeerror-object-attribute-is-read,
thanks to @gsakkis
* Fixed threaded_cached_property_with_ttl to actually be thread-safe,
thanks to @gsakkis

1.1.0 (2015-04-04)
++++++++++++++++++

* Regression: As the cache was not always clearing, we've broken out the
time to expire feature to its own set of specific tools, thanks to @pydanny
* Fixed typo in README, thanks to @zoidbergwill

1.0.0 (2015-02-13)
++++++++++++++++++

* Added timed to expire feature to cached_property decorator.
* **Backwards incompatiblity**: Changed ``del monopoly.boardwalk to del
monopoly['boardwalk']`` in order to support the new TTL feature.



[FILE:107:distinfo]
9217a59f14a5682da7c4b8829deadbfc194ac22e9908ccf7c8820234e80a1504        12791 cached-property-1.5.1.tar.gz

