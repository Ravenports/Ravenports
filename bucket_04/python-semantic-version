# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-semantic-version
VERSION=		2.10.0
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Library implementing the 'SemVer' scheme (3.10)
SDESC[v11]=		Library implementing the 'SemVer' scheme (3.11)
HOMEPAGE=		https://github.com/rbarrois/python-semanticversion
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/6a/23/8146aad7d88f4fcb3a6218f41a60f6c2d4e3a72de72da1825dc7c8f7877c
DISTFILE[1]=		semantic_version-2.10.0-py2.py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		semantic_version-2.10.0.dist-info

GENERATED=		yes

[PY310].USES_ON=			python:py310,wheel

[PY311].USES_ON=			python:v11,wheel

[FILE:2341:descriptions/desc.single]
Introduction
============

This small python library provides a few tools to handle `SemVer`_ in
Python.
It follows strictly the 2.0.0 version of the SemVer scheme.

    :alt: Latest Version

    :alt: Supported Python versions

    :alt: Wheel status

    :alt: License

Links
-----

- Package on `PyPI`_: https://pypi.org/project/semantic-version/
- Doc on [ReadTheDocs]: https://python-semanticversion.readthedocs.io/
- Source on [GitHub]: http://github.com/rbarrois/python-semanticversion/
- Build on Github Actions:
https://github.com/rbarrois/python-semanticversion/actions
- Semantic Version specification: `SemVer`_

Getting started
===============

Install the package from `PyPI`_, using pip:

.. code-block:: sh

    pip install semantic-version

Or from GitHub:

.. code-block:: sh

    $ git clone git://github.com/rbarrois/python-semanticversion.git

Import it in your code:

.. code-block:: python

    import semantic_version

This module provides classes to handle semantic versions:

- Version represents a version number (``0.1.1-alpha+build.2012-05-15``)
- BaseSpec-derived classes represent requirement specifications
(``>=0.1.1,<0.3.0``):

  - SimpleSpec describes a natural description syntax
  - NpmSpec is used for NPM-style range descriptions.

Versions
--------

Defining a Version is quite simple:

.. code-block:: pycon

    >>> import semantic_version
    >>> v = semantic_version.Version('0.1.1')
    >>> v.major
    0
    >>> v.minor
    1
    >>> v.patch
    1
    >>> v.prerelease
    []
    >>> v.build
    []
    >>> list(v)
    [0, 1, 1, [], []]

If the provided version string is invalid, a ValueError will be raised:

.. code-block:: pycon

    >>> semantic_version.Version('0.1')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File
"/Users/rbarrois/dev/semantic_version/src/semantic_version/base.py", line
64, in __init__
        major, minor, patch, prerelease, build = self.parse(version_string,
partial)
      File
"/Users/rbarrois/dev/semantic_version/src/semantic_version/base.py", line
86, in parse
        raise ValueError('Invalid version string: %r' % version_string)
    ValueError: Invalid version string: '0.1'

One may also create a Version with named components:

.. code-block:: pycon

    >>> semantic_version.Version(major=0, minor=1, patch=2)


[FILE:123:distinfo]
de78a3b8e0feda74cabc54aab2da702113e33ac9d9eb9d2389bcf1f58b7d9177        15552 semantic_version-2.10.0-py2.py3-none-any.whl

