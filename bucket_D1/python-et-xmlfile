# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-et-xmlfile
VERSION=		2.0.0
KEYWORDS=		python
VARIANTS=		v12 v13
SDESC[v12]=		Low memory library for large XML files (3.12)
SDESC[v13]=		Low memory library for large XML files (3.13)
HOMEPAGE=		https://foss.heptapod.net/openpyxl/et_xmlfile
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/c1/8b/5fe2cc11fee489817272089c4203e679c63b570a5aaeb18d852ae3cbba6a
DISTFILE[1]=		et_xmlfile-2.0.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[v12]=		single
SPKGS[v13]=		single

OPTIONS_AVAILABLE=	PY312 PY313
OPTIONS_STANDARD=	none
VOPTS[v12]=		PY312=ON PY313=OFF
VOPTS[v13]=		PY312=OFF PY313=ON

DISTNAME=		et_xmlfile-2.0.0.dist-info

GENERATED=		yes

[PY312].USES_ON=			python:v12,wheel

[PY313].USES_ON=			python:v13,wheel

[FILE:1304:descriptions/desc.single]
    :alt: coverage status

et_xmfile
=========

XML can use lots of memory, and et_xmlfile is a low memory library for
creating large XML files
And, although the standard library already includes an incremental parser,
`iterparse` it has no equivalent when writing XML. Once an element has been
added to the tree, it is written to
the file or stream and the memory is then cleared.

This module is based upon the [xmlfile module from lxml] with the aim of
allowing code to be developed that will work with both libraries.
It was developed initially for the openpyxl project, but is now a
standalone module.

The code was written by Elias Rabel as part of the `Python DÃ¼sseldorf
<http://pyddf.de>`_ openpyxl sprint in September 2014.

Proper support for incremental writing was provided by Daniel Hillier in
2024

Note on performance
-------------------

The code was not developed with performance in mind, but turned out to be
faster than the existing SAX-based implementation but is generally slower
than lxml's xmlfile.
There is one area where an optimisation for lxml may negatively affect the
performance of et_xmfile and that is when using the `.element()` method on
the xmlfile context manager. It is, therefore, recommended simply to create
Elements write these directly, as in the sample code.


[FILE:112:distinfo]
7a91720bc756843502c3b7504c77b8fe44217c85c537d85037f0f536151b2caa        18059 et_xmlfile-2.0.0-py3-none-any.whl

