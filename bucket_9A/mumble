# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		mumble
VERSION=		1.5.735
KEYWORDS=		audio
VARIANTS=		std
SDESC[std]=		Low latency, high quality voice chat software
HOMEPAGE=		https://www.mumble.info/
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/mumble-voip/mumble/releases/download/v1.5.735/
DISTFILE[1]=		mumble-1.5.735.tar.gz:main
DF_INDEX=		1
SPKGS[std]=		set
			client
			server
			man

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		avahi:dev:std
			avahi:libdnsdev:std
			boost-libraries:dev:std
			libglvnd:dev:std
			libsndfile:dev:std
			ms-gsl:single:std
			nlohmann-json:single:std
			poco:dev:std
			protobuf:dev:std
			qt5-qtbase:dev:std
			qt5-qtsvg:dev:std
			qt5-qttools:dev:std
			speexdsp:dev:std
			utf8proc:dev:std
BUILDRUN_DEPENDS=	avahi:primary:std
			avahi:libdns:std
			boost-libraries:primary:std
			libglvnd:primary:std
			libsndfile:primary:std
			poco:primary:std
			protobuf:primary:std
			qt5-qtbase:primary:std
			qt5-qtsvg:primary:std
			qt5-qttools:primary:std
			speexdsp:primary:std
			utf8proc:primary:std

USES=			cmake desktop-utils:client execinfo expat gmake
			pcre2 pkgconfig python:build shebangfix ssl zlib cpe
XORG_COMPONENTS=	x11 xext xi

LICENSE=		BSD3CLAUSE:set
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		audio/mumble
SHEBANG_FILES=		auxiliary_files/run_scripts/mumble-overlay.in

CONFIGURE_ENV=		MUMBLE_PYTHON={{PYTHON_CMD}}

INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		1.5.0

CMAKE_ARGS=		-DCMAKE_PREFIX_PATH={{PREFIX}}/lib/qt5/cmake
			-Doverlay-xcompile=off
			-Dice=off
			-Dbundled-gsl=off
			-Dbundled-json=off
			-Dbundled-speex=off
			-Dbundle-qt-translations=off
			-Dcrash-report=off
			-Dg15=off
			-Dserver=on
			-Dtracy=off
			-Dupdate=off
			-Dclient=on
			-Doverlay=on
			-Dplugins=on
			-Dtranslations=on
			-Dxinput2=on
			-Doss=on

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/mumble
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/mumble/plugins/liblink.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/mumble/libmumbleoverlay.so.1.5.0

[FILE:568:descriptions/desc.client]
Mumble is a free, open source, low latency, high quality voice chat 
application. This subpackage contains the mumble client application.

Features:

* Low-latency - great for talking and gaming
* Recognize friends across servers
* Wizards to guide you through setup, like configuring your microphone
* Stay private and secure
  - always encrypted communication
  - Public/private-key authentication by default
* For gamers:
  - In-game Overlay - see who is talking, FPS and the current time
  - Positional audio - hear the players from where they are located in-game


[FILE:748:descriptions/desc.server]
Mumble is a free, open source, low latency, high quality voice chat 
application. This subpackage contains the mumble server application (aka. 
murmur).

Features:

*  Libre software - no licensing hassle, caveats and limitations
*  Open Source - open in security and technology, and open to extendibility
*  Extensive user permission system (ACL)
*  Extendible through Ice protocols
   - Web interfaces - free choice of several community free software 
projects
   - Channel viewers - even without direct Ice access, if the hoster 
provides the CVP, easily set up your channel viewer of choice
   - Authenticators - to allow users to authenticate against an existing 
user database
   - Custom chat commands and context (right click) menu entries


[FILE:100:distinfo]
db8990079f556a877218d471bcf2c24eb5e4520b652f3c20793d0aadedaae6ae     26010842 mumble-1.5.735.tar.gz


[FILE:308:manifests/plist.client]
bin/
 mumble
 mumble-overlay
lib/mumble/
 libmumbleoverlay.so
 libmumbleoverlay.so.%%SOVERSION%%
lib/mumble/plugins/liblink.so
share/applications/info.mumble.Mumble.desktop
share/icons/hicolor/256x256/apps/mumble.png
share/icons/hicolor/scalable/apps/mumble.svg
share/metainfo/info.mumble.Mumble.appdata.xml


[FILE:47:manifests/plist.server]
bin/mumble-server
etc/mumble/mumble-server.ini


[FILE:61:manifests/plist.man]
share/man/man1/
 mumble-overlay.1
 mumble.1
 mumble-server.1


[FILE:1330:patches/patch-src_ProcessResolver.cpp]
--- src/ProcessResolver.cpp.orig	2024-12-06 16:07:53 UTC
+++ src/ProcessResolver.cpp
@@ -5,6 +5,11 @@
 
 #include "ProcessResolver.h"
 #include <cstring>
+#if defined(__DragonFly__)
+#include <sys/types.h>
+#include <sys/sysctl.h>
+#include <sys/user.h>
+#endif
 
 ProcessResolver::ProcessResolver(bool resolveImmediately) : m_processMap() {
 	if (resolveImmediately) {
@@ -199,7 +204,18 @@ void ProcessResolver::doResolve() {
 
 void ProcessResolver::doResolve() {
 	int n_procs;
+#  if defined(__DragonFly__)
+	size_t len;
+	struct kinfo_proc *procs_info;
+	sysctlbyname ("kern.proc.all", NULL, &len, NULL, 0);
+        procs_info = (struct kinfo_proc *) malloc (len);
+	if (sysctlbyname ("kern.proc.all", procs_info, &len, NULL, 0)) {
+		free(procs_info);
+		return;
+	}
+#  else
 	struct kinfo_proc *procs_info = kinfo_getallproc(&n_procs);
+#  endif
 	if (!procs_info) {
 #	ifndef QT_NO_DEBUG
 		qCritical("ProcessResolver: kinfo_getallproc() failed\n");
@@ -208,7 +224,11 @@ void ProcessResolver::doResolve() {
 	}
 
 	for (int i = 0; i < n_procs; ++i) {
+#  if defined(__DragonFly__)
+		addEntry(static_cast< uint64_t >(procs_info[i].kp_pid), procs_info[i].kp_comm, m_processMap);
+#  else
 		addEntry(static_cast< uint64_t >(procs_info[i].ki_pid), procs_info[i].ki_comm, m_processMap);
+#  endif
 	}
 
 	free(procs_info);

