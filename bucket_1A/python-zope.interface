# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-zope.interface
VERSION=		5.2.0
KEYWORDS=		python
VARIANTS=		py38 py39
SDESC[py38]=		Interfaces for Python (PY38)
SDESC[py39]=		Interfaces for Python (PY39)
HOMEPAGE=		https://github.com/zopefoundation/zope.interface
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/z/zope.interface
DISTFILE[1]=		zope.interface-5.2.0.tar.gz:main
DF_INDEX=		1
SPKGS[py38]=		single
SPKGS[py39]=		single

OPTIONS_AVAILABLE=	PY38 PY39
OPTIONS_STANDARD=	none
VOPTS[py38]=		PY38=ON PY39=OFF
VOPTS[py39]=		PY38=OFF PY39=ON

DISTNAME=		zope.interface-5.2.0

GENERATED=		yes

[PY38].BUILDRUN_DEPENDS_ON=		python-setuptools:single:py38
[PY38].USES_ON=				python:py38,sutools

[PY39].BUILDRUN_DEPENDS_ON=		python-setuptools:single:py39
[PY39].USES_ON=				python:py39,sutools

[FILE:3611:descriptions/desc.single]
====================
 ``zope.interface``
====================

    :alt: Latest Version

        :alt: Supported Python versions

        :alt: Documentation Status

This package is intended to be independently reusable in any Python
project. It is maintained by the [Zope Toolkit project
].

This package provides an implementation of "object interfaces" for Python.
Interfaces are a mechanism for labeling objects as conforming to a given
API or contract. So, this package can be considered as implementation of
the `Design By Contract`_ methodology support in Python.

.. _Design By Contract: http://en.wikipedia.org/wiki/Design_by_contract

For detailed documentation, please see
https://zopeinterface.readthedocs.io/en/latest/

=========
 Changes
=========

5.2.0 (2020-11-05)
==================

- Add documentation section Persistency and Equality
  (`#218 <https://github.com/zopefoundation/zope.interface/issues/218>`_).

- Create arm64 wheels.

- Add support for Python 3.9.

5.1.2 (2020-10-01)
==================

- Make sure to call each invariant only once when validating invariants.
  Previously, invariants could be called multiple times because when an
  invariant is defined in an interface, it's found by in all interfaces
  inheriting from that interface.  See [pull request 215
 ].

5.1.1 (2020-09-30)
==================

- Fix the method definitions of ``IAdapterRegistry.subscribe``,
  subscriptions and subscribers. Previously, they all were
  defined to accept a name keyword argument, but subscribers have
  no names and the implementation of that interface did not accept
  that argument. See [issue 208
 ].

- Fix a potential reference leak in the C optimizations. Previously,
  applications that dynamically created unique Specification
  objects (e.g., used ``@implementer`` on dynamic classes) could
  notice a growth of small objects over time leading to increased
  garbage collection times. See [issue 216
 ].

  .. caution::

     This leak could prevent interfaces used as the bases of
     other interfaces from being garbage collected. Those interfaces
     will now be collected.

     One way in which this would manifest was that ``weakref.ref``
     objects (and things built upon them, like
     ``Weak[Key|Value]Dictionary``) would continue to have access to
     the original object even if there were no other visible
     references to Python and the original object *should* have been
     collected. This could be especially problematic for the
     WeakKeyDictionary when combined with dynamic or local
     (created in the scope of a function) interfaces, since interfaces
     are hashed based just on their name and module name. See the
     linked issue for an example of a resulting KeyError.

     Note that such potential errors are not new, they are just once
     again a possibility.

5.1.0 (2020-04-08)
==================

- Make ``@implementer(*iface) and classImplements(cls, *iface)``
  ignore redundant interfaces. If the class already implements an
  interface through inheritance, it is no longer redeclared
  specifically for *cls*. This solves many instances of inconsistent
  resolution orders, while still allowing the interface to be declared
  for readability and maintenance purposes. See [issue 199
 ].

- Remove all bare ``except:`` statements. Previously, when accessing
  special attributes such as __provides__, __providedBy__,
  __class__ and __conform__, this package wrapped such access
  in a bare ``except:`` statement, meaning that many errors could pass
  silently; typically this would result in a fallback path being taken


[FILE:106:distinfo]
8251f06a77985a2729a8bdbefbae79ee78567dddc3acbd499b87e705ca59fe24       227058 zope.interface-5.2.0.tar.gz

