# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libva
VERSION=		2.4.1
REVISION=		1
KEYWORDS=		multimedia
VARIANTS=		standard
SDESC[standard]=	VAAPI wrapper and dummy driver
HOMEPAGE=		https://github.com/01org/libva
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/01org:libva:2.4.1
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	libdrm:single:standard

USES=			autoreconf gmake libtool pkgconfig
XORG_COMPONENTS=	xorgproto pciaccess xext xfixes

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		multimedia/libva

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--program-prefix=va
			--disable-glx
			--disable-egl
			--disable-wayland

INSTALL_TARGET=		install-strip
INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		2.401.0

CFLAGS=			-DHAVE_LINUX_INTEGER_TYPES
LDFLAGS=		-lpthread

post-patch:
	${REINPLACE_CMD} '/^export VA_HEADER_/d' ${WRKSRC}/doc/Makefile.am
	${REINPLACE_CMD} -e '/stack-protector/d' ${WRKSRC}/va/Makefile.am
	# V4L2 is unused since http://github.com/intel/libva/commit/70074679333c
	${REINPLACE_CMD} '/videodev2\.h/d' ${WRKSRC}/va/va_backend.h

[FILE:274:descriptions/desc.single]
The main motivation for VAAPI (Video Acceleration API) is to enable
hardware accelerated video decode/encode at various entry-points (VLD,
IDCT, Motion Compensation etc.) for the prevailing coding standards
today (MPEG-2, MPEG-4 ASP/H.263, MPEG-4 AVC/H.264, and VC-1/VMW3).


[FILE:103:distinfo]
68ca8d071dcb84ac82e3c6d7f02a55937d9f690fcb215853f4aa1de8d459812f       223649 01org-libva-2.4.1.tar.gz


[FILE:617:manifests/plist.single]
include/va/
 va.h
 va_backend.h
 va_backend_vpp.h
 va_compat.h
 va_dec_hevc.h
 va_dec_jpeg.h
 va_dec_vp8.h
 va_dec_vp9.h
 va_dri2.h
 va_dricommon.h
 va_drm.h
 va_drmcommon.h
 va_egl.h
 va_enc_h264.h
 va_enc_hevc.h
 va_enc_jpeg.h
 va_enc_mpeg2.h
 va_enc_vp8.h
 va_enc_vp9.h
 va_fei.h
 va_fei_h264.h
 va_fei_hevc.h
 va_str.h
 va_tpi.h
 va_version.h
 va_vpp.h
 va_x11.h
lib/
 libva-drm.so
 libva-drm.so.%%SOMAJOR%%
 libva-drm.so.%%SOVERSION%%
 libva-x11.so
 libva-x11.so.%%SOMAJOR%%
 libva-x11.so.%%SOVERSION%%
 libva.so
 libva.so.%%SOMAJOR%%
 libva.so.%%SOVERSION%%
lib/pkgconfig/
 libva-drm.pc
 libva-x11.pc
 libva.pc


[FILE:1045:patches/patch-configure.ac]
--- configure.ac.orig	2019-04-07 17:44:47 UTC
+++ configure.ac
@@ -157,7 +157,7 @@ AC_ARG_ENABLE([va-messaging],
 AC_ARG_WITH(drivers-path,
     [AC_HELP_STRING([--with-drivers-path=[[path]]],
                     [drivers path])],
-    [], [with_drivers_path="$libdir/dri"])
+    [], [with_drivers_path="$libdir/va"])
 
 LIBVA_DRIVERS_PATH="$with_drivers_path"
 AC_SUBST(LIBVA_DRIVERS_PATH)
@@ -210,19 +210,7 @@ if test "$ac_cv_have_gnuc_visibility_att
 fi
 
 # Check for -fstack-protector
-ssp_cc=yes
-if test "X$CC-cc" != "X"; then
-    AC_MSG_CHECKING([whether ${CC-cc} accepts -fstack-protector])
-    ssp_old_cflags="$CFLAGS"
-    CFLAGS="$CFLAGS -fstack-protector"
-    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[alloca(100);]])], [], [ssp_cc=no])
-    AC_MSG_RESULT([$ssp_cc])
-    if test "X$ssp_cc" = "Xno"; then
-        CFLAGS="$ssp_old_cflags"
-    else
-        AC_DEFINE([ENABLE_SSP_CC], 1, [Define if SSP C support is enabled.])
-    fi
-fi
+ssp_cc=no
 AM_CONDITIONAL(USE_SSP, test "$ssp_cc" = "yes")
 
 # Check for DRM (mandatory)


[FILE:521:patches/patch-va__glx__va_glx_private.h]
--- va/glx/va_glx_private.h.orig	2019-04-07 17:44:47 UTC
+++ va/glx/va_glx_private.h
@@ -38,7 +38,7 @@ typedef void (*PFNGLXBINDTEXIMAGEEXTPROC
 typedef void (*PFNGLXRELEASETEXIMAGEEXTPROC)(Display *, GLXDrawable, int);
 #endif
 
-#if GLX_GLXEXT_VERSION < 27
+#if GLX_GLXEXT_VERSION < 21
 /* XXX: this is not exactly that version but this is the only means to
    make sure we have the correct <GL/glx.h> with those signatures */
 typedef GLXPixmap (*PFNGLXCREATEPIXMAPPROC)(Display *, GLXFBConfig, Pixmap, const int *);


[FILE:382:patches/patch-va_va.c]
--- va/va.c.orig	2019-04-07 17:44:47 UTC
+++ va/va.c
@@ -393,7 +393,7 @@ static VAStatus va_openDriver(VADisplay
         }
 
         va_infoMessage(dpy, "Trying to open %s\n", driver_path);
-#ifndef ANDROID
+#ifdef RTLD_NODELETE
         handle = dlopen( driver_path, RTLD_NOW | RTLD_GLOBAL | RTLD_NODELETE );
 #else
         handle = dlopen( driver_path, RTLD_NOW| RTLD_GLOBAL);


[FILE:2389:patches/patch-va_va__trace.c]
--- va/va_trace.c.orig	2019-04-07 17:44:47 UTC
+++ va/va_trace.c
@@ -50,6 +50,9 @@
 #include <sys/stat.h>
 #include <sys/syscall.h>
 #include <pthread.h>
+#ifdef __FreeBSD__
+#include <pthread_np.h>
+#endif
 #include <unistd.h>
 #include <time.h>
 #include <errno.h>
@@ -290,7 +293,15 @@ static void add_trace_config_info(
 {
     struct trace_config_info *pconfig_info;
     int idx = 0;
+#ifdef __FreeBSD__
+    pid_t thd_id = pthread_getthreadid_np();
+#elif defined __DragonFly__
+    pid_t thd_id = syscall(SYS_lwp_gettid);
+#elif defined __sun__
+    pid_t thd_id = pthread_self();
+#else
     pid_t thd_id = syscall(__NR_gettid);
+#endif
 
     LOCK_RESOURCE(pva_trace);
 
@@ -495,6 +506,18 @@ static int get_valid_ctx_idx(
     return idx;
 }
 
+#ifdef __sun__
+static size_t
+strnlen(const char *s, size_t maxlen)
+{
+	size_t len;
+	for (len = 0; len < maxlen; len++, s++) {
+		if (!*s) break;
+	}
+	return (len);
+}
+#endif
+
 static void FILE_NAME_SUFFIX(
     char *env_value,
     int max_size,
@@ -668,7 +691,15 @@ static struct trace_log_file *start_trac
 {
     struct trace_log_files_manager *plog_files_mgr = NULL;
     struct trace_log_file *plog_file = NULL;
+#ifdef __FreeBSD__
+    pid_t thd_id = pthread_getthreadid_np();
+#elif defined __DragonFly__
+    pid_t thd_id = syscall(SYS_lwp_gettid);
+#elif defined __sun__
+    pid_t thd_id = pthread_self();
+#else
     pid_t thd_id = syscall(__NR_gettid);
+#endif
     int i = 0;
 
     LOCK_RESOURCE(pva_trace);
@@ -707,7 +738,15 @@ static void refresh_log_file(
     struct trace_context *ptra_ctx)
 {
     struct trace_log_file *plog_file = NULL;
+#ifdef __FreeBSD__
+    pid_t thd_id = pthread_getthreadid_np();
+#elif defined __DragonFly__
+    pid_t thd_id = syscall(SYS_lwp_gettid);
+#elif defined __sun__
+    pid_t thd_id = pthread_self();
+#else
     pid_t thd_id = syscall(__NR_gettid);
+#endif
     int i = 0;
 
     plog_file = ptra_ctx->plog_file;
@@ -1238,7 +1277,15 @@ static void internal_TraceUpdateContext
 {
     struct trace_context *trace_ctx = NULL;
     int i = 0, delete = 1;
+#ifdef __FreeBSD__
+    pid_t thd_id = pthread_getthreadid_np();
+#elif defined __DragonFly__
+    pid_t thd_id = syscall(SYS_lwp_gettid);
+#elif defined __sun__
+    pid_t thd_id = pthread_self();
+#else
     pid_t thd_id = syscall(__NR_gettid);
+#endif
 
     if(tra_ctx_idx >= MAX_TRACE_CTX_NUM)
         return;


[FILE:392:sunos/patch-va_Makefile.am]
The version script has two problems:
1) switch is --version-script, not -version-script
2) The symbol map is missing tons of symbols (found by sun linker)

--- va/Makefile.am.orig	2019-04-07 17:44:47 UTC
+++ va/Makefile.am
@@ -72,7 +72,7 @@ libva_source_h_priv = \
 
 libva_ldflags = \
 	$(LDADD) -no-undefined	\
-	-Wl,-version-script,${srcdir}/libva.syms \
+	\
 	$(NULL)
 
 libva_cflags = \

