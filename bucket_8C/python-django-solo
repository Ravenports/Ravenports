# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-django-solo
VERSION=		2.1.0
KEYWORDS=		python
VARIANTS=		py310 v11
SDESC[py310]=		Djanjo manipulator of database singletons (3.10)
SDESC[v11]=		Djanjo manipulator of database singletons (3.11)
HOMEPAGE=		https://github.com/lazybird/django-solo/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPIWHL/80/1a/ef5c1347a9a76d3217ebfb2a26c07ad9ae2a2517beaa95f88f2e74649817
DISTFILE[1]=		django_solo-2.1.0-py3-none-any.whl:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[v11]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[v11]=		PY310=OFF PY311=ON

DISTNAME=		django_solo-2.1.0.dist-info

GENERATED=		yes

[PY310].RUN_DEPENDS_ON=			python-Django:single:py310
[PY310].USES_ON=			python:py310,wheel

[PY311].RUN_DEPENDS_ON=			python-Django:single:v11
[PY311].USES_ON=			python:v11,wheel

[FILE:2873:descriptions/desc.single]

Django Solo
===========

[image]

    +---------------------------+
    |                           |
    |                           |
    |             \             | Django Solo helps working with
singletons:
    |             /\            | database tables that only have one row.
    |           >=)'>           | Singletons are useful for things like
global
    |             \/            | settings that you want to edit from the
admin
    |             /             | instead of having them in Django
settings.py.
    |                           | 
    |                           | 
    +---------------------------+

Features
--------

Solo helps you enforce instantiating only one instance of a model in
django.

* You define the model that will hold your singleton object.
* django-solo gives helper parent class for your model and the admin
classes.
* You get an admin interface that's aware you only have one object.
* You can retrieve the object from templates.
* By enabling caching, the database is not queried intensively.

Use Cases
--------

Django Solo is also great for use with singleton objects that have a one to
many relationship. Like the use case below where you have a 'Home Slider"
that has many "Slides".

* Global or default settings
* An image slider that has many slides
* A page section that has sub-sections
* A team bio with many team members

There are many cases where it makes sense for the parent in a one to many
relationship to be limited to a single instance.

Usage Example

```python
# models.py

from django.db import models
from solo.models import SingletonModel

class SiteConfiguration(SingletonModel):
    site_name = models.CharField(max_length=255, default='Site Name')
    maintenance_mode = models.BooleanField(default=False)

    def __str__(self):
        return "Site Configuration"

    class Meta:
        verbose_name = "Site Configuration"
`

`python
# admin.py

from django.contrib import admin
from solo.admin import SingletonModelAdmin
from config.models import SiteConfiguration

admin.site.register(SiteConfiguration, SingletonModelAdmin)
`

`python
# There is only one item in the table, you can get it this way:
from .models import SiteConfiguration
config = SiteConfiguration.objects.get()

# get_solo will create the item if it does not already exist
config = SiteConfiguration.get_solo()
```

In your model, note how you did not have to provide a `verbose_name_plural`
field -
That's because Django Solo uses the `verbose_name` instead.

If you're changing an existing model (which already has some objects stored
in the database) to a singleton model, you can explicitly provide the id of
the row in the database for django-solo to use. This can be done by setting
`singleton_instance_id` property on the model:

```python
class SiteConfiguration(SingletonModel):
    singleton_instance_id = 24


[FILE:113:distinfo]
7a43282e6f9b5fa37fc8c682963e1c0cea3681daa518a9b5283d79a5b76c1045        15632 django_solo-2.1.0-py3-none-any.whl

