# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-django-solo
VERSION=		1.1.3
KEYWORDS=		python
VARIANTS=		py35 py36
SDESC[py35]=		Djanjo manipulator of database singletons (PY 35)
SDESC[py36]=		Djanjo manipulator of database singletons (PY 36)
HOMEPAGE=		https://github.com/lazybird/django-solo/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/d/django-solo
DISTFILE[1]=		django-solo-1.1.3.tar.gz:main
DF_INDEX=		1
SPKGS[py35]=		single
SPKGS[py36]=		single

OPTIONS_AVAILABLE=	PY35 PY36
OPTIONS_STANDARD=	none
VOPTS[py35]=		PY35=ON PY36=OFF
VOPTS[py36]=		PY35=OFF PY36=ON

DISTNAME=		django-solo-1.1.3

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"Creative Commons Attribution 3.0 Unported"
LICENSE_SCHEME=		solo
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE

GENERATED=		yes

[PY35].USES_ON=				python:py35

[PY36].USES_ON=				python:py36

[FILE:3172:descriptions/desc.single]

Django Solo
===========


    +---------------------------+
    |                           |
    |                           |
    |             \             | Django Solo helps working with
singletons:
    |             /\            | database tables that only have one row.
    |           >=)'>           | Singletons are useful for things like
global
    |             \/            | settings that you want to edit from the
admin
    |             /             | instead of having them in Django
settings.py.
    |                           |
    |                           |
    +---------------------------+


Features
--------

Solo helps you enforce instantiating only one instance of a model in
django.

* You define the model that will hold your singleton object.
* django-solo gives helper parent class for your model and the admin
classes.
* You get an admin interface that's aware you only have one object.
* You can retrieve the object from templates.
* By enabling caching, the database is not queried intensively.

Use Cases
--------

Django Solo is also great for use with singleton objects that have a one
to many relationship. Like the use case below where you have a 'Home
Slider" that has many "Slides".

* Global or default settings
* An image slider that has many slides
* A page section that has sub-sections
* A team bio with many team members

There are many cases where it makes sense for the parent in a one to many
relationship to be limited to a single instance.

Usage Example

```python
# models.py

from django.db import models
from solo.models import SingletonModel

class SiteConfiguration(SingletonModel):
    site_name = models.CharField(max_length=255, default='Site Name')
    maintenance_mode = models.BooleanField(default=False)

    def __unicode__(self):
        return u"Site Configuration"

    class Meta:
        verbose_name = "Site Configuration"
```

```python
# admin.py

from django.contrib import admin
from solo.admin import SingletonModelAdmin
from config.models import SiteConfiguration

admin.site.register(SiteConfiguration, SingletonModelAdmin)

# There is only one item in the table, you can get it this way:
from .models import SiteConfiguration
config = SiteConfiguration.objects.get()

# get_solo will create the item if it does not already exist
config = SiteConfiguration.get_solo()
```


In your model, note how you did not have to provide a
`verbose_name_plural` field -
That's because Django Solo uses the `verbose_name` instead.

If you're changing an existing model (which already has some objects
stored in the database) to a singleton model, you can explicitly provide
the id of the row in the database for django-solo to use. This can be done
by setting `singleton_instance_id` property on the model:

```python
class SiteConfiguration(SingletonModel):
    singleton_instance_id = 24
    # (...)
```

Installation
------------

This application requires Django >= 1.6.

* Install the package using `pip install django-solo`
* Add ``solo`` or ``solo.apps.SoloAppConfig`` to your ``INSTALLED_APPS``
setting.

This is how you run tests:

    ./manage.py test solo --settings=solo.tests.settings


[FILE:103:distinfo]
b1206b9a9411b19a4354f7d7d245909a9ea7e9cd566b594363b5adce7dc13e5d         8865 django-solo-1.1.3.tar.gz

