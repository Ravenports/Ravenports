# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		bsd-which
VERSION=		20171207
KEYWORDS=		devel raven
VARIANTS=		standard
SDESC[standard]=	BSD variant of unix which program
HOMEPAGE=		https://www.freebsd.org/cgi/man.cgi?which(1)
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	none
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

B_DEPS[sunos]=		libbsd4sol:single:standard
B_DEPS[linux]=		libbsd:single:standard

LICENSE=		BSD3CLAUSE:single
LICENSE_SCHEME=		solo
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/LICENSE

do-extract:
	${MKDIR} ${WRKSRC}
	cp ${FILESDIR}/* ${WRKSRC}/

[FILE:542:descriptions/desc.single]
which -- locate a program file in the user's path

The which utility takes a list of command names and searches the path for
each executable file that would be run had these commands actually been
invoked.

The following options are available:

  -a  List all instances of executables found (instead of just the
      first one of each).

  -s  No output, just return 0 if all of the executables are found, or
      1 if some were not found.

Some shells may provide a builtin which command which is similar or
identical to this BSD utility.


[FILE:36:manifests/plist.single]
bin/which
share/man/man1/which.1.gz


[FILE:1468:files/LICENSE]
/**
 * Copyright (c) 2000 Dan Papasian.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


[FILE:467:files/Makefile]
PROG=		which
SRCS=		${PROG}.c
PREFIX?=	/usr/local
CFLAGS+=	-I${PREFIX}/include -I. -I${PREFIX}/include/bsd
STATIC_LIBS=	

.if "${OPSYS}" == "SunOS" || "${OPSYS}" == "Linux"
STATIC_LIBS+=	${PREFIX}/lib/libbsd.a
.endif


all: ${PROG}

clean:
	rm -f ${OBJS} ${PROG}

${PROG}: ${SRCS}
	${CC} -o ${PROG} ${.ALLSRC} ${CFLAGS} ${STATIC_LIBS}

install:
	${BSD_INSTALL_PROGRAM} ${PROG} ${DESTDIR}${PREFIX}/bin/
	${BSD_INSTALL_MAN} ${PROG}.1 ${DESTDIR}${PREFIX}/share/man/man1


[FILE:2958:files/which.1]
.\" Manpage Copyright (c) 1995, Jordan Hubbard <jkh@FreeBSD.org>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by the FreeBSD Project
.\"      its contributors.
.\" 4. Neither the name of the FreeBSD Project nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE CONTRIBUTOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE CONTRIBUTOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $FreeBSD: src/usr.bin/which/which.1,v 1.16.2.4 2002/06/21 15:30:13 charnier Exp $
.Dd January 26, 1995
.Dt WHICH 1
.Os
.Sh NAME
.Nm which
.Nd "locate a program file in the user's path"
.Sh SYNOPSIS
.Nm
.Op Fl as
.Ar command ...
.Sh DESCRIPTION
The
.Nm
utility
takes a list of command names and searches the path for each executable
file that would be run had these commands actually been invoked.
.Pp
The following options are available:
.Bl -tag -width indent
.It Fl a
List all instances of executables found (instead of just the first one
of each).
.It Fl s
No output, just return 0 if any of the executables are found, or 1 if
none are found.
.El
.Pp
Some shells may provide a builtin
.Nm
command which is similar or identical to this utility.
Consult the
.Xr builtin 1
manual page.
.Sh SEE ALSO
.Xr builtin 1 ,
.Xr csh 1 ,
.Xr find 1 ,
.Xr locate 1 ,
.Xr whereis 1
.Sh HISTORY
The
.Nm
command first appeared in
.Fx 2.1 .
.Sh AUTHORS
.An -nosplit
The
.Nm
utility was originally written in Perl and was contributed by
.An Wolfram Schneider Aq Mt wosch@FreeBSD.org .
The current version of
.Nm
was rewritten in C by
.An Daniel Papasian Aq Mt dpapasia@andrew.cmu.edu .


[FILE:2729:files/which.c]
#include <sys/stat.h>

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#ifndef PATH_MAX
#define PATH_MAX 1024
#endif

static void     usage(void);
static int      print_matches(char *, char *);

int    silent;
int    allpaths;

int
main(int argc, char **argv)
{
       char *p, *path;
       ssize_t pathlen;
       int opt, status;

       status = EXIT_SUCCESS;

       while ((opt = getopt(argc, argv, "as")) != -1) {
               switch (opt) {
               case 'a':
                       allpaths = 1;
                       break;
               case 's':
                       silent = 1;
                       break;
               default:
                       usage();
                       break;
               }
       }

       argv += optind;
       argc -= optind;

       if (argc == 0)
	     usage();
	
       if ((p = getenv("PATH")) == NULL)
               exit(EXIT_FAILURE);
       pathlen = strlen(p) + 1;
       path = malloc(pathlen);
       if (path == NULL)
               err(EXIT_FAILURE, "malloc failed");

       while (argc > 0) {
               memcpy(path, p, pathlen);

               if (strlen(*argv) >= FILENAME_MAX ||
                   print_matches(path, *argv) == -1)
                       status = EXIT_FAILURE;

               argv++;
               argc--;
       }

       exit(status);
}

static void
usage(void)
{
       fprintf(stderr, "usage: which [-as] program ...\n");
       exit(EXIT_FAILURE);
}

static int
is_there(const char *candidate)
{
       struct stat fin;

       /* XXX work around access(2) false positives for superuser */
       if (access(candidate, X_OK) == 0 &&
           stat(candidate, &fin) == 0 &&
           S_ISREG(fin.st_mode) &&
           (getuid() != 0 ||
           (fin.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) != 0)) {
               if (!silent)
                       printf("%s\n", candidate);
               return (1);
       }
       return (0);
}

static int
print_matches(char *path, char *filename)
{
       char candidate[PATH_MAX];
       const char *d;
       int found;

       if (strchr(filename, '/') != NULL)
               return (is_there(filename) ? 0 : -1);
       found = 0;
       while ((d = strsep(&path, ":")) != NULL) {
               if (*d == '\0')
                       d = ".";
               if (snprintf(candidate, sizeof(candidate), "%s/%s", d,
                   filename) >= (int)sizeof(candidate))
                       continue;
               if (is_there(candidate)) {
                       found = 1;
                       if (!allpaths)
                               break;
               }
       }
       return (found ? 0 : -1);
}


