# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libnsfb
VERSION=		0.2.0
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	NetSurf framebuffer library
HOMEPAGE=		http://www.netsurf-browser.org/projects/libnsfb
CONTACT=		Michael_Reim[kraileth@elderlinux.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		https://download.netsurf-browser.org/libs/releases/
DISTFILE[1]=		libnsfb-0.2.0-src.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILD_DEPENDS=		netsurf-buildsystem:single:standard

USES=			gmake pkgconfig

LICENSE=		MIT:single
LICENSE_FILE=		MIT:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

MAKE_ENV=		COMPONENT_TYPE="lib-shared"

INSTALL_REQ_TOOLCHAIN=	yes
SOVERSION=		0.2.0

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libnsfb.so.0.2.0

[FILE:628:descriptions/desc.single]
LibNSFB is a framebuffer abstraction library, written in C. It is 
currently in development for use with NetSurf and is intended to be 
suitable for use in other projects too.

The overall idea of the library is to provide a generic abstraction to a 
linear section of memory which corresponds to a visible array of pixel 
elements on a display device. Different colour depths are supported and 
the library provides routines for tasks such as drawing onto the 
framebuffer and rectangle copy operations.

LibNSFB currently supports the following as framebuffer providers:
- Linux framebuffer
- X
- SDL
- VNC
- ABLE framebuffer


[FILE:103:distinfo]
c011ba593dd9785415bb23cd2b0aaebd50c3490e2ee138106b83f4acea8f8a11        82322 libnsfb-0.2.0-src.tar.gz


[FILE:184:manifests/plist.single]
include/
 libnsfb.h
 libnsfb_cursor.h
 libnsfb_event.h
 libnsfb_plot.h
 libnsfb_plot_util.h
lib/
 libnsfb.so
 libnsfb.so.%%SOMAJOR%%
 libnsfb.so.%%SOVERSION%%
lib/pkgconfig/libnsfb.pc


[FILE:359:freebsd/patch-src_plot.h]
--- src/plot.h.orig	2019-07-15 17:56:47.685315000 +0200
+++ src/plot.h	2019-07-15 17:58:00.645754000 +0200
@@ -36,7 +36,7 @@
         #define NSFB_BE_BYTE_ORDER
     #endif
 #else
-    #include <endian.h>
+    #include <sys/endian.h>
     #if defined(__BYTE_ORDER__)
         #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
             #define NSFB_BE_BYTE_ORDER

