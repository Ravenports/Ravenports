# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-setuptools-scm
VERSION=		3.5.0
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Package to manage versions by scm tags (PY37)
SDESC[py38]=		Package to manage versions by scm tags (PY38)
HOMEPAGE=		https://github.com/pypa/setuptools_scm/
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/s/setuptools-scm
DISTFILE[1]=		setuptools_scm-3.5.0.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		setuptools_scm-3.5.0

GENERATED=		yes

[PY37].USES_ON=				python:py37

[PY38].USES_ON=				python:py38

[FILE:2927:descriptions/desc.single]
setuptools_scm
===============

``setuptools_scm`` handles managing your Python package versions
in SCM metadata instead of declaring them as the version argument
or in a SCM managed file.

Additionally ``setuptools_scm`` provides setuptools with a list of files
that are managed by the SCM
(i.e. it automatically adds all of the SCM-managed files to the sdist).
Unwanted files must be excluded by discarding them via ``MANIFEST.in``.

``pyproject.toml`` usage
------------------------

The preferred way to configure ``setuptools_scm is to author
settings in a tool.setuptools_scm section of pyproject.toml``.

This feature requires Setuptools 42 or later, released in Nov, 2019.
If your project needs to support build from sdist on older versions
of Setuptools, you will need to also implement the ``setup.py usage``
for those legacy environments.

First, ensure that ``setuptools_scm`` is present during the project's
built step by specifying it as one of the build requirements.

.. code:: toml

    # pyproject.toml
    [build-system]
    requires = ["setuptools>=42", "wheel", "setuptools_scm[toml]>=3.4"]

Note that the toml extra must be supplied.

That will be sufficient to require ``setuptools_scm`` for projects
that support PEP 518 ([pip]_ and
[pep517]_). Many tools,
especially those that invoke ``setup.py`` for any reason, may
continue to rely on ``setup_requires``. For maximum compatibility
with those uses, consider also including a ``setup_requires`` directive
(described below in ``setup.py usage and setup.cfg``).

To enable version inference, add this section to your pyproject.toml:

.. code:: toml

    # pyproject.toml
    [tool.setuptools_scm]

Including this section is comparable to supplying
``use_scm_version=True in setup.py``. Additionally,
include arbitrary keyword arguments in that section
to be supplied to ``get_version()``. For example:

.. code:: toml

    # pyproject.toml

    [tool.setuptools_scm]
    write_to = "pkg/version.py"

``setup.py`` usage
------------------

The following settings are considered legacy behavior and
superseded by the ``pyproject.toml`` usage, but for maximal
compatibility, projects may also supply the configuration in
this older form.

To use ``setuptools_scm just modify your project's setup.py`` file
like this:

* Add ``setuptools_scm to the setup_requires`` parameter.
* Add the ``use_scm_version parameter and set it to True``.

For example:

.. code:: python

    from setuptools import setup
    setup(
        ...,
        use_scm_version=True,
        setup_requires=['setuptools_scm'],
        ...,
    )

Arguments to ``get_version()`` (see below) may be passed as a dictionary to
``use_scm_version``. For example:

.. code:: python

    from setuptools import setup
    setup(
        ...,
        use_scm_version = {
            "root": "..",
            "relative_to": __file__,
            "local_scheme": "node-and-timestamp"
        },


[FILE:106:distinfo]
5bdf21a05792903cafe7ae0c9501182ab52497614fa6b1750d9dbae7b60c1a87        46272 setuptools_scm-3.5.0.tar.gz

