# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-orjson
VERSION=		3.8.4
KEYWORDS=		python
VARIANTS=		py310 py311
SDESC[py310]=		Fast, correct Python JSON library (3.10)
SDESC[py311]=		Fast, correct Python JSON library (3.11)
HOMEPAGE=		https://github.com/ijl/orjson
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/o/orjson
DISTFILE[1]=		orjson-3.8.4.tar.gz:main
DF_INDEX=		1
SPKGS[py310]=		single
SPKGS[py311]=		single

OPTIONS_AVAILABLE=	PY310 PY311
OPTIONS_STANDARD=	none
VOPTS[py310]=		PY310=ON PY311=OFF
VOPTS[py311]=		PY310=OFF PY311=ON

DISTNAME=		orjson-3.8.4

GENERATED=		yes

[PY310].USES_ON=			python:py310,sutools

[PY311].USES_ON=			python:py311,sutools

[FILE:2773:descriptions/desc.single]
# orjson

orjson is a fast, correct JSON library for Python. It
[benchmarks] as the fastest Python
library for JSON and is more correct than the standard json library or
other
third-party libraries. It serializes
[dataclass],
[datetime],
[numpy], and
[UUID] instances natively.

Its features and drawbacks compared to other Python JSON libraries:

* serializes `dataclass` instances 40-50x as fast as other libraries
* serializes `datetime`, `date`, and `time` instances to RFC 3339 format,
e.g., "1970-01-01T00:00:00+00:00"
* serializes `numpy.ndarray` instances 4-12x as fast with 0.3x the memory
usage of other libraries
* pretty prints 10x to 20x as fast as the standard library
* serializes to `bytes` rather than `str`, i.e., is not a drop-in
replacement
* serializes `str` without escaping unicode to ASCII, e.g., "å¥½" rather
than
"\\\u597d"
* serializes `float` 10x as fast and deserializes twice as fast as other
libraries
* serializes subclasses of `str`, `int`, `list`, and `dict` natively,
requiring `default` to specify how to serialize others
* serializes arbitrary types using a `default` hook
* has strict UTF-8 conformance, more correct than the standard library
* has strict JSON conformance in not supporting Nan/Infinity/-Infinity
* has an option for strict JSON conformance on 53-bit integers with default
support for 64-bit
* does not provide `load()` or `dump()` functions for reading from/writing
to
file-like objects

orjson supports CPython 3.7, 3.8, 3.9, 3.10, and 3.11. It distributes
x86_64/amd64,
aarch64/armv8, and arm7 wheels for Linux, amd64 and aarch64 wheels for
macOS,
and amd64 wheels for Windows. orjson does not support PyPy. Releases
follow semantic versioning and serializing a new object type
without an opt-in flag is considered a breaking change.

orjson is licensed under both the Apache 2.0 and MIT licenses. The
repository and issue tracker is
[github.com/ijl/orjson], and patches may be
submitted there. There is a
[CHANGELOG]
available in the repository.

1. [Usage]
    1. [Install]
    2. [Quickstart]
    3. [Migrating]
    4. [Serialize]
        1. [default]
        2. [option]
    5. [Deserialize]
2. [Types]
    1. [dataclass]
    2. [datetime]
    3. [enum]
    4. [float]
    5. [int]
    6. [numpy]
    7. [str]
    8. [uuid]
3. [Testing]
4. [Performance]
    1. [Latency]
    2. [Memory]
    3. [Reproducing]
5. [Questions]
6. [Packaging]
7. [License]

## Usage

### Install

To install a wheel from PyPI:

```sh
pip install --upgrade "pip>=20.3" # manylinux_x_y, universal2 wheel support
pip install --upgrade orjson
```

To build a wheel, see [packaging].

### Quickstart

This is an example of serializing, with options specified, and
deserializing:

```python
>>> import orjson, datetime, numpy
>>> data = {


[FILE:98:distinfo]
9dcb8d788254936de2791d6d2c29bc41a3dc2c9d9cb4f01c06c0e6d424844593       651035 orjson-3.8.4.tar.gz

