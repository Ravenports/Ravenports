# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		python-pybind11
VERSION=		2.5.0
KEYWORDS=		python
VARIANTS=		py38 py37
SDESC[py37]=		Seamless operability with C++11 (PY37)
SDESC[py38]=		Seamless operability with C++11 (PY38)
HOMEPAGE=		https://github.com/pybind/pybind11
CONTACT=		Python_Automaton[python@ironwolf.systems]

DOWNLOAD_GROUPS=	main
SITES[main]=		PYPI/p/pybind11
DISTFILE[1]=		pybind11-2.5.0.tar.gz:main
DF_INDEX=		1
SPKGS[py37]=		single
SPKGS[py38]=		single

OPTIONS_AVAILABLE=	PY38 PY37
OPTIONS_STANDARD=	none
VOPTS[py37]=		PY38=OFF PY37=ON
VOPTS[py38]=		PY38=ON PY37=OFF

DISTNAME=		pybind11-2.5.0

GENERATED=		yes

[PY37].USES_ON=				python:py37

[PY38].USES_ON=				python:py38

[FILE:1465:descriptions/desc.single]
pybind11 is a lightweight header-only library that
exposes C++ types in Python and vice versa, mainly to create Python
bindings of
existing C++ code. Its goals and syntax are similar to the excellent
Boost.Python by David Abrahams: to minimize boilerplate code in traditional
extension modules by inferring type information using compile-time
introspection.

The main issue with Boost.Python-and the reason for creating such a similar
project-is Boost. Boost is an enormously large and complex suite of utility
libraries that works with almost every C++ compiler in existence. This
compatibility has its cost: arcane template tricks and workarounds are
necessary to support the oldest and buggiest of compiler specimens. Now
that
C++11-compatible compilers are widely available, this heavy machinery has
become an excessively large and unnecessary dependency.

Think of this library as a tiny self-contained version of Boost.Python with
everything stripped away that isn't relevant for binding generation.
Without
comments, the core header files only require ~4K lines of code and depend
on
Python (2.7 or 3.x, or PyPy2.7 >= 5.7) and the C++ standard library. This
compact implementation was possible thanks to some of the new C++11
language
features (specifically: tuples, lambda functions and variadic templates).
Since
its creation, this library has grown beyond Boost.Python in many ways,
leading
to dramatically simpler binding code in many common situations.


[FILE:100:distinfo]
ea5a4e7a880112915463826f1acbec5892df36dfe102ecb249229ac514fb54ad       139770 pybind11-2.5.0.tar.gz


[FILE:363:manifests/plist.single]
include/%%PYTHON_VERSION%%%%PYTHON_ABIVER%%/pybind11/
 attr.h
 buffer_info.h
 cast.h
 chrono.h
 common.h
 complex.h
 eigen.h
 embed.h
 eval.h
 functional.h
 iostream.h
 numpy.h
 operators.h
 options.h
 pybind11.h
 pytypes.h
 stl.h
 stl_bind.h
include/%%PYTHON_VERSION%%%%PYTHON_ABIVER%%/pybind11/detail/
 class.h
 common.h
 descr.h
 init.h
 internals.h
 typeid.h

