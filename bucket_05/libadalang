# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libadalang
VERSION=		2019
KEYWORDS=		lang devel
VARIANTS=		standard
SDESC[standard]=	High-performance semantic engine for Ada
HOMEPAGE=		https://github.com/AdaCore/libadalang
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main langkit
SITES[main]=		http://downloads.dragonlace.net/src/
DISTFILE[1]=		libadalang-2019-20190510-19916-src.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	DEBUG
OPTIONS_STANDARD=	DEBUG

BUILD_DEPENDS=		gnatcoll-core:primary:standard
BUILDRUN_DEPENDS=	gnatcoll-bindings:gmp:standard
			gnatcoll-bindings:iconv:standard
			langkit:single:standard

USES=			gprbuild python:build,py27 ada:single

DISTNAME=		libadalang-2019-20190510-19916-src

LICENSE=		GPLv3+:single
LICENSE_TERMS=		single:{{WRKDIR}}/TERMS
LICENSE_FILE=		GPLv3+:{{WRKSRC}}/COPYING3
LICENSE_SCHEME=		solo

MUST_CONFIGURE=		yes

INSTALL_REQ_TOOLCHAIN=	yes

post-configure-linux:
	${REINPLACE_CMD} -e 's|@LIBS@|"-lgnarl", "-Wl,-rpath,${PREFIX}/lib"|' \
		${WRKSRC}/build/src/mains.gpr

post-configure-dragonfly:
	${REINPLACE_CMD} -e 's|@LIBS@|"-lutil", "-lgnarl", "-Wl,-rpath,${PREFIX}/lib"|' \
		${WRKSRC}/build/src/mains.gpr

post-configure-freebsd:
	${REINPLACE_CMD} -e 's|@LIBS@|"-lutil", "-lgnarl", "-Wl,-rpath,${PREFIX}/lib"|' \
		${WRKSRC}/build/src/mains.gpr

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} ada/manage.py\
		--verbosity=info\
		--library-types=static\
		--no-langkit-support\
		${MAKE_ARGS:NDESTDIR=*}\
		build)

do-configure:
	# must build as static since rpaths are either missing,
	# refer to /construction, ignore gpr settings, etc
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} ada/manage.py\
		--verbosity=info\
		--library-types=static\
		--no-langkit-support\
		generate)
	# prepare for mains.gpr modification
	${PATCH} -d ${PATCH_WRKSRC} --backup --forward -E -p0 --batch \
		< ${FILESDIR}/pc-patch-build_src_mains.gpr

post-extract:
	${AWK} '/Libadalang is free software/,/www.gnu.org/' \
		${WRKSRC}/ada/copyright.py > ${WRKDIR}/TERMS

do-install:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} ada/manage.py \
		--library-types=static\
		--no-langkit-support\
		install ${STAGEDIR}${PREFIX})
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/*
	${RM} -r ${STAGEDIR}${PREFIX}/lib/gnat/manifests
	${RM} ${STAGEDIR}${PREFIX}/python/setup.py

[FILE:853:descriptions/desc.single]
Libadalang is a project to build a high performance semantic engine for
the Ada programming language. It is meant to provide a basis to write Ada
tooling, including tools working on potentially changing and incorrect
code, such as IDEs. Its goals encompass, but are not limited to:

* Full support for parsing the Ada 2012 syntax, plus SPARK extensions.
* Error tolerant parsing: the parser must be able to recover from simple
  errors and provide a "best-guess" tree.
* Error tolerant semantic analysis: it must be possible to create a tool
  that works only on syntax, and completely ignores semantic issues.
* Full symbol resolution respecting Ada 2012 - and prior - semantics.
* Bindings to a variety of languages, including Ada, C, Python and Java, so
  that tools can be written from various ecosystems. 
* Incremental processing of source files.


[FILE:120:distinfo]
403b814ef0b3b6a9d169162d35a439e380ea63cc6667326fe50ba4516ec72716      2345942 libadalang-2019-20190510-19916-src.tar.gz


[FILE:2296:manifests/plist.single]
bin/
 gnat_compare
 nameres
 navigate
 parse
include/libadalang.h
include/libadalang/
 gdb.c
 libadalang-analysis.adb
 libadalang-analysis.ads
 libadalang-auto_provider.adb
 libadalang-auto_provider.ads
 libadalang-c.adb
 libadalang-c.ads
 libadalang-common.adb
 libadalang-common.ads
 libadalang-converters.ads
 libadalang-debug.adb
 libadalang-debug.ads
 libadalang-env_hooks.adb
 libadalang-env_hooks.ads
 libadalang-expr_eval.adb
 libadalang-expr_eval.ads
 libadalang-gpr_lock.ads
 libadalang-implementation-c.adb
 libadalang-implementation-c.ads
 libadalang-implementation.adb
 libadalang-implementation.ads
 libadalang-init.adb
 libadalang-init.ads
 libadalang-introspection.adb
 libadalang-introspection.ads
 libadalang-iterators.adb
 libadalang-iterators.ads
 libadalang-lexer.adb
 libadalang-lexer.ads
 libadalang-lexer_implementation.adb
 libadalang-lexer_implementation.ads
 libadalang-lexer_state_machine.adb
 libadalang-lexer_state_machine.ads
 libadalang-parsers.adb
 libadalang-parsers.ads
 libadalang-project_provider.adb
 libadalang-project_provider.ads
 libadalang-rewriting.adb
 libadalang-rewriting.ads
 libadalang-rewriting_implementation.adb
 libadalang-rewriting_implementation.ads
 libadalang-sources.adb
 libadalang-sources.ads
 libadalang-unit_files.adb
 libadalang-unit_files.ads
 libadalang-unparsing.adb
 libadalang-unparsing.ads
 libadalang-unparsing_implementation.adb
 libadalang-unparsing_implementation.ads
 libadalang.ads
lib/gnat/libadalang.gpr
lib/libadalang.static/
 libadalang-analysis.ali
 libadalang-auto_provider.ali
 libadalang-c.ali
 libadalang-common.ali
 libadalang-converters.ali
 libadalang-debug.ali
 libadalang-env_hooks.ali
 libadalang-expr_eval.ali
 libadalang-gpr_lock.ali
 libadalang-implementation-c.ali
 libadalang-implementation.ali
 libadalang-init.ali
 libadalang-introspection.ali
 libadalang-iterators.ali
 libadalang-lexer.ali
 libadalang-lexer_implementation.ali
 libadalang-lexer_state_machine.ali
 libadalang-parsers.ali
 libadalang-project_provider.ali
 libadalang-rewriting.ali
 libadalang-rewriting_implementation.ali
 libadalang-sources.ali
 libadalang-unit_files.ali
 libadalang-unparsing.ali
 libadalang-unparsing_implementation.ali
 libadalang.a
 libadalang.ali
python/libadalang/__init__.py
share/libadalang/ast-types.html


[FILE:337:files/pc-patch-build_src_mains.gpr]
post-configure patch to generated mains.gpr
(BSD only, maybe MacOS too)

--- build/src/mains.gpr.orig	2019-01-15 15:41:29 UTC
+++ build/src/mains.gpr
@@ -38,4 +38,8 @@ project Mains is
       for Switches ("ada") use ("-E");
    end Binder;
 
+   package Linker is
+      for Switches ("ada") use (@LIBS@);
+   end Linker;
+
 end Mains;

