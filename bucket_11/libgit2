# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libgit2
VERSION=		0.99.0
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Library providing Git core methods
HOMEPAGE=		https://libgit2.github.com/
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/libgit2:libgit2:v0.99.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	libssh2:single:standard
			curl:primary:standard

USES=			cmake pkgconfig python:build ssl zlib solaris-funcs

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"libgit2 License - GPLv2 with linking exception"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/libgit2
SOL_FUNCTIONS=		mkdtemp:tests/clar/sandbox.h

PLIST_SUB=		SOVERSION=0.99.0
			SOMAJOR=0.99

CMAKE_ARGS=		-DUSE_SSH=ON
			-DTHREADSAFE=ON
			-DCURL=ON

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libgit2.${LIBEXT}

[FILE:615:descriptions/desc.single]
libgit2 is a portable, pure C implementation of the Git core methods 
provided as a re-entrant linkable library with a solid API, allowing you 
to write native speed custom Git applications in any language which 
supports C bindings.

100% Cross-Platform
  Linux, BSD, Mac OS X, iOS, Amiga, MinGW and fully native Windows.

Zero Dependencies
  Builds out of the box with no dependencies. Works in embedded devices
  and iOS.

C89
  Written with portability in mind. Builds in GCC, Clang and MSVC.

Permissive Licensing
  GPLv2 with Linking Exception. Link with open and proprietary software,
  no strings attached.


[FILE:108:distinfo]
174024310c1563097a6613a0d3f7539d11a9a86517cd67ce533849065de08a11      5307975 libgit2-libgit2-0.99.0.tar.gz


[FILE:1057:manifests/plist.single]
include/git2.h
include/git2/
 annotated_commit.h
 apply.h
 attr.h
 blame.h
 blob.h
 branch.h
 buffer.h
 cert.h
 checkout.h
 cherrypick.h
 clone.h
 commit.h
 common.h
 config.h
 cred_helpers.h
 credential.h
 credential_helpers.h
 deprecated.h
 describe.h
 diff.h
 errors.h
 filter.h
 global.h
 graph.h
 ignore.h
 index.h
 indexer.h
 mailmap.h
 merge.h
 message.h
 net.h
 notes.h
 object.h
 odb.h
 odb_backend.h
 oid.h
 oidarray.h
 pack.h
 patch.h
 pathspec.h
 proxy.h
 rebase.h
 refdb.h
 reflog.h
 refs.h
 refspec.h
 remote.h
 repository.h
 reset.h
 revert.h
 revparse.h
 revwalk.h
 signature.h
 stash.h
 status.h
 stdint.h
 strarray.h
 submodule.h
 tag.h
 trace.h
 transaction.h
 transport.h
 tree.h
 types.h
 version.h
 worktree.h
include/git2/sys/
 alloc.h
 commit.h
 config.h
 cred.h
 credential.h
 diff.h
 filter.h
 hashsig.h
 index.h
 mempack.h
 merge.h
 odb_backend.h
 openssl.h
 path.h
 refdb_backend.h
 reflog.h
 refs.h
 repository.h
 stream.h
 transport.h
lib/
 libgit2.so
 libgit2.so.%%SOMAJOR%%
 libgit2.so.%%SOVERSION%%
lib/pkgconfig/libgit2.pc


[FILE:446:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2020-02-19 10:27:00 UTC
+++ CMakeLists.txt
@@ -211,7 +211,7 @@ ELSE ()
 	ENABLE_WARNINGS(extra)
 
 	IF (CMAKE_SYSTEM_NAME MATCHES "(Solaris|SunOS)")
-		SET(CMAKE_C_FLAGS "-D_POSIX_C_SOURCE=200112L -D__EXTENSIONS__ -D_POSIX_PTHREAD_SEMANTICS ${CMAKE_C_FLAGS}")
+		SET(CMAKE_C_FLAGS "-D__EXTENSIONS__ -D_POSIX_PTHREAD_SEMANTICS ${CMAKE_C_FLAGS}")
 	ENDIF()
 
 	SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D_DEBUG -O0")


[FILE:2698:patches/patch-fix-hton11]
From 3828ea67b97fc56dead976f319792ead3aa7e623 Mon Sep 17 00:00:00 2001
From: Patrick Steinhardt <ps@pks.im>
Date: Fri, 21 Feb 2020 11:26:19 +0100
Subject: [PATCH 1/2] deps: ntlmclient: fix missing htonll symbols on FreeBSD
 and SunOS

The ntlmclient dependency defines htonll on Linux-based systems, only.
As a result, non-Linux systems will run into compiler and/or linker
errors due to undefined symbols.

Fix this issue for FreeBSD, OpenBSD and SunOS/OpenSolaris by including
the proper headers and defining the symbol accordingly.
---
 deps/ntlmclient/compat.h | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/deps/ntlmclient/compat.h b/deps/ntlmclient/compat.h
index efdf34514e..43bc865645 100644
--- deps/ntlmclient/compat.h
+++ deps/ntlmclient/compat.h
@@ -22,8 +22,30 @@
 #endif
 
 #ifdef __linux__
+/* See man page endian(3) */
 # include <endian.h>
 # define htonll htobe64
+#elif defined(__OpenBSD__)
+/* See man page htobe64(3) */
+# include <endian.h>
+# define htonll htobe64
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
+/* See man page bwaps64(9) */
+# include <sys/endian.h>
+# define htonll bswap64
+#elif defined(sun) || defined(__sun)
+/* See man page byteorder(3SOCKET) */
+# include <sys/types.h>
+# include <netinet/in.h>
+# include <inttypes.h>
+
+# if !defined(htonll)
+#  if defined(_BIG_ENDIAN)
+#   define htonll(x) (x)
+#  else
+#   define htonll(x) ((((uint64_t)htonl(x)) << 32) + htonl((uint64_t)(x) >> 32))
+#  endif
+# endif
 #endif
 
 #ifndef MIN

From ebade23333d1f5c460aeb7f02473c96c95568a91 Mon Sep 17 00:00:00 2001
From: Patrick Steinhardt <ps@pks.im>
Date: Mon, 24 Feb 2020 21:49:43 +0100
Subject: [PATCH 2/2] transports: auth_ntlm: fix use of strdup/strndup

In the NTLM authentication code, we accidentally use strdup(3P) and
strndup(3P) instead of our own wrappers git__strdup and git__strndup,
respectively.

Fix the issue by using our own functions.
---
 src/transports/auth_ntlm.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/transports/auth_ntlm.c b/src/transports/auth_ntlm.c
index 02a861f076..d134a3db66 100644
--- src/transports/auth_ntlm.c
+++ src/transports/auth_ntlm.c
@@ -50,10 +50,10 @@ static int ntlm_set_credentials(http_auth_ntlm_context *ctx, git_credential *_cr
 	cred = (git_credential_userpass_plaintext *)_cred;
 
 	if ((sep = strchr(cred->username, '\\')) != NULL) {
-		domain = strndup(cred->username, (sep - cred->username));
+		domain = git__strndup(cred->username, (sep - cred->username));
 		GIT_ERROR_CHECK_ALLOC(domain);
 
-		domainuser = strdup(sep + 1);
+		domainuser = git__strdup(sep + 1);
 		GIT_ERROR_CHECK_ALLOC(domainuser);
 
 		username = domainuser;


[FILE:364:patches/patch-src_unix_posix.h]
--- src/unix/posix.h.orig	2020-02-19 10:27:00 UTC
+++ src/unix/posix.h
@@ -85,6 +85,11 @@ GIT_INLINE(int) p_futimes(int f, const s
 	s[1].tv_nsec = t[1].tv_usec * 1000;
 	return futimens(f, s);
 }
+#elif defined __sun__
+GIT_INLINE(int) p_futimes(int f, const struct p_timeval t[2])
+{
+	return futimesat(f, NULL, t);
+}
 #else
 # define p_futimes futimes
 #endif

