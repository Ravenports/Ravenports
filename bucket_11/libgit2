# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libgit2
VERSION=		0.26.3
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Library providing Git core methods
HOMEPAGE=		https://libgit2.github.com/
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/libgit2:libgit2:v0.26.3
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	libssh2:single:standard
			curl:primary:standard

USES=			cmake pkgconfig python:build ssl zlib

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"libgit2 License - GPLv2 with linking exception"
LICENSE_SCHEME=		solo
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/COPYING

FPC_EQUIVALENT=		devel/libgit2

PLIST_SUB=		SOVERSION=0.26.3
			SOMAJOR=26

CMAKE_ARGS=		-DUSE_SSH=ON
			-DTHREADSAFE=ON
			-DCURL=ON

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libgit2.so

[FILE:615:descriptions/desc.single]
libgit2 is a portable, pure C implementation of the Git core methods 
provided as a re-entrant linkable library with a solid API, allowing you 
to write native speed custom Git applications in any language which 
supports C bindings.

100% Cross-Platform
  Linux, BSD, Mac OS X, iOS, Amiga, MinGW and fully native Windows.

Zero Dependencies
  Builds out of the box with no dependencies. Works in embedded devices
  and iOS.

C89
  Written with portability in mind. Builds in GCC, Clang and MSVC.

Permissive Licensing
  GPLv2 with Linking Exception. Link with open and proprietary software,
  no strings attached.


[FILE:108:distinfo]
0da4e211dfb63c22e5f43f2a4a5373e86a140afa88a25ca6ba3cc2cae58263d2      4728289 libgit2-libgit2-0.26.3.tar.gz


[FILE:984:manifests/plist.single]
include/git2.h
include/git2/
 annotated_commit.h
 attr.h
 blame.h
 blob.h
 branch.h
 buffer.h
 checkout.h
 cherrypick.h
 clone.h
 commit.h
 common.h
 config.h
 cred_helpers.h
 describe.h
 diff.h
 errors.h
 filter.h
 global.h
 graph.h
 ignore.h
 index.h
 indexer.h
 inttypes.h
 merge.h
 message.h
 net.h
 notes.h
 object.h
 odb.h
 odb_backend.h
 oid.h
 oidarray.h
 pack.h
 patch.h
 pathspec.h
 proxy.h
 rebase.h
 refdb.h
 reflog.h
 refs.h
 refspec.h
 remote.h
 repository.h
 reset.h
 revert.h
 revparse.h
 revwalk.h
 signature.h
 stash.h
 status.h
 stdint.h
 strarray.h
 submodule.h
include/git2/sys/
 commit.h
 config.h
 diff.h
 filter.h
 hashsig.h
 index.h
 mempack.h
 merge.h
 odb_backend.h
 openssl.h
 refdb_backend.h
 reflog.h
 refs.h
 remote.h
 repository.h
 stream.h
 time.h
 transport.h
include/git2/
 tag.h
 trace.h
 transaction.h
 transport.h
 tree.h
 types.h
 version.h
 worktree.h
lib/
 libgit2.so
 libgit2.so.%%SOMAJOR%%
 libgit2.so.%%SOVERSION%%
lib/pkgconfig/libgit2.pc


[FILE:364:patches/patch-src_unix_posix.h]
--- src/unix/posix.h.orig	2017-06-14 11:31:20 UTC
+++ src/unix/posix.h
@@ -81,6 +81,11 @@ GIT_INLINE(int) p_futimes(int f, const s
 	s[1].tv_nsec = t[1].tv_usec * 1000;
 	return futimens(f, s);
 }
+#elif defined __sun__
+GIT_INLINE(int) p_futimes(int f, const struct p_timeval t[2])
+{
+	return futimesat(f, NULL, t);
+}
 #else
 # define p_futimes futimes
 #endif


[FILE:365:patches/patch-tests_clar_sandbox.h]
--- tests/clar/sandbox.h.orig	2017-06-14 11:31:20 UTC
+++ tests/clar/sandbox.h
@@ -113,6 +113,11 @@ static int build_sandbox_path(void)
 
 	if (mkdir(_clar_path, 0700) != 0)
 		return -1;
+#elif defined __sun__
+	if (mktemp(_clar_path) == NULL)
+		return -1;
+	if (mkdir(_clar_path, 0700) != 0)
+		return -1;
 #else
 	if (mkdtemp(_clar_path) == NULL)
 		return -1;

