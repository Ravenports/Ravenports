# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		libgit2
VERSION=		1.4.0
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Library providing Git core methods
HOMEPAGE=		https://libgit2.github.com/
CONTACT=		John_Marino[draco@marino.st]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/libgit2:libgit2:v1.4.0
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	libssh2:single:standard
			curl:primary:standard

USES=			cpe cmake pkgconfig python:build ssl zlib
			solaris-funcs

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"libgit2 License - GPLv2 with linking exception"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/libgit2
SOL_FUNCTIONS=		mkdtemp:tests/clar/sandbox.h

PLIST_SUB=		SOVERSION=1.4.0
			SOMAJOR=1.4

CMAKE_ARGS=		-DUSE_SSH=ON
			-DTHREADSAFE=ON
			-DCURL=ON

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libgit2.${LIBEXT}

[FILE:615:descriptions/desc.single]
libgit2 is a portable, pure C implementation of the Git core methods 
provided as a re-entrant linkable library with a solid API, allowing you 
to write native speed custom Git applications in any language which 
supports C bindings.

100% Cross-Platform
  Linux, BSD, Mac OS X, iOS, Amiga, MinGW and fully native Windows.

Zero Dependencies
  Builds out of the box with no dependencies. Works in embedded devices
  and iOS.

C89
  Written with portability in mind. Builds in GCC, Clang and MSVC.

Permissive Licensing
  GPLv2 with Linking Exception. Link with open and proprietary software,
  no strings attached.


[FILE:107:distinfo]
9051e75964350054d5e3f9339bc4d1fb56ac14949710e3860f98f07a0433fa25      5628993 libgit2-libgit2-1.4.0.tar.gz


[FILE:1099:manifests/plist.single]
include/git2.h
include/git2/
 annotated_commit.h
 apply.h
 attr.h
 blame.h
 blob.h
 branch.h
 buffer.h
 cert.h
 checkout.h
 cherrypick.h
 clone.h
 commit.h
 common.h
 config.h
 cred_helpers.h
 credential.h
 credential_helpers.h
 deprecated.h
 describe.h
 diff.h
 email.h
 errors.h
 filter.h
 global.h
 graph.h
 ignore.h
 index.h
 indexer.h
 mailmap.h
 merge.h
 message.h
 net.h
 notes.h
 object.h
 odb.h
 odb_backend.h
 oid.h
 oidarray.h
 pack.h
 patch.h
 pathspec.h
 proxy.h
 rebase.h
 refdb.h
 reflog.h
 refs.h
 refspec.h
 remote.h
 repository.h
 reset.h
 revert.h
 revparse.h
 revwalk.h
 signature.h
 stash.h
 status.h
 stdint.h
 strarray.h
 submodule.h
 tag.h
 trace.h
 transaction.h
 transport.h
 tree.h
 types.h
 version.h
 worktree.h
include/git2/sys/
 alloc.h
 commit.h
 commit_graph.h
 config.h
 cred.h
 credential.h
 diff.h
 email.h
 filter.h
 hashsig.h
 index.h
 mempack.h
 merge.h
 midx.h
 odb_backend.h
 openssl.h
 path.h
 refdb_backend.h
 reflog.h
 refs.h
 repository.h
 stream.h
 transport.h
lib/
 libgit2.so
 libgit2.so.%%SOMAJOR%%
 libgit2.so.%%SOVERSION%%
lib/pkgconfig/libgit2.pc


[FILE:446:patches/patch-CMakeLists.txt]
--- CMakeLists.txt.orig	2021-09-27 20:09:50 UTC
+++ CMakeLists.txt
@@ -204,7 +204,7 @@ ELSE ()
 	ENABLE_WARNINGS(extra)
 
 	IF (CMAKE_SYSTEM_NAME MATCHES "(Solaris|SunOS)")
-		SET(CMAKE_C_FLAGS "-D_POSIX_C_SOURCE=200112L -D__EXTENSIONS__ -D_POSIX_PTHREAD_SEMANTICS ${CMAKE_C_FLAGS}")
+		SET(CMAKE_C_FLAGS "-D__EXTENSIONS__ -D_POSIX_PTHREAD_SEMANTICS ${CMAKE_C_FLAGS}")
 	ENDIF()
 
 	SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D_DEBUG -O0")


[FILE:422:patches/patch-deps_ntlmclient_crypt__openssl.c]
--- deps/ntlmclient/crypt_openssl.c.orig	2021-09-27 20:09:50 UTC
+++ deps/ntlmclient/crypt_openssl.c
@@ -44,7 +44,7 @@ static inline void HMAC_CTX_free(HMAC_CT
 
 #endif
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L || defined(CRYPT_OPENSSL_DYNAMIC)
+#if !defined(LIBRESSL_VERSION_NUMBER) && (OPENSSL_VERSION_NUMBER >= 0x10100000L || defined(CRYPT_OPENSSL_DYNAMIC))
 
 static inline void HMAC_CTX_cleanup(HMAC_CTX *ctx)
 {


[FILE:364:patches/patch-src_unix_posix.h]
--- src/unix/posix.h.orig	2021-09-27 20:09:50 UTC
+++ src/unix/posix.h
@@ -97,6 +97,11 @@ GIT_INLINE(int) p_futimes(int f, const s
 	s[1].tv_nsec = t[1].tv_usec * 1000;
 	return futimens(f, s);
 }
+#elif defined __sun__
+GIT_INLINE(int) p_futimes(int f, const struct p_timeval t[2])
+{
+	return futimesat(f, NULL, t);
+}
 #else
 # define p_futimes futimes
 #endif

