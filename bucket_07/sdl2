# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		sdl2
VERSION=		2.0.14
KEYWORDS=		devel
VARIANTS=		standard
SDESC[standard]=	Cross-platform multimedia development API
HOMEPAGE=		http://www.libsdl.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://www.libsdl.org/release/
DISTFILE[1]=		SDL2-2.0.14.tar.gz:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	OSS SNDIO PULSEAUDIO ALSA OPENGL X11 MMX 3DNOW SSE
			SSE2
OPTIONS_STANDARD=	OSS SNDIO PULSEAUDIO ALSA OPENGL X11 MMX 3DNOW SSE
			SSE2
OPTGROUP_UNLIMITED=	AUDIO CPUEXT
OPTDESCR[CPUEXT]=	CPU Extension Support
OPTDESCR[AUDIO]=	Audio Support
OPTGROUP[CPUEXT]=	MMX 3DNOW SSE SSE2
OPTGROUP[AUDIO]=	OSS SNDIO PULSEAUDIO ALSA
OPT_ON[freebsd]=	OSS
OPT_ON[all]=		OPENGL X11
OPT_ON[dragonfly]=	OSS

USES=			cpe gmake libtool pkgconfig iconv

DISTNAME=		SDL2-2.0.14

LICENSE=		ZLIB:single
LICENSE_FILE=		ZLIB:{{WRKSRC}}/COPYING.txt
LICENSE_SCHEME=		solo

CPE_PRODUCT=		simple_directmedia_layer
CPE_VENDOR=		libsdl
FPC_EQUIVALENT=		devel/sdl20

MUST_CONFIGURE=		gnu
CONFIGURE_ARGS=		--disable-video-opengles
			--disable-altivec
			--disable-arts
			--enable-diskaudio
			--enable-dummyaudio
			--enable-video-dummy
			--disable-dbus
			--disable-input-tslib
			--disable-rpath
			--enable-atomic
			--enable-gcc-atomics
			--enable-audio
			--enable-cpuinfo
			--enable-events
			--enable-filesystem
			--enable-haptic
			--enable-joystick
			--enable-loadso
			--enable-power
			--enable-render
			--enable-threads
			--enable-timers
			--enable-video
			--enable-pthreads
			--enable-sdl-dlopen
			--enable-assembly
CONFIGURE_ENV=		ac_cv_header_libusbhid_h=no

SOVERSION=		0.14.0

[OPENGL].CONFIGURE_ENABLE_BOTH=		video-opengl
[OPENGL].USES_ON=			mesa

[SNDIO].BUILDRUN_DEPENDS_ON=		sndio:single:standard
[SNDIO].CONFIGURE_ENABLE_BOTH=		sndio
					sndio-shared

[3DNOW].DESCRIPTION=			3DNow! x86 instruction set (from AMD)
[3DNOW].CONFIGURE_ENABLE_BOTH=		3dnow

[SSE].DESCRIPTION=			Streaming SIMD Extensions
[SSE].CONFIGURE_ENABLE_BOTH=		sse

[PULSEAUDIO].BROKEN_ON=			not yet implemented

[MMX].DESCRIPTION=			Matrix Math Extensions (MMX from Intel)
[MMX].CONFIGURE_ENABLE_BOTH=		mmx

[ALSA].BROKEN_ON=			not yet implemented
[ALSA].BUILDRUN_DEPENDS_ON=		alsa:single:standard
[ALSA].CONFIGURE_ENABLE_BOTH=		alsa
					alsa-shared

[OSS].CONFIGURE_ENABLE_BOTH=		oss

[SSE2].DESCRIPTION=			Streaming SIMD Extensions 2
[SSE2].CONFIGURE_ENABLE_BOTH=		sse2

[X11].CONFIGURE_ENABLE_BOTH=		video-x11
					x11-shared
					video-x11-xcursor
					video-x11-xinerama
					video-x11-xinput
					video-x11-xrandr
					video-x11-scrnsaver
					video-x11-xshape
					video-x11-vm
[X11].XORG_COMPONENTS_ON=		x11
					xcursor
					xinerama
					xi
					xrandr
					xscrnsaver
					xxf86vm
					xext

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libSDL2.so

[FILE:403:descriptions/desc.single]
The SDL library (series 2) is designed to make it easy to write games that
run on UNIX, Win32, MacOS X and other platforms using the various native
high-performance media interfaces (for video, audio, etc) and presenting
a single source-code level API to your application. This is a fairly low
level API, but using this, completely portable applications can be
written with a great deal of flexibility.


[FILE:97:distinfo]
d8215b571a581be1332d2106f8036fcb03d12a70bae01e20f424976d275432bc      6089974 SDL2-2.0.14.tar.gz


[FILE:1424:manifests/plist.single]
bin/sdl2-config
include/SDL2/
 SDL.h
 SDL_assert.h
 SDL_atomic.h
 SDL_audio.h
 SDL_bits.h
 SDL_blendmode.h
 SDL_clipboard.h
 SDL_config.h
 SDL_cpuinfo.h
 SDL_egl.h
 SDL_endian.h
 SDL_error.h
 SDL_events.h
 SDL_filesystem.h
 SDL_gamecontroller.h
 SDL_gesture.h
 SDL_haptic.h
 SDL_hints.h
 SDL_joystick.h
 SDL_keyboard.h
 SDL_keycode.h
 SDL_loadso.h
 SDL_locale.h
 SDL_log.h
 SDL_main.h
 SDL_messagebox.h
 SDL_metal.h
 SDL_misc.h
 SDL_mouse.h
 SDL_mutex.h
 SDL_name.h
 SDL_opengl.h
 SDL_opengl_glext.h
 SDL_opengles.h
 SDL_opengles2.h
 SDL_opengles2_gl2.h
 SDL_opengles2_gl2ext.h
 SDL_opengles2_gl2platform.h
 SDL_opengles2_khrplatform.h
 SDL_pixels.h
 SDL_platform.h
 SDL_power.h
 SDL_quit.h
 SDL_rect.h
 SDL_render.h
 SDL_revision.h
 SDL_rwops.h
 SDL_scancode.h
 SDL_sensor.h
 SDL_shape.h
 SDL_stdinc.h
 SDL_surface.h
 SDL_system.h
 SDL_syswm.h
 SDL_test.h
 SDL_test_assert.h
 SDL_test_common.h
 SDL_test_compare.h
 SDL_test_crc32.h
 SDL_test_font.h
 SDL_test_fuzzer.h
 SDL_test_harness.h
 SDL_test_images.h
 SDL_test_log.h
 SDL_test_md5.h
 SDL_test_memory.h
 SDL_test_random.h
 SDL_thread.h
 SDL_timer.h
 SDL_touch.h
 SDL_types.h
 SDL_version.h
 SDL_video.h
 SDL_vulkan.h
 begin_code.h
 close_code.h
lib/
 libSDL2-2.0.so.%%SOMAJOR%%
 libSDL2-2.0.so.%%SOVERSION%%
 libSDL2.a
 libSDL2.so
 libSDL2_test.a
 libSDL2main.a
lib/cmake/SDL2/
 sdl2-config-version.cmake
 sdl2-config.cmake
lib/pkgconfig/sdl2.pc
share/aclocal/sdl2.m4


[FILE:409:dragonfly/patch-src_filesystem_unix_SDL__sysfilesystem.c]
--- src/filesystem/unix/SDL_sysfilesystem.c.orig	2020-12-21 17:44:36 UTC
+++ src/filesystem/unix/SDL_sysfilesystem.c
@@ -83,7 +83,7 @@ SDL_GetBasePath(void)
 {
     char *retval = NULL;
 
-#if defined(__FREEBSD__)
+#if defined(__FREEBSD__) && !defined(__DragonFly__)
     char fullpath[PATH_MAX];
     size_t buflen = sizeof (fullpath);
     const int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME, -1 };

