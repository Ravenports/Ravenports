# Buildsheet autogenerated by ravenadm tool -- Do not edit.

NAMEBASE=		leveldb
VERSION=		1.23
KEYWORDS=		databases
VARIANTS=		standard
SDESC[standard]=	Fast key-value storage library
HOMEPAGE=		https://github.com/google/leveldb
CONTACT=		Leonid_Bobrov[goleo@disroot.org]

DOWNLOAD_GROUPS=	main
SITES[main]=		GITHUB/google:leveldb:1.23
DISTFILE[1]=		generated:main
DF_INDEX=		1
SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BUILDRUN_DEPENDS=	snappy:single:standard
			sqlite:single:standard

USES=			c++:single cmake

LICENSE=		BSD3CLAUSE:single
LICENSE_FILE=		BSD3CLAUSE:{{WRKSRC}}/LICENSE
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		databases/leveldb

SOVERSION=		1.23.0

CMAKE_ARGS=		-DBUILD_SHARED_LIBS:BOOL=ON
			-DLEVELDB_BUILD_BENCHMARKS:BOOL=OFF
			-DLEVELDB_BUILD_TESTS:BOOL=OFF

[FILE:867:descriptions/desc.single]
LevelDB is a fast key-value storage library written at Google that provides
an ordered mapping from string keys to string values.

Features:
- Keys and values are arbitrary byte arrays.
- Data is stored sorted by key.
- Callers can provide a custom comparison function to override the sort
  order. 
- The basic operations are Put(key,value), Get(key), Delete(key).
- Multiple changes can be made in one atomic batch.
- Users can create a transient snapshot to get a consistent view of data.
- Forward and backward iteration is supported over the data.
- Data is automatically compressed using the Snappy compression library.
- External activity (file system operations etc.) is relayed through a
  virtual interface so users can customize the operating system
  interactions.
- Detailed documentation about how to use the library is included with the
  source code.


[FILE:105:distinfo]
9a37f8a6174f09bd622bc723b55881dc541cd50747cbd08831c2a82d620f6d76       242925 google-leveldb-1.23.tar.gz


[FILE:376:manifests/plist.single]
include/leveldb/
 c.h
 cache.h
 comparator.h
 db.h
 dumpfile.h
 env.h
 export.h
 filter_policy.h
 iterator.h
 options.h
 slice.h
 status.h
 table.h
 table_builder.h
 write_batch.h
lib/
 libleveldb.so
 libleveldb.so.%%SOMAJOR%%
 libleveldb.so.%%SOVERSION%%
lib/cmake/leveldb/
 leveldbConfig.cmake
 leveldbConfigVersion.cmake
 leveldbTargets-release.cmake
 leveldbTargets.cmake

